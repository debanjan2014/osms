!function(e){function t(e){Object.defineProperty(this,e,{enumerable:!0,get:function(){return this[v][e]}})}function r(e){if("undefined"!=typeof System&&System.isModule?System.isModule(e):"[object Module]"===Object.prototype.toString.call(e))return e;var t={default:e,__useDefault:e};if(e&&e.__esModule)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return new o(t)}function o(e){Object.defineProperty(this,v,{value:e}),Object.keys(e).forEach(t,this)}function n(e){return"@node/"===e.substr(0,6)?c(e,r(m(e.substr(6))),{}):p[e]}function u(e){var t=n(e);if(!t)throw new Error('Module "'+e+'" expected, but not contained in build.');if(t.module)return t.module;var r=t.linkRecord;return i(t,r),a(t,r,[]),t.module}function i(e,t){if(!t.depLoads){t.declare&&d(e,t),t.depLoads=[];for(var r=0;r<t.deps.length;r++){var o=n(t.deps[r]);t.depLoads.push(o),o.linkRecord&&i(o,o.linkRecord);var u=t.setters&&t.setters[r];u&&(u(o.module||o.linkRecord.moduleObj),o.importerSetters.push(u))}return e}}function d(t,r){var o=r.moduleObj,n=t.importerSetters,u=!1,i=r.declare.call(e,function(e,t){if(!u){if("object"==typeof e)for(var r in e)"__useDefault"!==r&&(o[r]=e[r]);else o[e]=t;u=!0;for(var i=0;i<n.length;i++)n[i](o);return u=!1,t}},{id:t.key});"function"!=typeof i?(r.setters=i.setters,r.execute=i.execute):(r.setters=[],r.execute=i)}function l(e,t,r){return p[e]={key:e,module:void 0,importerSetters:[],linkRecord:{deps:t,depLoads:void 0,declare:r,setters:void 0,execute:void 0,moduleObj:{}}}}function f(e,t,r,o){var n={};return p[e]={key:e,module:void 0,importerSetters:[],linkRecord:{deps:t,depLoads:void 0,declare:void 0,execute:o,executingRequire:r,moduleObj:{default:n,__useDefault:n},setters:void 0}}}function s(e,t,r){return function(o){for(var n=0;n<e.length;n++)if(e[n]===o){var u,i=t[n],d=i.linkRecord;return u=d?-1===r.indexOf(i)?a(i,d,r):d.moduleObj:i.module,"__useDefault"in u?u.__useDefault:u}}}function a(t,r,n){if(n.push(t),t.module)return t.module;var u;if(r.setters){for(var i=0;i<r.deps.length;i++){var d=r.depLoads[i],l=d.linkRecord;l&&-1===n.indexOf(d)&&(u=a(d,l,l.setters?n:[]))}r.execute.call(y)}else{var f={id:t.key},c=r.moduleObj;Object.defineProperty(f,"exports",{configurable:!0,set:function(e){c.default=c.__useDefault=e},get:function(){return c.__useDefault}});var p=s(r.deps,r.depLoads,n);if(!r.executingRequire)for(var i=0;i<r.deps.length;i++)p(r.deps[i]);var v=r.execute.call(e,p,c.__useDefault,f);void 0!==v&&(c.default=c.__useDefault=v);var m=c.__useDefault;if(m&&m.__esModule)for(var b in m)Object.hasOwnProperty.call(m,b)&&(c[b]=m[b])}var f=t.module=new o(r.moduleObj);if(!r.setters)for(var i=0;i<t.importerSetters.length;i++)t.importerSetters[i](f);return f}function c(e,t){return p[e]={key:e,module:t,importerSetters:[],linkRecord:void 0}}var p={},v="undefined"!=typeof Symbol?Symbol():"@@baseObject";o.prototype=Object.create(null),"undefined"!=typeof Symbol&&Symbol.toStringTag&&(o.prototype[Symbol.toStringTag]="Module");var m="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&"undefined"!=typeof require.resolve&&"undefined"!=typeof process&&process.platform&&require,y={};return Object.freeze&&Object.freeze(y),function(e,t,n,i){return function(d){d(function(d){var s={_nodeRequire:m,register:l,registerDynamic:f,registry:{get:function(e){return p[e].module},set:c},newModule:function(e){return new o(e)}};c("@empty",new o({}));for(var a=0;a<t.length;a++)c(t[a],r(arguments[a],{}));i(s);var v=u(e[0]);if(e.length>1)for(var a=1;a<e.length;a++)u(e[a]);return n?v.__useDefault:(v instanceof o&&Object.defineProperty(v,"__esModule",{value:!0}),v)})}}}("undefined"!=typeof self?self:"undefined"!=typeof global?global:this)

(["a"], [], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/animations')) : 'function' === 'function' && true ? $__System.registerDynamic('b', ['c'], false, function ($__require, $__exports, $__module) {
        if (typeof factory === 'function') {
            return factory.call($__exports, $__exports, $__require('c'));
        } else {
            return factory;
        }
    }) : factory((global.ng = global.ng || {}, global.ng.animations = global.ng.animations || {}, global.ng.animations.browser = global.ng.animations.browser || {}), global.ng.animations);
})(this, function (exports, _angular_animations) {
    'use strict';

    var __extends = undefined && undefined.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * @license Angular v4.1.3
     * (c) 2010-2017 Google, Inc. https://angular.io/
     * License: MIT
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @experimental
     */
    var NoopAnimationDriver = function () {
        function NoopAnimationDriver() {}
        NoopAnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {
            if (previousPlayers === void 0) {
                previousPlayers = [];
            }
            return new _angular_animations.NoopAnimationPlayer();
        };
        return NoopAnimationDriver;
    }();
    /**
     * @experimental
     */
    var AnimationDriver = function () {
        function AnimationDriver() {}
        return AnimationDriver;
    }();
    AnimationDriver.NOOP = new NoopAnimationDriver();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @abstract
     */
    var AnimationEngine = function () {
        function AnimationEngine() {}
        /**
         * @abstract
         * @param {?} trigger
         * @param {?=} name
         * @return {?}
         */
        AnimationEngine.prototype.registerTrigger = function (trigger, name) {};
        /**
         * @abstract
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */
        AnimationEngine.prototype.onInsert = function (element, domFn) {};
        /**
         * @abstract
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */
        AnimationEngine.prototype.onRemove = function (element, domFn) {};
        /**
         * @abstract
         * @param {?} element
         * @param {?} property
         * @param {?} value
         * @return {?}
         */
        AnimationEngine.prototype.setProperty = function (element, property, value) {};
        /**
         * @abstract
         * @param {?} element
         * @param {?} eventName
         * @param {?} eventPhase
         * @param {?} callback
         * @return {?}
         */
        AnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {};
        /**
         * @abstract
         * @return {?}
         */
        AnimationEngine.prototype.flush = function () {};
        Object.defineProperty(AnimationEngine.prototype, "activePlayers", {
            /**
             * @return {?}
             */
            get: function () {
                throw new Error('...');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimationEngine.prototype, "queuedPlayers", {
            /**
             * @return {?}
             */
            get: function () {
                throw new Error('...');
            },
            enumerable: true,
            configurable: true
        });
        return AnimationEngine;
    }();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ONE_SECOND = 1000;
    /**
     * @param {?} exp
     * @param {?} errors
     * @return {?}
     */
    function parseTimeExpression(exp, errors) {
        var /** @type {?} */regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
        var /** @type {?} */duration;
        var /** @type {?} */delay = 0;
        var /** @type {?} */easing = null;
        if (typeof exp === 'string') {
            var /** @type {?} */matches = exp.match(regex);
            if (matches === null) {
                errors.push("The provided timing value \"" + exp + "\" is invalid.");
                return { duration: 0, delay: 0, easing: null };
            }
            var /** @type {?} */durationMatch = parseFloat(matches[1]);
            var /** @type {?} */durationUnit = matches[2];
            if (durationUnit == 's') {
                durationMatch *= ONE_SECOND;
            }
            duration = Math.floor(durationMatch);
            var /** @type {?} */delayMatch = matches[3];
            var /** @type {?} */delayUnit = matches[4];
            if (delayMatch != null) {
                var /** @type {?} */delayVal = parseFloat(delayMatch);
                if (delayUnit != null && delayUnit == 's') {
                    delayVal *= ONE_SECOND;
                }
                delay = Math.floor(delayVal);
            }
            var /** @type {?} */easingVal = matches[5];
            if (easingVal) {
                easing = easingVal;
            }
        } else {
            duration = exp;
        }
        return { duration: duration, delay: delay, easing: easing };
    }
    /**
     * @param {?} styles
     * @return {?}
     */
    function normalizeStyles(styles) {
        var /** @type {?} */normalizedStyles = {};
        if (Array.isArray(styles)) {
            styles.forEach(function (data) {
                return copyStyles(data, false, normalizedStyles);
            });
        } else {
            copyStyles(styles, false, normalizedStyles);
        }
        return normalizedStyles;
    }
    /**
     * @param {?} styles
     * @param {?} readPrototype
     * @param {?=} destination
     * @return {?}
     */
    function copyStyles(styles, readPrototype, destination) {
        if (destination === void 0) {
            destination = {};
        }
        if (readPrototype) {
            // we make use of a for-in loop so that the
            // prototypically inherited properties are
            // revealed from the backFill map
            for (var /** @type {?} */prop in styles) {
                destination[prop] = styles[prop];
            }
        } else {
            Object.keys(styles).forEach(function (prop) {
                return destination[prop] = styles[prop];
            });
        }
        return destination;
    }
    /**
     * @param {?} element
     * @param {?} styles
     * @return {?}
     */
    function setStyles(element, styles) {
        if (element['style']) {
            Object.keys(styles).forEach(function (prop) {
                return element.style[prop] = styles[prop];
            });
        }
    }
    /**
     * @param {?} element
     * @param {?} styles
     * @return {?}
     */
    function eraseStyles(element, styles) {
        if (element['style']) {
            Object.keys(styles).forEach(function (prop) {
                // IE requires '' instead of null
                // see https://github.com/angular/angular/issues/7916
                element.style[prop] = '';
            });
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} visitor
     * @param {?} node
     * @param {?} context
     * @return {?}
     */
    function visitAnimationNode(visitor, node, context) {
        switch (node.type) {
            case 0 /* State */:
                return visitor.visitState( /** @type {?} */node, context);
            case 1 /* Transition */:
                return visitor.visitTransition( /** @type {?} */node, context);
            case 2 /* Sequence */:
                return visitor.visitSequence( /** @type {?} */node, context);
            case 3 /* Group */:
                return visitor.visitGroup( /** @type {?} */node, context);
            case 4 /* Animate */:
                return visitor.visitAnimate( /** @type {?} */node, context);
            case 5 /* KeyframeSequence */:
                return visitor.visitKeyframeSequence( /** @type {?} */node, context);
            case 6 /* Style */:
                return visitor.visitStyle( /** @type {?} */node, context);
            default:
                throw new Error("Unable to resolve animation metadata node #" + node.type);
        }
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var ANY_STATE = '*';
    /**
     * @param {?} transitionValue
     * @param {?} errors
     * @return {?}
     */
    function parseTransitionExpr(transitionValue, errors) {
        var /** @type {?} */expressions = [];
        if (typeof transitionValue == 'string') {
            transitionValue.split(/\s*,\s*/).forEach(function (str) {
                return parseInnerTransitionStr(str, expressions, errors);
            });
        } else {
            expressions.push( /** @type {?} */transitionValue);
        }
        return expressions;
    }
    /**
     * @param {?} eventStr
     * @param {?} expressions
     * @param {?} errors
     * @return {?}
     */
    function parseInnerTransitionStr(eventStr, expressions, errors) {
        if (eventStr[0] == ':') {
            eventStr = parseAnimationAlias(eventStr, errors);
        }
        var /** @type {?} */match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
        if (match == null || match.length < 4) {
            errors.push("The provided transition expression \"" + eventStr + "\" is not supported");
            return expressions;
        }
        var /** @type {?} */fromState = match[1];
        var /** @type {?} */separator = match[2];
        var /** @type {?} */toState = match[3];
        expressions.push(makeLambdaFromStates(fromState, toState));
        var /** @type {?} */isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
        if (separator[0] == '<' && !isFullAnyStateExpr) {
            expressions.push(makeLambdaFromStates(toState, fromState));
        }
    }
    /**
     * @param {?} alias
     * @param {?} errors
     * @return {?}
     */
    function parseAnimationAlias(alias, errors) {
        switch (alias) {
            case ':enter':
                return 'void => *';
            case ':leave':
                return '* => void';
            default:
                errors.push("The transition alias value \"" + alias + "\" is not supported");
                return '* => *';
        }
    }
    /**
     * @param {?} lhs
     * @param {?} rhs
     * @return {?}
     */
    function makeLambdaFromStates(lhs, rhs) {
        return function (fromState, toState) {
            var /** @type {?} */lhsMatch = lhs == ANY_STATE || lhs == fromState;
            var /** @type {?} */rhsMatch = rhs == ANY_STATE || rhs == toState;
            return lhsMatch && rhsMatch;
        };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @return {?}
     */
    function createTimelineInstruction(keyframes, duration, delay, easing) {
        return {
            type: 1 /* TimelineAnimation */
            , keyframes: keyframes,
            duration: duration,
            delay: delay,
            totalTime: duration + delay, easing: easing
        };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} ast
     * @param {?=} startingStyles
     * @param {?=} finalStyles
     * @return {?}
     */
    function buildAnimationKeyframes(ast, startingStyles, finalStyles) {
        if (startingStyles === void 0) {
            startingStyles = {};
        }
        if (finalStyles === void 0) {
            finalStyles = {};
        }
        var /** @type {?} */normalizedAst = Array.isArray(ast) ? _angular_animations.sequence( /** @type {?} */ast) : ast;
        return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);
    }
    var AnimationTimelineContext = function () {
        /**
         * @param {?} errors
         * @param {?} timelines
         * @param {?=} initialTimeline
         */
        function AnimationTimelineContext(errors, timelines, initialTimeline) {
            this.errors = errors;
            this.timelines = timelines;
            this.previousNode = {};
            this.subContextCount = 0;
            this.currentTimeline = initialTimeline || new TimelineBuilder(0);
            timelines.push(this.currentTimeline);
        }
        /**
         * @return {?}
         */
        AnimationTimelineContext.prototype.createSubContext = function () {
            var /** @type {?} */context = new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());
            context.previousNode = this.previousNode;
            context.currentAnimateTimings = this.currentAnimateTimings;
            this.subContextCount++;
            return context;
        };
        /**
         * @param {?=} newTime
         * @return {?}
         */
        AnimationTimelineContext.prototype.transformIntoNewTimeline = function (newTime) {
            if (newTime === void 0) {
                newTime = 0;
            }
            this.currentTimeline = this.currentTimeline.fork(newTime);
            this.timelines.push(this.currentTimeline);
            return this.currentTimeline;
        };
        /**
         * @param {?} time
         * @return {?}
         */
        AnimationTimelineContext.prototype.incrementTime = function (time) {
            this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
        };
        return AnimationTimelineContext;
    }();
    var AnimationTimelineVisitor = function () {
        function AnimationTimelineVisitor() {}
        /**
         * @param {?} ast
         * @param {?} startingStyles
         * @param {?} finalStyles
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.buildKeyframes = function (ast, startingStyles, finalStyles) {
            var /** @type {?} */context = new AnimationTimelineContext([], []);
            context.currentTimeline.setStyles(startingStyles);
            visitAnimationNode(this, ast, context);
            // this checks to see if an actual animation happened
            var /** @type {?} */timelines = context.timelines.filter(function (timeline) {
                return timeline.hasStyling();
            });
            if (timelines.length && Object.keys(finalStyles).length) {
                var /** @type {?} */tl = timelines[timelines.length - 1];
                if (!tl.allowOnlyTimelineStyles()) {
                    tl.setStyles(finalStyles);
                }
            }
            return timelines.length ? timelines.map(function (timeline) {
                return timeline.buildKeyframes();
            }) : [createTimelineInstruction([], 0, 0, '')];
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.visitState = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.visitTransition = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.visitSequence = function (ast, context) {
            var _this = this;
            var /** @type {?} */subContextCount = context.subContextCount;
            if (context.previousNode.type == 6 /* Style */) {
                    context.currentTimeline.forwardFrame();
                    context.currentTimeline.snapshotCurrentStyles();
                }
            ast.steps.forEach(function (s) {
                return visitAnimationNode(_this, s, context);
            });
            // this means that some animation function within the sequence
            // ended up creating a sub timeline (which means the current
            // timeline cannot overlap with the contents of the sequence)
            if (context.subContextCount > subContextCount) {
                context.transformIntoNewTimeline();
            }
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.visitGroup = function (ast, context) {
            var _this = this;
            var /** @type {?} */innerTimelines = [];
            var /** @type {?} */furthestTime = context.currentTimeline.currentTime;
            ast.steps.forEach(function (s) {
                var /** @type {?} */innerContext = context.createSubContext();
                visitAnimationNode(_this, s, innerContext);
                furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
                innerTimelines.push(innerContext.currentTimeline);
            });
            // this operation is run after the AST loop because otherwise
            // if the parent timeline's collected styles were updated then
            // it would pass in invalid data into the new-to-be forked items
            innerTimelines.forEach(function (timeline) {
                return context.currentTimeline.mergeTimelineCollectedStyles(timeline);
            });
            context.transformIntoNewTimeline(furthestTime);
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.visitAnimate = function (ast, context) {
            var /** @type {?} */timings = ast.timings.hasOwnProperty('duration') ? ast.timings : parseTimeExpression( /** @type {?} */ast.timings, context.errors);
            context.currentAnimateTimings = timings;
            if (timings.delay) {
                context.incrementTime(timings.delay);
                context.currentTimeline.snapshotCurrentStyles();
            }
            var /** @type {?} */astType = ast.styles ? ast.styles.type : -1;
            if (astType == 5 /* KeyframeSequence */) {
                    this.visitKeyframeSequence( /** @type {?} */ast.styles, context);
                } else {
                var /** @type {?} */styleAst = ast.styles;
                if (!styleAst) {
                    var /** @type {?} */newStyleData = {};
                    if (timings.easing) {
                        newStyleData['easing'] = timings.easing;
                    }
                    styleAst = _angular_animations.style(newStyleData);
                    styleAst['treatAsEmptyStep'] = true;
                }
                context.incrementTime(timings.duration);
                if (styleAst) {
                    this.visitStyle(styleAst, context);
                }
            }
            context.currentAnimateTimings = null;
            context.previousNode = ast;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.visitStyle = function (ast, context) {
            // this is a special case when a style() call is issued directly after
            // a call to animate(). If the clock is not forwarded by one frame then
            // the style() calls will be merged into the previous animate() call
            // which is incorrect.
            if (!context.currentAnimateTimings && context.previousNode.type == 4 /* Animate */) {
                    context.currentTimeline.forwardFrame();
                }
            var /** @type {?} */normalizedStyles = normalizeStyles(ast.styles);
            var /** @type {?} */easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;
            this._applyStyles(normalizedStyles, easing, ast['treatAsEmptyStep'] ? true : false, context);
            context.previousNode = ast;
        };
        /**
         * @param {?} styles
         * @param {?} easing
         * @param {?} treatAsEmptyStep
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype._applyStyles = function (styles, easing, treatAsEmptyStep, context) {
            if (styles.hasOwnProperty('easing')) {
                easing = easing || styles['easing'];
                delete styles['easing'];
            }
            context.currentTimeline.setStyles(styles, easing, treatAsEmptyStep);
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTimelineVisitor.prototype.visitKeyframeSequence = function (ast, context) {
            var _this = this;
            var /** @type {?} */MAX_KEYFRAME_OFFSET = 1;
            var /** @type {?} */limit = ast.steps.length - 1;
            var /** @type {?} */firstKeyframe = ast.steps[0];
            var /** @type {?} */offsetGap = 0;
            var /** @type {?} */containsOffsets = getOffset(firstKeyframe) != null;
            if (!containsOffsets) {
                offsetGap = MAX_KEYFRAME_OFFSET / limit;
            }
            var /** @type {?} */startTime = context.currentTimeline.duration;
            var /** @type {?} */duration = context.currentAnimateTimings.duration;
            var /** @type {?} */innerContext = context.createSubContext();
            var /** @type {?} */innerTimeline = innerContext.currentTimeline;
            innerTimeline.easing = context.currentAnimateTimings.easing;
            ast.steps.forEach(function (step, i) {
                var /** @type {?} */normalizedStyles = normalizeStyles(step.styles);
                var /** @type {?} */offset = containsOffsets ? step.offset != null ? step.offset : parseFloat( /** @type {?} */normalizedStyles['offset']) : i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap;
                innerTimeline.forwardTime(offset * duration);
                _this._applyStyles(normalizedStyles, null, false, innerContext);
            });
            // this will ensure that the parent timeline gets all the styles from
            // the child even if the new timeline below is not used
            context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
            // we do this because the window between this timeline and the sub timeline
            // should ensure that the styles within are exactly the same as they were before
            context.transformIntoNewTimeline(startTime + duration);
            context.previousNode = ast;
        };
        return AnimationTimelineVisitor;
    }();
    var TimelineBuilder = function () {
        /**
         * @param {?} startTime
         * @param {?=} globalTimelineStyles
         */
        function TimelineBuilder(startTime, globalTimelineStyles) {
            this.startTime = startTime;
            this.duration = 0;
            this.easing = '';
            this._previousKeyframe = {};
            this._keyframes = new Map();
            this._styleSummary = {};
            this._backFill = {};
            this._currentEmptyStepKeyframe = null;
            this._localTimelineStyles = Object.create(this._backFill, {});
            this._globalTimelineStyles = globalTimelineStyles ? globalTimelineStyles : this._localTimelineStyles;
            this._loadKeyframe();
        }
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.hasStyling = function () {
            return this._keyframes.size > 1;
        };
        Object.defineProperty(TimelineBuilder.prototype, "currentTime", {
            /**
             * @return {?}
             */
            get: function () {
                return this.startTime + this.duration;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} currentTime
         * @return {?}
         */
        TimelineBuilder.prototype.fork = function (currentTime) {
            if (currentTime === void 0) {
                currentTime = 0;
            }
            return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype._loadKeyframe = function () {
            if (this._currentKeyframe) {
                this._previousKeyframe = this._currentKeyframe;
            }
            this._currentKeyframe = this._keyframes.get(this.duration);
            if (!this._currentKeyframe) {
                this._currentKeyframe = Object.create(this._backFill, {});
                this._keyframes.set(this.duration, this._currentKeyframe);
            }
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.forwardFrame = function () {
            this.duration++;
            this._loadKeyframe();
        };
        /**
         * @param {?} time
         * @return {?}
         */
        TimelineBuilder.prototype.forwardTime = function (time) {
            this.duration = time;
            this._loadKeyframe();
        };
        /**
         * @param {?} prop
         * @param {?} value
         * @return {?}
         */
        TimelineBuilder.prototype._updateStyle = function (prop, value) {
            this._localTimelineStyles[prop] = value; /** @type {?} */
            this._globalTimelineStyles[prop] = value;
            this._styleSummary[prop] = { time: this.currentTime, value: value };
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.allowOnlyTimelineStyles = function () {
            return this._currentEmptyStepKeyframe !== this._currentKeyframe;
        };
        /**
         * @param {?} styles
         * @param {?=} easing
         * @param {?=} treatAsEmptyStep
         * @return {?}
         */
        TimelineBuilder.prototype.setStyles = function (styles, easing, treatAsEmptyStep) {
            var _this = this;
            if (easing === void 0) {
                easing = null;
            }
            if (treatAsEmptyStep === void 0) {
                treatAsEmptyStep = false;
            }
            if (easing) {
                this._previousKeyframe['easing'] = easing;
            }
            if (treatAsEmptyStep) {
                // special case for animate(duration):
                // all missing styles are filled with a `*` value then
                // if any destination styles are filled in later on the same
                // keyframe then they will override the overridden styles
                // We use `_globalTimelineStyles` here because there may be
                // styles in previous keyframes that are not present in this timeline
                Object.keys(this._globalTimelineStyles).forEach(function (prop) {
                    _this._backFill[prop] = _this._globalTimelineStyles[prop] || _angular_animations.AUTO_STYLE;
                    _this._currentKeyframe[prop] = _angular_animations.AUTO_STYLE;
                });
                this._currentEmptyStepKeyframe = this._currentKeyframe;
            } else {
                Object.keys(styles).forEach(function (prop) {
                    if (prop !== 'offset') {
                        var /** @type {?} */val = styles[prop];
                        _this._currentKeyframe[prop] = val;
                        if (!_this._localTimelineStyles[prop]) {
                            _this._backFill[prop] = _this._globalTimelineStyles[prop] || _angular_animations.AUTO_STYLE;
                        }
                        _this._updateStyle(prop, val);
                    }
                });
                Object.keys(this._localTimelineStyles).forEach(function (prop) {
                    if (!_this._currentKeyframe.hasOwnProperty(prop)) {
                        _this._currentKeyframe[prop] = _this._localTimelineStyles[prop];
                    }
                });
            }
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.snapshotCurrentStyles = function () {
            copyStyles(this._localTimelineStyles, false, this._currentKeyframe);
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.getFinalKeyframe = function () {
            return this._keyframes.get(this.duration);
        };
        Object.defineProperty(TimelineBuilder.prototype, "properties", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */properties = [];
                for (var /** @type {?} */prop in this._currentKeyframe) {
                    properties.push(prop);
                }
                return properties;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} timeline
         * @return {?}
         */
        TimelineBuilder.prototype.mergeTimelineCollectedStyles = function (timeline) {
            var _this = this;
            Object.keys(timeline._styleSummary).forEach(function (prop) {
                var /** @type {?} */details0 = _this._styleSummary[prop];
                var /** @type {?} */details1 = timeline._styleSummary[prop];
                if (!details0 || details1.time > details0.time) {
                    _this._updateStyle(prop, details1.value);
                }
            });
        };
        /**
         * @return {?}
         */
        TimelineBuilder.prototype.buildKeyframes = function () {
            var _this = this;
            var /** @type {?} */finalKeyframes = [];
            // special case for when there are only start/destination
            // styles but no actual animation animate steps...
            if (this.duration == 0) {
                var /** @type {?} */targetKeyframe = this.getFinalKeyframe();
                var /** @type {?} */firstKeyframe = copyStyles(targetKeyframe, true);
                firstKeyframe['offset'] = 0;
                finalKeyframes.push(firstKeyframe);
                var /** @type {?} */lastKeyframe = copyStyles(targetKeyframe, true);
                lastKeyframe['offset'] = 1;
                finalKeyframes.push(lastKeyframe);
            } else {
                this._keyframes.forEach(function (keyframe, time) {
                    var /** @type {?} */finalKeyframe = copyStyles(keyframe, true);
                    finalKeyframe['offset'] = time / _this.duration;
                    finalKeyframes.push(finalKeyframe);
                });
            }
            return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);
        };
        return TimelineBuilder;
    }();
    /**
     * @param {?} ast
     * @return {?}
     */
    function getOffset(ast) {
        var /** @type {?} */offset = ast.offset;
        if (offset == null) {
            var /** @type {?} */styles = ast.styles;
            if (Array.isArray(styles)) {
                for (var /** @type {?} */i = 0; i < styles.length; i++) {
                    var /** @type {?} */o = styles[i]['offset'];
                    if (o != null) {
                        offset = o;
                        break;
                    }
                }
            } else {
                offset = styles['offset'];
            }
        }
        return offset;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} triggerName
     * @param {?} fromState
     * @param {?} toState
     * @param {?} isRemovalTransition
     * @param {?} fromStyles
     * @param {?} toStyles
     * @param {?} timelines
     * @return {?}
     */
    function createTransitionInstruction(triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines) {
        return {
            type: 0 /* TransitionAnimation */
            , triggerName: triggerName,
            isRemovalTransition: isRemovalTransition,
            fromState: fromState,
            fromStyles: fromStyles,
            toState: toState,
            toStyles: toStyles,
            timelines: timelines
        };
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var AnimationTransitionFactory = function () {
        /**
         * @param {?} _triggerName
         * @param {?} ast
         * @param {?} matchFns
         * @param {?} _stateStyles
         */
        function AnimationTransitionFactory(_triggerName, ast, matchFns, _stateStyles) {
            this._triggerName = _triggerName;
            this.matchFns = matchFns;
            this._stateStyles = _stateStyles;
            var normalizedAst = Array.isArray(ast.animation) ? _angular_animations.sequence(ast.animation) : ast.animation;
            this._animationAst = normalizedAst;
        }
        /**
         * @param {?} currentState
         * @param {?} nextState
         * @return {?}
         */
        AnimationTransitionFactory.prototype.match = function (currentState, nextState) {
            if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState)) return;
            var /** @type {?} */backupStateStyles = this._stateStyles['*'] || {};
            var /** @type {?} */currentStateStyles = this._stateStyles[currentState] || backupStateStyles;
            var /** @type {?} */nextStateStyles = this._stateStyles[nextState] || backupStateStyles;
            var /** @type {?} */timelines = buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);
            return createTransitionInstruction(this._triggerName, currentState, nextState, nextState === 'void', currentStateStyles, nextStateStyles, timelines);
        };
        return AnimationTransitionFactory;
    }();
    /**
     * @param {?} matchFns
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */
    function oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {
        return matchFns.some(function (fn) {
            return fn(currentState, nextState);
        });
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @param {?} ast
     * @return {?}
     */
    function validateAnimationSequence(ast) {
        var /** @type {?} */normalizedAst = Array.isArray(ast) ? _angular_animations.sequence( /** @type {?} */ast) : ast;
        return new AnimationValidatorVisitor().validate(normalizedAst);
    }
    var AnimationValidatorVisitor = function () {
        function AnimationValidatorVisitor() {}
        /**
         * @param {?} ast
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.validate = function (ast) {
            var /** @type {?} */context = new AnimationValidatorContext();
            visitAnimationNode(this, ast, context);
            return context.errors;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.visitState = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.visitTransition = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.visitSequence = function (ast, context) {
            var _this = this;
            ast.steps.forEach(function (step) {
                return visitAnimationNode(_this, step, context);
            });
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.visitGroup = function (ast, context) {
            var _this = this;
            var /** @type {?} */currentTime = context.currentTime;
            var /** @type {?} */furthestTime = 0;
            ast.steps.forEach(function (step) {
                context.currentTime = currentTime;
                visitAnimationNode(_this, step, context);
                furthestTime = Math.max(furthestTime, context.currentTime);
            });
            context.currentTime = furthestTime;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.visitAnimate = function (ast, context) {
            // we reassign the timings here so that they are not reparsed each
            // time an animation occurs
            context.currentAnimateTimings = ast.timings = parseTimeExpression( /** @type {?} */ast.timings, context.errors);
            var /** @type {?} */astType = ast.styles && ast.styles.type;
            if (astType == 5 /* KeyframeSequence */) {
                    this.visitKeyframeSequence( /** @type {?} */ast.styles, context);
                } else {
                context.currentTime += context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;
                if (astType == 6 /* Style */) {
                        this.visitStyle( /** @type {?} */ast.styles, context);
                    }
            }
            context.currentAnimateTimings = null;
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.visitStyle = function (ast, context) {
            var /** @type {?} */styleData = normalizeStyles(ast.styles);
            var /** @type {?} */timings = context.currentAnimateTimings;
            var /** @type {?} */endTime = context.currentTime;
            var /** @type {?} */startTime = context.currentTime;
            if (timings && startTime > 0) {
                startTime -= timings.duration + timings.delay;
            }
            Object.keys(styleData).forEach(function (prop) {
                var /** @type {?} */collectedEntry = context.collectedStyles[prop];
                var /** @type {?} */updateCollectedStyle = true;
                if (collectedEntry) {
                    if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
                        context.errors.push("The CSS property \"" + prop + "\" that exists between the times of \"" + collectedEntry.startTime + "ms\" and \"" + collectedEntry.endTime + "ms\" is also being animated in a parallel animation between the times of \"" + startTime + "ms\" and \"" + endTime + "ms\"");
                        updateCollectedStyle = false;
                    }
                    // we always choose the smaller start time value since we
                    // want to have a record of the entire animation window where
                    // the style property is being animated in between
                    startTime = collectedEntry.startTime;
                }
                if (updateCollectedStyle) {
                    context.collectedStyles[prop] = { startTime: startTime, endTime: endTime };
                }
            });
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationValidatorVisitor.prototype.visitKeyframeSequence = function (ast, context) {
            var _this = this;
            var /** @type {?} */totalKeyframesWithOffsets = 0;
            var /** @type {?} */offsets = [];
            var /** @type {?} */offsetsOutOfOrder = false;
            var /** @type {?} */keyframesOutOfRange = false;
            var /** @type {?} */previousOffset = 0;
            ast.steps.forEach(function (step) {
                var /** @type {?} */styleData = normalizeStyles(step.styles);
                var /** @type {?} */offset = 0;
                if (styleData.hasOwnProperty('offset')) {
                    totalKeyframesWithOffsets++;
                    offset = styleData['offset'];
                }
                keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
                offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
                previousOffset = offset;
                offsets.push(offset);
            });
            if (keyframesOutOfRange) {
                context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
            }
            if (offsetsOutOfOrder) {
                context.errors.push("Please ensure that all keyframe offsets are in order");
            }
            var /** @type {?} */length = ast.steps.length;
            var /** @type {?} */generatedOffset = 0;
            if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
                context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
            } else if (totalKeyframesWithOffsets == 0) {
                generatedOffset = 1 / length;
            }
            var /** @type {?} */limit = length - 1;
            var /** @type {?} */currentTime = context.currentTime;
            var /** @type {?} */animateDuration = context.currentAnimateTimings.duration;
            ast.steps.forEach(function (step, i) {
                var /** @type {?} */offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
                var /** @type {?} */durationUpToThisFrame = offset * animateDuration;
                context.currentTime = currentTime + context.currentAnimateTimings.delay + durationUpToThisFrame; /** @type {?} */
                context.currentAnimateTimings.duration = durationUpToThisFrame;
                _this.visitStyle(step, context);
            });
        };
        return AnimationValidatorVisitor;
    }();
    var AnimationValidatorContext = function () {
        function AnimationValidatorContext() {
            this.errors = [];
            this.currentTime = 0;
            this.collectedStyles = {};
        }
        return AnimationValidatorContext;
    }();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@experimental Animation support is experimental.
     * @param {?} name
     * @param {?} definitions
     * @return {?}
     */
    function buildTrigger(name, definitions) {
        return new AnimationTriggerVisitor().buildTrigger(name, definitions);
    }
    /**
     * \@experimental Animation support is experimental.
     */
    var AnimationTrigger = function () {
        /**
         * @param {?} name
         * @param {?} states
         * @param {?} _transitionAsts
         */
        function AnimationTrigger(name, states, _transitionAsts) {
            var _this = this;
            this.name = name;
            this._transitionAsts = _transitionAsts;
            this.transitionFactories = [];
            this.states = {};
            Object.keys(states).forEach(function (stateName) {
                _this.states[stateName] = copyStyles(states[stateName], false);
            });
            var errors = [];
            _transitionAsts.forEach(function (ast) {
                var exprs = parseTransitionExpr(ast.expr, errors);
                var sequenceErrors = validateAnimationSequence(ast);
                if (sequenceErrors.length) {
                    errors.push.apply(errors, sequenceErrors);
                } else {
                    _this.transitionFactories.push(new AnimationTransitionFactory(_this.name, ast, exprs, states));
                }
            });
            if (errors.length) {
                var LINE_START = '\n - ';
                throw new Error("Animation parsing for the " + name + " trigger have failed:" + LINE_START + errors.join(LINE_START));
            }
        }
        /**
         * @param {?} currentState
         * @param {?} nextState
         * @return {?}
         */
        AnimationTrigger.prototype.createFallbackInstruction = function (currentState, nextState) {
            var /** @type {?} */backupStateStyles = this.states['*'] || {};
            var /** @type {?} */currentStateStyles = this.states[currentState] || backupStateStyles;
            var /** @type {?} */nextStateStyles = this.states[nextState] || backupStateStyles;
            return createTransitionInstruction(this.name, currentState, nextState, nextState == 'void', currentStateStyles, nextStateStyles, []);
        };
        /**
         * @param {?} currentState
         * @param {?} nextState
         * @return {?}
         */
        AnimationTrigger.prototype.matchTransition = function (currentState, nextState) {
            for (var /** @type {?} */i = 0; i < this.transitionFactories.length; i++) {
                var /** @type {?} */result = this.transitionFactories[i].match(currentState, nextState);
                if (result) return result;
            }
            return null;
        };
        return AnimationTrigger;
    }();
    var AnimationTriggerContext = function () {
        function AnimationTriggerContext() {
            this.errors = [];
            this.states = {};
            this.transitions = [];
        }
        return AnimationTriggerContext;
    }();
    var AnimationTriggerVisitor = function () {
        function AnimationTriggerVisitor() {}
        /**
         * @param {?} name
         * @param {?} definitions
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.buildTrigger = function (name, definitions) {
            var _this = this;
            var /** @type {?} */context = new AnimationTriggerContext();
            definitions.forEach(function (def) {
                return visitAnimationNode(_this, def, context);
            });
            return new AnimationTrigger(name, context.states, context.transitions);
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.visitState = function (ast, context) {
            var /** @type {?} */styles = normalizeStyles(ast.styles.styles);
            ast.name.split(/\s*,\s*/).forEach(function (name) {
                context.states[name] = styles;
            });
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.visitTransition = function (ast, context) {
            context.transitions.push(ast);
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.visitSequence = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.visitGroup = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.visitAnimate = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.visitStyle = function (ast, context) {
            // these values are not visited in this AST
        };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        AnimationTriggerVisitor.prototype.visitKeyframeSequence = function (ast, context) {
            // these values are not visited in this AST
        };
        return AnimationTriggerVisitor;
    }();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var MARKED_FOR_ANIMATION_CLASSNAME = 'ng-animating';
    var MARKED_FOR_ANIMATION_SELECTOR = '.ng-animating';
    var MARKED_FOR_REMOVAL = '$$ngRemove';
    var VOID_STATE = 'void';
    var DomAnimationEngine = function () {
        /**
         * @param {?} _driver
         * @param {?} _normalizer
         */
        function DomAnimationEngine(_driver, _normalizer) {
            this._driver = _driver;
            this._normalizer = _normalizer;
            this._flaggedInserts = new Set();
            this._queuedRemovals = new Map();
            this._queuedTransitionAnimations = [];
            this._activeTransitionAnimations = new Map();
            this._activeElementAnimations = new Map();
            this._elementTriggerStates = new Map();
            this._triggers = Object.create(null);
            this._triggerListeners = new Map();
            this._pendingListenerRemovals = new Map();
        }
        Object.defineProperty(DomAnimationEngine.prototype, "queuedPlayers", {
            /**
             * @return {?}
             */
            get: function () {
                return this._queuedTransitionAnimations.map(function (q) {
                    return q.player;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DomAnimationEngine.prototype, "activePlayers", {
            /**
             * @return {?}
             */
            get: function () {
                var /** @type {?} */players = [];
                this._activeElementAnimations.forEach(function (activePlayers) {
                    return players.push.apply(players, activePlayers);
                });
                return players;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} trigger
         * @param {?=} name
         * @return {?}
         */
        DomAnimationEngine.prototype.registerTrigger = function (trigger, name) {
            name = name || trigger.name;
            if (this._triggers[name]) {
                return;
            }
            this._triggers[name] = buildTrigger(name, trigger.definitions);
        };
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */
        DomAnimationEngine.prototype.onInsert = function (element, domFn) {
            if (element['nodeType'] == 1) {
                this._flaggedInserts.add(element);
            }
            domFn();
        };
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */
        DomAnimationEngine.prototype.onRemove = function (element, domFn) {
            var _this = this;
            if (element['nodeType'] != 1) {
                domFn();
                return;
            }
            var /** @type {?} */lookupRef = this._elementTriggerStates.get(element);
            if (lookupRef) {
                var /** @type {?} */possibleTriggers = Object.keys(lookupRef);
                var /** @type {?} */hasRemoval = possibleTriggers.some(function (triggerName) {
                    var /** @type {?} */oldValue = lookupRef[triggerName];
                    var /** @type {?} */instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
                    return !!instruction;
                });
                if (hasRemoval) {
                    element[MARKED_FOR_REMOVAL] = true;
                    this._queuedRemovals.set(element, domFn);
                    return;
                }
            }
            // this means that there are no animations to take on this
            // leave operation therefore we should fire the done|start callbacks
            if (this._triggerListeners.has(element)) {
                element[MARKED_FOR_REMOVAL] = true;
                this._queuedRemovals.set(element, function () {});
            }
            this._onRemovalTransition(element).forEach(function (player) {
                return player.destroy();
            });
            domFn();
        };
        /**
         * @param {?} element
         * @param {?} property
         * @param {?} value
         * @return {?}
         */
        DomAnimationEngine.prototype.setProperty = function (element, property, value) {
            var /** @type {?} */trigger = this._triggers[property];
            if (!trigger) {
                throw new Error("The provided animation trigger \"" + property + "\" has not been registered!");
            }
            var /** @type {?} */lookupRef = this._elementTriggerStates.get(element);
            if (!lookupRef) {
                this._elementTriggerStates.set(element, lookupRef = {});
            }
            var /** @type {?} */oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : VOID_STATE;
            if (oldValue !== value) {
                value = normalizeTriggerValue(value);
                var /** @type {?} */instruction = trigger.matchTransition(oldValue, value);
                if (!instruction) {
                    // we do this to make sure we always have an animation player so
                    // that callback operations are properly called
                    instruction = trigger.createFallbackInstruction(oldValue, value);
                }
                this.animateTransition(element, instruction);
                lookupRef[property] = value;
            }
        };
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} eventPhase
         * @param {?} callback
         * @return {?}
         */
        DomAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {
            var _this = this;
            if (!eventPhase) {
                throw new Error("Unable to listen on the animation trigger \"" + eventName + "\" because the provided event is undefined!");
            }
            if (!this._triggers[eventName]) {
                throw new Error("Unable to listen on the animation trigger event \"" + eventPhase + "\" because the animation trigger \"" + eventName + "\" doesn't exist!");
            }
            var /** @type {?} */elementListeners = this._triggerListeners.get(element);
            if (!elementListeners) {
                this._triggerListeners.set(element, elementListeners = []);
            }
            validatePlayerEvent(eventName, eventPhase);
            var /** @type {?} */tuple = { triggerName: eventName, phase: eventPhase, callback: callback };
            elementListeners.push(tuple);
            return function () {
                // this is queued up in the event that a removal animation is set
                // to fire on the element (the listeners need to be set during flush)
                getOrSetAsInMap(_this._pendingListenerRemovals, element, []).push(tuple);
            };
        };
        /**
         * @return {?}
         */
        DomAnimationEngine.prototype._clearPendingListenerRemovals = function () {
            var _this = this;
            this._pendingListenerRemovals.forEach(function (tuples, element) {
                var /** @type {?} */elementListeners = _this._triggerListeners.get(element);
                if (elementListeners) {
                    tuples.forEach(function (tuple) {
                        var /** @type {?} */index = elementListeners.indexOf(tuple);
                        if (index >= 0) {
                            elementListeners.splice(index, 1);
                        }
                    });
                }
            });
            this._pendingListenerRemovals.clear();
        };
        /**
         * @param {?} element
         * @return {?}
         */
        DomAnimationEngine.prototype._onRemovalTransition = function (element) {
            // when a parent animation is set to trigger a removal we want to
            // find all of the children that are currently animating and clear
            // them out by destroying each of them.
            var /** @type {?} */elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR);
            var _loop_1 = function (i) {
                var /** @type {?} */elm = elms[i];
                var /** @type {?} */activePlayers = this_1._activeElementAnimations.get(elm);
                if (activePlayers) {
                    activePlayers.forEach(function (player) {
                        return player.destroy();
                    });
                }
                var /** @type {?} */activeTransitions = this_1._activeTransitionAnimations.get(elm);
                if (activeTransitions) {
                    Object.keys(activeTransitions).forEach(function (triggerName) {
                        var /** @type {?} */player = activeTransitions[triggerName];
                        if (player) {
                            player.destroy();
                        }
                    });
                }
            };
            var this_1 = this;
            for (var /** @type {?} */i = 0; i < elms.length; i++) {
                _loop_1( /** @type {?} */i);
            }
            // we make a copy of the array because the actual source array is modified
            // each time a player is finished/destroyed (the forEach loop would fail otherwise)
            return copyArray( /** @type {?} */this._activeElementAnimations.get(element));
        };
        /**
         * @param {?} element
         * @param {?} instruction
         * @return {?}
         */
        DomAnimationEngine.prototype.animateTransition = function (element, instruction) {
            var _this = this;
            var /** @type {?} */triggerName = instruction.triggerName;
            var /** @type {?} */previousPlayers;
            if (instruction.isRemovalTransition) {
                previousPlayers = this._onRemovalTransition(element);
            } else {
                previousPlayers = [];
                var /** @type {?} */existingTransitions = this._activeTransitionAnimations.get(element);
                var /** @type {?} */existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;
                if (existingPlayer) {
                    previousPlayers.push(existingPlayer);
                }
            }
            // it's important to do this step before destroying the players
            // so that the onDone callback below won't fire before this
            eraseStyles(element, instruction.fromStyles);
            // we first run this so that the previous animation player
            // data can be passed into the successive animation players
            var /** @type {?} */totalTime = 0;
            var /** @type {?} */players = instruction.timelines.map(function (timelineInstruction, i) {
                totalTime = Math.max(totalTime, timelineInstruction.totalTime);
                return _this._buildPlayer(element, timelineInstruction, previousPlayers, i);
            });
            previousPlayers.forEach(function (previousPlayer) {
                return previousPlayer.destroy();
            });
            var /** @type {?} */player = optimizeGroupPlayer(players);
            player.onDone(function () {
                player.destroy();
                var /** @type {?} */elmTransitionMap = _this._activeTransitionAnimations.get(element);
                if (elmTransitionMap) {
                    delete elmTransitionMap[triggerName];
                    if (Object.keys(elmTransitionMap).length == 0) {
                        _this._activeTransitionAnimations.delete(element);
                    }
                }
                deleteFromArrayMap(_this._activeElementAnimations, element, player);
                setStyles(element, instruction.toStyles);
            });
            var /** @type {?} */elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});
            elmTransitionMap[triggerName] = player;
            this._queuePlayer(element, triggerName, player, makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, // this will be filled in during event creation
            totalTime));
            return player;
        };
        /**
         * @param {?} element
         * @param {?} instructions
         * @param {?=} previousPlayers
         * @return {?}
         */
        DomAnimationEngine.prototype.animateTimeline = function (element, instructions, previousPlayers) {
            var _this = this;
            if (previousPlayers === void 0) {
                previousPlayers = [];
            }
            var /** @type {?} */players = instructions.map(function (instruction, i) {
                var /** @type {?} */player = _this._buildPlayer(element, instruction, previousPlayers, i);
                player.onDestroy(function () {
                    deleteFromArrayMap(_this._activeElementAnimations, element, player);
                });
                _this._markPlayerAsActive(element, player);
                return player;
            });
            return optimizeGroupPlayer(players);
        };
        /**
         * @param {?} element
         * @param {?} instruction
         * @param {?} previousPlayers
         * @param {?=} index
         * @return {?}
         */
        DomAnimationEngine.prototype._buildPlayer = function (element, instruction, previousPlayers, index) {
            if (index === void 0) {
                index = 0;
            }
            // only the very first animation can absorb the previous styles. This
            // is here to prevent the an overlap situation where a group animation
            // absorbs previous styles multiple times for the same element.
            if (index && previousPlayers.length) {
                previousPlayers = [];
            }
            return this._driver.animate(element, this._normalizeKeyframes(instruction.keyframes), instruction.duration, instruction.delay, instruction.easing, previousPlayers);
        };
        /**
         * @param {?} keyframes
         * @return {?}
         */
        DomAnimationEngine.prototype._normalizeKeyframes = function (keyframes) {
            var _this = this;
            var /** @type {?} */errors = [];
            var /** @type {?} */normalizedKeyframes = [];
            keyframes.forEach(function (kf) {
                var /** @type {?} */normalizedKeyframe = {};
                Object.keys(kf).forEach(function (prop) {
                    var /** @type {?} */normalizedProp = prop;
                    var /** @type {?} */normalizedValue = kf[prop];
                    if (prop != 'offset') {
                        normalizedProp = _this._normalizer.normalizePropertyName(prop, errors);
                        normalizedValue = _this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);
                    }
                    normalizedKeyframe[normalizedProp] = normalizedValue;
                });
                normalizedKeyframes.push(normalizedKeyframe);
            });
            if (errors.length) {
                var /** @type {?} */LINE_START = '\n - ';
                throw new Error("Unable to animate due to the following errors:" + LINE_START + errors.join(LINE_START));
            }
            return normalizedKeyframes;
        };
        /**
         * @param {?} element
         * @param {?} player
         * @return {?}
         */
        DomAnimationEngine.prototype._markPlayerAsActive = function (element, player) {
            var /** @type {?} */elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);
            elementAnimations.push(player);
        };
        /**
         * @param {?} element
         * @param {?} triggerName
         * @param {?} player
         * @param {?} event
         * @return {?}
         */
        DomAnimationEngine.prototype._queuePlayer = function (element, triggerName, player, event) {
            var /** @type {?} */tuple = { element: element, player: player, triggerName: triggerName, event: event };
            this._queuedTransitionAnimations.push(tuple);
            player.init();
            element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME);
            player.onDone(function () {
                element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME);
            });
        };
        /**
         * @return {?}
         */
        DomAnimationEngine.prototype._flushQueuedAnimations = function () {
            var _loop_2 = function () {
                var _a = this_2._queuedTransitionAnimations.shift(),
                    player = _a.player,
                    element = _a.element,
                    triggerName = _a.triggerName,
                    event = _a.event;
                var /** @type {?} */parent = element;
                while (parent = parent.parentNode) {
                    // this means that a parent element will or will not
                    // have its own animation operation which in this case
                    // there's no point in even trying to do an animation
                    if (parent[MARKED_FOR_REMOVAL]) return "continue-parentLoop";
                }
                var /** @type {?} */listeners = this_2._triggerListeners.get(element);
                if (listeners) {
                    listeners.forEach(function (tuple) {
                        if (tuple.triggerName == triggerName) {
                            listenOnPlayer(player, tuple.phase, event, tuple.callback);
                        }
                    });
                }
                // if a removal exists for the given element then we need cancel
                // all the queued players so that a proper removal animation can go
                if (this_2._queuedRemovals.has(element)) {
                    player.destroy();
                    return "continue";
                }
                this_2._markPlayerAsActive(element, player);
                // in the event that an animation throws an error then we do
                // not want to re-run animations on any previous animations
                // if they have already been kicked off beforehand
                player.init();
                if (!player.hasStarted()) {
                    player.play();
                }
            };
            var this_2 = this;
            parentLoop: while (this._queuedTransitionAnimations.length) {
                var state_1 = _loop_2();
                switch (state_1) {
                    case "continue-parentLoop":
                        continue parentLoop;
                }
            }
        };
        /**
         * @return {?}
         */
        DomAnimationEngine.prototype.flush = function () {
            var _this = this;
            var /** @type {?} */leaveListeners = new Map();
            this._queuedRemovals.forEach(function (callback, element) {
                var /** @type {?} */tuple = _this._pendingListenerRemovals.get(element);
                if (tuple) {
                    leaveListeners.set(element, tuple);
                    _this._pendingListenerRemovals.delete(element);
                }
            });
            this._clearPendingListenerRemovals();
            this._pendingListenerRemovals = leaveListeners;
            this._flushQueuedAnimations();
            var /** @type {?} */flushAgain = false;
            this._queuedRemovals.forEach(function (callback, element) {
                // an item that was inserted/removed in the same flush means
                // that an animation should not happen anyway
                if (_this._flaggedInserts.has(element)) return;
                var /** @type {?} */parent = element;
                var /** @type {?} */players = [];
                while (parent = parent.parentNode) {
                    // there is no reason to even try to
                    if (parent[MARKED_FOR_REMOVAL]) {
                        callback();
                        return;
                    }
                    var /** @type {?} */match = _this._activeElementAnimations.get(parent);
                    if (match) {
                        players.push.apply(players, match);
                        break;
                    }
                }
                // the loop was unable to find an parent that is animating even
                // though this element has set to be removed, so the algorithm
                // should check to see if there are any triggers on the element
                // that are present to handle a leave animation and then setup
                // those players to facilitate the callback after done
                if (players.length == 0) {
                    // this means that the element has valid state triggers
                    var /** @type {?} */stateDetails_1 = _this._elementTriggerStates.get(element);
                    if (stateDetails_1) {
                        Object.keys(stateDetails_1).forEach(function (triggerName) {
                            flushAgain = true;
                            var /** @type {?} */oldValue = stateDetails_1[triggerName];
                            var /** @type {?} */instruction = _this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);
                            if (instruction) {
                                players.push(_this.animateTransition(element, instruction));
                            } else {
                                var /** @type {?} */event = makeAnimationEvent(element, triggerName, oldValue, VOID_STATE, '', 0);
                                var /** @type {?} */player = new _angular_animations.NoopAnimationPlayer();
                                _this._queuePlayer(element, triggerName, player, event);
                            }
                        });
                    }
                }
                if (players.length) {
                    optimizeGroupPlayer(players).onDone(callback);
                } else {
                    callback();
                }
            });
            this._queuedRemovals.clear();
            this._flaggedInserts.clear();
            // this means that one or more leave animations were detected
            if (flushAgain) {
                this._flushQueuedAnimations();
                this._clearPendingListenerRemovals();
            }
        };
        return DomAnimationEngine;
    }();
    /**
     * @param {?} map
     * @param {?} key
     * @param {?} defaultValue
     * @return {?}
     */
    function getOrSetAsInMap(map, key, defaultValue) {
        var /** @type {?} */value = map.get(key);
        if (!value) {
            map.set(key, value = defaultValue);
        }
        return value;
    }
    /**
     * @param {?} map
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function deleteFromArrayMap(map, key, value) {
        var /** @type {?} */arr = map.get(key);
        if (arr) {
            var /** @type {?} */index = arr.indexOf(value);
            if (index >= 0) {
                arr.splice(index, 1);
                if (arr.length == 0) {
                    map.delete(key);
                }
            }
        }
    }
    /**
     * @param {?} players
     * @return {?}
     */
    function optimizeGroupPlayer(players) {
        switch (players.length) {
            case 0:
                return new _angular_animations.NoopAnimationPlayer();
            case 1:
                return players[0];
            default:
                return new _angular_animations.ɵAnimationGroupPlayer(players);
        }
    }
    /**
     * @param {?} source
     * @return {?}
     */
    function copyArray(source) {
        return source ? source.splice(0) : [];
    }
    /**
     * @param {?} triggerName
     * @param {?} eventName
     * @return {?}
     */
    function validatePlayerEvent(triggerName, eventName) {
        switch (eventName) {
            case 'start':
            case 'done':
                return;
            default:
                throw new Error("The provided animation trigger event \"" + eventName + "\" for the animation trigger \"" + triggerName + "\" is not supported!");
        }
    }
    /**
     * @param {?} player
     * @param {?} eventName
     * @param {?} baseEvent
     * @param {?} callback
     * @return {?}
     */
    function listenOnPlayer(player, eventName, baseEvent, callback) {
        switch (eventName) {
            case 'start':
                player.onStart(function () {
                    var /** @type {?} */event = copyAnimationEvent(baseEvent);
                    event.phaseName = 'start';
                    callback(event);
                });
                break;
            case 'done':
                player.onDone(function () {
                    var /** @type {?} */event = copyAnimationEvent(baseEvent);
                    event.phaseName = 'done';
                    callback(event);
                });
                break;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    function copyAnimationEvent(e) {
        return makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);
    }
    /**
     * @param {?} element
     * @param {?} triggerName
     * @param {?} fromState
     * @param {?} toState
     * @param {?} phaseName
     * @param {?} totalTime
     * @return {?}
     */
    function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
        return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function normalizeTriggerValue(value) {
        switch (typeof value) {
            case 'boolean':
                return value ? '1' : '0';
            default:
                return value ? value.toString() : null;
        }
    }
    /**
     * \@experimental Animation support is experimental.
     * @abstract
     */
    var AnimationStyleNormalizer = function () {
        function AnimationStyleNormalizer() {}
        /**
         * @abstract
         * @param {?} propertyName
         * @param {?} errors
         * @return {?}
         */
        AnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {};
        /**
         * @abstract
         * @param {?} userProvidedProperty
         * @param {?} normalizedProperty
         * @param {?} value
         * @param {?} errors
         * @return {?}
         */
        AnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {};
        return AnimationStyleNormalizer;
    }();
    /**
     * \@experimental Animation support is experimental.
     */
    var NoopAnimationStyleNormalizer = function () {
        function NoopAnimationStyleNormalizer() {}
        /**
         * @param {?} propertyName
         * @param {?} errors
         * @return {?}
         */
        NoopAnimationStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {
            return propertyName;
        };
        /**
         * @param {?} userProvidedProperty
         * @param {?} normalizedProperty
         * @param {?} value
         * @param {?} errors
         * @return {?}
         */
        NoopAnimationStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {
            return value;
        };
        return NoopAnimationStyleNormalizer;
    }();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var Animation = function () {
        /**
         * @param {?} input
         */
        function Animation(input) {
            var ast = Array.isArray(input) ? _angular_animations.sequence(input) : input;
            var errors = validateAnimationSequence(ast);
            if (errors.length) {
                var errorMessage = "animation validation failed:\n" + errors.join("\n");
                throw new Error(errorMessage);
            }
            this._animationAst = ast;
        }
        /**
         * @param {?} startingStyles
         * @param {?} destinationStyles
         * @return {?}
         */
        Animation.prototype.buildTimelines = function (startingStyles, destinationStyles) {
            var /** @type {?} */start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
            var /** @type {?} */dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
            return buildAnimationKeyframes(this._animationAst, start, dest);
        };
        /**
         * @param {?} injector
         * @param {?} element
         * @param {?=} startingStyles
         * @param {?=} destinationStyles
         * @return {?}
         */
        Animation.prototype.create = function (injector, element, startingStyles, destinationStyles) {
            if (startingStyles === void 0) {
                startingStyles = {};
            }
            if (destinationStyles === void 0) {
                destinationStyles = {};
            }
            var /** @type {?} */instructions = this.buildTimelines(startingStyles, destinationStyles);
            // note the code below is only here to make the tests happy (once the new renderer is
            // within core then the code below will interact with Renderer.transition(...))
            var /** @type {?} */driver = injector.get(AnimationDriver);
            var /** @type {?} */normalizer = injector.get(AnimationStyleNormalizer);
            var /** @type {?} */engine = new DomAnimationEngine(driver, normalizer);
            return engine.animateTimeline(element, instructions);
        };
        return Animation;
    }();
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var WebAnimationsStyleNormalizer = function (_super) {
        __extends(WebAnimationsStyleNormalizer, _super);
        function WebAnimationsStyleNormalizer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} propertyName
         * @param {?} errors
         * @return {?}
         */
        WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {
            return dashCaseToCamelCase(propertyName);
        };
        /**
         * @param {?} userProvidedProperty
         * @param {?} normalizedProperty
         * @param {?} value
         * @param {?} errors
         * @return {?}
         */
        WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {
            var /** @type {?} */unit = '';
            var /** @type {?} */strVal = value.toString().trim();
            if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
                if (typeof value === 'number') {
                    unit = 'px';
                } else {
                    var /** @type {?} */valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
                    if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                        errors.push("Please provide a CSS unit value for " + userProvidedProperty + ":" + value);
                    }
                }
            }
            return strVal + unit;
        };
        return WebAnimationsStyleNormalizer;
    }(AnimationStyleNormalizer);
    var DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'.split(','));
    /**
     * @param {?} keys
     * @return {?}
     */
    function makeBooleanMap(keys) {
        var /** @type {?} */map = {};
        keys.forEach(function (key) {
            return map[key] = true;
        });
        return map;
    }
    var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
    /**
     * @param {?} input
     * @return {?}
     */
    function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                m[_i] = arguments[_i];
            }
            return m[1].toUpperCase();
        });
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var DEFAULT_STATE_VALUE = 'void';
    var DEFAULT_STATE_STYLES = '*';
    var NoopAnimationEngine = function (_super) {
        __extends(NoopAnimationEngine, _super);
        function NoopAnimationEngine() {
            var _this = _super.apply(this, arguments) || this;
            _this._listeners = new Map();
            _this._changes = [];
            _this._flaggedRemovals = new Set();
            _this._onDoneFns = [];
            _this._triggerStyles = Object.create(null);
            return _this;
        }
        /**
         * @param {?} trigger
         * @param {?=} name
         * @return {?}
         */
        NoopAnimationEngine.prototype.registerTrigger = function (trigger, name) {
            name = name || trigger.name;
            if (this._triggerStyles[name]) {
                return;
            }
            var /** @type {?} */stateMap = {};
            trigger.definitions.forEach(function (def) {
                if (def.type === 0 /* State */) {
                        var /** @type {?} */stateDef = def;
                        stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);
                    }
            });
            this._triggerStyles[name] = stateMap;
        };
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */
        NoopAnimationEngine.prototype.onInsert = function (element, domFn) {
            domFn();
        };
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */
        NoopAnimationEngine.prototype.onRemove = function (element, domFn) {
            domFn();
            if (element['nodeType'] == 1) {
                this._flaggedRemovals.add(element);
            }
        };
        /**
         * @param {?} element
         * @param {?} property
         * @param {?} value
         * @return {?}
         */
        NoopAnimationEngine.prototype.setProperty = function (element, property, value) {
            var /** @type {?} */storageProp = makeStorageProp(property);
            var /** @type {?} */oldValue = element[storageProp] || DEFAULT_STATE_VALUE;
            this._changes.push( /** @type {?} */{ element: element, oldValue: oldValue, newValue: value, triggerName: property });
            var /** @type {?} */triggerStateStyles = this._triggerStyles[property] || {};
            var /** @type {?} */fromStateStyles = triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];
            if (fromStateStyles) {
                eraseStyles(element, fromStateStyles);
            }
            element[storageProp] = value;
            this._onDoneFns.push(function () {
                var /** @type {?} */toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];
                if (toStateStyles) {
                    setStyles(element, toStateStyles);
                }
            });
        };
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} eventPhase
         * @param {?} callback
         * @return {?}
         */
        NoopAnimationEngine.prototype.listen = function (element, eventName, eventPhase, callback) {
            var /** @type {?} */listeners = this._listeners.get(element);
            if (!listeners) {
                this._listeners.set(element, listeners = []);
            }
            var /** @type {?} */tuple = { triggerName: eventName, eventPhase: eventPhase, callback: callback };
            listeners.push(tuple);
            return function () {
                return tuple.doRemove = true;
            };
        };
        /**
         * @return {?}
         */
        NoopAnimationEngine.prototype.flush = function () {
            var _this = this;
            var /** @type {?} */onStartCallbacks = [];
            var /** @type {?} */onDoneCallbacks = [];
            /**
             * @param {?} listener
             * @param {?} data
             * @return {?}
             */
            function handleListener(listener, data) {
                var /** @type {?} */phase = listener.eventPhase;
                var /** @type {?} */event = makeAnimationEvent$1(data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);
                if (phase == 'start') {
                    onStartCallbacks.push(function () {
                        return listener.callback(event);
                    });
                } else if (phase == 'done') {
                    onDoneCallbacks.push(function () {
                        return listener.callback(event);
                    });
                }
            }
            this._changes.forEach(function (change) {
                var /** @type {?} */element = change.element;
                var /** @type {?} */listeners = _this._listeners.get(element);
                if (listeners) {
                    listeners.forEach(function (listener) {
                        if (listener.triggerName == change.triggerName) {
                            handleListener(listener, change);
                        }
                    });
                }
            });
            // upon removal ALL the animation triggers need to get fired
            this._flaggedRemovals.forEach(function (element) {
                var /** @type {?} */listeners = _this._listeners.get(element);
                if (listeners) {
                    listeners.forEach(function (listener) {
                        var /** @type {?} */triggerName = listener.triggerName;
                        var /** @type {?} */storageProp = makeStorageProp(triggerName);
                        handleListener(listener, /** @type {?} */{
                            element: element,
                            triggerName: triggerName,
                            oldValue: element[storageProp] || DEFAULT_STATE_VALUE,
                            newValue: DEFAULT_STATE_VALUE
                        });
                    });
                }
            });
            // remove all the listeners after everything is complete
            Array.from(this._listeners.keys()).forEach(function (element) {
                var /** @type {?} */listenersToKeep = _this._listeners.get(element).filter(function (l) {
                    return !l.doRemove;
                });
                if (listenersToKeep.length) {
                    _this._listeners.set(element, listenersToKeep);
                } else {
                    _this._listeners.delete(element);
                }
            });
            onStartCallbacks.forEach(function (fn) {
                return fn();
            });
            onDoneCallbacks.forEach(function (fn) {
                return fn();
            });
            this._flaggedRemovals.clear();
            this._changes = [];
            this._onDoneFns.forEach(function (doneFn) {
                return doneFn();
            });
            this._onDoneFns = [];
        };
        Object.defineProperty(NoopAnimationEngine.prototype, "activePlayers", {
            /**
             * @return {?}
             */
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoopAnimationEngine.prototype, "queuedPlayers", {
            /**
             * @return {?}
             */
            get: function () {
                return [];
            },
            enumerable: true,
            configurable: true
        });
        return NoopAnimationEngine;
    }(AnimationEngine);
    /**
     * @param {?} element
     * @param {?} triggerName
     * @param {?} fromState
     * @param {?} toState
     * @param {?} phaseName
     * @param {?} totalTime
     * @return {?}
     */
    function makeAnimationEvent$1(element, triggerName, fromState, toState, phaseName, totalTime) {
        return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime };
    }
    /**
     * @param {?} property
     * @return {?}
     */
    function makeStorageProp(property) {
        return '_@_' + property;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var WebAnimationsPlayer = function () {
        /**
         * @param {?} element
         * @param {?} keyframes
         * @param {?} options
         * @param {?=} previousPlayers
         */
        function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
            if (previousPlayers === void 0) {
                previousPlayers = [];
            }
            var _this = this;
            this.element = element;
            this.keyframes = keyframes;
            this.options = options;
            this._onDoneFns = [];
            this._onStartFns = [];
            this._onDestroyFns = [];
            this._initialized = false;
            this._finished = false;
            this._started = false;
            this._destroyed = false;
            this.time = 0;
            this.parentPlayer = null;
            this._duration = options['duration'];
            this._delay = options['delay'] || 0;
            this.time = this._duration + this._delay;
            this.previousStyles = {};
            previousPlayers.forEach(function (player) {
                var styles = player._captureStyles();
                Object.keys(styles).forEach(function (prop) {
                    return _this.previousStyles[prop] = styles[prop];
                });
            });
        }
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype._onFinish = function () {
            if (!this._finished) {
                this._finished = true;
                this._onDoneFns.forEach(function (fn) {
                    return fn();
                });
                this._onDoneFns = [];
            }
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.init = function () {
            var _this = this;
            if (this._initialized) return;
            this._initialized = true;
            var /** @type {?} */keyframes = this.keyframes.map(function (styles) {
                var /** @type {?} */formattedKeyframe = {};
                Object.keys(styles).forEach(function (prop, index) {
                    var /** @type {?} */value = styles[prop];
                    if (value == _angular_animations.AUTO_STYLE) {
                        value = _computeStyle(_this.element, prop);
                    }
                    if (value != undefined) {
                        formattedKeyframe[prop] = value;
                    }
                });
                return formattedKeyframe;
            });
            var /** @type {?} */previousStyleProps = Object.keys(this.previousStyles);
            if (previousStyleProps.length) {
                var /** @type {?} */startingKeyframe_1 = keyframes[0];
                var /** @type {?} */missingStyleProps_1 = [];
                previousStyleProps.forEach(function (prop) {
                    if (!startingKeyframe_1.hasOwnProperty(prop)) {
                        missingStyleProps_1.push(prop);
                    }
                    startingKeyframe_1[prop] = _this.previousStyles[prop];
                });
                if (missingStyleProps_1.length) {
                    var /** @type {?} */self_1 = this;
                    var _loop_3 = function () {
                        var /** @type {?} */kf = keyframes[i];
                        missingStyleProps_1.forEach(function (prop) {
                            kf[prop] = _computeStyle(self_1.element, prop);
                        });
                    };
                    // tslint:disable-next-line
                    for (var /** @type {?} */i = 1; i < keyframes.length; i++) {
                        _loop_3();
                    }
                }
            }
            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
            this._finalKeyframe = keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};
            // this is required so that the player doesn't start to animate right away
            this._resetDomPlayerState();
            this._player.addEventListener('finish', function () {
                return _this._onFinish();
            });
        };
        /**
         * \@internal
         * @param {?} element
         * @param {?} keyframes
         * @param {?} options
         * @return {?}
         */
        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
            // jscompiler doesn't seem to know animate is a native property because it's not fully
            // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
            return element['animate'](keyframes, options);
        };
        Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
            /**
             * @return {?}
             */
            get: function () {
                return this._player;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        WebAnimationsPlayer.prototype.onStart = function (fn) {
            this._onStartFns.push(fn);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        WebAnimationsPlayer.prototype.onDone = function (fn) {
            this._onDoneFns.push(fn);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        WebAnimationsPlayer.prototype.onDestroy = function (fn) {
            this._onDestroyFns.push(fn);
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.play = function () {
            this.init();
            if (!this.hasStarted()) {
                this._onStartFns.forEach(function (fn) {
                    return fn();
                });
                this._onStartFns = [];
                this._started = true;
            }
            this._player.play();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.pause = function () {
            this.init();
            this._player.pause();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.finish = function () {
            this.init();
            this._onFinish();
            this._player.finish();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.reset = function () {
            this._resetDomPlayerState();
            this._destroyed = false;
            this._finished = false;
            this._started = false;
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
            if (this._player) {
                this._player.cancel();
            }
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.restart = function () {
            this.reset();
            this.play();
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.hasStarted = function () {
            return this._started;
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.destroy = function () {
            if (!this._destroyed) {
                this._resetDomPlayerState();
                this._onFinish();
                this._destroyed = true;
                this._onDestroyFns.forEach(function (fn) {
                    return fn();
                });
                this._onDestroyFns = [];
            }
        };
        /**
         * @param {?} p
         * @return {?}
         */
        WebAnimationsPlayer.prototype.setPosition = function (p) {
            this._player.currentTime = p * this.time;
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype.getPosition = function () {
            return this._player.currentTime / this.time;
        };
        /**
         * @return {?}
         */
        WebAnimationsPlayer.prototype._captureStyles = function () {
            var _this = this;
            var /** @type {?} */styles = {};
            if (this.hasStarted()) {
                Object.keys(this._finalKeyframe).forEach(function (prop) {
                    if (prop != 'offset') {
                        styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
                    }
                });
            }
            return styles;
        };
        return WebAnimationsPlayer;
    }();
    /**
     * @param {?} element
     * @param {?} prop
     * @return {?}
     */
    function _computeStyle(element, prop) {
        return window.getComputedStyle(element)[prop];
    }
    /**
     * @param {?} styles
     * @return {?}
     */
    function _copyKeyframeStyles(styles) {
        var /** @type {?} */newStyles = {};
        Object.keys(styles).forEach(function (prop) {
            if (prop != 'offset') {
                newStyles[prop] = styles[prop];
            }
        });
        return newStyles;
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var WebAnimationsDriver = function () {
        function WebAnimationsDriver() {}
        /**
         * @param {?} element
         * @param {?} keyframes
         * @param {?} duration
         * @param {?} delay
         * @param {?} easing
         * @param {?=} previousPlayers
         * @return {?}
         */
        WebAnimationsDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers) {
            if (previousPlayers === void 0) {
                previousPlayers = [];
            }
            var /** @type {?} */playerOptions = { 'duration': duration, 'delay': delay, 'fill': 'forwards' };
            // we check for this to avoid having a null|undefined value be present
            // for the easing (which results in an error for certain browsers #9752)
            if (easing) {
                playerOptions['easing'] = easing;
            }
            var /** @type {?} */previousWebAnimationPlayers = previousPlayers.filter(function (player) {
                return player instanceof WebAnimationsPlayer;
            });
            return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);
        };
        return WebAnimationsDriver;
    }();
    /**
     * @return {?}
     */
    function supportsWebAnimations() {
        return typeof Element !== 'undefined' && typeof Element.prototype['animate'] === 'function';
    }

    exports.AnimationDriver = AnimationDriver;
    exports.ɵAnimationEngine = AnimationEngine;
    exports.ɵAnimation = Animation;
    exports.ɵAnimationStyleNormalizer = AnimationStyleNormalizer;
    exports.ɵNoopAnimationStyleNormalizer = NoopAnimationStyleNormalizer;
    exports.ɵWebAnimationsStyleNormalizer = WebAnimationsStyleNormalizer;
    exports.ɵNoopAnimationDriver = NoopAnimationDriver;
    exports.ɵDomAnimationEngine = DomAnimationEngine;
    exports.ɵNoopAnimationEngine = NoopAnimationEngine;
    exports.ɵWebAnimationsDriver = WebAnimationsDriver;
    exports.ɵsupportsWebAnimations = supportsWebAnimations;
    exports.ɵWebAnimationsPlayer = WebAnimationsPlayer;

    Object.defineProperty(exports, '__esModule', { value: true });
});

/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/animations/browser')) : 'function' === 'function' && true ? $__System.registerDynamic('d', ['e', 'f', 'b'], false, function ($__require, $__exports, $__module) {
        if (typeof factory === 'function') {
            return factory.call($__exports, $__exports, $__require('e'), $__require('f'), $__require('b'));
        } else {
            return factory;
        }
    }) : factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}, global.ng.platformBrowser.animations = global.ng.platformBrowser.animations || {}), global.ng.core, global.ng.platformBrowser, global.ng.animations.browser);
})(this, function (exports, _angular_core, _angular_platformBrowser, _angular_animations_browser) {
    'use strict';

    var __extends = undefined && undefined.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * @license Angular v4.1.3
     * (c) 2010-2017 Google, Inc. https://angular.io/
     * License: MIT
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var AnimationRendererFactory = function () {
        /**
         * @param {?} delegate
         * @param {?} _engine
         * @param {?} _zone
         */
        function AnimationRendererFactory(delegate, _engine, _zone) {
            this.delegate = delegate;
            this._engine = _engine;
            this._zone = _zone;
        }
        /**
         * @param {?} hostElement
         * @param {?} type
         * @return {?}
         */
        AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {
            var _this = this;
            var /** @type {?} */delegate = this.delegate.createRenderer(hostElement, type);
            if (!hostElement || !type || !type.data || !type.data['animation']) return delegate;
            var /** @type {?} */namespaceId = type.id;
            var /** @type {?} */animationTriggers = type.data['animation'];
            animationTriggers.forEach(function (trigger) {
                return _this._engine.registerTrigger(trigger, namespaceify(namespaceId, trigger.name));
            });
            return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);
        };
        return AnimationRendererFactory;
    }();
    AnimationRendererFactory.decorators = [{ type: _angular_core.Injectable }];
    /**
     * @nocollapse
     */
    AnimationRendererFactory.ctorParameters = function () {
        return [{ type: _angular_core.RendererFactory2 }, { type: _angular_animations_browser.ɵAnimationEngine }, { type: _angular_core.NgZone }];
    };
    var AnimationRenderer = function () {
        /**
         * @param {?} delegate
         * @param {?} _engine
         * @param {?} _zone
         * @param {?} _namespaceId
         */
        function AnimationRenderer(delegate, _engine, _zone, _namespaceId) {
            this.delegate = delegate;
            this._engine = _engine;
            this._zone = _zone;
            this._namespaceId = _namespaceId;
            this.destroyNode = null;
            this._flushPromise = null;
            this.destroyNode = this.delegate.destroyNode ? function (n) {
                return delegate.destroyNode(n);
            } : null;
        }
        Object.defineProperty(AnimationRenderer.prototype, "data", {
            /**
             * @return {?}
             */
            get: function () {
                return this.delegate.data;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AnimationRenderer.prototype.destroy = function () {
            this.delegate.destroy();
        };
        /**
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        AnimationRenderer.prototype.createElement = function (name, namespace) {
            return this.delegate.createElement(name, namespace);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        AnimationRenderer.prototype.createComment = function (value) {
            return this.delegate.createComment(value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        AnimationRenderer.prototype.createText = function (value) {
            return this.delegate.createText(value);
        };
        /**
         * @param {?} selectorOrNode
         * @return {?}
         */
        AnimationRenderer.prototype.selectRootElement = function (selectorOrNode) {
            return this.delegate.selectRootElement(selectorOrNode);
        };
        /**
         * @param {?} node
         * @return {?}
         */
        AnimationRenderer.prototype.parentNode = function (node) {
            return this.delegate.parentNode(node);
        };
        /**
         * @param {?} node
         * @return {?}
         */
        AnimationRenderer.prototype.nextSibling = function (node) {
            return this.delegate.nextSibling(node);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */
        AnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {
            this.delegate.setAttribute(el, name, value, namespace);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */
        AnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {
            this.delegate.removeAttribute(el, name, namespace);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        AnimationRenderer.prototype.addClass = function (el, name) {
            this.delegate.addClass(el, name);
        };
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */
        AnimationRenderer.prototype.removeClass = function (el, name) {
            this.delegate.removeClass(el, name);
        };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?} flags
         * @return {?}
         */
        AnimationRenderer.prototype.setStyle = function (el, style, value, flags) {
            this.delegate.setStyle(el, style, value, flags);
        };
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} flags
         * @return {?}
         */
        AnimationRenderer.prototype.removeStyle = function (el, style, flags) {
            this.delegate.removeStyle(el, style, flags);
        };
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */
        AnimationRenderer.prototype.setValue = function (node, value) {
            this.delegate.setValue(node, value);
        };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */
        AnimationRenderer.prototype.appendChild = function (parent, newChild) {
            var _this = this;
            this._engine.onInsert(newChild, function () {
                return _this.delegate.appendChild(parent, newChild);
            });
            this._queueFlush();
        };
        /**
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */
        AnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
            var _this = this;
            this._engine.onInsert(newChild, function () {
                return _this.delegate.insertBefore(parent, newChild, refChild);
            });
            this._queueFlush();
        };
        /**
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */
        AnimationRenderer.prototype.removeChild = function (parent, oldChild) {
            var _this = this;
            this._engine.onRemove(oldChild, function () {
                // Note: if an component element has a leave animation, and the component
                // a host leave animation, the view engine will call `removeChild` for the parent
                // component renderer as well as for the child component renderer.
                // Therefore, we need to check if we already removed the element.
                if (_this.delegate.parentNode(oldChild)) {
                    _this.delegate.removeChild(parent, oldChild);
                }
            });
            this._queueFlush();
        };
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        AnimationRenderer.prototype.setProperty = function (el, name, value) {
            if (name.charAt(0) == '@') {
                this._engine.setProperty(el, namespaceify(this._namespaceId, name.substr(1)), value);
                this._queueFlush();
            } else {
                this.delegate.setProperty(el, name, value);
            }
        };
        /**
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        AnimationRenderer.prototype.listen = function (target, eventName, callback) {
            var _this = this;
            if (eventName.charAt(0) == '@') {
                var /** @type {?} */element = resolveElementFromTarget(target);
                var _a = parseTriggerCallbackName(eventName.substr(1)),
                    name = _a[0],
                    phase = _a[1];
                return this._engine.listen(element, namespaceify(this._namespaceId, name), phase, function (event) {
                    var /** @type {?} */e = event;
                    if (e.triggerName) {
                        e.triggerName = deNamespaceify(_this._namespaceId, e.triggerName);
                    }
                    _this._zone.run(function () {
                        return callback(event);
                    });
                });
            }
            return this.delegate.listen(target, eventName, callback);
        };
        /**
         * @return {?}
         */
        AnimationRenderer.prototype._queueFlush = function () {
            var _this = this;
            if (!this._flushPromise) {
                this._zone.runOutsideAngular(function () {
                    _this._flushPromise = Promise.resolve(null).then(function () {
                        _this._flushPromise = null;
                        _this._engine.flush();
                    });
                });
            }
        };
        return AnimationRenderer;
    }();
    /**
     * @param {?} target
     * @return {?}
     */
    function resolveElementFromTarget(target) {
        switch (target) {
            case 'body':
                return document.body;
            case 'document':
                return document;
            case 'window':
                return window;
            default:
                return target;
        }
    }
    /**
     * @param {?} triggerName
     * @return {?}
     */
    function parseTriggerCallbackName(triggerName) {
        var /** @type {?} */dotIndex = triggerName.indexOf('.');
        var /** @type {?} */trigger = triggerName.substring(0, dotIndex);
        var /** @type {?} */phase = triggerName.substr(dotIndex + 1);
        return [trigger, phase];
    }
    /**
     * @param {?} namespaceId
     * @param {?} value
     * @return {?}
     */
    function namespaceify(namespaceId, value) {
        return namespaceId + "#" + value;
    }
    /**
     * @param {?} namespaceId
     * @param {?} value
     * @return {?}
     */
    function deNamespaceify(namespaceId, value) {
        return value.replace(namespaceId + '#', '');
    }
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var InjectableAnimationEngine = function (_super) {
        __extends(InjectableAnimationEngine, _super);
        /**
         * @param {?} driver
         * @param {?} normalizer
         */
        function InjectableAnimationEngine(driver, normalizer) {
            return _super.call(this, driver, normalizer) || this;
        }
        return InjectableAnimationEngine;
    }(_angular_animations_browser.ɵDomAnimationEngine);
    InjectableAnimationEngine.decorators = [{ type: _angular_core.Injectable }];
    /**
     * @nocollapse
     */
    InjectableAnimationEngine.ctorParameters = function () {
        return [{ type: _angular_animations_browser.AnimationDriver }, { type: _angular_animations_browser.ɵAnimationStyleNormalizer }];
    };
    /**
     * @return {?}
     */
    function instantiateSupportedAnimationDriver() {
        if (_angular_animations_browser.ɵsupportsWebAnimations()) {
            return new _angular_animations_browser.ɵWebAnimationsDriver();
        }
        return new _angular_animations_browser.ɵNoopAnimationDriver();
    }
    /**
     * @return {?}
     */
    function instantiateDefaultStyleNormalizer() {
        return new _angular_animations_browser.ɵWebAnimationsStyleNormalizer();
    }
    /**
     * @param {?} renderer
     * @param {?} engine
     * @param {?} zone
     * @return {?}
     */
    function instantiateRendererFactory(renderer, engine, zone) {
        return new AnimationRendererFactory(renderer, engine, zone);
    }
    /**
     * Separate providers from the actual module so that we can do a local modification in Google3 to
     * include them in the BrowserModule.
     */
    var BROWSER_ANIMATIONS_PROVIDERS = [{ provide: _angular_animations_browser.AnimationDriver, useFactory: instantiateSupportedAnimationDriver }, { provide: _angular_animations_browser.ɵAnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer }, { provide: _angular_animations_browser.ɵAnimationEngine, useClass: InjectableAnimationEngine }, {
        provide: _angular_core.RendererFactory2,
        useFactory: instantiateRendererFactory,
        deps: [_angular_platformBrowser.ɵDomRendererFactory2, _angular_animations_browser.ɵAnimationEngine, _angular_core.NgZone]
    }];
    /**
     * Separate providers from the actual module so that we can do a local modification in Google3 to
     * include them in the BrowserTestingModule.
     */
    var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{ provide: _angular_animations_browser.ɵAnimationEngine, useClass: _angular_animations_browser.ɵNoopAnimationEngine }, {
        provide: _angular_core.RendererFactory2,
        useFactory: instantiateRendererFactory,
        deps: [_angular_platformBrowser.ɵDomRendererFactory2, _angular_animations_browser.ɵAnimationEngine, _angular_core.NgZone]
    }];
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * \@experimental Animation support is experimental.
     */
    var BrowserAnimationsModule = function () {
        function BrowserAnimationsModule() {}
        return BrowserAnimationsModule;
    }();
    BrowserAnimationsModule.decorators = [{ type: _angular_core.NgModule, args: [{
            imports: [_angular_platformBrowser.BrowserModule],
            providers: BROWSER_ANIMATIONS_PROVIDERS
        }] }];
    /**
     * @nocollapse
     */
    BrowserAnimationsModule.ctorParameters = function () {
        return [];
    };
    /**
     * \@experimental Animation support is experimental.
     */
    var NoopAnimationsModule = function () {
        function NoopAnimationsModule() {}
        return NoopAnimationsModule;
    }();
    NoopAnimationsModule.decorators = [{ type: _angular_core.NgModule, args: [{
            imports: [_angular_platformBrowser.BrowserModule],
            providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
        }] }];
    /**
     * @nocollapse
     */
    NoopAnimationsModule.ctorParameters = function () {
        return [];
    };

    exports.BrowserAnimationsModule = BrowserAnimationsModule;
    exports.NoopAnimationsModule = NoopAnimationsModule;
    exports.ɵAnimationRenderer = AnimationRenderer;
    exports.ɵAnimationRendererFactory = AnimationRendererFactory;
    exports.ɵe = BROWSER_ANIMATIONS_PROVIDERS;
    exports.ɵf = BROWSER_NOOP_ANIMATIONS_PROVIDERS;
    exports.ɵa = InjectableAnimationEngine;
    exports.ɵc = instantiateDefaultStyleNormalizer;
    exports.ɵd = instantiateRendererFactory;
    exports.ɵb = instantiateSupportedAnimationDriver;

    Object.defineProperty(exports, '__esModule', { value: true });
});

/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core")) : "function" == "function" && true ? $__System.registerDynamic("10", ["e"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("e"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core);
}(this, function (exports, _angular_core) {
  "use strict";
  function templateVisitAll(visitor, asts, context) {
    void 0 === context && (context = null);var result = [],
        visit = visitor.visit ? function (ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function (ast) {
      return ast.visit(visitor, context);
    };return asts.forEach(function (ast) {
      var astResult = visit(ast);astResult && result.push(astResult);
    }), result;
  }function splitNsName(elementName) {
    if (":" != elementName[0]) return [null, elementName];var colonIndex = elementName.indexOf(":", 1);if (colonIndex == -1) throw new Error('Unsupported format "' + elementName + '" expecting ":namespace:name"');return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }function isNgContainer(tagName) {
    return "ng-container" === splitNsName(tagName)[1];
  }function isNgContent(tagName) {
    return "ng-content" === splitNsName(tagName)[1];
  }function isNgTemplate(tagName) {
    return "ng-template" === splitNsName(tagName)[1];
  }function getNsPrefix(fullName) {
    return null === fullName ? null : splitNsName(fullName)[0];
  }function mergeNsAndName(prefix, localName) {
    return prefix ? ":" + prefix + ":" + localName : localName;
  }function getHtmlTagDefinition(tagName) {
    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
  }function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function () {
      for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];return m[1].toUpperCase();
    });
  }function splitAtColon(input, defaultValues) {
    return _splitAt(input, ":", defaultValues);
  }function splitAtPeriod(input, defaultValues) {
    return _splitAt(input, ".", defaultValues);
  }function _splitAt(input, character, defaultValues) {
    var characterIndex = input.indexOf(character);return characterIndex == -1 ? defaultValues : [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
  }function visitValue(value, visitor, context) {
    return Array.isArray(value) ? visitor.visitArray(value, context) : isStrictStringMap(value) ? visitor.visitStringMap(value, context) : null == value || "string" == typeof value || "number" == typeof value || "boolean" == typeof value ? visitor.visitPrimitive(value, context) : visitor.visitOther(value, context);
  }function isDefined(val) {
    return null !== val && void 0 !== val;
  }function noUndefined(val) {
    return void 0 === val ? null : val;
  }function syntaxError(msg) {
    var error = Error(msg);return error[ERROR_SYNTAX_ERROR] = !0, error;
  }function isSyntaxError(error) {
    return error[ERROR_SYNTAX_ERROR];
  }function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
  }function isStrictStringMap(obj) {
    return "object" == typeof obj && null !== obj && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }function utf8Encode(str) {
    for (var encoded = "", index = 0; index < str.length; index++) {
      var codePoint = str.charCodeAt(index);if (codePoint >= 55296 && codePoint <= 56319 && str.length > index + 1) {
        var low = str.charCodeAt(index + 1);low >= 56320 && low <= 57343 && (index++, codePoint = (codePoint - 55296 << 10) + low - 56320 + 65536);
      }codePoint <= 127 ? encoded += String.fromCharCode(codePoint) : codePoint <= 2047 ? encoded += String.fromCharCode(codePoint >> 6 & 31 | 192, 63 & codePoint | 128) : codePoint <= 65535 ? encoded += String.fromCharCode(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, 63 & codePoint | 128) : codePoint <= 2097151 && (encoded += String.fromCharCode(codePoint >> 18 & 7 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, 63 & codePoint | 128));
    }return encoded;
  }function _sanitizeIdentifier(name) {
    return name.replace(/\W/g, "_");
  }function identifierName(compileIdentifier) {
    if (!compileIdentifier || !compileIdentifier.reference) return null;var ref = compileIdentifier.reference;if (ref instanceof StaticSymbol) return ref.name;if (ref.__anonymousType) return ref.__anonymousType;var identifier = _angular_core.ɵstringify(ref);return identifier.indexOf("(") >= 0 ? (identifier = "anonymous_" + _anonymousTypeIndex++, ref.__anonymousType = identifier) : identifier = _sanitizeIdentifier(identifier), identifier;
  }function identifierModuleUrl(compileIdentifier) {
    var ref = compileIdentifier.reference;return ref instanceof StaticSymbol ? ref.filePath : _angular_core.ɵreflector.importUri(ref);
  }function viewClassName(compType, embeddedTemplateIndex) {
    return "View_" + identifierName({ reference: compType }) + "_" + embeddedTemplateIndex;
  }function rendererTypeName(compType) {
    return "RenderType_" + identifierName({ reference: compType });
  }function hostViewClassName(compType) {
    return "HostView_" + identifierName({ reference: compType });
  }function dirWrapperClassName(dirType) {
    return "Wrapper_" + identifierName({ reference: dirType });
  }function componentFactoryName(compType) {
    return identifierName({ reference: compType }) + "NgFactory";
  }function tokenName(token) {
    return null != token.value ? _sanitizeIdentifier(token.value) : identifierName(token.identifier);
  }function tokenReference(token) {
    return null != token.identifier ? token.identifier.reference : token.value;
  }function createHostComponentMeta(hostTypeReference, compMeta, hostViewType) {
    var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();return CompileDirectiveMetadata.create({ isHost: !0, type: { reference: hostTypeReference, diDeps: [], lifecycleHooks: [] }, template: new CompileTemplateMetadata({ encapsulation: _angular_core.ViewEncapsulation.None, template: template, templateUrl: "", styles: [], styleUrls: [], ngContentSelectors: [], animations: [], isInline: !0, externalStylesheets: [], interpolation: null }), exportAs: null, changeDetection: _angular_core.ChangeDetectionStrategy.Default, inputs: [], outputs: [], host: {}, isComponent: !0, selector: "*", providers: [], viewProviders: [], queries: [], viewQueries: [], componentViewType: hostViewType, rendererType: { id: "__Host__", encapsulation: _angular_core.ViewEncapsulation.None, styles: [], data: {} }, entryComponents: [], componentFactory: null });
  }function _normalizeArray(obj) {
    return obj || [];
  }function flatten(list) {
    return list.reduce(function (flat, item) {
      var flatItem = Array.isArray(item) ? flatten(item) : item;return flat.concat(flatItem);
    }, []);
  }function sourceUrl(url) {
    return url.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, "ng:///");
  }function templateSourceUrl(ngModuleType, compMeta, templateMeta) {
    var url;return url = templateMeta.isInline ? compMeta.type.reference instanceof StaticSymbol ? compMeta.type.reference.filePath + "." + compMeta.type.reference.name + ".html" : identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".html" : templateMeta.templateUrl, sourceUrl(url);
  }function sharedStylesheetJitUrl(meta, id) {
    var pathParts = meta.moduleUrl.split(/\/\\/g),
        baseName = pathParts[pathParts.length - 1];return sourceUrl("css/" + id + baseName + ".ngstyle.js");
  }function ngModuleJitUrl(moduleMeta) {
    return sourceUrl(identifierName(moduleMeta.type) + "/module.ngfactory.js");
  }function templateJitUrl(ngModuleType, compMeta) {
    return sourceUrl(identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".ngfactory.js");
  }function isWhitespace(code) {
    return code >= $TAB && code <= $SPACE || code == $NBSP;
  }function isDigit(code) {
    return $0 <= code && code <= $9;
  }function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }function CompilerInjectable() {
    return function (x) {
      return x;
    };
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function assertArrayOfStrings(identifier, value) {
    if (_angular_core.isDevMode() && null != value) {
      if (!Array.isArray(value)) throw new Error("Expected '" + identifier + "' to be an array of strings.");for (var i = 0; i < value.length; i += 1) if ("string" != typeof value[i]) throw new Error("Expected '" + identifier + "' to be an array of strings.");
    }
  }function assertInterpolationSymbols(identifier, value) {
    if (!(null == value || Array.isArray(value) && 2 == value.length)) throw new Error("Expected '" + identifier + "' to be an array, [start, end].");if (_angular_core.isDevMode() && null != value) {
      var start_1 = value[0],
          end_1 = value[1];INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
        if (regexp.test(start_1) || regexp.test(end_1)) throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
      });
    }
  }function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, String.fromCharCode(code));
  }function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
  }function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
  }function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
  }function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
  }function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, "");
  }function newErrorToken(index, message) {
    return new Token(index, TokenType.Error, 0, message);
  }function isIdentifierStart(code) {
    return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
  }function isIdentifier(input) {
    if (0 == input.length) return !1;var scanner = new _Scanner(input);if (!isIdentifierStart(scanner.peek)) return !1;for (scanner.advance(); scanner.peek !== $EOF;) {
      if (!isIdentifierPart(scanner.peek)) return !1;scanner.advance();
    }return !0;
  }function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
  }function isExponentStart(code) {
    return code == $e || code == $E;
  }function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
  }function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
  }function unescape(code) {
    switch (code) {case $n:
        return $LF;case $f:
        return $FF;case $r:
        return $CR;case $t:
        return $TAB;case $v:
        return $VTAB;default:
        return code;}
  }function parseIntAutoRadix(text) {
    var result = parseInt(text);if (isNaN(result)) throw new Error("Invalid integer literal when parsing " + text);return result;
  }function _createInterpolateRegExp(config) {
    var pattern = escapeRegExp(config.start) + "([\\s\\S]*?)" + escapeRegExp(config.end);return new RegExp(pattern, "g");
  }function typeSourceSpan(kind, type) {
    var moduleUrl = identifierModuleUrl(type),
        sourceFileName = null != moduleUrl ? "in " + kind + " " + identifierName(type) + " in " + moduleUrl : "in " + kind + " " + identifierName(type),
        sourceFile = new ParseSourceFile("", sourceFileName);return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
  }function visitAll(visitor, nodes, context) {
    void 0 === context && (context = null);var result = [],
        visit = visitor.visit ? function (ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function (ast) {
      return ast.visit(visitor, context);
    };return nodes.forEach(function (ast) {
      var astResult = visit(ast);astResult && result.push(astResult);
    }), result;
  }function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
    return void 0 === tokenizeExpansionForms && (tokenizeExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
  }function _unexpectedCharacterErrorMsg(charCode) {
    var char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);return 'Unexpected character "' + char + '"';
  }function _unknownEntityErrorMsg(entitySrc) {
    return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
  }function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
  }function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
  }function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
  }function isDigitEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
  }function isNamedEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
  }function isExpansionFormStart(input, offset, interpolationConfig) {
    var isInterpolationStart = !!interpolationConfig && input.indexOf(interpolationConfig.start, offset) == offset;return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
  }function isExpansionCaseStart(peek) {
    return peek === $EQ || isAsciiLetter(peek);
  }function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
  }function mergeTextTokens(srcTokens) {
    for (var dstTokens = [], lastDstToken = void 0, i = 0; i < srcTokens.length; i++) {
      var token = srcTokens[i];lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT ? (lastDstToken.parts[0] += token.parts[0], lastDstToken.sourceSpan.end = token.sourceSpan.end) : (lastDstToken = token, dstTokens.push(lastDstToken));
    }return dstTokens;
  }function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
  }function createI18nMessageFactory(interpolationConfig) {
    var visitor = new _I18nVisitor(_expParser, interpolationConfig);return function (nodes, meaning, description, id) {
      return visitor.toI18nMessage(nodes, meaning, description, id);
    };
  }function _extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[2];
  }function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);return visitor.extract(nodes, interpolationConfig);
  }function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);return visitor.merge(nodes, translations, interpolationConfig);
  }function _isOpeningComment(n) {
    return !!(n instanceof Comment && n.value && n.value.startsWith("i18n"));
  }function _isClosingComment(n) {
    return !!(n instanceof Comment && n.value && "/i18n" === n.value);
  }function _getI18nAttr(p) {
    return p.attrs.find(function (attr) {
      return attr.name === _I18N_ATTR;
    }) || null;
  }function _parseMessageMeta(i18n) {
    if (!i18n) return { meaning: "", description: "", id: "" };var idIndex = i18n.indexOf(ID_SEPARATOR),
        descIndex = i18n.indexOf(MEANING_SEPARATOR),
        _a = idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ""],
        meaningAndDesc = _a[0],
        id = _a[1],
        _b = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ["", meaningAndDesc],
        meaning = _b[0],
        description = _b[1];return { meaning: meaning, description: description, id: id };
  }function getXmlTagDefinition(tagName) {
    return _TAG_DEFINITION;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function digest(message) {
    return message.id || sha1(serializeNodes(message.nodes).join("") + ("[" + message.meaning + "]"));
  }function decimalDigest(message) {
    if (message.id) return message.id;var visitor = new _SerializerIgnoreIcuExpVisitor(),
        parts = message.nodes.map(function (a) {
      return a.visit(visitor, null);
    });return computeMsgId(parts.join(""), message.meaning);
  }function serializeNodes(nodes) {
    return nodes.map(function (a) {
      return a.visit(serializerVisitor, null);
    });
  }function sha1(str) {
    var utf8 = utf8Encode(str),
        words32 = stringToWords32(utf8, Endian.Big),
        len = 8 * utf8.length,
        w = new Array(80),
        _a = [1732584193, 4023233417, 2562383102, 271733878, 3285377520],
        a = _a[0],
        b = _a[1],
        c = _a[2],
        d = _a[3],
        e = _a[4];words32[len >> 5] |= 128 << 24 - len % 32, words32[(len + 64 >> 9 << 4) + 15] = len;for (var i = 0; i < words32.length; i += 16) {
      for (var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4], j = 0; j < 80; j++) {
        j < 16 ? w[j] = words32[i + j] : w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);var _c = fk(j, b, c, d),
            f = _c[0],
            k = _c[1],
            temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);_d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
      }_e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
    }return byteStringToHexString(words32ToByteString([a, b, c, d, e]));var _d, _e;
  }function fk(index, b, c, d) {
    return index < 20 ? [b & c | ~b & d, 1518500249] : index < 40 ? [b ^ c ^ d, 1859775393] : index < 60 ? [b & c | b & d | c & d, 2400959708] : [b ^ c ^ d, 3395469782];
  }function fingerprint(str) {
    var utf8 = utf8Encode(str),
        _a = [hash32(utf8, 0), hash32(utf8, 102072)],
        hi = _a[0],
        lo = _a[1];return 0 != hi || 0 != lo && 1 != lo || (hi = 319790063 ^ hi, lo ^= -1801410264), [hi, lo];
  }function computeMsgId(msg, meaning) {
    var _a = fingerprint(msg),
        hi = _a[0],
        lo = _a[1];if (meaning) {
      var _b = fingerprint(meaning),
          him = _b[0],
          lom = _b[1];_c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];
    }return byteStringToDecString(words32ToByteString([2147483647 & hi, lo]));var _c;
  }function hash32(str, c) {
    var i,
        _a = [2654435769, 2654435769],
        a = _a[0],
        b = _a[1],
        len = str.length;for (i = 0; i + 12 <= len; i += 12) a = add32(a, wordAt(str, i, Endian.Little)), b = add32(b, wordAt(str, i + 4, Endian.Little)), c = add32(c, wordAt(str, i + 8, Endian.Little)), _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];return a = add32(a, wordAt(str, i, Endian.Little)), b = add32(b, wordAt(str, i + 4, Endian.Little)), c = add32(c, len), c = add32(c, wordAt(str, i + 8, Endian.Little) << 8), mix([a, b, c])[2];var _b;
  }function mix(_a) {
    var a = _a[0],
        b = _a[1],
        c = _a[2];return a = sub32(a, b), a = sub32(a, c), a ^= c >>> 13, b = sub32(b, c), b = sub32(b, a), b ^= a << 8, c = sub32(c, a), c = sub32(c, b), c ^= b >>> 13, a = sub32(a, b), a = sub32(a, c), a ^= c >>> 12, b = sub32(b, c), b = sub32(b, a), b ^= a << 16, c = sub32(c, a), c = sub32(c, b), c ^= b >>> 5, a = sub32(a, b), a = sub32(a, c), a ^= c >>> 3, b = sub32(b, c), b = sub32(b, a), b ^= a << 10, c = sub32(c, a), c = sub32(c, b), c ^= b >>> 15, [a, b, c];
  }function add32(a, b) {
    return add32to64(a, b)[1];
  }function add32to64(a, b) {
    var low = (65535 & a) + (65535 & b),
        high = (a >>> 16) + (b >>> 16) + (low >>> 16);return [high >>> 16, high << 16 | 65535 & low];
  }function add64(_a, _b) {
    var ah = _a[0],
        al = _a[1],
        bh = _b[0],
        bl = _b[1],
        _c = add32to64(al, bl),
        carry = _c[0],
        l = _c[1],
        h = add32(add32(ah, bh), carry);return [h, l];
  }function sub32(a, b) {
    var low = (65535 & a) - (65535 & b),
        high = (a >> 16) - (b >> 16) + (low >> 16);return high << 16 | 65535 & low;
  }function rol32(a, count) {
    return a << count | a >>> 32 - count;
  }function rol64(_a, count) {
    var hi = _a[0],
        lo = _a[1],
        h = hi << count | lo >>> 32 - count,
        l = lo << count | hi >>> 32 - count;return [h, l];
  }function stringToWords32(str, endian) {
    for (var words32 = Array(str.length + 3 >>> 2), i = 0; i < words32.length; i++) words32[i] = wordAt(str, 4 * i, endian);return words32;
  }function byteAt(str, index) {
    return index >= str.length ? 0 : 255 & str.charCodeAt(index);
  }function wordAt(str, index, endian) {
    var word = 0;if (endian === Endian.Big) for (var i = 0; i < 4; i++) word += byteAt(str, index + i) << 24 - 8 * i;else for (var i = 0; i < 4; i++) word += byteAt(str, index + i) << 8 * i;return word;
  }function words32ToByteString(words32) {
    return words32.reduce(function (str, word) {
      return str + word32ToByteString(word);
    }, "");
  }function word32ToByteString(word) {
    for (var str = "", i = 0; i < 4; i++) str += String.fromCharCode(word >>> 8 * (3 - i) & 255);return str;
  }function byteStringToHexString(str) {
    for (var hex = "", i = 0; i < str.length; i++) {
      var b = byteAt(str, i);hex += (b >>> 4).toString(16) + (15 & b).toString(16);
    }return hex.toLowerCase();
  }function byteStringToDecString(str) {
    for (var decimal = "", toThePower = "1", i = str.length - 1; i >= 0; i--) decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower)), toThePower = numberTimesBigInt(256, toThePower);return decimal.split("").reverse().join("");
  }function addBigInt(x, y) {
    for (var sum = "", len = Math.max(x.length, y.length), i = 0, carry = 0; i < len || carry; i++) {
      var tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);tmpSum >= 10 ? (carry = 1, sum += tmpSum - 10) : (carry = 0, sum += tmpSum);
    }return sum;
  }function numberTimesBigInt(num, b) {
    for (var product = "", bToThePower = b; 0 !== num; num >>>= 1) 1 & num && (product = addBigInt(product, bToThePower)), bToThePower = addBigInt(bToThePower, bToThePower);return product;
  }function serialize(nodes) {
    return nodes.map(function (node) {
      return node.visit(_visitor);
    }).join("");
  }function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce(function (text, entry) {
      return text.replace(entry[0], entry[1]);
    }, text);
  }function getCtypeForTag(tag) {
    switch (tag.toLowerCase()) {case "br":
        return "lb";case "img":
        return "image";default:
        return "x-" + tag;}
  }function getTypeForTag(tag) {
    switch (tag.toLowerCase()) {case "br":case "b":case "i":case "u":
        return "fmt";case "img":
        return "image";case "a":
        return "link";default:
        return "other";}
  }function digest$1(message) {
    return decimalDigest(message);
  }function toPublicName(internalName) {
    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
  }function createLazyProperty(messages, id, valueFn) {
    Object.defineProperty(messages, id, { configurable: !0, enumerable: !0, get: function () {
        var value = valueFn();return Object.defineProperty(messages, id, { enumerable: !0, value: value }), value;
      }, set: function (_) {
        throw new Error("Could not overwrite an XTB translation");
      } });
  }function createSerializer(format) {
    switch (format = (format || "xlf").toLowerCase()) {case "xmb":
        return new Xmb();case "xtb":
        return new Xtb();case "xliff2":case "xlf2":
        return new Xliff2();case "xliff":case "xlf":default:
        return new Xliff();}
  }function assetUrl(pkg, path, type) {
    return void 0 === path && (path = null), void 0 === type && (type = "src"), null == path ? "@angular/" + pkg : "@angular/" + pkg + "/" + type + "/" + path;
  }function resolveIdentifier(identifier) {
    var name = identifier.name;return _angular_core.ɵreflector.resolveIdentifier(name, identifier.moduleUrl, null, identifier.runtime);
  }function createIdentifier(identifier) {
    return { reference: resolveIdentifier(identifier) };
  }function identifierToken(identifier) {
    return { identifier: identifier };
  }function createIdentifierToken(identifier) {
    return identifierToken(createIdentifier(identifier));
  }function expandNodes(nodes) {
    var expander = new _Expander();return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
  }function _expandPluralForm(ast, errors) {
    var children = ast.cases.map(function (c) {
      PLURAL_CASES.indexOf(c.value) != -1 || c.value.match(/^=\d+$/) || errors.push(new ExpansionError(c.valueSourceSpan, 'Plural cases should be "=<number>" or one of ' + PLURAL_CASES.join(", ")));var expansionResult = expandNodes(c.expression);return errors.push.apply(errors, expansionResult.errors), new Element("ng-template", [new Attribute$1("ngPluralCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    }),
        switchAttr = new Attribute$1("[ngPlural]", ast.switchValue, ast.switchValueSourceSpan);return new Element("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }function _expandDefaultForm(ast, errors) {
    var children = ast.cases.map(function (c) {
      var expansionResult = expandNodes(c.expression);return errors.push.apply(errors, expansionResult.errors), "other" === c.value ? new Element("ng-template", [new Attribute$1("ngSwitchDefault", "", c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan) : new Element("ng-template", [new Attribute$1("ngSwitchCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    }),
        switchAttr = new Attribute$1("[ngSwitch]", ast.switchValue, ast.switchValueSourceSpan);return new Element("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }function _transformProvider(provider, _a) {
    var useExisting = _a.useExisting,
        useValue = _a.useValue,
        deps = _a.deps;return { token: provider.token, useClass: provider.useClass, useExisting: useExisting, useFactory: provider.useFactory, useValue: useValue, deps: deps, multi: provider.multi };
  }function _transformProviderAst(provider, _a) {
    var eager = _a.eager,
        providers = _a.providers;return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
  }function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var providersByToken = new Map();directives.forEach(function (directive) {
      var dirProvider = { token: { identifier: directive.type }, useClass: directive.type };_resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, !0, sourceSpan, targetErrors, providersByToken);
    });var directivesWithComponentFirst = directives.filter(function (dir) {
      return dir.isComponent;
    }).concat(directives.filter(function (dir) {
      return !dir.isComponent;
    }));return directivesWithComponentFirst.forEach(function (directive) {
      _resolveProviders(directive.providers, ProviderAstType.PublicService, !1, sourceSpan, targetErrors, providersByToken), _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, !1, sourceSpan, targetErrors, providersByToken);
    }), providersByToken;
  }function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function (provider) {
      var resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));if (null != resolvedProvider && !!resolvedProvider.multiProvider != !!provider.multi && targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan)), resolvedProvider) provider.multi || (resolvedProvider.providers.length = 0), resolvedProvider.providers.push(provider);else {
        var lifecycleHooks = provider.token.identifier && provider.token.identifier.lifecycleHooks ? provider.token.identifier.lifecycleHooks : [],
            isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan), targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
      }
    });
  }function _getViewQueries(component) {
    var viewQueryId = 1,
        viewQueries = new Map();return component.viewQueries && component.viewQueries.forEach(function (query) {
      return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ });
    }), viewQueries;
  }function _getContentQueries(contentQueryStartId, directives) {
    var contentQueryId = contentQueryStartId,
        contentQueries = new Map();return directives.forEach(function (directive, directiveIndex) {
      directive.queries && directive.queries.forEach(function (query) {
        return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ });
      });
    }), contentQueries;
  }function _addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function (token) {
      var entry = map.get(tokenReference(token));entry || (entry = [], map.set(tokenReference(token), entry)), entry.push(query);
    });
  }function isStyleUrlResolvable(url) {
    if (null == url || 0 === url.length || "/" == url[0]) return !1;var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);return null === schemeMatch || "package" == schemeMatch[1] || "asset" == schemeMatch[1];
  }function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [],
        modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, "").replace(CSS_IMPORT_REGEXP, function () {
      for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];var url = m[1] || m[2];return isStyleUrlResolvable(url) ? (foundUrls.push(resolver.resolve(baseUrl, url)), "") : m[0];
    });return new StyleWithImports(modifiedCssText, foundUrls);
  }function _isAnimationLabel(name) {
    return "@" == name[0];
  }function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
    var ctxs = [];return CssSelector.parse(selector).forEach(function (selector) {
      var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames(),
          notElementNames = new Set(selector.notSelectors.filter(function (selector) {
        return selector.isElementSelector();
      }).map(function (selector) {
        return selector.element;
      })),
          possibleElementNames = elementNames.filter(function (elementName) {
        return !notElementNames.has(elementName);
      });ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) {
        return registry.securityContext(elementName, propName, isAttribute);
      }));
    }), 0 === ctxs.length ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
  }function preparseElement(ast) {
    var selectAttr = null,
        hrefAttr = null,
        relAttr = null,
        nonBindable = !1,
        projectAs = null;ast.attrs.forEach(function (attr) {
      var lcAttrName = attr.name.toLowerCase();lcAttrName == NG_CONTENT_SELECT_ATTR ? selectAttr = attr.value : lcAttrName == LINK_STYLE_HREF_ATTR ? hrefAttr = attr.value : lcAttrName == LINK_STYLE_REL_ATTR ? relAttr = attr.value : attr.name == NG_NON_BINDABLE_ATTR ? nonBindable = !0 : attr.name == NG_PROJECT_AS && attr.value.length > 0 && (projectAs = attr.value);
    }), selectAttr = normalizeNgContentSelect(selectAttr);var nodeName = ast.name.toLowerCase(),
        type = PreparsedElementType.OTHER;return isNgContent(nodeName) ? type = PreparsedElementType.NG_CONTENT : nodeName == STYLE_ELEMENT ? type = PreparsedElementType.STYLE : nodeName == SCRIPT_ELEMENT ? type = PreparsedElementType.SCRIPT : nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE && (type = PreparsedElementType.STYLESHEET), new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }function normalizeNgContentSelect(selectAttr) {
    return null === selectAttr || 0 === selectAttr.length ? "*" : selectAttr;
  }function warnOnlyOnce(warnings) {
    return function (error) {
      return warnings.indexOf(error.msg) === -1 || (warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1, warningCounts[error.msg] <= 1);
    };
  }function splitClasses(classAttrValue) {
    return classAttrValue.trim().split(/\s+/g);
  }function createElementCssSelector(elementName, attributes) {
    var cssSelector = new CssSelector(),
        elNameNoNs = splitNsName(elementName)[1];cssSelector.setElement(elNameNoNs);for (var i = 0; i < attributes.length; i++) {
      var attrName = attributes[i][0],
          attrNameNoNs = splitNsName(attrName)[1],
          attrValue = attributes[i][1];if (cssSelector.addAttribute(attrNameNoNs, attrValue), attrName.toLowerCase() == CLASS_ATTR) {
        var classes = splitClasses(attrValue);classes.forEach(function (className) {
          return cssSelector.addClassName(className);
        });
      }
    }return cssSelector;
  }function _isEmptyTextNode(node) {
    return node instanceof Text && 0 == node.value.trim().length;
  }function removeSummaryDuplicates(items) {
    var map = new Map();return items.forEach(function (item) {
      map.get(item.type.reference) || map.set(item.type.reference, item);
    }), Array.from(map.values());
  }function isEmptyExpression(ast) {
    return ast instanceof ASTWithSource && (ast = ast.ast), ast instanceof EmptyExpr;
  }function isTemplate(el, enableLegacyTemplate, reportDeprecation) {
    if (isNgTemplate(el.name)) return !0;var tagNoNs = splitNsName(el.name)[1];return !(tagNoNs.toLowerCase() !== TEMPLATE_ELEMENT || !enableLegacyTemplate || tagNoNs.toLowerCase() !== TEMPLATE_ELEMENT) && (reportDeprecation(TEMPLATE_ELEMENT_DEPRECATION_WARNING, el.sourceSpan), !0);
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function createUrlResolverWithoutPackagePrefix() {
    return new UrlResolver();
  }function createOfflineCompileUrlResolver() {
    return new UrlResolver(".");
  }function getUrlScheme(url) {
    var match = _split(url);return match && match[_ComponentIndex.Scheme] || "";
  }function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];return null != opt_scheme && out.push(opt_scheme + ":"), null != opt_domain && (out.push("//"), null != opt_userInfo && out.push(opt_userInfo + "@"), out.push(opt_domain), null != opt_port && out.push(":" + opt_port)), null != opt_path && out.push(opt_path), null != opt_queryData && out.push("?" + opt_queryData), null != opt_fragment && out.push("#" + opt_fragment), out.join("");
  }function _split(uri) {
    return uri.match(_splitRe);
  }function _removeDotSegments(path) {
    if ("/" == path) return "/";for (var leadingSlash = "/" == path[0] ? "/" : "", trailingSlash = "/" === path[path.length - 1] ? "/" : "", segments = path.split("/"), out = [], up = 0, pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];switch (segment) {case "":case ".":
          break;case "..":
          out.length > 0 ? out.pop() : up++;break;default:
          out.push(segment);}
    }if ("" == leadingSlash) {
      for (; up-- > 0;) out.unshift("..");0 === out.length && out.push(".");
    }return leadingSlash + out.join("/") + trailingSlash;
  }function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];return path = null == path ? "" : _removeDotSegments(path), parts[_ComponentIndex.Path] = path, _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url)),
        baseParts = _split(base);if (null != parts[_ComponentIndex.Scheme]) return _joinAndCanonicalizePath(parts);parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) null == parts[i] && (parts[i] = baseParts[i]);if ("/" == parts[_ComponentIndex.Path][0]) return _joinAndCanonicalizePath(parts);var path = baseParts[_ComponentIndex.Path];null == path && (path = "/");var index = path.lastIndexOf("/");return path = path.substring(0, index + 1) + parts[_ComponentIndex.Path], parts[_ComponentIndex.Path] = path, _joinAndCanonicalizePath(parts);
  }function isDirectiveMetadata(type) {
    return type instanceof _angular_core.Directive;
  }function findLast(arr, condition) {
    for (var i = arr.length - 1; i >= 0; i--) if (condition(arr[i])) return arr[i];return null;
  }function ngfactoryFilePath(filePath) {
    var urlWithSuffix = splitTypescriptSuffix(filePath);return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
  }function stripNgFactory(filePath) {
    return filePath.replace(NG_FACTORY, ".");
  }function isNgFactoryFile(filePath) {
    return NG_FACTORY.test(filePath);
  }function splitTypescriptSuffix(path) {
    if (path.endsWith(".d.ts")) return [path.slice(0, -5), ".ts"];var lastDot = path.lastIndexOf(".");return lastDot !== -1 ? [path.substring(0, lastDot), path.substring(lastDot)] : [path, ""];
  }function summaryFileName(fileName) {
    var fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, "");return fileNameWithoutSuffix + ".ngsummary.json";
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function hasLifecycleHook(hook, token) {
    return _angular_core.ɵreflector.hasLifecycleHook(token, getHookName(hook));
  }function getHookName(hook) {
    switch (hook) {case _angular_core.ɵLifecycleHooks.OnInit:
        return "ngOnInit";case _angular_core.ɵLifecycleHooks.OnDestroy:
        return "ngOnDestroy";case _angular_core.ɵLifecycleHooks.DoCheck:
        return "ngDoCheck";case _angular_core.ɵLifecycleHooks.OnChanges:
        return "ngOnChanges";case _angular_core.ɵLifecycleHooks.AfterContentInit:
        return "ngAfterContentInit";case _angular_core.ɵLifecycleHooks.AfterContentChecked:
        return "ngAfterContentChecked";case _angular_core.ɵLifecycleHooks.AfterViewInit:
        return "ngAfterViewInit";case _angular_core.ɵLifecycleHooks.AfterViewChecked:
        return "ngAfterViewChecked";}
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function _isNgModuleMetadata(obj) {
    return obj instanceof _angular_core.NgModule;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function _isPipeMetadata(type) {
    return type instanceof _angular_core.Pipe;
  }function flattenArray(tree, out) {
    if (void 0 === out && (out = []), tree) for (var i = 0; i < tree.length; i++) {
      var item = _angular_core.resolveForwardRef(tree[i]);Array.isArray(item) ? flattenArray(item, out) : out.push(item);
    }return out;
  }function dedupeArray(array) {
    return array ? Array.from(new Set(array)) : [];
  }function flattenAndDedupeArray(tree) {
    return dedupeArray(flattenArray(tree));
  }function isValidType(value) {
    return value instanceof StaticSymbol || value instanceof _angular_core.Type;
  }function componentModuleUrl(reflector, type, cmpMetadata) {
    if (type instanceof StaticSymbol) return reflector.resourceUri(type);var moduleId = cmpMetadata.moduleId;if ("string" == typeof moduleId) {
      var scheme = getUrlScheme(moduleId);return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
    }if (null !== moduleId && void 0 !== moduleId) throw syntaxError('moduleId should be a string in "' + stringifyType(type) + "\". See https://goo.gl/wIDDiL for more information.\nIf you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");return reflector.importUri(type);
  }function extractIdentifiers(value, targetIdentifiers) {
    visitValue(value, new _CompileValueConverter(), targetIdentifiers);
  }function stringifyType(type) {
    return type instanceof StaticSymbol ? type.name + " in " + type.filePath : _angular_core.ɵstringify(type);
  }function componentStillLoadingError(compType) {
    var error = Error("Can't compile synchronously as " + _angular_core.ɵstringify(compType) + " is still being loaded!");return error[_angular_core.ɵERROR_COMPONENT_TYPE] = compType, error;
  }function findReadVarNames(stmts) {
    var visitor = new _ReadVarVisitor();return visitor.visitAllStatements(stmts, null), visitor.varNames;
  }function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {
    if (!sourceSpan) return stmt;var transformer = new _ApplySourceSpanTransformer(sourceSpan);return stmt.visitStatement(transformer, null);
  }function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {
    if (!sourceSpan) return expr;var transformer = new _ApplySourceSpanTransformer(sourceSpan);return expr.visitExpression(transformer, null);
  }function variable(name, type, sourceSpan) {
    return new ReadVarExpr(name, type, sourceSpan);
  }function importExpr(id, typeParams, sourceSpan) {
    return void 0 === typeParams && (typeParams = null), new ExternalExpr(id, null, typeParams, sourceSpan);
  }function importType(id, typeParams, typeModifiers) {
    return void 0 === typeParams && (typeParams = null), void 0 === typeModifiers && (typeModifiers = null), null != id ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;
  }function expressionType(expr, typeModifiers) {
    return void 0 === typeModifiers && (typeModifiers = null), null != expr ? new ExpressionType(expr, typeModifiers) : null;
  }function literalArr(values, type, sourceSpan) {
    return new LiteralArrayExpr(values, type, sourceSpan);
  }function literalMap(values, type, quoted) {
    return void 0 === type && (type = null), void 0 === quoted && (quoted = !1), new LiteralMapExpr(values.map(function (entry) {
      return new LiteralMapEntry(entry[0], entry[1], quoted);
    }), type, null);
  }function not(expr, sourceSpan) {
    return new NotExpr(expr, sourceSpan);
  }function fn(params, body, type, sourceSpan) {
    return new FunctionExpr(params, body, type, sourceSpan);
  }function literal(value, type, sourceSpan) {
    return new LiteralExpr(value, type, sourceSpan);
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function createClassStmt(config) {
    var parentArgs = config.parentArgs || [],
        superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [],
        builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]),
        ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));return new ClassStmt(config.name, config.parent || null, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || [], config.sourceSpan);
  }function concatClassBuilderParts(builders) {
    return { fields: [].concat.apply([], builders.map(function (builder) {
        return builder.fields || [];
      })), methods: [].concat.apply([], builders.map(function (builder) {
        return builder.methods || [];
      })), getters: [].concat.apply([], builders.map(function (builder) {
        return builder.getters || [];
      })), ctorStmts: [].concat.apply([], builders.map(function (builder) {
        return builder.ctorStmts || [];
      })) };
  }function convertValueToOutputAst(value, type) {
    return void 0 === type && (type = null), visitValue(value, new _ValueOutputAstTransformer(), type);
  }function createDiTokenExpression(token) {
    return null != token.value ? literal(token.value) : importExpr(token.identifier);
  }function toBase64String(value) {
    var b64 = "";value = utf8Encode(value);for (var i = 0; i < value.length;) {
      var i1 = value.charCodeAt(i++),
          i2 = value.charCodeAt(i++),
          i3 = value.charCodeAt(i++);b64 += toBase64Digit(i1 >> 2), b64 += toBase64Digit((3 & i1) << 4 | (isNaN(i2) ? 0 : i2 >> 4)), b64 += isNaN(i2) ? "=" : toBase64Digit((15 & i2) << 2 | i3 >> 6), b64 += isNaN(i2) || isNaN(i3) ? "=" : toBase64Digit(63 & i3);
    }return b64;
  }function toBase64VLQ(value) {
    value = value < 0 ? (-value << 1) + 1 : value << 1;var out = "";do {
      var digit = 31 & value;value >>= 5, value > 0 && (digit = 32 | digit), out += toBase64Digit(digit);
    } while (value > 0);return out;
  }function toBase64Digit(value) {
    if (value < 0 || value >= 64) throw new Error("Can only encode value in the range [0, 63]");return B64_DIGITS[value];
  }function escapeIdentifier(input, escapeDollar, alwaysQuote) {
    if (void 0 === alwaysQuote && (alwaysQuote = !0), null == input) return null;var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
      for (var match = [], _i = 0; _i < arguments.length; _i++) match[_i] = arguments[_i];return "$" == match[0] ? escapeDollar ? "\\$" : "$" : "\n" == match[0] ? "\\n" : "\r" == match[0] ? "\\r" : "\\" + match[0];
    }),
        requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);return requiresQuotes ? "'" + body + "'" : body;
  }function _createIndent(count) {
    for (var res = "", i = 0; i < count; i++) res += _INDENT_WITH;return res;
  }function debugOutputAstAsTypeScript(ast) {
    var converter = new _TsEmitterVisitor(_debugFilePath, { fileNameToModuleName: function (filePath, containingFilePath) {
        return filePath;
      }, getImportAs: function (symbol) {
        return null;
      }, getTypeArity: function (symbol) {
        return null;
      } }),
        ctx = EmitterVisitorContext.createRoot([]),
        asts = Array.isArray(ast) ? ast : [ast];return asts.forEach(function (ast) {
      if (ast instanceof Statement) ast.visitStatement(converter, ctx);else if (ast instanceof Expression) ast.visitExpression(converter, ctx);else {
        if (!(ast instanceof Type$1)) throw new Error("Don't know how to print debug info for " + ast);ast.visitType(converter, ctx);
      }
    }), ctx.toSource();
  }function registerContext(ctx, specs) {
    for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
      var spec = specs_1[_i];SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
    }
  }function _isPixelDimensionStyle(prop) {
    switch (prop) {case "width":case "height":case "minWidth":case "minHeight":case "maxWidth":case "maxHeight":case "left":case "top":case "bottom":case "right":case "fontSize":case "outlineWidth":case "outlineOffset":case "paddingTop":case "paddingLeft":case "paddingBottom":case "paddingRight":case "marginTop":case "marginLeft":case "marginBottom":case "marginRight":case "borderRadius":case "borderWidth":case "borderTopWidth":case "borderLeftWidth":case "borderRightWidth":case "borderBottomWidth":case "textIndent":
        return !0;default:
        return !1;}
  }function stripComments(input) {
    return input.replace(_commentRe, "");
  }function extractSourceMappingUrl(input) {
    var matcher = input.match(_sourceMappingUrlRe);return matcher ? matcher[0] : "";
  }function processRules(input, ruleCallback) {
    var inputWithEscapedBlocks = escapeBlocks(input),
        nextBlockIndex = 0;return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
      for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];var selector = m[2],
          content = "",
          suffix = m[4],
          contentPrefix = "";suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER) && (content = inputWithEscapedBlocks.blocks[nextBlockIndex++], suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1), contentPrefix = "{");var rule = ruleCallback(new CssRule(selector, content));return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
    });
  }function escapeBlocks(input) {
    for (var inputParts = input.split(_curlyRe), resultParts = [], escapedBlocks = [], bracketCount = 0, currentBlockParts = [], partIndex = 0; partIndex < inputParts.length; partIndex++) {
      var part = inputParts[partIndex];part == CLOSE_CURLY && bracketCount--, bracketCount > 0 ? currentBlockParts.push(part) : (currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER), currentBlockParts = []), resultParts.push(part)), part == OPEN_CURLY && bracketCount++;
    }return currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER)), new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
  }function getStylesVarName(component) {
    var result = "styles";return component && (result += "_" + identifierName(component.type)), result;
  }function convertActionBinding(localResolver, implicitReceiver, action, bindingId) {
    localResolver || (localResolver = new DefaultLocalResolver());var actionWithoutBuiltins = convertPropertyBindingBuiltins({ createLiteralArrayConverter: function (argCount) {
        return function (args) {
          return literalArr(args);
        };
      }, createLiteralMapConverter: function (keys) {
        return function (args) {
          return literalMap(keys.map(function (key, i) {
            return [key, args[i]];
          }));
        };
      }, createPipeConverter: function (name) {
        throw new Error("Illegal State: Actions are not allowed to contain pipes. Pipe: " + name);
      } }, action),
        visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId),
        actionStmts = [];flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts), prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);var lastIndex = actionStmts.length - 1,
        preventDefaultVar = null;if (lastIndex >= 0) {
      var lastStatement = actionStmts[lastIndex],
          returnExpr = convertStmtIntoExpression(lastStatement);returnExpr && (preventDefaultVar = createPreventDefaultVar(bindingId), actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(!1))).toDeclStmt(null, [StmtModifier.Final]));
    }return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
  }function convertPropertyBindingBuiltins(converterFactory, ast) {
    return convertBuiltins(converterFactory, ast);
  }function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
    localResolver || (localResolver = new DefaultLocalResolver());var currValExpr = createCurrValueExpr(bindingId),
        stmts = [],
        visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId),
        outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);if (visitor.temporaryCount) for (var i = 0; i < visitor.temporaryCount; i++) stmts.push(temporaryDeclaration(bindingId, i));return stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final])), new ConvertPropertyBindingResult(stmts, currValExpr);
  }function convertBuiltins(converterFactory, ast) {
    var visitor = new _BuiltinAstConverter(converterFactory);return ast.visit(visitor);
  }function temporaryName(bindingId, temporaryNumber) {
    return "tmp_" + bindingId + "_" + temporaryNumber;
  }function temporaryDeclaration(bindingId, temporaryNumber) {
    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
  }function prependTemporaryDecls(temporaryCount, bindingId, statements) {
    for (var i = temporaryCount - 1; i >= 0; i--) statements.unshift(temporaryDeclaration(bindingId, i));
  }function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement) throw new Error("Expected a statement, but saw " + ast);
  }function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression) throw new Error("Expected an expression, but saw " + ast);
  }function convertToStatementIfNeeded(mode, expr) {
    return mode === _Mode.Statement ? expr.toStmt() : expr;
  }function flattenStatements(arg, output) {
    Array.isArray(arg) ? arg.forEach(function (entry) {
      return flattenStatements(entry, output);
    }) : output.push(arg);
  }function createCurrValueExpr(bindingId) {
    return variable("currVal_" + bindingId);
  }function createPreventDefaultVar(bindingId) {
    return variable("pd_" + bindingId);
  }function convertStmtIntoExpression(stmt) {
    return stmt instanceof ExpressionStatement ? stmt.expr : stmt instanceof ReturnStatement ? stmt.value : null;
  }function providerDef(providerAst) {
    return providerAst.multiProvider ? multiProviderDef(providerAst.providers) : singleProviderDef(providerAst.providerType, providerAst.providers[0]);
  }function multiProviderDef(providers) {
    function convertDeps(providerIndex, deps) {
      return deps.map(function (dep, depIndex) {
        var paramName = "p" + providerIndex + "_" + depIndex;return allParams.push(new FnParam(paramName, DYNAMIC_TYPE)), allDepDefs.push(depDef(dep)), variable(paramName);
      });
    }var allDepDefs = [],
        allParams = [],
        exprs = providers.map(function (provider, providerIndex) {
      var expr;if (provider.useClass) {
        var depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);expr = importExpr(provider.useClass).instantiate(depExprs);
      } else if (provider.useFactory) {
        var depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);expr = importExpr(provider.useFactory).callFn(depExprs);
      } else if (provider.useExisting) {
        var depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);expr = depExprs[0];
      } else expr = convertValueToOutputAst(provider.useValue);return expr;
    }),
        providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);return { providerExpr: providerExpr, flags: 1024, depsExpr: literalArr(allDepDefs) };
  }function singleProviderDef(providerType, providerMeta) {
    var providerExpr, flags, deps;providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component ? (providerExpr = importExpr(providerMeta.useClass), flags = 16384, deps = providerMeta.deps || providerMeta.useClass.diDeps) : providerMeta.useClass ? (providerExpr = importExpr(providerMeta.useClass), flags = 512, deps = providerMeta.deps || providerMeta.useClass.diDeps) : providerMeta.useFactory ? (providerExpr = importExpr(providerMeta.useFactory), flags = 1024, deps = providerMeta.deps || providerMeta.useFactory.diDeps) : providerMeta.useExisting ? (providerExpr = NULL_EXPR, flags = 2048, deps = [{ token: providerMeta.useExisting }]) : (providerExpr = convertValueToOutputAst(providerMeta.useValue), flags = 256, deps = []);var depsExpr = literalArr(deps.map(function (dep) {
      return depDef(dep);
    }));return { providerExpr: providerExpr, flags: flags, depsExpr: depsExpr };
  }function tokenExpr(tokenMeta) {
    return tokenMeta.identifier ? importExpr(tokenMeta.identifier) : literal(tokenMeta.value);
  }function depDef(dep) {
    var expr = dep.isValue ? convertValueToOutputAst(dep.value) : tokenExpr(dep.token),
        flags = 0;return dep.isSkipSelf && (flags |= 1), dep.isOptional && (flags |= 2), dep.isValue && (flags |= 8), 0 === flags ? expr : literalArr([literal(flags), expr]);
  }function needsAdditionalRootNode(astNodes) {
    var lastAstNode = astNodes[astNodes.length - 1];return lastAstNode instanceof EmbeddedTemplateAst ? lastAstNode.hasViewContainer : lastAstNode instanceof ElementAst ? isNgContainer(lastAstNode.name) && lastAstNode.children.length ? needsAdditionalRootNode(lastAstNode.children) : lastAstNode.hasViewContainer : lastAstNode instanceof NgContentAst;
  }function lifecycleHookToNodeFlag(lifecycleHook) {
    var nodeFlag = 0;switch (lifecycleHook) {case _angular_core.ɵLifecycleHooks.AfterContentChecked:
        nodeFlag = 2097152;break;case _angular_core.ɵLifecycleHooks.AfterContentInit:
        nodeFlag = 1048576;break;case _angular_core.ɵLifecycleHooks.AfterViewChecked:
        nodeFlag = 8388608;break;case _angular_core.ɵLifecycleHooks.AfterViewInit:
        nodeFlag = 4194304;break;case _angular_core.ɵLifecycleHooks.DoCheck:
        nodeFlag = 262144;break;case _angular_core.ɵLifecycleHooks.OnChanges:
        nodeFlag = 524288;break;case _angular_core.ɵLifecycleHooks.OnDestroy:
        nodeFlag = 131072;break;case _angular_core.ɵLifecycleHooks.OnInit:
        nodeFlag = 65536;}return nodeFlag;
  }function elementBindingDef(inputAst, dirAst) {
    switch (inputAst.type) {case PropertyBindingType.Attribute:
        return literalArr([literal(1), literal(inputAst.name), literal(inputAst.securityContext)]);case PropertyBindingType.Property:
        return literalArr([literal(8), literal(inputAst.name), literal(inputAst.securityContext)]);case PropertyBindingType.Animation:
        var bindingType = 8 | (dirAst && dirAst.directive.isComponent ? 32 : 16);return literalArr([literal(bindingType), literal("@" + inputAst.name), literal(inputAst.securityContext)]);case PropertyBindingType.Class:
        return literalArr([literal(2), literal(inputAst.name), NULL_EXPR]);case PropertyBindingType.Style:
        return literalArr([literal(4), literal(inputAst.name), literal(inputAst.unit)]);}
  }function fixedAttrsDef(elementAst) {
    var mapResult = Object.create(null);return elementAst.attrs.forEach(function (attrAst) {
      mapResult[attrAst.name] = attrAst.value;
    }), elementAst.directives.forEach(function (dirAst) {
      Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {
        var value = dirAst.directive.hostAttributes[name],
            prevValue = mapResult[name];mapResult[name] = null != prevValue ? mergeAttributeValue(name, prevValue, value) : value;
      });
    }), literalArr(Object.keys(mapResult).sort().map(function (attrName) {
      return literalArr([literal(attrName), literal(mapResult[attrName])]);
    }));
  }function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    return attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR ? attrValue1 + " " + attrValue2 : attrValue2;
  }function callCheckStmt(nodeIndex, exprs) {
    return exprs.length > 10 ? CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1), literalArr(exprs)]) : CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0)].concat(exprs));
  }function callUnwrapValue(nodeIndex, bindingIdx, expr) {
    return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr]);
  }function findStaticQueryIds(nodes, result) {
    return void 0 === result && (result = new Map()), nodes.forEach(function (node) {
      var staticQueryIds = new Set(),
          dynamicQueryIds = new Set(),
          queryMatches = void 0;node instanceof ElementAst ? (findStaticQueryIds(node.children, result), node.children.forEach(function (child) {
        var childData = result.get(child);childData.staticQueryIds.forEach(function (queryId) {
          return staticQueryIds.add(queryId);
        }), childData.dynamicQueryIds.forEach(function (queryId) {
          return dynamicQueryIds.add(queryId);
        });
      }), queryMatches = node.queryMatches) : node instanceof EmbeddedTemplateAst && (findStaticQueryIds(node.children, result), node.children.forEach(function (child) {
        var childData = result.get(child);childData.staticQueryIds.forEach(function (queryId) {
          return dynamicQueryIds.add(queryId);
        }), childData.dynamicQueryIds.forEach(function (queryId) {
          return dynamicQueryIds.add(queryId);
        });
      }), queryMatches = node.queryMatches), queryMatches && queryMatches.forEach(function (match) {
        return staticQueryIds.add(match.queryId);
      }), dynamicQueryIds.forEach(function (queryId) {
        return staticQueryIds.delete(queryId);
      }), result.set(node, { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds });
    }), result;
  }function staticViewQueryIds(nodeStaticQueryIds) {
    var staticQueryIds = new Set(),
        dynamicQueryIds = new Set();return Array.from(nodeStaticQueryIds.values()).forEach(function (entry) {
      entry.staticQueryIds.forEach(function (queryId) {
        return staticQueryIds.add(queryId);
      }), entry.dynamicQueryIds.forEach(function (queryId) {
        return dynamicQueryIds.add(queryId);
      });
    }), dynamicQueryIds.forEach(function (queryId) {
      return staticQueryIds.delete(queryId);
    }), { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds };
  }function createComponentFactoryResolver(directives) {
    var componentDirMeta = directives.find(function (dirAst) {
      return dirAst.directive.isComponent;
    });if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
      var entryComponentFactories = componentDirMeta.directive.entryComponents.map(function (entryComponent) {
        return importExpr({ reference: entryComponent.componentFactory });
      }),
          token = createIdentifierToken(Identifiers.ComponentFactoryResolver),
          classMeta = { diDeps: [{ isValue: !0, value: literalArr(entryComponentFactories) }, { token: token, isSkipSelf: !0, isOptional: !0 }, { token: createIdentifierToken(Identifiers.NgModuleRef) }], lifecycleHooks: [], reference: resolveIdentifier(Identifiers.CodegenComponentFactoryResolver) };return new ProviderAst(token, !1, !0, [{ token: token, multi: !1, useClass: classMeta }], ProviderAstType.PrivateService, [], componentDirMeta.sourceSpan);
    }return null;
  }function elementEventNameAndTarget(eventAst, dirAst) {
    return eventAst.isAnimation ? { name: "@" + eventAst.name + "." + eventAst.phase, target: dirAst && dirAst.directive.isComponent ? "component" : null } : eventAst;
  }function calcStaticDynamicQueryFlags(queryIds, queryId, isFirst) {
    var flags = 0;return flags |= !isFirst || !queryIds.staticQueryIds.has(queryId) && queryIds.dynamicQueryIds.has(queryId) ? 536870912 : 268435456;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function serializeSummaries(summaryResolver, symbolResolver, symbols, types) {
    var serializer = new Serializer$1(symbolResolver, summaryResolver);symbols.forEach(function (resolvedSymbol) {
      return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata });
    });for (var processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
      var symbol = serializer.symbols[processedIndex];if (summaryResolver.isLibraryFile(symbol.filePath)) {
        var summary = summaryResolver.resolveSummary(symbol);if (!summary) {
          var resolvedSymbol = symbolResolver.resolveSymbol(symbol);resolvedSymbol && (summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata });
        }summary && serializer.addOrMergeSummary(summary);
      }
    }return types.forEach(function (typeSummary) {
      if (serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: null, type: typeSummary }), typeSummary.summaryKind === CompileSummaryKind.NgModule) {
        var ngModuleSummary = typeSummary;ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
          var symbol = id.reference;if (summaryResolver.isLibraryFile(symbol.filePath)) {
            var summary = summaryResolver.resolveSummary(symbol);summary && serializer.addOrMergeSummary(summary);
          }
        });
      }
    }), serializer.serialize();
  }function deserializeSummaries(symbolCache, json) {
    var deserializer = new Deserializer(symbolCache);return deserializer.deserialize(json);
  }function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
    return compileResult.dependencies.forEach(function (dep) {
      dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
    }), compileResult.statements;
  }function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return "" + stylesheetUrl + (shim ? ".shim" : "") + ".ngstyle" + suffix;
  }function _assertComponent(meta) {
    if (!meta.isComponent) throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
  }function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
    var _a = _createNgModules(programStaticSymbols, host, metadataResolver),
        ngModules = _a.ngModules,
        symbolsMissingModule = _a.symbolsMissingModule;return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
  }function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
    var result = analyzeNgModules(programStaticSymbols, host, metadataResolver);if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
      var messages = result.symbolsMissingModule.map(function (s) {
        return "Cannot determine the module for class " + s.name + " in " + s.filePath + "! Add " + s.name + " to the NgModule to fix it.";
      });throw syntaxError(messages.join("\n"));
    }return result;
  }function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
    var moduleMetasByRef = new Map();ngModuleMetas.forEach(function (ngModule) {
      return moduleMetasByRef.set(ngModule.type.reference, ngModule);
    });var ngModuleByPipeOrDirective = new Map(),
        ngModulesByFile = new Map(),
        ngDirectivesByFile = new Map(),
        ngPipesByFile = new Map(),
        ngInjectablesByFile = new Map(),
        filePaths = new Set();programSymbols.forEach(function (symbol) {
      var filePath = symbol.filePath;filePaths.add(filePath), metadataResolver.isInjectable(symbol) && ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
    }), ngModuleMetas.forEach(function (ngModuleMeta) {
      var srcFileUrl = ngModuleMeta.type.reference.filePath;filePaths.add(srcFileUrl), ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference)), ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
        var fileUrl = dirIdentifier.reference.filePath;filePaths.add(fileUrl), ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference)), ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
      }), ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
        var fileUrl = pipeIdentifier.reference.filePath;filePaths.add(fileUrl), ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference)), ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
      });
    });var files = [];return filePaths.forEach(function (srcUrl) {
      var directives = ngDirectivesByFile.get(srcUrl) || [],
          pipes = ngPipesByFile.get(srcUrl) || [],
          ngModules = ngModulesByFile.get(srcUrl) || [],
          injectables = ngInjectablesByFile.get(srcUrl) || [];files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables });
    }), { ngModuleByPipeOrDirective: ngModuleByPipeOrDirective, files: files, ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule };
  }function extractProgramSymbols(staticSymbolResolver, files, host) {
    var staticSymbols = [];return files.filter(function (fileName) {
      return host.isSourceFile(fileName);
    }).forEach(function (sourceFile) {
      staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) {
        var resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol),
            symbolMeta = resolvedSymbol.metadata;symbolMeta && "error" != symbolMeta.__symbolic && staticSymbols.push(resolvedSymbol.symbol);
      });
    }), staticSymbols;
  }function _createNgModules(programStaticSymbols, host, metadataResolver) {
    var ngModules = new Map(),
        programPipesAndDirectives = [],
        ngModulePipesAndDirective = new Set(),
        addNgModule = function (staticSymbol) {
      if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) return !1;var ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, !1);return ngModule && (ngModules.set(ngModule.type.reference, ngModule), ngModule.declaredDirectives.forEach(function (dir) {
        return ngModulePipesAndDirective.add(dir.reference);
      }), ngModule.declaredPipes.forEach(function (pipe) {
        return ngModulePipesAndDirective.add(pipe.reference);
      }), ngModule.transitiveModule.modules.forEach(function (modMeta) {
        return addNgModule(modMeta.reference);
      })), !!ngModule;
    };programStaticSymbols.forEach(function (staticSymbol) {
      addNgModule(staticSymbol) || !metadataResolver.isDirective(staticSymbol) && !metadataResolver.isPipe(staticSymbol) || programPipesAndDirectives.push(staticSymbol);
    });var symbolsMissingModule = programPipesAndDirectives.filter(function (s) {
      return !ngModulePipesAndDirective.has(s);
    });return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
  }function isStaticType(type) {
    return "object" == typeof type && type.name && type.filePath;
  }function shouldIgnore(value) {
    return value && "ignore" == value.__symbolic;
  }function expandedMessage(error) {
    switch (error.message) {case "Reference to non-exported class":
        if (error.context && error.context.className) return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";break;case "Variable not initialized":
        return "Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler";case "Destructuring not supported":
        return "Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring";case "Could not resolve type":
        if (error.context && error.context.typeName) return "Could not resolve type " + error.context.typeName;break;case "Function call not supported":
        var prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : "F";return prefix + "unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function";case "Reference to a local symbol":
        if (error.context && error.context.name) return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";}return error.message;
  }function produceErrorMessage(error) {
    return "Error encountered resolving symbol values statically. " + expandedMessage(error);
  }function mapStringMap(input, transform) {
    if (!input) return {};var result = {};return Object.keys(input).forEach(function (key) {
      var value = transform(input[key], key);shouldIgnore(value) || (HIDDEN_KEY.test(key) ? Object.defineProperty(result, key, { enumerable: !1, configurable: !0, value: value }) : result[key] = value);
    }), result;
  }function isPrimitive(o) {
    return null === o || "function" != typeof o && "object" != typeof o;
  }function positionalError(message, fileName, line, column) {
    var result = new Error(message);return result.fileName = fileName, result.line = line, result.column = column, result;
  }function unescapeIdentifier(identifier) {
    return identifier.startsWith("___") ? identifier.substr(1) : identifier;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function createAotCompiler(compilerHost, options) {
    var translations = options.translations || "",
        urlResolver = createOfflineCompileUrlResolver(),
        symbolCache = new StaticSymbolCache(),
        summaryResolver = new AotSummaryResolver(compilerHost, symbolCache),
        symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver),
        staticReflector = new StaticReflector(summaryResolver, symbolResolver);StaticAndDynamicReflectionCapabilities.install(staticReflector);var console = new _angular_core.ɵConsole(),
        htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, _angular_core.MissingTranslationStrategy.Warning, console),
        config = new CompilerConfig({ defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated, useJit: !1, enableLegacyTemplate: options.enableLegacyTemplate !== !1 }),
        normalizer = new DirectiveNormalizer({ get: function (url) {
        return compilerHost.loadResource(url);
      } }, urlResolver, htmlParser, config),
        expressionParser = new Parser(new Lexer()),
        elementSchemaRegistry = new DomElementSchemaRegistry(),
        tmplParser = new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, console, []),
        resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector),
        importResolver = { getImportAs: function (symbol) {
        return symbolResolver.getImportAs(symbol);
      }, fileNameToModuleName: function (fileName, containingFilePath) {
        return compilerHost.fileNameToModuleName(fileName, containingFilePath);
      }, getTypeArity: function (symbol) {
        return symbolResolver.getTypeArity(symbol);
      } },
        viewCompiler = new ViewCompiler(config, elementSchemaRegistry),
        compiler = new AotCompiler(config, compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver, options.locale || null, options.i18nFormat || null, options.genFilePreamble || null, symbolResolver);return { compiler: compiler, reflector: staticReflector };
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function interpretStatements(statements, resultVars) {
    var stmtsWithReturn = statements.concat([new ReturnStatement(literalArr(resultVars.map(function (resultVar) {
      return variable(resultVar);
    })))]),
        ctx = new _ExecutionContext(null, null, null, new Map()),
        visitor = new StatementInterpreter(),
        result = visitor.visitAllStatements(stmtsWithReturn, ctx);return null != result ? result.value : null;
  }function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    for (var childCtx = ctx.createChildWihtLocalVars(), i = 0; i < varNames.length; i++) childCtx.vars.set(varNames[i], varValues[i]);var result = visitor.visitAllStatements(statements, childCtx);return result ? result.value : null;
  }function createDynamicClass(_classStmt, _ctx, _visitor) {
    var propertyDescriptors = {};_classStmt.getters.forEach(function (getter) {
      propertyDescriptors[getter.name] = { configurable: !1, get: function () {
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
        } };
    }), _classStmt.methods.forEach(function (method) {
      var paramNames = method.params.map(function (param) {
        return param.name;
      });propertyDescriptors[method.name] = { writable: !1, configurable: !1, value: function () {
          for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
        } };
    });var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) {
      return param.name;
    }),
        ctor = function () {
      for (var _this = this, args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);_classStmt.fields.forEach(function (field) {
        _this[field.name] = void 0;
      }), _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
    },
        superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;return ctor.prototype = Object.create(superClass.prototype, propertyDescriptors), ctor;
  }function _declareFn(varNames, statements, ctx, visitor) {
    return function () {
      for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
    };
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function evalExpression(sourceUrl$$1, ctx, vars) {
    var fnBody = ctx.toSource() + "\n//# sourceURL=" + sourceUrl$$1,
        fnArgNames = [],
        fnArgValues = [];for (var argName in vars) fnArgNames.push(argName), fnArgValues.push(vars[argName]);if (_angular_core.isDevMode()) {
      var emptyFn = new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat("return null;"))))().toString(),
          headerLines = emptyFn.slice(0, emptyFn.indexOf("return null;")).split("\n").length - 1;fnBody += "\n" + ctx.toSourceMapGenerator(sourceUrl$$1, sourceUrl$$1, headerLines).toJsComment();
    }return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
  }function jitStatements(sourceUrl$$1, statements, resultVars) {
    var converter = new JitEmitterVisitor(),
        ctx = EmitterVisitorContext.createRoot(resultVars),
        returnStmt = new ReturnStatement(literalArr(resultVars.map(function (resultVar) {
      return variable(resultVar);
    })));return converter.visitAllStatements(statements.concat([returnStmt]), ctx), evalExpression(sourceUrl$$1, ctx, converter.getArgs());
  }function assertComponent(meta) {
    if (!meta.isComponent) throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
  }function i18nHtmlParserFactory(parser, translations, format, config, console) {
    return new I18NHtmlParser(parser, translations, format, config.missingTranslation, console);
  }function _initReflector() {
    _angular_core.ɵreflector.reflectionCapabilities = new _angular_core.ɵReflectionCapabilities();
  }function _mergeOptions(optionsArr) {
    return { useJit: _lastDefined(optionsArr.map(function (options) {
        return options.useJit;
      })), defaultEncapsulation: _lastDefined(optionsArr.map(function (options) {
        return options.defaultEncapsulation;
      })), providers: _mergeArrays(optionsArr.map(function (options) {
        return options.providers;
      })), missingTranslation: _lastDefined(optionsArr.map(function (options) {
        return options.missingTranslation;
      })) };
  }function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--) if (void 0 !== args[i]) return args[i];
  }function _mergeArrays(parts) {
    var result = [];return parts.forEach(function (part) {
      return part && result.push.apply(result, part);
    }), result;
  }var __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      VERSION = new _angular_core.Version("4.1.3"),
      TextAst = function () {
    function TextAst(value, ngContentIndex, sourceSpan) {
      this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
    }return TextAst.prototype.visit = function (visitor, context) {
      return visitor.visitText(this, context);
    }, TextAst;
  }(),
      BoundTextAst = function () {
    function BoundTextAst(value, ngContentIndex, sourceSpan) {
      this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
    }return BoundTextAst.prototype.visit = function (visitor, context) {
      return visitor.visitBoundText(this, context);
    }, BoundTextAst;
  }(),
      AttrAst = function () {
    function AttrAst(name, value, sourceSpan) {
      this.name = name, this.value = value, this.sourceSpan = sourceSpan;
    }return AttrAst.prototype.visit = function (visitor, context) {
      return visitor.visitAttr(this, context);
    }, AttrAst;
  }(),
      BoundElementPropertyAst = function () {
    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
      this.name = name, this.type = type, this.securityContext = securityContext, this.value = value, this.unit = unit, this.sourceSpan = sourceSpan;
    }return BoundElementPropertyAst.prototype.visit = function (visitor, context) {
      return visitor.visitElementProperty(this, context);
    }, Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", { get: function () {
        return this.type === PropertyBindingType.Animation;
      }, enumerable: !0, configurable: !0 }), BoundElementPropertyAst;
  }(),
      BoundEventAst = function () {
    function BoundEventAst(name, target, phase, handler, sourceSpan) {
      this.name = name, this.target = target, this.phase = phase, this.handler = handler, this.sourceSpan = sourceSpan;
    }return BoundEventAst.calcFullName = function (name, target, phase) {
      return target ? target + ":" + name : phase ? "@" + name + "." + phase : name;
    }, BoundEventAst.prototype.visit = function (visitor, context) {
      return visitor.visitEvent(this, context);
    }, Object.defineProperty(BoundEventAst.prototype, "fullName", { get: function () {
        return BoundEventAst.calcFullName(this.name, this.target, this.phase);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(BoundEventAst.prototype, "isAnimation", { get: function () {
        return !!this.phase;
      }, enumerable: !0, configurable: !0 }), BoundEventAst;
  }(),
      ReferenceAst = function () {
    function ReferenceAst(name, value, sourceSpan) {
      this.name = name, this.value = value, this.sourceSpan = sourceSpan;
    }return ReferenceAst.prototype.visit = function (visitor, context) {
      return visitor.visitReference(this, context);
    }, ReferenceAst;
  }(),
      VariableAst = function () {
    function VariableAst(name, value, sourceSpan) {
      this.name = name, this.value = value, this.sourceSpan = sourceSpan;
    }return VariableAst.prototype.visit = function (visitor, context) {
      return visitor.visitVariable(this, context);
    }, VariableAst;
  }(),
      ElementAst = function () {
    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
      this.name = name, this.attrs = attrs, this.inputs = inputs, this.outputs = outputs, this.references = references, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.queryMatches = queryMatches, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan, this.endSourceSpan = endSourceSpan;
    }return ElementAst.prototype.visit = function (visitor, context) {
      return visitor.visitElement(this, context);
    }, ElementAst;
  }(),
      EmbeddedTemplateAst = function () {
    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
      this.attrs = attrs, this.outputs = outputs, this.references = references, this.variables = variables, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.queryMatches = queryMatches, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
    }return EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
      return visitor.visitEmbeddedTemplate(this, context);
    }, EmbeddedTemplateAst;
  }(),
      BoundDirectivePropertyAst = function () {
    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
      this.directiveName = directiveName, this.templateName = templateName, this.value = value, this.sourceSpan = sourceSpan;
    }return BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
      return visitor.visitDirectiveProperty(this, context);
    }, BoundDirectivePropertyAst;
  }(),
      DirectiveAst = function () {
    function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
      this.directive = directive, this.inputs = inputs, this.hostProperties = hostProperties, this.hostEvents = hostEvents, this.contentQueryStartId = contentQueryStartId, this.sourceSpan = sourceSpan;
    }return DirectiveAst.prototype.visit = function (visitor, context) {
      return visitor.visitDirective(this, context);
    }, DirectiveAst;
  }(),
      ProviderAst = function () {
    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
      this.token = token, this.multiProvider = multiProvider, this.eager = eager, this.providers = providers, this.providerType = providerType, this.lifecycleHooks = lifecycleHooks, this.sourceSpan = sourceSpan;
    }return ProviderAst.prototype.visit = function (visitor, context) {
      return null;
    }, ProviderAst;
  }(),
      ProviderAstType = {};ProviderAstType.PublicService = 0, ProviderAstType.PrivateService = 1, ProviderAstType.Component = 2, ProviderAstType.Directive = 3, ProviderAstType.Builtin = 4, ProviderAstType[ProviderAstType.PublicService] = "PublicService", ProviderAstType[ProviderAstType.PrivateService] = "PrivateService", ProviderAstType[ProviderAstType.Component] = "Component", ProviderAstType[ProviderAstType.Directive] = "Directive", ProviderAstType[ProviderAstType.Builtin] = "Builtin";var NgContentAst = function () {
    function NgContentAst(index, ngContentIndex, sourceSpan) {
      this.index = index, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
    }return NgContentAst.prototype.visit = function (visitor, context) {
      return visitor.visitNgContent(this, context);
    }, NgContentAst;
  }(),
      PropertyBindingType = {};PropertyBindingType.Property = 0, PropertyBindingType.Attribute = 1, PropertyBindingType.Class = 2, PropertyBindingType.Style = 3, PropertyBindingType.Animation = 4, PropertyBindingType[PropertyBindingType.Property] = "Property", PropertyBindingType[PropertyBindingType.Attribute] = "Attribute", PropertyBindingType[PropertyBindingType.Class] = "Class", PropertyBindingType[PropertyBindingType.Style] = "Style", PropertyBindingType[PropertyBindingType.Animation] = "Animation";var StaticSymbol = function () {
    function StaticSymbol(filePath, name, members) {
      this.filePath = filePath, this.name = name, this.members = members;
    }return StaticSymbol.prototype.assertNoMembers = function () {
      if (this.members.length) throw new Error("Illegal state: symbol without members expected, but got " + JSON.stringify(this) + ".");
    }, StaticSymbol;
  }(),
      StaticSymbolCache = function () {
    function StaticSymbolCache() {
      this.cache = new Map();
    }return StaticSymbolCache.prototype.get = function (declarationFile, name, members) {
      members = members || [];var memberSuffix = members.length ? "." + members.join(".") : "",
          key = '"' + declarationFile + '".' + name + memberSuffix,
          result = this.cache.get(key);return result || (result = new StaticSymbol(declarationFile, name, members), this.cache.set(key, result)), result;
    }, StaticSymbolCache;
  }(),
      TagContentType = {};TagContentType.RAW_TEXT = 0, TagContentType.ESCAPABLE_RAW_TEXT = 1, TagContentType.PARSABLE_DATA = 2, TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT", TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT", TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";var NAMED_ENTITIES = { Aacute: "Á", aacute: "á", Acirc: "Â", acirc: "â", acute: "´", AElig: "Æ", aelig: "æ", Agrave: "À", agrave: "à", alefsym: "ℵ", Alpha: "Α", alpha: "α", amp: "&", and: "∧", ang: "∠", apos: "'", Aring: "Å", aring: "å", asymp: "≈", Atilde: "Ã", atilde: "ã", Auml: "Ä", auml: "ä", bdquo: "„", Beta: "Β", beta: "β", brvbar: "¦", bull: "•", cap: "∩", Ccedil: "Ç", ccedil: "ç", cedil: "¸", cent: "¢", Chi: "Χ", chi: "χ", circ: "ˆ", clubs: "♣", cong: "≅", copy: "©", crarr: "↵", cup: "∪", curren: "¤", dagger: "†", Dagger: "‡", darr: "↓", dArr: "⇓", deg: "°", Delta: "Δ", delta: "δ", diams: "♦", divide: "÷", Eacute: "É", eacute: "é", Ecirc: "Ê", ecirc: "ê", Egrave: "È", egrave: "è", empty: "∅", emsp: " ", ensp: " ", Epsilon: "Ε", epsilon: "ε", equiv: "≡", Eta: "Η", eta: "η", ETH: "Ð", eth: "ð", Euml: "Ë", euml: "ë", euro: "€", exist: "∃", fnof: "ƒ", forall: "∀", frac12: "½", frac14: "¼", frac34: "¾", frasl: "⁄", Gamma: "Γ", gamma: "γ", ge: "≥", gt: ">", harr: "↔", hArr: "⇔", hearts: "♥", hellip: "…", Iacute: "Í", iacute: "í", Icirc: "Î", icirc: "î", iexcl: "¡", Igrave: "Ì", igrave: "ì", image: "ℑ", infin: "∞", int: "∫", Iota: "Ι", iota: "ι", iquest: "¿", isin: "∈", Iuml: "Ï", iuml: "ï", Kappa: "Κ", kappa: "κ", Lambda: "Λ", lambda: "λ", lang: "⟨", laquo: "«", larr: "←", lArr: "⇐", lceil: "⌈", ldquo: "“", le: "≤", lfloor: "⌊", lowast: "∗", loz: "◊", lrm: "‎", lsaquo: "‹", lsquo: "‘", lt: "<", macr: "¯", mdash: "—", micro: "µ", middot: "·", minus: "−", Mu: "Μ", mu: "μ", nabla: "∇", nbsp: " ", ndash: "–", ne: "≠", ni: "∋", not: "¬", notin: "∉", nsub: "⊄", Ntilde: "Ñ", ntilde: "ñ", Nu: "Ν", nu: "ν", Oacute: "Ó", oacute: "ó", Ocirc: "Ô", ocirc: "ô", OElig: "Œ", oelig: "œ", Ograve: "Ò", ograve: "ò", oline: "‾", Omega: "Ω", omega: "ω", Omicron: "Ο", omicron: "ο", oplus: "⊕", or: "∨", ordf: "ª", ordm: "º", Oslash: "Ø", oslash: "ø", Otilde: "Õ", otilde: "õ", otimes: "⊗", Ouml: "Ö", ouml: "ö", para: "¶", permil: "‰", perp: "⊥", Phi: "Φ", phi: "φ", Pi: "Π", pi: "π", piv: "ϖ", plusmn: "±", pound: "£", prime: "′", Prime: "″", prod: "∏", prop: "∝", Psi: "Ψ", psi: "ψ", quot: '"', radic: "√", rang: "⟩", raquo: "»", rarr: "→", rArr: "⇒", rceil: "⌉", rdquo: "”", real: "ℜ", reg: "®", rfloor: "⌋", Rho: "Ρ", rho: "ρ", rlm: "‏", rsaquo: "›", rsquo: "’", sbquo: "‚", Scaron: "Š", scaron: "š", sdot: "⋅", sect: "§", shy: "­", Sigma: "Σ", sigma: "σ", sigmaf: "ς", sim: "∼", spades: "♠", sub: "⊂", sube: "⊆", sum: "∑", sup: "⊃", sup1: "¹", sup2: "²", sup3: "³", supe: "⊇", szlig: "ß", Tau: "Τ", tau: "τ", there4: "∴", Theta: "Θ", theta: "θ", thetasym: "ϑ", thinsp: " ", THORN: "Þ", thorn: "þ", tilde: "˜", times: "×", trade: "™", Uacute: "Ú", uacute: "ú", uarr: "↑", uArr: "⇑", Ucirc: "Û", ucirc: "û", Ugrave: "Ù", ugrave: "ù", uml: "¨", upsih: "ϒ", Upsilon: "Υ", upsilon: "υ", Uuml: "Ü", uuml: "ü", weierp: "℘", Xi: "Ξ", xi: "ξ", Yacute: "Ý", yacute: "ý", yen: "¥", yuml: "ÿ", Yuml: "Ÿ", Zeta: "Ζ", zeta: "ζ", zwj: "‍", zwnj: "‌" },
      HtmlTagDefinition = function () {
    function HtmlTagDefinition(_a) {
      var _b = void 0 === _a ? {} : _a,
          closedByChildren = _b.closedByChildren,
          requiredParents = _b.requiredParents,
          implicitNamespacePrefix = _b.implicitNamespacePrefix,
          _c = _b.contentType,
          contentType = void 0 === _c ? TagContentType.PARSABLE_DATA : _c,
          _d = _b.closedByParent,
          closedByParent = void 0 !== _d && _d,
          _e = _b.isVoid,
          isVoid = void 0 !== _e && _e,
          _f = _b.ignoreFirstLf,
          ignoreFirstLf = void 0 !== _f && _f,
          _this = this;this.closedByChildren = {}, this.closedByParent = !1, this.canSelfClose = !1, closedByChildren && closedByChildren.length > 0 && closedByChildren.forEach(function (tagName) {
        return _this.closedByChildren[tagName] = !0;
      }), this.isVoid = isVoid, this.closedByParent = closedByParent || isVoid, requiredParents && requiredParents.length > 0 && (this.requiredParents = {}, this.parentToAdd = requiredParents[0], requiredParents.forEach(function (tagName) {
        return _this.requiredParents[tagName] = !0;
      })), this.implicitNamespacePrefix = implicitNamespacePrefix || null, this.contentType = contentType, this.ignoreFirstLf = ignoreFirstLf;
    }return HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
      if (!this.requiredParents) return !1;if (!currentParent) return !0;var lcParent = currentParent.toLowerCase(),
          isParentTemplate = "template" === lcParent || "ng-template" === currentParent;return !isParentTemplate && 1 != this.requiredParents[lcParent];
    }, HtmlTagDefinition.prototype.isClosedByChild = function (name) {
      return this.isVoid || name.toLowerCase() in this.closedByChildren;
    }, HtmlTagDefinition;
  }(),
      TAG_DEFINITIONS = { base: new HtmlTagDefinition({ isVoid: !0 }), meta: new HtmlTagDefinition({ isVoid: !0 }), area: new HtmlTagDefinition({ isVoid: !0 }), embed: new HtmlTagDefinition({ isVoid: !0 }), link: new HtmlTagDefinition({ isVoid: !0 }), img: new HtmlTagDefinition({ isVoid: !0 }), input: new HtmlTagDefinition({ isVoid: !0 }), param: new HtmlTagDefinition({ isVoid: !0 }), hr: new HtmlTagDefinition({ isVoid: !0 }), br: new HtmlTagDefinition({ isVoid: !0 }), source: new HtmlTagDefinition({ isVoid: !0 }), track: new HtmlTagDefinition({ isVoid: !0 }), wbr: new HtmlTagDefinition({ isVoid: !0 }), p: new HtmlTagDefinition({ closedByChildren: ["address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"], closedByParent: !0 }), thead: new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"] }), tbody: new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"], closedByParent: !0 }), tfoot: new HtmlTagDefinition({ closedByChildren: ["tbody"], closedByParent: !0 }), tr: new HtmlTagDefinition({ closedByChildren: ["tr"], requiredParents: ["tbody", "tfoot", "thead"], closedByParent: !0 }), td: new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: !0 }), th: new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: !0 }), col: new HtmlTagDefinition({ requiredParents: ["colgroup"], isVoid: !0 }), svg: new HtmlTagDefinition({ implicitNamespacePrefix: "svg" }), math: new HtmlTagDefinition({ implicitNamespacePrefix: "math" }), li: new HtmlTagDefinition({ closedByChildren: ["li"], closedByParent: !0 }), dt: new HtmlTagDefinition({ closedByChildren: ["dt", "dd"] }), dd: new HtmlTagDefinition({ closedByChildren: ["dt", "dd"], closedByParent: !0 }), rb: new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: !0 }), rt: new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: !0 }), rtc: new HtmlTagDefinition({ closedByChildren: ["rb", "rtc", "rp"], closedByParent: !0 }), rp: new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: !0 }), optgroup: new HtmlTagDefinition({ closedByChildren: ["optgroup"], closedByParent: !0 }), option: new HtmlTagDefinition({ closedByChildren: ["option", "optgroup"], closedByParent: !0 }), pre: new HtmlTagDefinition({ ignoreFirstLf: !0 }), listing: new HtmlTagDefinition({ ignoreFirstLf: !0 }), style: new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }), script: new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }), title: new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }), textarea: new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: !0 }) },
      _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition(),
      _SELECTOR_REGEXP = new RegExp("(\\:not\\()|([-\\w]+)|(?:\\.([-\\w]+))|(?:\\[([-.\\w*]+)(?:=([\"']?)([^\\]\"']*)\\5)?\\])|(\\))|(\\s*,\\s*)", "g"),
      CssSelector = function () {
    function CssSelector() {
      this.element = null, this.classNames = [], this.attrs = [], this.notSelectors = [];
    }return CssSelector.parse = function (selector) {
      var match,
          results = [],
          _addResult = function (res, cssSel) {
        cssSel.notSelectors.length > 0 && !cssSel.element && 0 == cssSel.classNames.length && 0 == cssSel.attrs.length && (cssSel.element = "*"), res.push(cssSel);
      },
          cssSelector = new CssSelector(),
          current = cssSelector,
          inNot = !1;for (_SELECTOR_REGEXP.lastIndex = 0; match = _SELECTOR_REGEXP.exec(selector);) {
        if (match[1]) {
          if (inNot) throw new Error("Nesting :not is not allowed in a selector");inNot = !0, current = new CssSelector(), cssSelector.notSelectors.push(current);
        }if (match[2] && current.setElement(match[2]), match[3] && current.addClassName(match[3]), match[4] && current.addAttribute(match[4], match[6]), match[7] && (inNot = !1, current = cssSelector), match[8]) {
          if (inNot) throw new Error("Multiple selectors in :not are not supported");_addResult(results, cssSelector), cssSelector = current = new CssSelector();
        }
      }return _addResult(results, cssSelector), results;
    }, CssSelector.prototype.isElementSelector = function () {
      return this.hasElementSelector() && 0 == this.classNames.length && 0 == this.attrs.length && 0 === this.notSelectors.length;
    }, CssSelector.prototype.hasElementSelector = function () {
      return !!this.element;
    }, CssSelector.prototype.setElement = function (element) {
      void 0 === element && (element = null), this.element = element;
    }, CssSelector.prototype.getMatchingElementTemplate = function () {
      for (var tagName = this.element || "div", classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "", attrs = "", i = 0; i < this.attrs.length; i += 2) {
        var attrName = this.attrs[i],
            attrValue = "" !== this.attrs[i + 1] ? '="' + this.attrs[i + 1] + '"' : "";attrs += " " + attrName + attrValue;
      }return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">";
    }, CssSelector.prototype.addAttribute = function (name, value) {
      void 0 === value && (value = ""), this.attrs.push(name, value && value.toLowerCase() || "");
    }, CssSelector.prototype.addClassName = function (name) {
      this.classNames.push(name.toLowerCase());
    }, CssSelector.prototype.toString = function () {
      var res = this.element || "";if (this.classNames && this.classNames.forEach(function (klass) {
        return res += "." + klass;
      }), this.attrs) for (var i = 0; i < this.attrs.length; i += 2) {
        var name = this.attrs[i],
            value = this.attrs[i + 1];res += "[" + name + (value ? "=" + value : "") + "]";
      }return this.notSelectors.forEach(function (notSelector) {
        return res += ":not(" + notSelector + ")";
      }), res;
    }, CssSelector;
  }(),
      SelectorMatcher = function () {
    function SelectorMatcher() {
      this._elementMap = new Map(), this._elementPartialMap = new Map(), this._classMap = new Map(), this._classPartialMap = new Map(), this._attrValueMap = new Map(), this._attrValuePartialMap = new Map(), this._listContexts = [];
    }return SelectorMatcher.createNotMatcher = function (notSelectors) {
      var notMatcher = new SelectorMatcher();return notMatcher.addSelectables(notSelectors, null), notMatcher;
    }, SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
      var listContext = null;cssSelectors.length > 1 && (listContext = new SelectorListContext(cssSelectors), this._listContexts.push(listContext));for (var i = 0; i < cssSelectors.length; i++) this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
    }, SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
      var matcher = this,
          element = cssSelector.element,
          classNames = cssSelector.classNames,
          attrs = cssSelector.attrs,
          selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);if (element) {
        var isTerminal = 0 === attrs.length && 0 === classNames.length;isTerminal ? this._addTerminal(matcher._elementMap, element, selectable) : matcher = this._addPartial(matcher._elementPartialMap, element);
      }if (classNames) for (var i = 0; i < classNames.length; i++) {
        var isTerminal = 0 === attrs.length && i === classNames.length - 1,
            className = classNames[i];isTerminal ? this._addTerminal(matcher._classMap, className, selectable) : matcher = this._addPartial(matcher._classPartialMap, className);
      }if (attrs) for (var i = 0; i < attrs.length; i += 2) {
        var isTerminal = i === attrs.length - 2,
            name = attrs[i],
            value = attrs[i + 1];if (isTerminal) {
          var terminalMap = matcher._attrValueMap,
              terminalValuesMap = terminalMap.get(name);terminalValuesMap || (terminalValuesMap = new Map(), terminalMap.set(name, terminalValuesMap)), this._addTerminal(terminalValuesMap, value, selectable);
        } else {
          var partialMap = matcher._attrValuePartialMap,
              partialValuesMap = partialMap.get(name);partialValuesMap || (partialValuesMap = new Map(), partialMap.set(name, partialValuesMap)), matcher = this._addPartial(partialValuesMap, value);
        }
      }
    }, SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
      var terminalList = map.get(name);terminalList || (terminalList = [], map.set(name, terminalList)), terminalList.push(selectable);
    }, SelectorMatcher.prototype._addPartial = function (map, name) {
      var matcher = map.get(name);return matcher || (matcher = new SelectorMatcher(), map.set(name, matcher)), matcher;
    }, SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
      for (var result = !1, element = cssSelector.element, classNames = cssSelector.classNames, attrs = cssSelector.attrs, i = 0; i < this._listContexts.length; i++) this._listContexts[i].alreadyMatched = !1;if (result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result, result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result, classNames) for (var i = 0; i < classNames.length; i++) {
        var className = classNames[i];result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result, result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
      }if (attrs) for (var i = 0; i < attrs.length; i += 2) {
        var name = attrs[i],
            value = attrs[i + 1],
            terminalValuesMap = this._attrValueMap.get(name);value && (result = this._matchTerminal(terminalValuesMap, "", cssSelector, matchedCallback) || result), result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;var partialValuesMap = this._attrValuePartialMap.get(name);value && (result = this._matchPartial(partialValuesMap, "", cssSelector, matchedCallback) || result), result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
      }return result;
    }, SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
      if (!map || "string" != typeof name) return !1;var selectables = map.get(name) || [],
          starSelectables = map.get("*");if (starSelectables && (selectables = selectables.concat(starSelectables)), 0 === selectables.length) return !1;for (var selectable, result = !1, i = 0; i < selectables.length; i++) selectable = selectables[i], result = selectable.finalize(cssSelector, matchedCallback) || result;return result;
    }, SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
      if (!map || "string" != typeof name) return !1;var nestedSelector = map.get(name);return !!nestedSelector && nestedSelector.match(cssSelector, matchedCallback);
    }, SelectorMatcher;
  }(),
      SelectorListContext = function () {
    function SelectorListContext(selectors) {
      this.selectors = selectors, this.alreadyMatched = !1;
    }return SelectorListContext;
  }(),
      SelectorContext = function () {
    function SelectorContext(selector, cbContext, listContext) {
      this.selector = selector, this.cbContext = cbContext, this.listContext = listContext, this.notSelectors = selector.notSelectors;
    }return SelectorContext.prototype.finalize = function (cssSelector, callback) {
      var result = !0;if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
        var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);result = !notMatcher.match(cssSelector, null);
      }return !result || !callback || this.listContext && this.listContext.alreadyMatched || (this.listContext && (this.listContext.alreadyMatched = !0), callback(this.selector, this.cbContext)), result;
    }, SelectorContext;
  }(),
      MODULE_SUFFIX = "",
      DASH_CASE_REGEXP = /-+([a-z0-9])/g,
      ValueTransformer = function () {
    function ValueTransformer() {}return ValueTransformer.prototype.visitArray = function (arr, context) {
      var _this = this;return arr.map(function (value) {
        return visitValue(value, _this, context);
      });
    }, ValueTransformer.prototype.visitStringMap = function (map, context) {
      var _this = this,
          result = {};return Object.keys(map).forEach(function (key) {
        result[key] = visitValue(map[key], _this, context);
      }), result;
    }, ValueTransformer.prototype.visitPrimitive = function (value, context) {
      return value;
    }, ValueTransformer.prototype.visitOther = function (value, context) {
      return value;
    }, ValueTransformer;
  }(),
      SyncAsyncResult = function () {
    function SyncAsyncResult(syncResult, asyncResult) {
      void 0 === asyncResult && (asyncResult = null), this.syncResult = syncResult, this.asyncResult = asyncResult, asyncResult || (this.asyncResult = Promise.resolve(syncResult));
    }return SyncAsyncResult;
  }(),
      ERROR_SYNTAX_ERROR = "ngSyntaxError",
      STRING_MAP_PROTO = Object.getPrototypeOf({}),
      HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/,
      CompileAnimationEntryMetadata = function () {
    function CompileAnimationEntryMetadata(name, definitions) {
      void 0 === name && (name = null), void 0 === definitions && (definitions = null), this.name = name, this.definitions = definitions;
    }return CompileAnimationEntryMetadata;
  }(),
      CompileAnimationStateMetadata = function () {
    function CompileAnimationStateMetadata() {}return CompileAnimationStateMetadata;
  }(),
      CompileAnimationStateDeclarationMetadata = function (_super) {
    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
      var _this = _super.call(this) || this;return _this.stateNameExpr = stateNameExpr, _this.styles = styles, _this;
    }return __extends(CompileAnimationStateDeclarationMetadata, _super), CompileAnimationStateDeclarationMetadata;
  }(CompileAnimationStateMetadata),
      CompileAnimationStateTransitionMetadata = function (_super) {
    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
      var _this = _super.call(this) || this;return _this.stateChangeExpr = stateChangeExpr, _this.steps = steps, _this;
    }return __extends(CompileAnimationStateTransitionMetadata, _super), CompileAnimationStateTransitionMetadata;
  }(CompileAnimationStateMetadata),
      CompileAnimationMetadata = function () {
    function CompileAnimationMetadata() {}return CompileAnimationMetadata;
  }(),
      CompileAnimationKeyframesSequenceMetadata = function (_super) {
    function CompileAnimationKeyframesSequenceMetadata(steps) {
      void 0 === steps && (steps = []);var _this = _super.call(this) || this;return _this.steps = steps, _this;
    }return __extends(CompileAnimationKeyframesSequenceMetadata, _super), CompileAnimationKeyframesSequenceMetadata;
  }(CompileAnimationMetadata),
      CompileAnimationStyleMetadata = function (_super) {
    function CompileAnimationStyleMetadata(offset, styles) {
      void 0 === styles && (styles = null);var _this = _super.call(this) || this;return _this.offset = offset, _this.styles = styles, _this;
    }return __extends(CompileAnimationStyleMetadata, _super), CompileAnimationStyleMetadata;
  }(CompileAnimationMetadata),
      CompileAnimationAnimateMetadata = function (_super) {
    function CompileAnimationAnimateMetadata(timings, styles) {
      void 0 === timings && (timings = 0), void 0 === styles && (styles = null);var _this = _super.call(this) || this;return _this.timings = timings, _this.styles = styles, _this;
    }return __extends(CompileAnimationAnimateMetadata, _super), CompileAnimationAnimateMetadata;
  }(CompileAnimationMetadata),
      CompileAnimationWithStepsMetadata = function (_super) {
    function CompileAnimationWithStepsMetadata(steps) {
      void 0 === steps && (steps = null);var _this = _super.call(this) || this;return _this.steps = steps, _this;
    }return __extends(CompileAnimationWithStepsMetadata, _super), CompileAnimationWithStepsMetadata;
  }(CompileAnimationMetadata),
      CompileAnimationSequenceMetadata = function (_super) {
    function CompileAnimationSequenceMetadata(steps) {
      return void 0 === steps && (steps = null), _super.call(this, steps) || this;
    }return __extends(CompileAnimationSequenceMetadata, _super), CompileAnimationSequenceMetadata;
  }(CompileAnimationWithStepsMetadata),
      CompileAnimationGroupMetadata = function (_super) {
    function CompileAnimationGroupMetadata(steps) {
      return void 0 === steps && (steps = null), _super.call(this, steps) || this;
    }return __extends(CompileAnimationGroupMetadata, _super), CompileAnimationGroupMetadata;
  }(CompileAnimationWithStepsMetadata),
      _anonymousTypeIndex = 0,
      CompileSummaryKind = {};CompileSummaryKind.Pipe = 0, CompileSummaryKind.Directive = 1, CompileSummaryKind.NgModule = 2, CompileSummaryKind.Injectable = 3, CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe", CompileSummaryKind[CompileSummaryKind.Directive] = "Directive", CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule", CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";var CompileStylesheetMetadata = function () {
    function CompileStylesheetMetadata(_a) {
      var _b = void 0 === _a ? {} : _a,
          moduleUrl = _b.moduleUrl,
          styles = _b.styles,
          styleUrls = _b.styleUrls;this.moduleUrl = moduleUrl || null, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls);
    }return CompileStylesheetMetadata;
  }(),
      CompileTemplateMetadata = function () {
    function CompileTemplateMetadata(_a) {
      var encapsulation = _a.encapsulation,
          template = _a.template,
          templateUrl = _a.templateUrl,
          styles = _a.styles,
          styleUrls = _a.styleUrls,
          externalStylesheets = _a.externalStylesheets,
          animations = _a.animations,
          ngContentSelectors = _a.ngContentSelectors,
          interpolation = _a.interpolation,
          isInline = _a.isInline;if (this.encapsulation = encapsulation, this.template = template, this.templateUrl = templateUrl, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls), this.externalStylesheets = _normalizeArray(externalStylesheets), this.animations = animations ? flatten(animations) : [], this.ngContentSelectors = ngContentSelectors || [], interpolation && 2 != interpolation.length) throw new Error("'interpolation' should have a start and an end symbol.");this.interpolation = interpolation, this.isInline = isInline;
    }return CompileTemplateMetadata.prototype.toSummary = function () {
      return { animations: this.animations.map(function (anim) {
          return anim.name;
        }), ngContentSelectors: this.ngContentSelectors, encapsulation: this.encapsulation };
    }, CompileTemplateMetadata;
  }(),
      CompileDirectiveMetadata = function () {
    function CompileDirectiveMetadata(_a) {
      var isHost = _a.isHost,
          type = _a.type,
          isComponent = _a.isComponent,
          selector = _a.selector,
          exportAs = _a.exportAs,
          changeDetection = _a.changeDetection,
          inputs = _a.inputs,
          outputs = _a.outputs,
          hostListeners = _a.hostListeners,
          hostProperties = _a.hostProperties,
          hostAttributes = _a.hostAttributes,
          providers = _a.providers,
          viewProviders = _a.viewProviders,
          queries = _a.queries,
          viewQueries = _a.viewQueries,
          entryComponents = _a.entryComponents,
          template = _a.template,
          componentViewType = _a.componentViewType,
          rendererType = _a.rendererType,
          componentFactory = _a.componentFactory;this.isHost = !!isHost, this.type = type, this.isComponent = isComponent, this.selector = selector, this.exportAs = exportAs, this.changeDetection = changeDetection, this.inputs = inputs, this.outputs = outputs, this.hostListeners = hostListeners, this.hostProperties = hostProperties, this.hostAttributes = hostAttributes, this.providers = _normalizeArray(providers), this.viewProviders = _normalizeArray(viewProviders), this.queries = _normalizeArray(queries), this.viewQueries = _normalizeArray(viewQueries), this.entryComponents = _normalizeArray(entryComponents), this.template = template, this.componentViewType = componentViewType, this.rendererType = rendererType, this.componentFactory = componentFactory;
    }return CompileDirectiveMetadata.create = function (_a) {
      var isHost = _a.isHost,
          type = _a.type,
          isComponent = _a.isComponent,
          selector = _a.selector,
          exportAs = _a.exportAs,
          changeDetection = _a.changeDetection,
          inputs = _a.inputs,
          outputs = _a.outputs,
          host = _a.host,
          providers = _a.providers,
          viewProviders = _a.viewProviders,
          queries = _a.queries,
          viewQueries = _a.viewQueries,
          entryComponents = _a.entryComponents,
          template = _a.template,
          componentViewType = _a.componentViewType,
          rendererType = _a.rendererType,
          componentFactory = _a.componentFactory,
          hostListeners = {},
          hostProperties = {},
          hostAttributes = {};null != host && Object.keys(host).forEach(function (key) {
        var value = host[key],
            matches = key.match(HOST_REG_EXP);null === matches ? hostAttributes[key] = value : null != matches[1] ? hostProperties[matches[1]] = value : null != matches[2] && (hostListeners[matches[2]] = value);
      });var inputsMap = {};null != inputs && inputs.forEach(function (bindConfig) {
        var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
        inputsMap[parts[0]] = parts[1];
      });var outputsMap = {};return null != outputs && outputs.forEach(function (bindConfig) {
        var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);outputsMap[parts[0]] = parts[1];
      }), new CompileDirectiveMetadata({ isHost: isHost, type: type, isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection, inputs: inputsMap, outputs: outputsMap, hostListeners: hostListeners, hostProperties: hostProperties, hostAttributes: hostAttributes, providers: providers, viewProviders: viewProviders, queries: queries, viewQueries: viewQueries, entryComponents: entryComponents, template: template, componentViewType: componentViewType, rendererType: rendererType, componentFactory: componentFactory });
    }, CompileDirectiveMetadata.prototype.toSummary = function () {
      return { summaryKind: CompileSummaryKind.Directive, type: this.type, isComponent: this.isComponent, selector: this.selector, exportAs: this.exportAs, inputs: this.inputs, outputs: this.outputs, hostListeners: this.hostListeners, hostProperties: this.hostProperties, hostAttributes: this.hostAttributes, providers: this.providers, viewProviders: this.viewProviders, queries: this.queries, viewQueries: this.viewQueries, entryComponents: this.entryComponents, changeDetection: this.changeDetection, template: this.template && this.template.toSummary(), componentViewType: this.componentViewType, rendererType: this.rendererType, componentFactory: this.componentFactory };
    }, CompileDirectiveMetadata;
  }(),
      CompilePipeMetadata = function () {
    function CompilePipeMetadata(_a) {
      var type = _a.type,
          name = _a.name,
          pure = _a.pure;this.type = type, this.name = name, this.pure = !!pure;
    }return CompilePipeMetadata.prototype.toSummary = function () {
      return { summaryKind: CompileSummaryKind.Pipe, type: this.type, name: this.name, pure: this.pure };
    }, CompilePipeMetadata;
  }(),
      CompileNgModuleMetadata = function () {
    function CompileNgModuleMetadata(_a) {
      var type = _a.type,
          providers = _a.providers,
          declaredDirectives = _a.declaredDirectives,
          exportedDirectives = _a.exportedDirectives,
          declaredPipes = _a.declaredPipes,
          exportedPipes = _a.exportedPipes,
          entryComponents = _a.entryComponents,
          bootstrapComponents = _a.bootstrapComponents,
          importedModules = _a.importedModules,
          exportedModules = _a.exportedModules,
          schemas = _a.schemas,
          transitiveModule = _a.transitiveModule,
          id = _a.id;this.type = type || null, this.declaredDirectives = _normalizeArray(declaredDirectives), this.exportedDirectives = _normalizeArray(exportedDirectives), this.declaredPipes = _normalizeArray(declaredPipes), this.exportedPipes = _normalizeArray(exportedPipes), this.providers = _normalizeArray(providers), this.entryComponents = _normalizeArray(entryComponents), this.bootstrapComponents = _normalizeArray(bootstrapComponents), this.importedModules = _normalizeArray(importedModules), this.exportedModules = _normalizeArray(exportedModules), this.schemas = _normalizeArray(schemas), this.id = id || null, this.transitiveModule = transitiveModule || null;
    }return CompileNgModuleMetadata.prototype.toSummary = function () {
      var module = this.transitiveModule;return { summaryKind: CompileSummaryKind.NgModule, type: this.type, entryComponents: module.entryComponents, providers: module.providers, modules: module.modules, exportedDirectives: module.exportedDirectives, exportedPipes: module.exportedPipes };
    }, CompileNgModuleMetadata;
  }(),
      TransitiveCompileNgModuleMetadata = function () {
    function TransitiveCompileNgModuleMetadata() {
      this.directivesSet = new Set(), this.directives = [], this.exportedDirectivesSet = new Set(), this.exportedDirectives = [], this.pipesSet = new Set(), this.pipes = [], this.exportedPipesSet = new Set(), this.exportedPipes = [], this.modulesSet = new Set(), this.modules = [], this.entryComponentsSet = new Set(), this.entryComponents = [], this.providers = [];
    }return TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {
      this.providers.push({ provider: provider, module: module });
    }, TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {
      this.directivesSet.has(id.reference) || (this.directivesSet.add(id.reference), this.directives.push(id));
    }, TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {
      this.exportedDirectivesSet.has(id.reference) || (this.exportedDirectivesSet.add(id.reference), this.exportedDirectives.push(id));
    }, TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {
      this.pipesSet.has(id.reference) || (this.pipesSet.add(id.reference), this.pipes.push(id));
    }, TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {
      this.exportedPipesSet.has(id.reference) || (this.exportedPipesSet.add(id.reference), this.exportedPipes.push(id));
    }, TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {
      this.modulesSet.has(id.reference) || (this.modulesSet.add(id.reference), this.modules.push(id));
    }, TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (ec) {
      this.entryComponentsSet.has(ec.componentType) || (this.entryComponentsSet.add(ec.componentType), this.entryComponents.push(ec));
    }, TransitiveCompileNgModuleMetadata;
  }(),
      ProviderMeta = function () {
    function ProviderMeta(token, _a) {
      var useClass = _a.useClass,
          useValue = _a.useValue,
          useExisting = _a.useExisting,
          useFactory = _a.useFactory,
          deps = _a.deps,
          multi = _a.multi;this.token = token, this.useClass = useClass || null, this.useValue = useValue, this.useExisting = useExisting, this.useFactory = useFactory || null, this.dependencies = deps || null, this.multi = !!multi;
    }return ProviderMeta;
  }(),
      CompilerConfig = function () {
    function CompilerConfig(_a) {
      var _b = void 0 === _a ? {} : _a,
          _c = _b.defaultEncapsulation,
          defaultEncapsulation = void 0 === _c ? _angular_core.ViewEncapsulation.Emulated : _c,
          _d = _b.useJit,
          useJit = void 0 === _d || _d,
          missingTranslation = _b.missingTranslation,
          enableLegacyTemplate = _b.enableLegacyTemplate;this.defaultEncapsulation = defaultEncapsulation, this.useJit = !!useJit, this.missingTranslation = missingTranslation || null, this.enableLegacyTemplate = enableLegacyTemplate !== !1;
    }return CompilerConfig;
  }(),
      ParserError = function () {
    function ParserError(message, input, errLocation, ctxLocation) {
      this.input = input, this.errLocation = errLocation, this.ctxLocation = ctxLocation, this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
    }return ParserError;
  }(),
      ParseSpan = function () {
    function ParseSpan(start, end) {
      this.start = start, this.end = end;
    }return ParseSpan;
  }(),
      AST = function () {
    function AST(span) {
      this.span = span;
    }return AST.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), null;
    }, AST.prototype.toString = function () {
      return "AST";
    }, AST;
  }(),
      Quote = function (_super) {
    function Quote(span, prefix, uninterpretedExpression, location) {
      var _this = _super.call(this, span) || this;return _this.prefix = prefix, _this.uninterpretedExpression = uninterpretedExpression, _this.location = location, _this;
    }return __extends(Quote, _super), Quote.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitQuote(this, context);
    }, Quote.prototype.toString = function () {
      return "Quote";
    }, Quote;
  }(AST),
      EmptyExpr = function (_super) {
    function EmptyExpr() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(EmptyExpr, _super), EmptyExpr.prototype.visit = function (visitor, context) {
      void 0 === context && (context = null);
    }, EmptyExpr;
  }(AST),
      ImplicitReceiver = function (_super) {
    function ImplicitReceiver() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(ImplicitReceiver, _super), ImplicitReceiver.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitImplicitReceiver(this, context);
    }, ImplicitReceiver;
  }(AST),
      Chain = function (_super) {
    function Chain(span, expressions) {
      var _this = _super.call(this, span) || this;return _this.expressions = expressions, _this;
    }return __extends(Chain, _super), Chain.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitChain(this, context);
    }, Chain;
  }(AST),
      Conditional = function (_super) {
    function Conditional(span, condition, trueExp, falseExp) {
      var _this = _super.call(this, span) || this;return _this.condition = condition, _this.trueExp = trueExp, _this.falseExp = falseExp, _this;
    }return __extends(Conditional, _super), Conditional.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitConditional(this, context);
    }, Conditional;
  }(AST),
      PropertyRead = function (_super) {
    function PropertyRead(span, receiver, name) {
      var _this = _super.call(this, span) || this;return _this.receiver = receiver, _this.name = name, _this;
    }return __extends(PropertyRead, _super), PropertyRead.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitPropertyRead(this, context);
    }, PropertyRead;
  }(AST),
      PropertyWrite = function (_super) {
    function PropertyWrite(span, receiver, name, value) {
      var _this = _super.call(this, span) || this;return _this.receiver = receiver, _this.name = name, _this.value = value, _this;
    }return __extends(PropertyWrite, _super), PropertyWrite.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitPropertyWrite(this, context);
    }, PropertyWrite;
  }(AST),
      SafePropertyRead = function (_super) {
    function SafePropertyRead(span, receiver, name) {
      var _this = _super.call(this, span) || this;return _this.receiver = receiver, _this.name = name, _this;
    }return __extends(SafePropertyRead, _super), SafePropertyRead.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitSafePropertyRead(this, context);
    }, SafePropertyRead;
  }(AST),
      KeyedRead = function (_super) {
    function KeyedRead(span, obj, key) {
      var _this = _super.call(this, span) || this;return _this.obj = obj, _this.key = key, _this;
    }return __extends(KeyedRead, _super), KeyedRead.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitKeyedRead(this, context);
    }, KeyedRead;
  }(AST),
      KeyedWrite = function (_super) {
    function KeyedWrite(span, obj, key, value) {
      var _this = _super.call(this, span) || this;return _this.obj = obj, _this.key = key, _this.value = value, _this;
    }return __extends(KeyedWrite, _super), KeyedWrite.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitKeyedWrite(this, context);
    }, KeyedWrite;
  }(AST),
      BindingPipe = function (_super) {
    function BindingPipe(span, exp, name, args) {
      var _this = _super.call(this, span) || this;return _this.exp = exp, _this.name = name, _this.args = args, _this;
    }return __extends(BindingPipe, _super), BindingPipe.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitPipe(this, context);
    }, BindingPipe;
  }(AST),
      LiteralPrimitive = function (_super) {
    function LiteralPrimitive(span, value) {
      var _this = _super.call(this, span) || this;return _this.value = value, _this;
    }return __extends(LiteralPrimitive, _super), LiteralPrimitive.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitLiteralPrimitive(this, context);
    }, LiteralPrimitive;
  }(AST),
      LiteralArray = function (_super) {
    function LiteralArray(span, expressions) {
      var _this = _super.call(this, span) || this;return _this.expressions = expressions, _this;
    }return __extends(LiteralArray, _super), LiteralArray.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitLiteralArray(this, context);
    }, LiteralArray;
  }(AST),
      LiteralMap = function (_super) {
    function LiteralMap(span, keys, values) {
      var _this = _super.call(this, span) || this;return _this.keys = keys, _this.values = values, _this;
    }return __extends(LiteralMap, _super), LiteralMap.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitLiteralMap(this, context);
    }, LiteralMap;
  }(AST),
      Interpolation = function (_super) {
    function Interpolation(span, strings, expressions) {
      var _this = _super.call(this, span) || this;return _this.strings = strings, _this.expressions = expressions, _this;
    }return __extends(Interpolation, _super), Interpolation.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitInterpolation(this, context);
    }, Interpolation;
  }(AST),
      Binary = function (_super) {
    function Binary(span, operation, left, right) {
      var _this = _super.call(this, span) || this;return _this.operation = operation, _this.left = left, _this.right = right, _this;
    }return __extends(Binary, _super), Binary.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitBinary(this, context);
    }, Binary;
  }(AST),
      PrefixNot = function (_super) {
    function PrefixNot(span, expression) {
      var _this = _super.call(this, span) || this;return _this.expression = expression, _this;
    }return __extends(PrefixNot, _super), PrefixNot.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitPrefixNot(this, context);
    }, PrefixNot;
  }(AST),
      MethodCall = function (_super) {
    function MethodCall(span, receiver, name, args) {
      var _this = _super.call(this, span) || this;return _this.receiver = receiver, _this.name = name, _this.args = args, _this;
    }return __extends(MethodCall, _super), MethodCall.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitMethodCall(this, context);
    }, MethodCall;
  }(AST),
      SafeMethodCall = function (_super) {
    function SafeMethodCall(span, receiver, name, args) {
      var _this = _super.call(this, span) || this;return _this.receiver = receiver, _this.name = name, _this.args = args, _this;
    }return __extends(SafeMethodCall, _super), SafeMethodCall.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitSafeMethodCall(this, context);
    }, SafeMethodCall;
  }(AST),
      FunctionCall = function (_super) {
    function FunctionCall(span, target, args) {
      var _this = _super.call(this, span) || this;return _this.target = target, _this.args = args, _this;
    }return __extends(FunctionCall, _super), FunctionCall.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), visitor.visitFunctionCall(this, context);
    }, FunctionCall;
  }(AST),
      ASTWithSource = function (_super) {
    function ASTWithSource(ast, source, location, errors) {
      var _this = _super.call(this, new ParseSpan(0, null == source ? 0 : source.length)) || this;return _this.ast = ast, _this.source = source, _this.location = location, _this.errors = errors, _this;
    }return __extends(ASTWithSource, _super), ASTWithSource.prototype.visit = function (visitor, context) {
      return void 0 === context && (context = null), this.ast.visit(visitor, context);
    }, ASTWithSource.prototype.toString = function () {
      return this.source + " in " + this.location;
    }, ASTWithSource;
  }(AST),
      TemplateBinding = function () {
    function TemplateBinding(span, key, keyIsVar, name, expression) {
      this.span = span, this.key = key, this.keyIsVar = keyIsVar, this.name = name, this.expression = expression;
    }return TemplateBinding;
  }(),
      RecursiveAstVisitor = function () {
    function RecursiveAstVisitor() {}return RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
      return ast.left.visit(this), ast.right.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitChain = function (ast, context) {
      return this.visitAll(ast.expressions, context);
    }, RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
      return ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
      return ast.exp.visit(this), this.visitAll(ast.args, context), null;
    }, RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
      return ast.target.visit(this), this.visitAll(ast.args, context), null;
    }, RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) {
      return null;
    }, RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
      return this.visitAll(ast.expressions, context);
    }, RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
      return ast.obj.visit(this), ast.key.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
      return ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
      return this.visitAll(ast.expressions, context);
    }, RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) {
      return this.visitAll(ast.values, context);
    }, RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) {
      return null;
    }, RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
      return ast.receiver.visit(this), this.visitAll(ast.args, context);
    }, RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
      return ast.expression.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
      return ast.receiver.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
      return ast.receiver.visit(this), ast.value.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
      return ast.receiver.visit(this), null;
    }, RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
      return ast.receiver.visit(this), this.visitAll(ast.args, context);
    }, RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
      var _this = this;return asts.forEach(function (ast) {
        return ast.visit(_this, context);
      }), null;
    }, RecursiveAstVisitor.prototype.visitQuote = function (ast, context) {
      return null;
    }, RecursiveAstVisitor;
  }(),
      AstTransformer = function () {
    function AstTransformer() {}return AstTransformer.prototype.visitImplicitReceiver = function (ast, context) {
      return ast;
    }, AstTransformer.prototype.visitInterpolation = function (ast, context) {
      return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
    }, AstTransformer.prototype.visitLiteralPrimitive = function (ast, context) {
      return new LiteralPrimitive(ast.span, ast.value);
    }, AstTransformer.prototype.visitPropertyRead = function (ast, context) {
      return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
    }, AstTransformer.prototype.visitPropertyWrite = function (ast, context) {
      return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));
    }, AstTransformer.prototype.visitSafePropertyRead = function (ast, context) {
      return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
    }, AstTransformer.prototype.visitMethodCall = function (ast, context) {
      return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
    }, AstTransformer.prototype.visitSafeMethodCall = function (ast, context) {
      return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
    }, AstTransformer.prototype.visitFunctionCall = function (ast, context) {
      return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));
    }, AstTransformer.prototype.visitLiteralArray = function (ast, context) {
      return new LiteralArray(ast.span, this.visitAll(ast.expressions));
    }, AstTransformer.prototype.visitLiteralMap = function (ast, context) {
      return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
    }, AstTransformer.prototype.visitBinary = function (ast, context) {
      return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
    }, AstTransformer.prototype.visitPrefixNot = function (ast, context) {
      return new PrefixNot(ast.span, ast.expression.visit(this));
    }, AstTransformer.prototype.visitConditional = function (ast, context) {
      return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
    }, AstTransformer.prototype.visitPipe = function (ast, context) {
      return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
    }, AstTransformer.prototype.visitKeyedRead = function (ast, context) {
      return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
    }, AstTransformer.prototype.visitKeyedWrite = function (ast, context) {
      return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
    }, AstTransformer.prototype.visitAll = function (asts) {
      for (var res = new Array(asts.length), i = 0; i < asts.length; ++i) res[i] = asts[i].visit(this);return res;
    }, AstTransformer.prototype.visitChain = function (ast, context) {
      return new Chain(ast.span, this.visitAll(ast.expressions));
    }, AstTransformer.prototype.visitQuote = function (ast, context) {
      return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
    }, AstTransformer;
  }(),
      $EOF = 0,
      $TAB = 9,
      $LF = 10,
      $VTAB = 11,
      $FF = 12,
      $CR = 13,
      $SPACE = 32,
      $BANG = 33,
      $DQ = 34,
      $HASH = 35,
      $$ = 36,
      $PERCENT = 37,
      $AMPERSAND = 38,
      $SQ = 39,
      $LPAREN = 40,
      $RPAREN = 41,
      $STAR = 42,
      $PLUS = 43,
      $COMMA = 44,
      $MINUS = 45,
      $PERIOD = 46,
      $SLASH = 47,
      $COLON = 58,
      $SEMICOLON = 59,
      $LT = 60,
      $EQ = 61,
      $GT = 62,
      $QUESTION = 63,
      $0 = 48,
      $9 = 57,
      $A = 65,
      $E = 69,
      $F = 70,
      $X = 88,
      $Z = 90,
      $LBRACKET = 91,
      $BACKSLASH = 92,
      $RBRACKET = 93,
      $CARET = 94,
      $_ = 95,
      $a = 97,
      $e = 101,
      $f = 102,
      $n = 110,
      $r = 114,
      $t = 116,
      $u = 117,
      $v = 118,
      $x = 120,
      $z = 122,
      $LBRACE = 123,
      $BAR = 124,
      $RBRACE = 125,
      $NBSP = 160,
      $BT = 96,
      INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//],
      InterpolationConfig = function () {
    function InterpolationConfig(start, end) {
      this.start = start, this.end = end;
    }return InterpolationConfig.fromArray = function (markers) {
      return markers ? (assertInterpolationSymbols("interpolation", markers), new InterpolationConfig(markers[0], markers[1])) : DEFAULT_INTERPOLATION_CONFIG;
    }, InterpolationConfig;
  }(),
      DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}"),
      TokenType = {};TokenType.Character = 0, TokenType.Identifier = 1, TokenType.Keyword = 2, TokenType.String = 3, TokenType.Operator = 4, TokenType.Number = 5, TokenType.Error = 6, TokenType[TokenType.Character] = "Character", TokenType[TokenType.Identifier] = "Identifier", TokenType[TokenType.Keyword] = "Keyword", TokenType[TokenType.String] = "String", TokenType[TokenType.Operator] = "Operator", TokenType[TokenType.Number] = "Number", TokenType[TokenType.Error] = "Error";var KEYWORDS = ["var", "let", "as", "null", "undefined", "true", "false", "if", "else", "this"],
      Lexer = function () {
    function Lexer() {}return Lexer.prototype.tokenize = function (text) {
      for (var scanner = new _Scanner(text), tokens = [], token = scanner.scanToken(); null != token;) tokens.push(token), token = scanner.scanToken();return tokens;
    }, Lexer;
  }();Lexer.decorators = [{ type: CompilerInjectable }], Lexer.ctorParameters = function () {
    return [];
  };var Token = function () {
    function Token(index, type, numValue, strValue) {
      this.index = index, this.type = type, this.numValue = numValue, this.strValue = strValue;
    }return Token.prototype.isCharacter = function (code) {
      return this.type == TokenType.Character && this.numValue == code;
    }, Token.prototype.isNumber = function () {
      return this.type == TokenType.Number;
    }, Token.prototype.isString = function () {
      return this.type == TokenType.String;
    }, Token.prototype.isOperator = function (operater) {
      return this.type == TokenType.Operator && this.strValue == operater;
    }, Token.prototype.isIdentifier = function () {
      return this.type == TokenType.Identifier;
    }, Token.prototype.isKeyword = function () {
      return this.type == TokenType.Keyword;
    }, Token.prototype.isKeywordLet = function () {
      return this.type == TokenType.Keyword && "let" == this.strValue;
    }, Token.prototype.isKeywordAs = function () {
      return this.type == TokenType.Keyword && "as" == this.strValue;
    }, Token.prototype.isKeywordNull = function () {
      return this.type == TokenType.Keyword && "null" == this.strValue;
    }, Token.prototype.isKeywordUndefined = function () {
      return this.type == TokenType.Keyword && "undefined" == this.strValue;
    }, Token.prototype.isKeywordTrue = function () {
      return this.type == TokenType.Keyword && "true" == this.strValue;
    }, Token.prototype.isKeywordFalse = function () {
      return this.type == TokenType.Keyword && "false" == this.strValue;
    }, Token.prototype.isKeywordThis = function () {
      return this.type == TokenType.Keyword && "this" == this.strValue;
    }, Token.prototype.isError = function () {
      return this.type == TokenType.Error;
    }, Token.prototype.toNumber = function () {
      return this.type == TokenType.Number ? this.numValue : -1;
    }, Token.prototype.toString = function () {
      switch (this.type) {case TokenType.Character:case TokenType.Identifier:case TokenType.Keyword:case TokenType.Operator:case TokenType.String:case TokenType.Error:
          return this.strValue;case TokenType.Number:
          return this.numValue.toString();default:
          return null;}
    }, Token;
  }(),
      EOF = new Token(-1, TokenType.Character, 0, ""),
      _Scanner = function () {
    function _Scanner(input) {
      this.input = input, this.peek = 0, this.index = -1, this.length = input.length, this.advance();
    }return _Scanner.prototype.advance = function () {
      this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
    }, _Scanner.prototype.scanToken = function () {
      for (var input = this.input, length = this.length, peek = this.peek, index = this.index; peek <= $SPACE;) {
        if (++index >= length) {
          peek = $EOF;break;
        }peek = input.charCodeAt(index);
      }if (this.peek = peek, this.index = index, index >= length) return null;if (isIdentifierStart(peek)) return this.scanIdentifier();if (isDigit(peek)) return this.scanNumber(index);var start = index;switch (peek) {case $PERIOD:
          return this.advance(), isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);case $LPAREN:case $RPAREN:case $LBRACE:case $RBRACE:case $LBRACKET:case $RBRACKET:case $COMMA:case $COLON:case $SEMICOLON:
          return this.scanCharacter(start, peek);case $SQ:case $DQ:
          return this.scanString();case $HASH:case $PLUS:case $MINUS:case $STAR:case $SLASH:case $PERCENT:case $CARET:
          return this.scanOperator(start, String.fromCharCode(peek));case $QUESTION:
          return this.scanComplexOperator(start, "?", $PERIOD, ".");case $LT:case $GT:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=");case $BANG:case $EQ:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "=");case $AMPERSAND:
          return this.scanComplexOperator(start, "&", $AMPERSAND, "&");case $BAR:
          return this.scanComplexOperator(start, "|", $BAR, "|");case $NBSP:
          for (; isWhitespace(this.peek);) this.advance();return this.scanToken();}return this.advance(), this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
    }, _Scanner.prototype.scanCharacter = function (start, code) {
      return this.advance(), newCharacterToken(start, code);
    }, _Scanner.prototype.scanOperator = function (start, str) {
      return this.advance(), newOperatorToken(start, str);
    }, _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
      this.advance();var str = one;return this.peek == twoCode && (this.advance(), str += two), null != threeCode && this.peek == threeCode && (this.advance(), str += three), newOperatorToken(start, str);
    }, _Scanner.prototype.scanIdentifier = function () {
      var start = this.index;for (this.advance(); isIdentifierPart(this.peek);) this.advance();var str = this.input.substring(start, this.index);return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
    }, _Scanner.prototype.scanNumber = function (start) {
      var simple = this.index === start;for (this.advance();;) {
        if (isDigit(this.peek)) ;else if (this.peek == $PERIOD) simple = !1;else {
          if (!isExponentStart(this.peek)) break;if (this.advance(), isExponentSign(this.peek) && this.advance(), !isDigit(this.peek)) return this.error("Invalid exponent", -1);simple = !1;
        }this.advance();
      }var str = this.input.substring(start, this.index),
          value = simple ? parseIntAutoRadix(str) : parseFloat(str);return newNumberToken(start, value);
    }, _Scanner.prototype.scanString = function () {
      var start = this.index,
          quote = this.peek;this.advance();for (var buffer = "", marker = this.index, input = this.input; this.peek != quote;) if (this.peek == $BACKSLASH) {
        buffer += input.substring(marker, this.index), this.advance();var unescapedCode = void 0;if (this.peek = this.peek, this.peek == $u) {
          var hex = input.substring(this.index + 1, this.index + 5);if (!/^[0-9a-f]+$/i.test(hex)) return this.error("Invalid unicode escape [\\u" + hex + "]", 0);unescapedCode = parseInt(hex, 16);for (var i = 0; i < 5; i++) this.advance();
        } else unescapedCode = unescape(this.peek), this.advance();buffer += String.fromCharCode(unescapedCode), marker = this.index;
      } else {
        if (this.peek == $EOF) return this.error("Unterminated quote", 0);this.advance();
      }var last = input.substring(marker, this.index);return this.advance(), newStringToken(start, buffer + last);
    }, _Scanner.prototype.error = function (message, offset) {
      var position = this.index + offset;return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
    }, _Scanner;
  }(),
      SplitInterpolation = function () {
    function SplitInterpolation(strings, expressions, offsets) {
      this.strings = strings, this.expressions = expressions, this.offsets = offsets;
    }return SplitInterpolation;
  }(),
      TemplateBindingParseResult = function () {
    function TemplateBindingParseResult(templateBindings, warnings, errors) {
      this.templateBindings = templateBindings, this.warnings = warnings, this.errors = errors;
    }return TemplateBindingParseResult;
  }(),
      Parser = function () {
    function Parser(_lexer) {
      this._lexer = _lexer, this.errors = [];
    }return Parser.prototype.parseAction = function (input, location, interpolationConfig) {
      void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._checkNoInterpolation(input, location, interpolationConfig);var sourceToLex = this._stripComments(input),
          tokens = this._lexer.tokenize(this._stripComments(input)),
          ast = new _ParseAST(input, location, tokens, sourceToLex.length, !0, this.errors, input.length - sourceToLex.length).parseChain();return new ASTWithSource(ast, input, location, this.errors);
    }, Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
      void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);var ast = this._parseBindingAst(input, location, interpolationConfig);return new ASTWithSource(ast, input, location, this.errors);
    }, Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
      void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);var ast = this._parseBindingAst(input, location, interpolationConfig),
          errors = SimpleExpressionChecker.check(ast);return errors.length > 0 && this._reportError("Host binding expression cannot contain " + errors.join(" "), input, location), new ASTWithSource(ast, input, location, this.errors);
    }, Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
      this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
    }, Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
      var quote = this._parseQuote(input, location);if (null != quote) return quote;this._checkNoInterpolation(input, location, interpolationConfig);var sourceToLex = this._stripComments(input),
          tokens = this._lexer.tokenize(sourceToLex);return new _ParseAST(input, location, tokens, sourceToLex.length, !1, this.errors, input.length - sourceToLex.length).parseChain();
    }, Parser.prototype._parseQuote = function (input, location) {
      if (null == input) return null;var prefixSeparatorIndex = input.indexOf(":");if (prefixSeparatorIndex == -1) return null;var prefix = input.substring(0, prefixSeparatorIndex).trim();if (!isIdentifier(prefix)) return null;var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
    }, Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
      var tokens = this._lexer.tokenize(input);if (prefixToken) {
        var prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
          return t.index = 0, t;
        });tokens.unshift.apply(tokens, prefixTokens);
      }return new _ParseAST(input, location, tokens, input.length, !1, this.errors, 0).parseTemplateBindings();
    }, Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
      void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);var split = this.splitInterpolation(input, location, interpolationConfig);if (null == split) return null;for (var expressions = [], i = 0; i < split.expressions.length; ++i) {
        var expressionText = split.expressions[i],
            sourceToLex = this._stripComments(expressionText),
            tokens = this._lexer.tokenize(this._stripComments(split.expressions[i])),
            ast = new _ParseAST(input, location, tokens, sourceToLex.length, !1, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();expressions.push(ast);
      }return new ASTWithSource(new Interpolation(new ParseSpan(0, null == input ? 0 : input.length), split.strings, expressions), input, location, this.errors);
    }, Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
      void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);var regexp = _createInterpolateRegExp(interpolationConfig),
          parts = input.split(regexp);if (parts.length <= 1) return null;for (var strings = [], expressions = [], offsets = [], offset = 0, i = 0; i < parts.length; i++) {
        var part = parts[i];i % 2 === 0 ? (strings.push(part), offset += part.length) : part.trim().length > 0 ? (offset += interpolationConfig.start.length, expressions.push(part), offsets.push(offset), offset += part.length + interpolationConfig.end.length) : (this._reportError("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location), expressions.push("$implict"), offsets.push(offset));
      }return new SplitInterpolation(strings, expressions, offsets);
    }, Parser.prototype.wrapLiteralPrimitive = function (input, location) {
      return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, null == input ? 0 : input.length), input), input, location, this.errors);
    }, Parser.prototype._stripComments = function (input) {
      var i = this._commentStart(input);return null != i ? input.substring(0, i).trim() : input;
    }, Parser.prototype._commentStart = function (input) {
      for (var outerQuote = null, i = 0; i < input.length - 1; i++) {
        var char = input.charCodeAt(i),
            nextChar = input.charCodeAt(i + 1);if (char === $SLASH && nextChar == $SLASH && null == outerQuote) return i;outerQuote === char ? outerQuote = null : null == outerQuote && isQuote(char) && (outerQuote = char);
      }return null;
    }, Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
      var regexp = _createInterpolateRegExp(interpolationConfig),
          parts = input.split(regexp);parts.length > 1 && this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
    }, Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
      for (var errLocation = "", j = 0; j < partInErrIdx; j++) errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;return errLocation.length;
    }, Parser;
  }();Parser.decorators = [{ type: CompilerInjectable }], Parser.ctorParameters = function () {
    return [{ type: Lexer }];
  };var _ParseAST = function () {
    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
      this.input = input, this.location = location, this.tokens = tokens, this.inputLength = inputLength, this.parseAction = parseAction, this.errors = errors, this.offset = offset, this.rparensExpected = 0, this.rbracketsExpected = 0, this.rbracesExpected = 0, this.index = 0;
    }return _ParseAST.prototype.peek = function (offset) {
      var i = this.index + offset;return i < this.tokens.length ? this.tokens[i] : EOF;
    }, Object.defineProperty(_ParseAST.prototype, "next", { get: function () {
        return this.peek(0);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(_ParseAST.prototype, "inputIndex", { get: function () {
        return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset;
      }, enumerable: !0, configurable: !0 }), _ParseAST.prototype.span = function (start) {
      return new ParseSpan(start, this.inputIndex);
    }, _ParseAST.prototype.advance = function () {
      this.index++;
    }, _ParseAST.prototype.optionalCharacter = function (code) {
      return !!this.next.isCharacter(code) && (this.advance(), !0);
    }, _ParseAST.prototype.peekKeywordLet = function () {
      return this.next.isKeywordLet();
    }, _ParseAST.prototype.peekKeywordAs = function () {
      return this.next.isKeywordAs();
    }, _ParseAST.prototype.expectCharacter = function (code) {
      this.optionalCharacter(code) || this.error("Missing expected " + String.fromCharCode(code));
    }, _ParseAST.prototype.optionalOperator = function (op) {
      return !!this.next.isOperator(op) && (this.advance(), !0);
    }, _ParseAST.prototype.expectOperator = function (operator) {
      this.optionalOperator(operator) || this.error("Missing expected operator " + operator);
    }, _ParseAST.prototype.expectIdentifierOrKeyword = function () {
      var n = this.next;return n.isIdentifier() || n.isKeyword() ? (this.advance(), n.toString()) : (this.error("Unexpected token " + n + ", expected identifier or keyword"), "");
    }, _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
      var n = this.next;return n.isIdentifier() || n.isKeyword() || n.isString() ? (this.advance(), n.toString()) : (this.error("Unexpected token " + n + ", expected identifier, keyword, or string"), "");
    }, _ParseAST.prototype.parseChain = function () {
      for (var exprs = [], start = this.inputIndex; this.index < this.tokens.length;) {
        var expr = this.parsePipe();if (exprs.push(expr), this.optionalCharacter($SEMICOLON)) for (this.parseAction || this.error("Binding expression cannot contain chained expression"); this.optionalCharacter($SEMICOLON););else this.index < this.tokens.length && this.error("Unexpected token '" + this.next + "'");
      }return 0 == exprs.length ? new EmptyExpr(this.span(start)) : 1 == exprs.length ? exprs[0] : new Chain(this.span(start), exprs);
    }, _ParseAST.prototype.parsePipe = function () {
      var result = this.parseExpression();if (this.optionalOperator("|")) {
        this.parseAction && this.error("Cannot have a pipe in an action expression");do {
          for (var name = this.expectIdentifierOrKeyword(), args = []; this.optionalCharacter($COLON);) args.push(this.parseExpression());result = new BindingPipe(this.span(result.span.start), result, name, args);
        } while (this.optionalOperator("|"));
      }return result;
    }, _ParseAST.prototype.parseExpression = function () {
      return this.parseConditional();
    }, _ParseAST.prototype.parseConditional = function () {
      var start = this.inputIndex,
          result = this.parseLogicalOr();if (this.optionalOperator("?")) {
        var yes = this.parsePipe(),
            no = void 0;if (this.optionalCharacter($COLON)) no = this.parsePipe();else {
          var end = this.inputIndex,
              expression = this.input.substring(start, end);this.error("Conditional expression " + expression + " requires all 3 expressions"), no = new EmptyExpr(this.span(start));
        }return new Conditional(this.span(start), result, yes, no);
      }return result;
    }, _ParseAST.prototype.parseLogicalOr = function () {
      for (var result = this.parseLogicalAnd(); this.optionalOperator("||");) {
        var right = this.parseLogicalAnd();result = new Binary(this.span(result.span.start), "||", result, right);
      }return result;
    }, _ParseAST.prototype.parseLogicalAnd = function () {
      for (var result = this.parseEquality(); this.optionalOperator("&&");) {
        var right = this.parseEquality();result = new Binary(this.span(result.span.start), "&&", result, right);
      }return result;
    }, _ParseAST.prototype.parseEquality = function () {
      for (var result = this.parseRelational(); this.next.type == TokenType.Operator;) {
        var operator = this.next.strValue;switch (operator) {case "==":case "===":case "!=":case "!==":
            this.advance();var right = this.parseRelational();result = new Binary(this.span(result.span.start), operator, result, right);continue;}break;
      }return result;
    }, _ParseAST.prototype.parseRelational = function () {
      for (var result = this.parseAdditive(); this.next.type == TokenType.Operator;) {
        var operator = this.next.strValue;switch (operator) {case "<":case ">":case "<=":case ">=":
            this.advance();var right = this.parseAdditive();result = new Binary(this.span(result.span.start), operator, result, right);continue;}break;
      }return result;
    }, _ParseAST.prototype.parseAdditive = function () {
      for (var result = this.parseMultiplicative(); this.next.type == TokenType.Operator;) {
        var operator = this.next.strValue;switch (operator) {case "+":case "-":
            this.advance();var right = this.parseMultiplicative();result = new Binary(this.span(result.span.start), operator, result, right);continue;}break;
      }return result;
    }, _ParseAST.prototype.parseMultiplicative = function () {
      for (var result = this.parsePrefix(); this.next.type == TokenType.Operator;) {
        var operator = this.next.strValue;switch (operator) {case "*":case "%":case "/":
            this.advance();var right = this.parsePrefix();result = new Binary(this.span(result.span.start), operator, result, right);continue;}break;
      }return result;
    }, _ParseAST.prototype.parsePrefix = function () {
      if (this.next.type == TokenType.Operator) {
        var start = this.inputIndex,
            operator = this.next.strValue,
            result = void 0;switch (operator) {case "+":
            return this.advance(), this.parsePrefix();case "-":
            return this.advance(), result = this.parsePrefix(), new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);case "!":
            return this.advance(), result = this.parsePrefix(), new PrefixNot(this.span(start), result);}
      }return this.parseCallChain();
    }, _ParseAST.prototype.parseCallChain = function () {
      for (var result = this.parsePrimary();;) if (this.optionalCharacter($PERIOD)) result = this.parseAccessMemberOrMethodCall(result, !1);else if (this.optionalOperator("?.")) result = this.parseAccessMemberOrMethodCall(result, !0);else if (this.optionalCharacter($LBRACKET)) {
        this.rbracketsExpected++;var key = this.parsePipe();if (this.rbracketsExpected--, this.expectCharacter($RBRACKET), this.optionalOperator("=")) {
          var value = this.parseConditional();result = new KeyedWrite(this.span(result.span.start), result, key, value);
        } else result = new KeyedRead(this.span(result.span.start), result, key);
      } else {
        if (!this.optionalCharacter($LPAREN)) return result;this.rparensExpected++;var args = this.parseCallArguments();this.rparensExpected--, this.expectCharacter($RPAREN), result = new FunctionCall(this.span(result.span.start), result, args);
      }
    }, _ParseAST.prototype.parsePrimary = function () {
      var start = this.inputIndex;if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;var result = this.parsePipe();return this.rparensExpected--, this.expectCharacter($RPAREN), result;
      }if (this.next.isKeywordNull()) return this.advance(), new LiteralPrimitive(this.span(start), null);if (this.next.isKeywordUndefined()) return this.advance(), new LiteralPrimitive(this.span(start), void 0);if (this.next.isKeywordTrue()) return this.advance(), new LiteralPrimitive(this.span(start), !0);if (this.next.isKeywordFalse()) return this.advance(), new LiteralPrimitive(this.span(start), !1);if (this.next.isKeywordThis()) return this.advance(), new ImplicitReceiver(this.span(start));if (this.optionalCharacter($LBRACKET)) {
        this.rbracketsExpected++;var elements = this.parseExpressionList($RBRACKET);return this.rbracketsExpected--, this.expectCharacter($RBRACKET), new LiteralArray(this.span(start), elements);
      }if (this.next.isCharacter($LBRACE)) return this.parseLiteralMap();if (this.next.isIdentifier()) return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), !1);if (this.next.isNumber()) {
        var value = this.next.toNumber();return this.advance(), new LiteralPrimitive(this.span(start), value);
      }if (this.next.isString()) {
        var literalValue = this.next.toString();return this.advance(), new LiteralPrimitive(this.span(start), literalValue);
      }return this.index >= this.tokens.length ? (this.error("Unexpected end of expression: " + this.input), new EmptyExpr(this.span(start))) : (this.error("Unexpected token " + this.next), new EmptyExpr(this.span(start)));
    }, _ParseAST.prototype.parseExpressionList = function (terminator) {
      var result = [];if (!this.next.isCharacter(terminator)) do result.push(this.parsePipe()); while (this.optionalCharacter($COMMA));return result;
    }, _ParseAST.prototype.parseLiteralMap = function () {
      var keys = [],
          values = [],
          start = this.inputIndex;if (this.expectCharacter($LBRACE), !this.optionalCharacter($RBRACE)) {
        this.rbracesExpected++;do {
          var key = this.expectIdentifierOrKeywordOrString();keys.push(key), this.expectCharacter($COLON), values.push(this.parsePipe());
        } while (this.optionalCharacter($COMMA));this.rbracesExpected--, this.expectCharacter($RBRACE);
      }return new LiteralMap(this.span(start), keys, values);
    }, _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
      void 0 === isSafe && (isSafe = !1);var start = receiver.span.start,
          id = this.expectIdentifierOrKeyword();if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;var args = this.parseCallArguments();this.expectCharacter($RPAREN), this.rparensExpected--;var span = this.span(start);return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
      }if (isSafe) return this.optionalOperator("=") ? (this.error("The '?.' operator cannot be used in the assignment"), new EmptyExpr(this.span(start))) : new SafePropertyRead(this.span(start), receiver, id);if (this.optionalOperator("=")) {
        if (!this.parseAction) return this.error("Bindings cannot contain assignments"), new EmptyExpr(this.span(start));var value = this.parseConditional();return new PropertyWrite(this.span(start), receiver, id, value);
      }return new PropertyRead(this.span(start), receiver, id);
    }, _ParseAST.prototype.parseCallArguments = function () {
      if (this.next.isCharacter($RPAREN)) return [];var positionals = [];do positionals.push(this.parsePipe()); while (this.optionalCharacter($COMMA));return positionals;
    }, _ParseAST.prototype.expectTemplateBindingKey = function () {
      var result = "",
          operatorFound = !1;do result += this.expectIdentifierOrKeywordOrString(), operatorFound = this.optionalOperator("-"), operatorFound && (result += "-"); while (operatorFound);return result.toString();
    }, _ParseAST.prototype.parseTemplateBindings = function () {
      for (var bindings = [], prefix = null, warnings = []; this.index < this.tokens.length;) {
        var start = this.inputIndex,
            keyIsVar = this.peekKeywordLet();keyIsVar && this.advance();var rawKey = this.expectTemplateBindingKey(),
            key = rawKey;keyIsVar || (null == prefix ? prefix = key : key = prefix + key[0].toUpperCase() + key.substring(1)), this.optionalCharacter($COLON);var name = null,
            expression = null;if (keyIsVar) name = this.optionalOperator("=") ? this.expectTemplateBindingKey() : "$implicit";else if (this.peekKeywordAs()) {
          var letStart = this.inputIndex;this.advance(), name = rawKey, key = this.expectTemplateBindingKey(), keyIsVar = !0;
        } else if (this.next !== EOF && !this.peekKeywordLet()) {
          var start_2 = this.inputIndex,
              ast = this.parsePipe(),
              source = this.input.substring(start_2 - this.offset, this.inputIndex - this.offset);expression = new ASTWithSource(ast, source, this.location, this.errors);
        }if (bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression)), this.peekKeywordAs() && !keyIsVar) {
          var letStart = this.inputIndex;this.advance();var letName = this.expectTemplateBindingKey();bindings.push(new TemplateBinding(this.span(letStart), letName, !0, key, null));
        }this.optionalCharacter($SEMICOLON) || this.optionalCharacter($COMMA);
      }return new TemplateBindingParseResult(bindings, warnings, this.errors);
    }, _ParseAST.prototype.error = function (message, index) {
      void 0 === index && (index = null), this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location)), this.skip();
    }, _ParseAST.prototype.locationText = function (index) {
      return void 0 === index && (index = null), null == index && (index = this.index), index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
    }, _ParseAST.prototype.skip = function () {
      for (var n = this.next; this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET));) this.next.isError() && this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location)), this.advance(), n = this.next;
    }, _ParseAST;
  }(),
      SimpleExpressionChecker = function () {
    function SimpleExpressionChecker() {
      this.errors = [];
    }return SimpleExpressionChecker.check = function (ast) {
      var s = new SimpleExpressionChecker();return ast.visit(s), s.errors;
    }, SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) {}, SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) {}, SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) {}, SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) {}, SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) {}, SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) {}, SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) {}, SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) {}, SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) {}, SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) {
      this.visitAll(ast.expressions);
    }, SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) {
      this.visitAll(ast.values);
    }, SimpleExpressionChecker.prototype.visitBinary = function (ast, context) {}, SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) {}, SimpleExpressionChecker.prototype.visitConditional = function (ast, context) {}, SimpleExpressionChecker.prototype.visitPipe = function (ast, context) {
      this.errors.push("pipes");
    }, SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) {}, SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) {}, SimpleExpressionChecker.prototype.visitAll = function (asts) {
      var _this = this;return asts.map(function (node) {
        return node.visit(_this);
      });
    }, SimpleExpressionChecker.prototype.visitChain = function (ast, context) {}, SimpleExpressionChecker.prototype.visitQuote = function (ast, context) {}, SimpleExpressionChecker;
  }(),
      ParseLocation = function () {
    function ParseLocation(file, offset, line, col) {
      this.file = file, this.offset = offset, this.line = line, this.col = col;
    }return ParseLocation.prototype.toString = function () {
      return null != this.offset ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
    }, ParseLocation.prototype.moveBy = function (delta) {
      for (var source = this.file.content, len = source.length, offset = this.offset, line = this.line, col = this.col; offset > 0 && delta < 0;) {
        offset--, delta++;var ch = source.charCodeAt(offset);if (ch == $LF) {
          line--;var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));col = priorLine > 0 ? offset - priorLine : offset;
        } else col--;
      }for (; offset < len && delta > 0;) {
        var ch = source.charCodeAt(offset);offset++, delta--, ch == $LF ? (line++, col = 0) : col++;
      }return new ParseLocation(this.file, offset, line, col);
    }, ParseLocation.prototype.getContext = function (maxChars, maxLines) {
      var content = this.file.content,
          startOffset = this.offset;if (null != startOffset) {
        startOffset > content.length - 1 && (startOffset = content.length - 1);for (var endOffset = startOffset, ctxChars = 0, ctxLines = 0; ctxChars < maxChars && startOffset > 0 && (startOffset--, ctxChars++, "\n" != content[startOffset] || ++ctxLines != maxLines););for (ctxChars = 0, ctxLines = 0; ctxChars < maxChars && endOffset < content.length - 1 && (endOffset++, ctxChars++, "\n" != content[endOffset] || ++ctxLines != maxLines););return { before: content.substring(startOffset, this.offset), after: content.substring(this.offset, endOffset + 1) };
      }return null;
    }, ParseLocation;
  }(),
      ParseSourceFile = function () {
    function ParseSourceFile(content, url) {
      this.content = content, this.url = url;
    }return ParseSourceFile;
  }(),
      ParseSourceSpan = function () {
    function ParseSourceSpan(start, end, details) {
      void 0 === details && (details = null), this.start = start, this.end = end, this.details = details;
    }return ParseSourceSpan.prototype.toString = function () {
      return this.start.file.content.substring(this.start.offset, this.end.offset);
    }, ParseSourceSpan;
  }(),
      ParseErrorLevel = {};ParseErrorLevel.WARNING = 0, ParseErrorLevel.ERROR = 1, ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING", ParseErrorLevel[ParseErrorLevel.ERROR] = "ERROR";var ParseError = function () {
    function ParseError(span, msg, level) {
      void 0 === level && (level = ParseErrorLevel.ERROR), this.span = span, this.msg = msg, this.level = level;
    }return ParseError.prototype.toString = function () {
      var ctx = this.span.start.getContext(100, 3),
          contextStr = ctx ? ' ("' + ctx.before + "[" + ParseErrorLevel[this.level] + " ->]" + ctx.after + '")' : "",
          details = this.span.details ? ", " + this.span.details : "";return "" + this.msg + contextStr + ": " + this.span.start + details;
    }, ParseError;
  }(),
      Text = function () {
    function Text(value, sourceSpan) {
      this.value = value, this.sourceSpan = sourceSpan;
    }return Text.prototype.visit = function (visitor, context) {
      return visitor.visitText(this, context);
    }, Text;
  }(),
      Expansion = function () {
    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
      this.switchValue = switchValue, this.type = type, this.cases = cases, this.sourceSpan = sourceSpan, this.switchValueSourceSpan = switchValueSourceSpan;
    }return Expansion.prototype.visit = function (visitor, context) {
      return visitor.visitExpansion(this, context);
    }, Expansion;
  }(),
      ExpansionCase = function () {
    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
      this.value = value, this.expression = expression, this.sourceSpan = sourceSpan, this.valueSourceSpan = valueSourceSpan, this.expSourceSpan = expSourceSpan;
    }return ExpansionCase.prototype.visit = function (visitor, context) {
      return visitor.visitExpansionCase(this, context);
    }, ExpansionCase;
  }(),
      Attribute$1 = function () {
    function Attribute$1(name, value, sourceSpan, valueSpan) {
      this.name = name, this.value = value, this.sourceSpan = sourceSpan, this.valueSpan = valueSpan;
    }return Attribute$1.prototype.visit = function (visitor, context) {
      return visitor.visitAttribute(this, context);
    }, Attribute$1;
  }(),
      Element = function () {
    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
      void 0 === startSourceSpan && (startSourceSpan = null), void 0 === endSourceSpan && (endSourceSpan = null), this.name = name, this.attrs = attrs, this.children = children, this.sourceSpan = sourceSpan, this.startSourceSpan = startSourceSpan, this.endSourceSpan = endSourceSpan;
    }return Element.prototype.visit = function (visitor, context) {
      return visitor.visitElement(this, context);
    }, Element;
  }(),
      Comment = function () {
    function Comment(value, sourceSpan) {
      this.value = value, this.sourceSpan = sourceSpan;
    }return Comment.prototype.visit = function (visitor, context) {
      return visitor.visitComment(this, context);
    }, Comment;
  }(),
      TokenType$1 = {};TokenType$1.TAG_OPEN_START = 0, TokenType$1.TAG_OPEN_END = 1, TokenType$1.TAG_OPEN_END_VOID = 2, TokenType$1.TAG_CLOSE = 3, TokenType$1.TEXT = 4, TokenType$1.ESCAPABLE_RAW_TEXT = 5, TokenType$1.RAW_TEXT = 6, TokenType$1.COMMENT_START = 7, TokenType$1.COMMENT_END = 8, TokenType$1.CDATA_START = 9, TokenType$1.CDATA_END = 10, TokenType$1.ATTR_NAME = 11, TokenType$1.ATTR_VALUE = 12, TokenType$1.DOC_TYPE = 13, TokenType$1.EXPANSION_FORM_START = 14, TokenType$1.EXPANSION_CASE_VALUE = 15, TokenType$1.EXPANSION_CASE_EXP_START = 16, TokenType$1.EXPANSION_CASE_EXP_END = 17, TokenType$1.EXPANSION_FORM_END = 18, TokenType$1.EOF = 19, TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START", TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END", TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID", TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE", TokenType$1[TokenType$1.TEXT] = "TEXT", TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT", TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT", TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START", TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END", TokenType$1[TokenType$1.CDATA_START] = "CDATA_START", TokenType$1[TokenType$1.CDATA_END] = "CDATA_END", TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME", TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE", TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE", TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START", TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE", TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START", TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END", TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END", TokenType$1[TokenType$1.EOF] = "EOF";var Token$1 = function () {
    function Token$1(type, parts, sourceSpan) {
      this.type = type, this.parts = parts, this.sourceSpan = sourceSpan;
    }return Token$1;
  }(),
      TokenError = function (_super) {
    function TokenError(errorMsg, tokenType, span) {
      var _this = _super.call(this, span, errorMsg) || this;return _this.tokenType = tokenType, _this;
    }return __extends(TokenError, _super), TokenError;
  }(ParseError),
      TokenizeResult = function () {
    function TokenizeResult(tokens, errors) {
      this.tokens = tokens, this.errors = errors;
    }return TokenizeResult;
  }(),
      _CR_OR_CRLF_REGEXP = /\r\n?/g,
      _ControlFlowError = function () {
    function _ControlFlowError(error) {
      this.error = error;
    }return _ControlFlowError;
  }(),
      _Tokenizer = function () {
    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
      void 0 === _interpolationConfig && (_interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._file = _file, this._getTagDefinition = _getTagDefinition, this._tokenizeIcu = _tokenizeIcu, this._interpolationConfig = _interpolationConfig, this._peek = -1, this._nextPeek = -1, this._index = -1, this._line = 0, this._column = -1, this._expansionCaseStack = [], this._inInterpolation = !1, this.tokens = [], this.errors = [], this._input = _file.content, this._length = _file.content.length, this._advance();
    }return _Tokenizer.prototype._processCarriageReturns = function (content) {
      return content.replace(_CR_OR_CRLF_REGEXP, "\n");
    }, _Tokenizer.prototype.tokenize = function () {
      for (; this._peek !== $EOF;) {
        var start = this._getLocation();try {
          this._attemptCharCode($LT) ? this._attemptCharCode($BANG) ? this._attemptCharCode($LBRACKET) ? this._consumeCdata(start) : this._attemptCharCode($MINUS) ? this._consumeComment(start) : this._consumeDocType(start) : this._attemptCharCode($SLASH) ? this._consumeTagClose(start) : this._consumeTagOpen(start) : this._tokenizeIcu && this._tokenizeExpansionForm() || this._consumeText();
        } catch (e) {
          if (!(e instanceof _ControlFlowError)) throw e;this.errors.push(e.error);
        }
      }return this._beginToken(TokenType$1.EOF), this._endToken([]), new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
    }, _Tokenizer.prototype._tokenizeExpansionForm = function () {
      if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) return this._consumeExpansionFormStart(), !0;if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) return this._consumeExpansionCaseStart(), !0;if (this._peek === $RBRACE) {
        if (this._isInExpansionCase()) return this._consumeExpansionCaseEnd(), !0;if (this._isInExpansionForm()) return this._consumeExpansionFormEnd(), !0;
      }return !1;
    }, _Tokenizer.prototype._getLocation = function () {
      return new ParseLocation(this._file, this._index, this._line, this._column);
    }, _Tokenizer.prototype._getSpan = function (start, end) {
      return void 0 === start && (start = this._getLocation()), void 0 === end && (end = this._getLocation()), new ParseSourceSpan(start, end);
    }, _Tokenizer.prototype._beginToken = function (type, start) {
      void 0 === start && (start = this._getLocation()), this._currentTokenStart = start, this._currentTokenType = type;
    }, _Tokenizer.prototype._endToken = function (parts, end) {
      void 0 === end && (end = this._getLocation());var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));return this.tokens.push(token), this._currentTokenStart = null, this._currentTokenType = null, token;
    }, _Tokenizer.prototype._createError = function (msg, span) {
      this._isInExpansionForm() && (msg += ' (Do you have an unescaped "{" in your template? Use "{{ \'{\' }}") to escape it.)');var error = new TokenError(msg, this._currentTokenType, span);return this._currentTokenStart = null, this._currentTokenType = null, new _ControlFlowError(error);
    }, _Tokenizer.prototype._advance = function () {
      if (this._index >= this._length) throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());this._peek === $LF ? (this._line++, this._column = 0) : this._peek !== $LF && this._peek !== $CR && this._column++, this._index++, this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index), this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
    }, _Tokenizer.prototype._attemptCharCode = function (charCode) {
      return this._peek === charCode && (this._advance(), !0);
    }, _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
      return !!compareCharCodeCaseInsensitive(this._peek, charCode) && (this._advance(), !0);
    }, _Tokenizer.prototype._requireCharCode = function (charCode) {
      var location = this._getLocation();if (!this._attemptCharCode(charCode)) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
    }, _Tokenizer.prototype._attemptStr = function (chars) {
      var len = chars.length;if (this._index + len > this._length) return !1;for (var initialPosition = this._savePosition(), i = 0; i < len; i++) if (!this._attemptCharCode(chars.charCodeAt(i))) return this._restorePosition(initialPosition), !1;return !0;
    }, _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
      for (var i = 0; i < chars.length; i++) if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) return !1;return !0;
    }, _Tokenizer.prototype._requireStr = function (chars) {
      var location = this._getLocation();if (!this._attemptStr(chars)) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
    }, _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
      for (; !predicate(this._peek);) this._advance();
    }, _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
      var start = this._getLocation();if (this._attemptCharCodeUntilFn(predicate), this._index - start.offset < len) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
    }, _Tokenizer.prototype._attemptUntilChar = function (char) {
      for (; this._peek !== char;) this._advance();
    }, _Tokenizer.prototype._readChar = function (decodeEntities) {
      if (decodeEntities && this._peek === $AMPERSAND) return this._decodeEntity();var index = this._index;return this._advance(), this._input[index];
    }, _Tokenizer.prototype._decodeEntity = function () {
      var start = this._getLocation();if (this._advance(), !this._attemptCharCode($HASH)) {
        var startPosition = this._savePosition();if (this._attemptCharCodeUntilFn(isNamedEntityEnd), this._peek != $SEMICOLON) return this._restorePosition(startPosition), "&";this._advance();var name = this._input.substring(start.offset + 1, this._index - 1),
            char = NAMED_ENTITIES[name];if (!char) throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));return char;
      }var isHex = this._attemptCharCode($x) || this._attemptCharCode($X),
          numberStart = this._getLocation().offset;if (this._attemptCharCodeUntilFn(isDigitEntityEnd), this._peek != $SEMICOLON) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());this._advance();var strNum = this._input.substring(numberStart, this._index - 1);try {
        var charCode = parseInt(strNum, isHex ? 16 : 10);return String.fromCharCode(charCode);
      } catch (e) {
        var entity = this._input.substring(start.offset + 1, this._index - 1);throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
      }
    }, _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
      var tagCloseStart,
          textStart = this._getLocation();this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);for (var parts = [];;) {
        if (tagCloseStart = this._getLocation(), this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) break;for (this._index > tagCloseStart.offset && parts.push(this._input.substring(tagCloseStart.offset, this._index)); this._peek !== firstCharOfEnd;) parts.push(this._readChar(decodeEntities));
      }return this._endToken([this._processCarriageReturns(parts.join(""))], tagCloseStart);
    }, _Tokenizer.prototype._consumeComment = function (start) {
      var _this = this;this._beginToken(TokenType$1.COMMENT_START, start), this._requireCharCode($MINUS), this._endToken([]);var textToken = this._consumeRawText(!1, $MINUS, function () {
        return _this._attemptStr("->");
      });this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end), this._endToken([]);
    }, _Tokenizer.prototype._consumeCdata = function (start) {
      var _this = this;this._beginToken(TokenType$1.CDATA_START, start), this._requireStr("CDATA["), this._endToken([]);var textToken = this._consumeRawText(!1, $RBRACKET, function () {
        return _this._attemptStr("]>");
      });this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end), this._endToken([]);
    }, _Tokenizer.prototype._consumeDocType = function (start) {
      this._beginToken(TokenType$1.DOC_TYPE, start), this._attemptUntilChar($GT), this._advance(), this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
    }, _Tokenizer.prototype._consumePrefixAndName = function () {
      for (var nameOrPrefixStart = this._index, prefix = null; this._peek !== $COLON && !isPrefixEnd(this._peek);) this._advance();var nameStart;this._peek === $COLON ? (this._advance(), prefix = this._input.substring(nameOrPrefixStart, this._index - 1), nameStart = this._index) : nameStart = nameOrPrefixStart, this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);var name = this._input.substring(nameStart, this._index);return [prefix, name];
    }, _Tokenizer.prototype._consumeTagOpen = function (start) {
      var tagName,
          lowercaseTagName,
          savedPos = this._savePosition();try {
        if (!isAsciiLetter(this._peek)) throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());var nameStart = this._index;for (this._consumeTagOpenStart(start), tagName = this._input.substring(nameStart, this._index), lowercaseTagName = tagName.toLowerCase(), this._attemptCharCodeUntilFn(isNotWhitespace); this._peek !== $SLASH && this._peek !== $GT;) this._consumeAttributeName(), this._attemptCharCodeUntilFn(isNotWhitespace), this._attemptCharCode($EQ) && (this._attemptCharCodeUntilFn(isNotWhitespace), this._consumeAttributeValue()), this._attemptCharCodeUntilFn(isNotWhitespace);this._consumeTagOpenEnd();
      } catch (e) {
        if (e instanceof _ControlFlowError) return this._restorePosition(savedPos), this._beginToken(TokenType$1.TEXT, start), void this._endToken(["<"]);throw e;
      }var contentTokenType = this._getTagDefinition(tagName).contentType;contentTokenType === TagContentType.RAW_TEXT ? this._consumeRawTextWithTagClose(lowercaseTagName, !1) : contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT && this._consumeRawTextWithTagClose(lowercaseTagName, !0);
    }, _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
      var _this = this,
          textToken = this._consumeRawText(decodeEntities, $LT, function () {
        return !!_this._attemptCharCode($SLASH) && (_this._attemptCharCodeUntilFn(isNotWhitespace), !!_this._attemptStrCaseInsensitive(lowercaseTagName) && (_this._attemptCharCodeUntilFn(isNotWhitespace), _this._attemptCharCode($GT)));
      });this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end), this._endToken([null, lowercaseTagName]);
    }, _Tokenizer.prototype._consumeTagOpenStart = function (start) {
      this._beginToken(TokenType$1.TAG_OPEN_START, start);var parts = this._consumePrefixAndName();this._endToken(parts);
    }, _Tokenizer.prototype._consumeAttributeName = function () {
      this._beginToken(TokenType$1.ATTR_NAME);var prefixAndName = this._consumePrefixAndName();this._endToken(prefixAndName);
    }, _Tokenizer.prototype._consumeAttributeValue = function () {
      this._beginToken(TokenType$1.ATTR_VALUE);var value;if (this._peek === $SQ || this._peek === $DQ) {
        var quoteChar = this._peek;this._advance();for (var parts = []; this._peek !== quoteChar;) parts.push(this._readChar(!0));value = parts.join(""), this._advance();
      } else {
        var valueStart = this._index;this._requireCharCodeUntilFn(isNameEnd, 1), value = this._input.substring(valueStart, this._index);
      }this._endToken([this._processCarriageReturns(value)]);
    }, _Tokenizer.prototype._consumeTagOpenEnd = function () {
      var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;this._beginToken(tokenType), this._requireCharCode($GT), this._endToken([]);
    }, _Tokenizer.prototype._consumeTagClose = function (start) {
      this._beginToken(TokenType$1.TAG_CLOSE, start), this._attemptCharCodeUntilFn(isNotWhitespace);var prefixAndName = this._consumePrefixAndName();this._attemptCharCodeUntilFn(isNotWhitespace), this._requireCharCode($GT), this._endToken(prefixAndName);
    }, _Tokenizer.prototype._consumeExpansionFormStart = function () {
      this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([]), this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START), this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());var condition = this._readUntil($COMMA);this._endToken([condition], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());var type = this._readUntil($COMMA);this._endToken([type], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace);
    }, _Tokenizer.prototype._consumeExpansionCaseStart = function () {
      this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());var value = this._readUntil($LBRACE).trim();this._endToken([value], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
    }, _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
      this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.pop();
    }, _Tokenizer.prototype._consumeExpansionFormEnd = function () {
      this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([]), this._expansionCaseStack.pop();
    }, _Tokenizer.prototype._consumeText = function () {
      var start = this._getLocation();this._beginToken(TokenType$1.TEXT, start);var parts = [];do this._interpolationConfig && this._attemptStr(this._interpolationConfig.start) ? (parts.push(this._interpolationConfig.start), this._inInterpolation = !0) : this._interpolationConfig && this._inInterpolation && this._attemptStr(this._interpolationConfig.end) ? (parts.push(this._interpolationConfig.end), this._inInterpolation = !1) : parts.push(this._readChar(!0)); while (!this._isTextEnd());this._endToken([this._processCarriageReturns(parts.join(""))]);
    }, _Tokenizer.prototype._isTextEnd = function () {
      if (this._peek === $LT || this._peek === $EOF) return !0;if (this._tokenizeIcu && !this._inInterpolation) {
        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) return !0;if (this._peek === $RBRACE && this._isInExpansionCase()) return !0;
      }return !1;
    }, _Tokenizer.prototype._savePosition = function () {
      return [this._peek, this._index, this._column, this._line, this.tokens.length];
    }, _Tokenizer.prototype._readUntil = function (char) {
      var start = this._index;return this._attemptUntilChar(char), this._input.substring(start, this._index);
    }, _Tokenizer.prototype._restorePosition = function (position) {
      this._peek = position[0], this._index = position[1], this._column = position[2], this._line = position[3];var nbTokens = position[4];nbTokens < this.tokens.length && (this.tokens = this.tokens.slice(0, nbTokens));
    }, _Tokenizer.prototype._isInExpansionCase = function () {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
    }, _Tokenizer.prototype._isInExpansionForm = function () {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
    }, _Tokenizer;
  }(),
      TreeError = function (_super) {
    function TreeError(elementName, span, msg) {
      var _this = _super.call(this, span, msg) || this;return _this.elementName = elementName, _this;
    }return __extends(TreeError, _super), TreeError.create = function (elementName, span, msg) {
      return new TreeError(elementName, span, msg);
    }, TreeError;
  }(ParseError),
      ParseTreeResult = function () {
    function ParseTreeResult(rootNodes, errors) {
      this.rootNodes = rootNodes, this.errors = errors;
    }return ParseTreeResult;
  }(),
      Parser$1 = function () {
    function Parser$1(getTagDefinition) {
      this.getTagDefinition = getTagDefinition;
    }return Parser$1.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
      void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig),
          treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
    }, Parser$1;
  }(),
      _TreeBuilder = function () {
    function _TreeBuilder(tokens, getTagDefinition) {
      this.tokens = tokens, this.getTagDefinition = getTagDefinition, this._index = -1, this._rootNodes = [], this._errors = [], this._elementStack = [], this._advance();
    }return _TreeBuilder.prototype.build = function () {
      for (; this._peek.type !== TokenType$1.EOF;) this._peek.type === TokenType$1.TAG_OPEN_START ? this._consumeStartTag(this._advance()) : this._peek.type === TokenType$1.TAG_CLOSE ? this._consumeEndTag(this._advance()) : this._peek.type === TokenType$1.CDATA_START ? (this._closeVoidElement(), this._consumeCdata(this._advance())) : this._peek.type === TokenType$1.COMMENT_START ? (this._closeVoidElement(), this._consumeComment(this._advance())) : this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT ? (this._closeVoidElement(), this._consumeText(this._advance())) : this._peek.type === TokenType$1.EXPANSION_FORM_START ? this._consumeExpansion(this._advance()) : this._advance();return new ParseTreeResult(this._rootNodes, this._errors);
    }, _TreeBuilder.prototype._advance = function () {
      var prev = this._peek;return this._index < this.tokens.length - 1 && this._index++, this._peek = this.tokens[this._index], prev;
    }, _TreeBuilder.prototype._advanceIf = function (type) {
      return this._peek.type === type ? this._advance() : null;
    }, _TreeBuilder.prototype._consumeCdata = function (startToken) {
      this._consumeText(this._advance()), this._advanceIf(TokenType$1.CDATA_END);
    }, _TreeBuilder.prototype._consumeComment = function (token) {
      var text = this._advanceIf(TokenType$1.RAW_TEXT);this._advanceIf(TokenType$1.COMMENT_END);var value = null != text ? text.parts[0].trim() : null;this._addToParent(new Comment(value, token.sourceSpan));
    }, _TreeBuilder.prototype._consumeExpansion = function (token) {
      for (var switchValue = this._advance(), type = this._advance(), cases = []; this._peek.type === TokenType$1.EXPANSION_CASE_VALUE;) {
        var expCase = this._parseExpansionCase();if (!expCase) return;cases.push(expCase);
      }if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) return void this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan)), this._advance();
    }, _TreeBuilder.prototype._parseExpansionCase = function () {
      var value = this._advance();if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) return this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'.")), null;var start = this._advance(),
          exp = this._collectExpansionExpTokens(start);if (!exp) return null;var end = this._advance();exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();if (parsedExp.errors.length > 0) return this._errors = this._errors.concat(parsedExp.errors), null;var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end),
          expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
    }, _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
      for (var exp = [], expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];;) {
        if (this._peek.type !== TokenType$1.EXPANSION_FORM_START && this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START || expansionFormStack.push(this._peek.type), this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
          if (!lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null;if (expansionFormStack.pop(), 0 == expansionFormStack.length) return exp;
        }if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
          if (!lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null;expansionFormStack.pop();
        }if (this._peek.type === TokenType$1.EOF) return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null;exp.push(this._advance());
      }
    }, _TreeBuilder.prototype._consumeText = function (token) {
      var text = token.parts[0];if (text.length > 0 && "\n" == text[0]) {
        var parent = this._getParentElement();null != parent && 0 == parent.children.length && this.getTagDefinition(parent.name).ignoreFirstLf && (text = text.substring(1));
      }text.length > 0 && this._addToParent(new Text(text, token.sourceSpan));
    }, _TreeBuilder.prototype._closeVoidElement = function () {
      if (this._elementStack.length > 0) {
        var el = this._elementStack[this._elementStack.length - 1];this.getTagDefinition(el.name).isVoid && this._elementStack.pop();
      }
    }, _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
      for (var prefix = startTagToken.parts[0], name = startTagToken.parts[1], attrs = []; this._peek.type === TokenType$1.ATTR_NAME;) attrs.push(this._consumeAttr(this._advance()));var fullName = this._getElementFullName(prefix, name, this._getParentElement()),
          selfClosing = !1;if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
        this._advance(), selfClosing = !0;var tagDef = this.getTagDefinition(fullName);tagDef.canSelfClose || null !== getNsPrefix(fullName) || tagDef.isVoid || this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'));
      } else this._peek.type === TokenType$1.TAG_OPEN_END && (this._advance(), selfClosing = !1);var end = this._peek.sourceSpan.start,
          span = new ParseSourceSpan(startTagToken.sourceSpan.start, end),
          el = new Element(fullName, attrs, [], span, span, void 0);this._pushElement(el), selfClosing && (this._popElement(fullName), el.endSourceSpan = span);
    }, _TreeBuilder.prototype._pushElement = function (el) {
      if (this._elementStack.length > 0) {
        var parentEl = this._elementStack[this._elementStack.length - 1];this.getTagDefinition(parentEl.name).isClosedByChild(el.name) && this._elementStack.pop();
      }var tagDef = this.getTagDefinition(el.name),
          _a = this._getParentElementSkippingContainers(),
          parent = _a.parent,
          container = _a.container;if (parent && tagDef.requireExtraParent(parent.name)) {
        var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);this._insertBeforeContainer(parent, container, newParent);
      }this._addToParent(el), this._elementStack.push(el);
    }, _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
      var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());if (this._getParentElement() && (this._getParentElement().endSourceSpan = endTagToken.sourceSpan), this.getTagDefinition(fullName).isVoid) this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"'));else if (!this._popElement(fullName)) {
        var errMsg = 'Unexpected closing tag "' + fullName + '". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags';this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
      }
    }, _TreeBuilder.prototype._popElement = function (fullName) {
      for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
        var el = this._elementStack[stackIndex];if (el.name == fullName) return this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex), !0;if (!this.getTagDefinition(el.name).closedByParent) return !1;
      }return !1;
    }, _TreeBuilder.prototype._consumeAttr = function (attrName) {
      var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]),
          end = attrName.sourceSpan.end,
          value = "",
          valueSpan = void 0;if (this._peek.type === TokenType$1.ATTR_VALUE) {
        var valueToken = this._advance();value = valueToken.parts[0], end = valueToken.sourceSpan.end, valueSpan = valueToken.sourceSpan;
      }return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
    }, _TreeBuilder.prototype._getParentElement = function () {
      return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
    }, _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
      for (var container = null, i = this._elementStack.length - 1; i >= 0; i--) {
        if (!isNgContainer(this._elementStack[i].name)) return { parent: this._elementStack[i], container: container };container = this._elementStack[i];
      }return { parent: this._elementStack[this._elementStack.length - 1], container: container };
    }, _TreeBuilder.prototype._addToParent = function (node) {
      var parent = this._getParentElement();null != parent ? parent.children.push(node) : this._rootNodes.push(node);
    }, _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
      if (container) {
        if (parent) {
          var index = parent.children.indexOf(container);parent.children[index] = node;
        } else this._rootNodes.push(node);node.children.push(container), this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
      } else this._addToParent(node), this._elementStack.push(node);
    }, _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
      return null == prefix && (prefix = this.getTagDefinition(localName).implicitNamespacePrefix, null == prefix && null != parentElement && (prefix = getNsPrefix(parentElement.name))), mergeNsAndName(prefix, localName);
    }, _TreeBuilder;
  }(),
      Message = function () {
    function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {
      this.nodes = nodes, this.placeholders = placeholders, this.placeholderToMessage = placeholderToMessage, this.meaning = meaning, this.description = description, this.id = id, nodes.length ? this.sources = [{ filePath: nodes[0].sourceSpan.start.file.url, startLine: nodes[0].sourceSpan.start.line + 1, startCol: nodes[0].sourceSpan.start.col + 1, endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1, endCol: nodes[0].sourceSpan.start.col + 1 }] : this.sources = [];
    }return Message;
  }(),
      Text$1 = function () {
    function Text$1(value, sourceSpan) {
      this.value = value, this.sourceSpan = sourceSpan;
    }return Text$1.prototype.visit = function (visitor, context) {
      return visitor.visitText(this, context);
    }, Text$1;
  }(),
      Container = function () {
    function Container(children, sourceSpan) {
      this.children = children, this.sourceSpan = sourceSpan;
    }return Container.prototype.visit = function (visitor, context) {
      return visitor.visitContainer(this, context);
    }, Container;
  }(),
      Icu = function () {
    function Icu(expression, type, cases, sourceSpan) {
      this.expression = expression, this.type = type, this.cases = cases, this.sourceSpan = sourceSpan;
    }return Icu.prototype.visit = function (visitor, context) {
      return visitor.visitIcu(this, context);
    }, Icu;
  }(),
      TagPlaceholder = function () {
    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
      this.tag = tag, this.attrs = attrs, this.startName = startName, this.closeName = closeName, this.children = children, this.isVoid = isVoid, this.sourceSpan = sourceSpan;
    }return TagPlaceholder.prototype.visit = function (visitor, context) {
      return visitor.visitTagPlaceholder(this, context);
    }, TagPlaceholder;
  }(),
      Placeholder = function () {
    function Placeholder(value, name, sourceSpan) {
      this.value = value, this.name = name, this.sourceSpan = sourceSpan;
    }return Placeholder.prototype.visit = function (visitor, context) {
      return visitor.visitPlaceholder(this, context);
    }, Placeholder;
  }(),
      IcuPlaceholder = function () {
    function IcuPlaceholder(value, name, sourceSpan) {
      this.value = value, this.name = name, this.sourceSpan = sourceSpan;
    }return IcuPlaceholder.prototype.visit = function (visitor, context) {
      return visitor.visitIcuPlaceholder(this, context);
    }, IcuPlaceholder;
  }(),
      CloneVisitor = function () {
    function CloneVisitor() {}return CloneVisitor.prototype.visitText = function (text, context) {
      return new Text$1(text.value, text.sourceSpan);
    }, CloneVisitor.prototype.visitContainer = function (container, context) {
      var _this = this,
          children = container.children.map(function (n) {
        return n.visit(_this, context);
      });return new Container(children, container.sourceSpan);
    }, CloneVisitor.prototype.visitIcu = function (icu, context) {
      var _this = this,
          cases = {};Object.keys(icu.cases).forEach(function (key) {
        return cases[key] = icu.cases[key].visit(_this, context);
      });var msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);return msg.expressionPlaceholder = icu.expressionPlaceholder, msg;
    }, CloneVisitor.prototype.visitTagPlaceholder = function (ph, context) {
      var _this = this,
          children = ph.children.map(function (n) {
        return n.visit(_this, context);
      });return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);
    }, CloneVisitor.prototype.visitPlaceholder = function (ph, context) {
      return new Placeholder(ph.value, ph.name, ph.sourceSpan);
    }, CloneVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
      return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
    }, CloneVisitor;
  }(),
      RecurseVisitor = function () {
    function RecurseVisitor() {}return RecurseVisitor.prototype.visitText = function (text, context) {}, RecurseVisitor.prototype.visitContainer = function (container, context) {
      var _this = this;container.children.forEach(function (child) {
        return child.visit(_this);
      });
    }, RecurseVisitor.prototype.visitIcu = function (icu, context) {
      var _this = this;Object.keys(icu.cases).forEach(function (k) {
        icu.cases[k].visit(_this);
      });
    }, RecurseVisitor.prototype.visitTagPlaceholder = function (ph, context) {
      var _this = this;ph.children.forEach(function (child) {
        return child.visit(_this);
      });
    }, RecurseVisitor.prototype.visitPlaceholder = function (ph, context) {}, RecurseVisitor.prototype.visitIcuPlaceholder = function (ph, context) {}, RecurseVisitor;
  }(),
      TAG_TO_PLACEHOLDER_NAMES = { A: "LINK", B: "BOLD_TEXT", BR: "LINE_BREAK", EM: "EMPHASISED_TEXT", H1: "HEADING_LEVEL1", H2: "HEADING_LEVEL2", H3: "HEADING_LEVEL3", H4: "HEADING_LEVEL4", H5: "HEADING_LEVEL5", H6: "HEADING_LEVEL6", HR: "HORIZONTAL_RULE", I: "ITALIC_TEXT", LI: "LIST_ITEM", LINK: "MEDIA_LINK", OL: "ORDERED_LIST", P: "PARAGRAPH", Q: "QUOTATION", S: "STRIKETHROUGH_TEXT", SMALL: "SMALL_TEXT", SUB: "SUBSTRIPT", SUP: "SUPERSCRIPT", TBODY: "TABLE_BODY", TD: "TABLE_CELL", TFOOT: "TABLE_FOOTER", TH: "TABLE_HEADER_CELL", THEAD: "TABLE_HEADER", TR: "TABLE_ROW", TT: "MONOSPACED_TEXT", U: "UNDERLINED_TEXT", UL: "UNORDERED_LIST" },
      PlaceholderRegistry = function () {
    function PlaceholderRegistry() {
      this._placeHolderNameCounts = {}, this._signatureToName = {};
    }return PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
      var signature = this._hashTag(tag, attrs, isVoid);if (this._signatureToName[signature]) return this._signatureToName[signature];var upperTag = tag.toUpperCase(),
          baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag,
          name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);return this._signatureToName[signature] = name, name;
    }, PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
      var signature = this._hashClosingTag(tag);if (this._signatureToName[signature]) return this._signatureToName[signature];var upperTag = tag.toUpperCase(),
          baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag,
          name = this._generateUniqueName("CLOSE_" + baseName);return this._signatureToName[signature] = name, name;
    }, PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
      var upperName = name.toUpperCase(),
          signature = "PH: " + upperName + "=" + content;if (this._signatureToName[signature]) return this._signatureToName[signature];var uniqueName = this._generateUniqueName(upperName);return this._signatureToName[signature] = uniqueName, uniqueName;
    }, PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {
      return this._generateUniqueName(name.toUpperCase());
    }, PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
      var start = "<" + tag,
          strAttrs = Object.keys(attrs).sort().map(function (name) {
        return " " + name + "=" + attrs[name];
      }).join(""),
          end = isVoid ? "/>" : "></" + tag + ">";return start + strAttrs + end;
    }, PlaceholderRegistry.prototype._hashClosingTag = function (tag) {
      return this._hashTag("/" + tag, {}, !1);
    }, PlaceholderRegistry.prototype._generateUniqueName = function (base) {
      var seen = this._placeHolderNameCounts.hasOwnProperty(base);if (!seen) return this._placeHolderNameCounts[base] = 1, base;var id = this._placeHolderNameCounts[base];return this._placeHolderNameCounts[base] = id + 1, base + "_" + id;
    }, PlaceholderRegistry;
  }(),
      _expParser = new Parser(new Lexer()),
      _I18nVisitor = function () {
    function _I18nVisitor(_expressionParser, _interpolationConfig) {
      this._expressionParser = _expressionParser, this._interpolationConfig = _interpolationConfig;
    }return _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description, id) {
      this._isIcu = 1 == nodes.length && nodes[0] instanceof Expansion, this._icuDepth = 0, this._placeholderRegistry = new PlaceholderRegistry(), this._placeholderToContent = {}, this._placeholderToMessage = {};var i18nodes = visitAll(this, nodes, {});return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);
    }, _I18nVisitor.prototype.visitElement = function (el, context) {
      var children = visitAll(this, el.children),
          attrs = {};el.attrs.forEach(function (attr) {
        attrs[attr.name] = attr.value;
      });var isVoid = getHtmlTagDefinition(el.name).isVoid,
          startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);this._placeholderToContent[startPhName] = el.sourceSpan.toString();var closePhName = "";return isVoid || (closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name), this._placeholderToContent[closePhName] = "</" + el.name + ">"), new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
    }, _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
      return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
    }, _I18nVisitor.prototype.visitText = function (text, context) {
      return this._visitTextWithInterpolation(text.value, text.sourceSpan);
    }, _I18nVisitor.prototype.visitComment = function (comment, context) {
      return null;
    }, _I18nVisitor.prototype.visitExpansion = function (icu, context) {
      var _this = this;this._icuDepth++;var i18nIcuCases = {},
          i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);if (icu.cases.forEach(function (caze) {
        i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) {
          return node.visit(_this, {});
        }), caze.expSourceSpan);
      }), this._icuDepth--, this._isIcu || this._icuDepth > 0) {
        var expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);return i18nIcu.expressionPlaceholder = expPh, this._placeholderToContent[expPh] = icu.switchValue, i18nIcu;
      }var phName = this._placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString()),
          visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);return this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], "", "", ""), new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
    }, _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
      throw new Error("Unreachable code");
    }, _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
      var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);if (!splitInterpolation) return new Text$1(text, sourceSpan);for (var nodes = [], container = new Container(nodes, sourceSpan), _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end, i = 0; i < splitInterpolation.strings.length - 1; i++) {
        var expression = splitInterpolation.expressions[i],
            baseName = _extractPlaceholderName(expression) || "INTERPOLATION",
            phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);splitInterpolation.strings[i].length && nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan)), nodes.push(new Placeholder(expression, phName, sourceSpan)), this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
      }var lastStringIdx = splitInterpolation.strings.length - 1;return splitInterpolation.strings[lastStringIdx].length && nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan)), container;
    }, _I18nVisitor;
  }(),
      _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g,
      I18nError = function (_super) {
    function I18nError(span, msg) {
      return _super.call(this, span, msg) || this;
    }return __extends(I18nError, _super), I18nError;
  }(ParseError),
      _I18N_ATTR = "i18n",
      _I18N_ATTR_PREFIX = "i18n-",
      _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/,
      MEANING_SEPARATOR = "|",
      ID_SEPARATOR = "@@",
      ExtractionResult = function () {
    function ExtractionResult(messages, errors) {
      this.messages = messages, this.errors = errors;
    }return ExtractionResult;
  }(),
      _VisitorMode = {};_VisitorMode.Extract = 0, _VisitorMode.Merge = 1, _VisitorMode[_VisitorMode.Extract] = "Extract", _VisitorMode[_VisitorMode.Merge] = "Merge";var _Visitor = function () {
    function _Visitor(_implicitTags, _implicitAttrs) {
      this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs;
    }return _Visitor.prototype.extract = function (nodes, interpolationConfig) {
      var _this = this;return this._init(_VisitorMode.Extract, interpolationConfig), nodes.forEach(function (node) {
        return node.visit(_this, null);
      }), this._inI18nBlock && this._reportError(nodes[nodes.length - 1], "Unclosed block"), new ExtractionResult(this._messages, this._errors);
    }, _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
      this._init(_VisitorMode.Merge, interpolationConfig), this._translations = translations;var wrapper = new Element("wrapper", [], nodes, void 0, void 0, void 0),
          translatedNode = wrapper.visit(this, null);return this._inI18nBlock && this._reportError(nodes[nodes.length - 1], "Unclosed block"), new ParseTreeResult(translatedNode.children, this._errors);
    }, _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
      var expression = visitAll(this, icuCase.expression, context);if (this._mode === _VisitorMode.Merge) return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
    }, _Visitor.prototype.visitExpansion = function (icu, context) {
      this._mayBeAddBlockChildren(icu);var wasInIcu = this._inIcu;this._inIcu || (this._isInTranslatableSection && this._addMessage([icu]), this._inIcu = !0);var cases = visitAll(this, icu.cases, context);return this._mode === _VisitorMode.Merge && (icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan)), this._inIcu = wasInIcu, icu;
    }, _Visitor.prototype.visitComment = function (comment, context) {
      var isOpening = _isOpeningComment(comment);if (isOpening && this._isInTranslatableSection) return void this._reportError(comment, "Could not start a block inside a translatable section");var isClosing = _isClosingComment(comment);if (isClosing && !this._inI18nBlock) return void this._reportError(comment, "Trying to close an unopened block");if (!this._inI18nNode && !this._inIcu) if (this._inI18nBlock) {
        if (isClosing) {
          if (this._depth == this._blockStartDepth) {
            this._closeTranslatableSection(comment, this._blockChildren), this._inI18nBlock = !1;var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc),
                nodes = this._translateMessage(comment, message);return visitAll(this, nodes);
          }return void this._reportError(comment, "I18N blocks should not cross element boundaries");
        }
      } else isOpening && (this._inI18nBlock = !0, this._blockStartDepth = this._depth, this._blockChildren = [], this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, "").trim(), this._openTranslatableSection(comment));
    }, _Visitor.prototype.visitText = function (text, context) {
      return this._isInTranslatableSection && this._mayBeAddBlockChildren(text), text;
    }, _Visitor.prototype.visitElement = function (el, context) {
      var _this = this;this._mayBeAddBlockChildren(el), this._depth++;var wasInI18nNode = this._inI18nNode,
          wasInImplicitNode = this._inImplicitNode,
          childNodes = [],
          translatedChildNodes = void 0,
          i18nAttr = _getI18nAttr(el),
          i18nMeta = i18nAttr ? i18nAttr.value : "",
          isImplicit = this._implicitTags.some(function (tag) {
        return el.name === tag;
      }) && !this._inIcu && !this._isInTranslatableSection,
          isTopLevelImplicit = !wasInImplicitNode && isImplicit;if (this._inImplicitNode = wasInImplicitNode || isImplicit, this._isInTranslatableSection || this._inIcu) (i18nAttr || isTopLevelImplicit) && this._reportError(el, "Could not mark an element as translatable inside a translatable section"), this._mode == _VisitorMode.Extract && visitAll(this, el.children);else {
        if (i18nAttr || isTopLevelImplicit) {
          this._inI18nNode = !0;var message = this._addMessage(el.children, i18nMeta);translatedChildNodes = this._translateMessage(el, message);
        }if (this._mode == _VisitorMode.Extract) {
          var isTranslatable = i18nAttr || isTopLevelImplicit;isTranslatable && this._openTranslatableSection(el), visitAll(this, el.children), isTranslatable && this._closeTranslatableSection(el, el.children);
        }
      }if (this._mode === _VisitorMode.Merge) {
        var visitNodes = translatedChildNodes || el.children;visitNodes.forEach(function (child) {
          var visited = child.visit(_this, context);visited && !_this._isInTranslatableSection && (childNodes = childNodes.concat(visited));
        });
      }if (this._visitAttributesOf(el), this._depth--, this._inI18nNode = wasInI18nNode, this._inImplicitNode = wasInImplicitNode, this._mode === _VisitorMode.Merge) {
        var translatedAttrs = this._translateAttributes(el);return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
      }return null;
    }, _Visitor.prototype.visitAttribute = function (attribute, context) {
      throw new Error("unreachable code");
    }, _Visitor.prototype._init = function (mode, interpolationConfig) {
      this._mode = mode, this._inI18nBlock = !1, this._inI18nNode = !1, this._depth = 0, this._inIcu = !1, this._msgCountAtSectionStart = void 0, this._errors = [], this._messages = [], this._inImplicitNode = !1, this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
    }, _Visitor.prototype._visitAttributesOf = function (el) {
      var _this = this,
          explicitAttrNameToValue = {},
          implicitAttrNames = this._implicitAttrs[el.name] || [];el.attrs.filter(function (attr) {
        return attr.name.startsWith(_I18N_ATTR_PREFIX);
      }).forEach(function (attr) {
        return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
      }), el.attrs.forEach(function (attr) {
        attr.name in explicitAttrNameToValue ? _this._addMessage([attr], explicitAttrNameToValue[attr.name]) : implicitAttrNames.some(function (name) {
          return attr.name === name;
        }) && _this._addMessage([attr]);
      });
    }, _Visitor.prototype._addMessage = function (ast, msgMeta) {
      if (0 == ast.length || 1 == ast.length && ast[0] instanceof Attribute$1 && !ast[0].value) return null;var _a = _parseMessageMeta(msgMeta),
          meaning = _a.meaning,
          description = _a.description,
          id = _a.id,
          message = this._createI18nMessage(ast, meaning, description, id);return this._messages.push(message), message;
    }, _Visitor.prototype._translateMessage = function (el, message) {
      if (message && this._mode === _VisitorMode.Merge) {
        var nodes = this._translations.get(message);if (nodes) return nodes;this._reportError(el, 'Translation unavailable for message id="' + this._translations.digest(message) + '"');
      }return [];
    }, _Visitor.prototype._translateAttributes = function (el) {
      var _this = this,
          attributes = el.attrs,
          i18nParsedMessageMeta = {};attributes.forEach(function (attr) {
        attr.name.startsWith(_I18N_ATTR_PREFIX) && (i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value));
      });var translatedAttributes = [];return attributes.forEach(function (attr) {
        if (attr.name !== _I18N_ATTR && !attr.name.startsWith(_I18N_ATTR_PREFIX)) if (attr.value && "" != attr.value && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {
          var _a = i18nParsedMessageMeta[attr.name],
              meaning = _a.meaning,
              description = _a.description,
              id = _a.id,
              message = _this._createI18nMessage([attr], meaning, description, id),
              nodes = _this._translations.get(message);if (nodes) {
            if (0 == nodes.length) translatedAttributes.push(new Attribute$1(attr.name, "", attr.sourceSpan));else if (nodes[0] instanceof Text) {
              var value = nodes[0].value;translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
            } else _this._reportError(el, 'Unexpected translation for attribute "' + attr.name + '" (id="' + (id || _this._translations.digest(message)) + '")');
          } else _this._reportError(el, 'Translation unavailable for attribute "' + attr.name + '" (id="' + (id || _this._translations.digest(message)) + '")');
        } else translatedAttributes.push(attr);
      }), translatedAttributes;
    }, _Visitor.prototype._mayBeAddBlockChildren = function (node) {
      this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth && this._blockChildren.push(node);
    }, _Visitor.prototype._openTranslatableSection = function (node) {
      this._isInTranslatableSection ? this._reportError(node, "Unexpected section start") : this._msgCountAtSectionStart = this._messages.length;
    }, Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", { get: function () {
        return void 0 !== this._msgCountAtSectionStart;
      }, enumerable: !0, configurable: !0 }), _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
      if (!this._isInTranslatableSection) return void this._reportError(node, "Unexpected section end");var startIndex = this._msgCountAtSectionStart,
          significantChildren = directChildren.reduce(function (count, node) {
        return count + (node instanceof Comment ? 0 : 1);
      }, 0);if (1 == significantChildren) for (var i = this._messages.length - 1; i >= startIndex; i--) {
        var ast = this._messages[i].nodes;if (!(1 == ast.length && ast[0] instanceof Text$1)) {
          this._messages.splice(i, 1);break;
        }
      }this._msgCountAtSectionStart = void 0;
    }, _Visitor.prototype._reportError = function (node, msg) {
      this._errors.push(new I18nError(node.sourceSpan, msg));
    }, _Visitor;
  }(),
      XmlTagDefinition = function () {
    function XmlTagDefinition() {
      this.closedByParent = !1, this.contentType = TagContentType.PARSABLE_DATA, this.isVoid = !1, this.ignoreFirstLf = !1, this.canSelfClose = !0;
    }return XmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
      return !1;
    }, XmlTagDefinition.prototype.isClosedByChild = function (name) {
      return !1;
    }, XmlTagDefinition;
  }(),
      _TAG_DEFINITION = new XmlTagDefinition(),
      XmlParser = function (_super) {
    function XmlParser() {
      return _super.call(this, getXmlTagDefinition) || this;
    }return __extends(XmlParser, _super), XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
      return void 0 === parseExpansionForms && (parseExpansionForms = !1), _super.prototype.parse.call(this, source, url, parseExpansionForms);
    }, XmlParser;
  }(Parser$1),
      _SerializerVisitor = function () {
    function _SerializerVisitor() {}return _SerializerVisitor.prototype.visitText = function (text, context) {
      return text.value;
    }, _SerializerVisitor.prototype.visitContainer = function (container, context) {
      var _this = this;return "[" + container.children.map(function (child) {
        return child.visit(_this);
      }).join(", ") + "]";
    }, _SerializerVisitor.prototype.visitIcu = function (icu, context) {
      var _this = this,
          strCases = Object.keys(icu.cases).map(function (k) {
        return k + " {" + icu.cases[k].visit(_this) + "}";
      });return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(", ") + "}";
    }, _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
      var _this = this;return ph.isVoid ? '<ph tag name="' + ph.startName + '"/>' : '<ph tag name="' + ph.startName + '">' + ph.children.map(function (child) {
        return child.visit(_this);
      }).join(", ") + '</ph name="' + ph.closeName + '">';
    }, _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
      return ph.value ? '<ph name="' + ph.name + '">' + ph.value + "</ph>" : '<ph name="' + ph.name + '"/>';
    }, _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
      return '<ph icu name="' + ph.name + '">' + ph.value.visit(this) + "</ph>";
    }, _SerializerVisitor;
  }(),
      serializerVisitor = new _SerializerVisitor(),
      _SerializerIgnoreIcuExpVisitor = function (_super) {
    function _SerializerIgnoreIcuExpVisitor() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(_SerializerIgnoreIcuExpVisitor, _super), _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {
      var _this = this,
          strCases = Object.keys(icu.cases).map(function (k) {
        return k + " {" + icu.cases[k].visit(_this) + "}";
      });return "{" + icu.type + ", " + strCases.join(", ") + "}";
    }, _SerializerIgnoreIcuExpVisitor;
  }(_SerializerVisitor),
      Endian = {};Endian.Little = 0, Endian.Big = 1, Endian[Endian.Little] = "Little", Endian[Endian.Big] = "Big"; /**
                                                                                                                   * @license
                                                                                                                   * Copyright Google Inc. All Rights Reserved.
                                                                                                                   *
                                                                                                                   * Use of this source code is governed by an MIT-style license that can be
                                                                                                                   * found in the LICENSE file at https://angular.io/license
                                                                                                                   */
  var Serializer = function () {
    function Serializer() {}return Serializer.prototype.write = function (messages, locale) {}, Serializer.prototype.load = function (content, url) {}, Serializer.prototype.digest = function (message) {}, Serializer.prototype.createNameMapper = function (message) {
      return null;
    }, Serializer;
  }(),
      SimplePlaceholderMapper = function (_super) {
    function SimplePlaceholderMapper(message, mapName) {
      var _this = _super.call(this) || this;return _this.mapName = mapName, _this.internalToPublic = {}, _this.publicToNextId = {}, _this.publicToInternal = {}, message.nodes.forEach(function (node) {
        return node.visit(_this);
      }), _this;
    }return __extends(SimplePlaceholderMapper, _super), SimplePlaceholderMapper.prototype.toPublicName = function (internalName) {
      return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;
    }, SimplePlaceholderMapper.prototype.toInternalName = function (publicName) {
      return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;
    }, SimplePlaceholderMapper.prototype.visitText = function (text, context) {
      return null;
    }, SimplePlaceholderMapper.prototype.visitTagPlaceholder = function (ph, context) {
      this.visitPlaceholderName(ph.startName), _super.prototype.visitTagPlaceholder.call(this, ph, context), this.visitPlaceholderName(ph.closeName);
    }, SimplePlaceholderMapper.prototype.visitPlaceholder = function (ph, context) {
      this.visitPlaceholderName(ph.name);
    }, SimplePlaceholderMapper.prototype.visitIcuPlaceholder = function (ph, context) {
      this.visitPlaceholderName(ph.name);
    }, SimplePlaceholderMapper.prototype.visitPlaceholderName = function (internalName) {
      if (internalName && !this.internalToPublic.hasOwnProperty(internalName)) {
        var publicName = this.mapName(internalName);if (this.publicToInternal.hasOwnProperty(publicName)) {
          var nextId = this.publicToNextId[publicName];this.publicToNextId[publicName] = nextId + 1, publicName = publicName + "_" + nextId;
        } else this.publicToNextId[publicName] = 1;this.internalToPublic[internalName] = publicName, this.publicToInternal[publicName] = internalName;
      }
    }, SimplePlaceholderMapper;
  }(RecurseVisitor),
      _Visitor$1 = function () {
    function _Visitor$1() {}return _Visitor$1.prototype.visitTag = function (tag) {
      var _this = this,
          strAttrs = this._serializeAttributes(tag.attrs);if (0 == tag.children.length) return "<" + tag.name + strAttrs + "/>";var strChildren = tag.children.map(function (node) {
        return node.visit(_this);
      });return "<" + tag.name + strAttrs + ">" + strChildren.join("") + "</" + tag.name + ">";
    }, _Visitor$1.prototype.visitText = function (text) {
      return text.value;
    }, _Visitor$1.prototype.visitDeclaration = function (decl) {
      return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
    }, _Visitor$1.prototype._serializeAttributes = function (attrs) {
      var strAttrs = Object.keys(attrs).map(function (name) {
        return name + '="' + attrs[name] + '"';
      }).join(" ");return strAttrs.length > 0 ? " " + strAttrs : "";
    }, _Visitor$1.prototype.visitDoctype = function (doctype) {
      return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
    }, _Visitor$1;
  }(),
      _visitor = new _Visitor$1(),
      Declaration = function () {
    function Declaration(unescapedAttrs) {
      var _this = this;this.attrs = {}, Object.keys(unescapedAttrs).forEach(function (k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }return Declaration.prototype.visit = function (visitor) {
      return visitor.visitDeclaration(this);
    }, Declaration;
  }(),
      Doctype = function () {
    function Doctype(rootTag, dtd) {
      this.rootTag = rootTag, this.dtd = dtd;
    }return Doctype.prototype.visit = function (visitor) {
      return visitor.visitDoctype(this);
    }, Doctype;
  }(),
      Tag = function () {
    function Tag(name, unescapedAttrs, children) {
      void 0 === unescapedAttrs && (unescapedAttrs = {}), void 0 === children && (children = []);var _this = this;this.name = name, this.children = children, this.attrs = {}, Object.keys(unescapedAttrs).forEach(function (k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }return Tag.prototype.visit = function (visitor) {
      return visitor.visitTag(this);
    }, Tag;
  }(),
      Text$2 = function () {
    function Text$2(unescapedValue) {
      this.value = _escapeXml(unescapedValue);
    }return Text$2.prototype.visit = function (visitor) {
      return visitor.visitText(this);
    }, Text$2;
  }(),
      CR = function (_super) {
    function CR(ws) {
      return void 0 === ws && (ws = 0), _super.call(this, "\n" + new Array(ws + 1).join(" ")) || this;
    }return __extends(CR, _super), CR;
  }(Text$2),
      _ESCAPED_CHARS = [[/&/g, "&amp;"], [/"/g, "&quot;"], [/'/g, "&apos;"], [/</g, "&lt;"], [/>/g, "&gt;"]],
      _VERSION = "1.2",
      _XMLNS = "urn:oasis:names:tc:xliff:document:1.2",
      _DEFAULT_SOURCE_LANG = "en",
      _PLACEHOLDER_TAG = "x",
      _FILE_TAG = "file",
      _SOURCE_TAG = "source",
      _TARGET_TAG = "target",
      _UNIT_TAG = "trans-unit",
      _CONTEXT_GROUP_TAG = "context-group",
      _CONTEXT_TAG = "context",
      Xliff = function (_super) {
    function Xliff() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(Xliff, _super), Xliff.prototype.write = function (messages, locale) {
      var visitor = new _WriteVisitor(),
          transUnits = [];messages.forEach(function (message) {
        var contextTags = [];message.sources.forEach(function (source) {
          var contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, { purpose: "location" });contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, { "context-type": "sourcefile" }, [new Text$2(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, { "context-type": "linenumber" }, [new Text$2("" + source.startLine)]), new CR(8)), contextTags.push(new CR(8), contextGroupTag);
        });var transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: "html" });(_a = transUnit.children).push.apply(_a, [new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG)].concat(contextTags)), message.description && transUnit.children.push(new CR(8), new Tag("note", { priority: "1", from: "description" }, [new Text$2(message.description)])), message.meaning && transUnit.children.push(new CR(8), new Tag("note", { priority: "1", from: "meaning" }, [new Text$2(message.meaning)])), transUnit.children.push(new CR(6)), transUnits.push(new CR(6), transUnit);var _a;
      });var body = new Tag("body", {}, transUnits.concat([new CR(4)])),
          file = new Tag("file", { "source-language": locale || _DEFAULT_SOURCE_LANG, datatype: "plaintext", original: "ng2.template" }, [new CR(4), body, new CR(2)]),
          xliff = new Tag("xliff", { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);return serialize([new Declaration({ version: "1.0", encoding: "UTF-8" }), new CR(), xliff, new CR()]);
    }, Xliff.prototype.load = function (content, url) {
      var xliffParser = new XliffParser(),
          _a = xliffParser.parse(content, url),
          locale = _a.locale,
          msgIdToHtml = _a.msgIdToHtml,
          errors = _a.errors,
          i18nNodesByMsgId = {},
          converter = new XmlToI18n();if (Object.keys(msgIdToHtml).forEach(function (msgId) {
        var _a = converter.convert(msgIdToHtml[msgId], url),
            i18nNodes = _a.i18nNodes,
            e = _a.errors;errors.push.apply(errors, e), i18nNodesByMsgId[msgId] = i18nNodes;
      }), errors.length) throw new Error("xliff parse errors:\n" + errors.join("\n"));return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
    }, Xliff.prototype.digest = function (message) {
      return digest(message);
    }, Xliff;
  }(Serializer),
      _WriteVisitor = function () {
    function _WriteVisitor() {}return _WriteVisitor.prototype.visitText = function (text, context) {
      return [new Text$2(text.value)];
    }, _WriteVisitor.prototype.visitContainer = function (container, context) {
      var _this = this,
          nodes = [];return container.children.forEach(function (node) {
        return nodes.push.apply(nodes, node.visit(_this));
      }), nodes;
    }, _WriteVisitor.prototype.visitIcu = function (icu, context) {
      var _this = this,
          nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];return Object.keys(icu.cases).forEach(function (c) {
        nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
      }), nodes.push(new Text$2("}")), nodes;
    }, _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
      var ctype = getCtypeForTag(ph.tag),
          startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });if (ph.isVoid) return [startTagPh];var closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    }, _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
    }, _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
    }, _WriteVisitor.prototype.serialize = function (nodes) {
      var _this = this;return [].concat.apply([], nodes.map(function (node) {
        return node.visit(_this);
      }));
    }, _WriteVisitor;
  }(),
      XliffParser = function () {
    function XliffParser() {
      this._locale = null;
    }return XliffParser.prototype.parse = function (xliff, url) {
      this._unitMlString = null, this._msgIdToHtml = {};var xml = new XmlParser().parse(xliff, url, !1);return this._errors = xml.errors, visitAll(this, xml.rootNodes, null), { msgIdToHtml: this._msgIdToHtml, errors: this._errors, locale: this._locale };
    }, XliffParser.prototype.visitElement = function (element, context) {
      switch (element.name) {case _UNIT_TAG:
          this._unitMlString = null;var idAttr = element.attrs.find(function (attr) {
            return "id" === attr.name;
          });if (idAttr) {
            var id = idAttr.value;this._msgIdToHtml.hasOwnProperty(id) ? this._addError(element, "Duplicated translations for msg " + id) : (visitAll(this, element.children, null), "string" == typeof this._unitMlString ? this._msgIdToHtml[id] = this._unitMlString : this._addError(element, "Message " + id + " misses a translation"));
          } else this._addError(element, "<" + _UNIT_TAG + '> misses the "id" attribute');break;case _SOURCE_TAG:
          break;case _TARGET_TAG:
          var innerTextStart = element.startSourceSpan.end.offset,
              innerTextEnd = element.endSourceSpan.start.offset,
              content = element.startSourceSpan.start.file.content,
              innerText = content.slice(innerTextStart, innerTextEnd);this._unitMlString = innerText;break;case _FILE_TAG:
          var localeAttr = element.attrs.find(function (attr) {
            return "target-language" === attr.name;
          });localeAttr && (this._locale = localeAttr.value), visitAll(this, element.children, null);break;default:
          visitAll(this, element.children, null);}
    }, XliffParser.prototype.visitAttribute = function (attribute, context) {}, XliffParser.prototype.visitText = function (text, context) {}, XliffParser.prototype.visitComment = function (comment, context) {}, XliffParser.prototype.visitExpansion = function (expansion, context) {}, XliffParser.prototype.visitExpansionCase = function (expansionCase, context) {}, XliffParser.prototype._addError = function (node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    }, XliffParser;
  }(),
      XmlToI18n = function () {
    function XmlToI18n() {}return XmlToI18n.prototype.convert = function (message, url) {
      var xmlIcu = new XmlParser().parse(message, url, !0);this._errors = xmlIcu.errors;var i18nNodes = this._errors.length > 0 || 0 == xmlIcu.rootNodes.length ? [] : visitAll(this, xmlIcu.rootNodes);return { i18nNodes: i18nNodes, errors: this._errors };
    }, XmlToI18n.prototype.visitText = function (text, context) {
      return new Text$1(text.value, text.sourceSpan);
    }, XmlToI18n.prototype.visitElement = function (el, context) {
      if (el.name === _PLACEHOLDER_TAG) {
        var nameAttr = el.attrs.find(function (attr) {
          return "id" === attr.name;
        });if (nameAttr) return new Placeholder("", nameAttr.value, el.sourceSpan);this._addError(el, "<" + _PLACEHOLDER_TAG + '> misses the "id" attribute');
      } else this._addError(el, "Unexpected tag");return null;
    }, XmlToI18n.prototype.visitExpansion = function (icu, context) {
      var caseMap = {};return visitAll(this, icu.cases).forEach(function (c) {
        caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
      }), new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
    }, XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
      return { value: icuCase.value, nodes: visitAll(this, icuCase.expression) };
    }, XmlToI18n.prototype.visitComment = function (comment, context) {}, XmlToI18n.prototype.visitAttribute = function (attribute, context) {}, XmlToI18n.prototype._addError = function (node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    }, XmlToI18n;
  }(),
      _VERSION$1 = "2.0",
      _XMLNS$1 = "urn:oasis:names:tc:xliff:document:2.0",
      _DEFAULT_SOURCE_LANG$1 = "en",
      _PLACEHOLDER_TAG$1 = "ph",
      _PLACEHOLDER_SPANNING_TAG = "pc",
      _XLIFF_TAG = "xliff",
      _SOURCE_TAG$1 = "source",
      _TARGET_TAG$1 = "target",
      _UNIT_TAG$1 = "unit",
      Xliff2 = function (_super) {
    function Xliff2() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(Xliff2, _super), Xliff2.prototype.write = function (messages, locale) {
      var visitor = new _WriteVisitor$1(),
          units = [];messages.forEach(function (message) {
        var unit = new Tag(_UNIT_TAG$1, { id: message.id });if (message.description || message.meaning) {
          var notes = new Tag("notes");message.description && notes.children.push(new CR(8), new Tag("note", { category: "description" }, [new Text$2(message.description)])), message.meaning && notes.children.push(new CR(8), new Tag("note", { category: "meaning" }, [new Text$2(message.meaning)])), notes.children.push(new CR(6)), unit.children.push(new CR(6), notes);
        }var segment = new Tag("segment");segment.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), new CR(6)), unit.children.push(new CR(6), segment, new CR(4)), units.push(new CR(4), unit);
      });var file = new Tag("file", { original: "ng.template", id: "ngi18n" }, units.concat([new CR(2)])),
          xliff = new Tag(_XLIFF_TAG, { version: _VERSION$1, xmlns: _XMLNS$1, srcLang: locale || _DEFAULT_SOURCE_LANG$1 }, [new CR(2), file, new CR()]);return serialize([new Declaration({ version: "1.0", encoding: "UTF-8" }), new CR(), xliff, new CR()]);
    }, Xliff2.prototype.load = function (content, url) {
      var xliff2Parser = new Xliff2Parser(),
          _a = xliff2Parser.parse(content, url),
          locale = _a.locale,
          msgIdToHtml = _a.msgIdToHtml,
          errors = _a.errors,
          i18nNodesByMsgId = {},
          converter = new XmlToI18n$1();if (Object.keys(msgIdToHtml).forEach(function (msgId) {
        var _a = converter.convert(msgIdToHtml[msgId], url),
            i18nNodes = _a.i18nNodes,
            e = _a.errors;errors.push.apply(errors, e), i18nNodesByMsgId[msgId] = i18nNodes;
      }), errors.length) throw new Error("xliff2 parse errors:\n" + errors.join("\n"));return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
    }, Xliff2.prototype.digest = function (message) {
      return decimalDigest(message);
    }, Xliff2;
  }(Serializer),
      _WriteVisitor$1 = function () {
    function _WriteVisitor$1() {}return _WriteVisitor$1.prototype.visitText = function (text, context) {
      return [new Text$2(text.value)];
    }, _WriteVisitor$1.prototype.visitContainer = function (container, context) {
      var _this = this,
          nodes = [];return container.children.forEach(function (node) {
        return nodes.push.apply(nodes, node.visit(_this));
      }), nodes;
    }, _WriteVisitor$1.prototype.visitIcu = function (icu, context) {
      var _this = this,
          nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];return Object.keys(icu.cases).forEach(function (c) {
        nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
      }), nodes.push(new Text$2("}")), nodes;
    }, _WriteVisitor$1.prototype.visitTagPlaceholder = function (ph, context) {
      var _this = this,
          type = getTypeForTag(ph.tag);if (ph.isVoid) {
        var tagPh = new Tag(_PLACEHOLDER_TAG$1, { id: (this._nextPlaceholderId++).toString(), equiv: ph.startName, type: type, disp: "<" + ph.tag + "/>" });return [tagPh];
      }var tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, { id: (this._nextPlaceholderId++).toString(), equivStart: ph.startName, equivEnd: ph.closeName, type: type, dispStart: "<" + ph.tag + ">", dispEnd: "</" + ph.tag + ">" }),
          nodes = [].concat.apply([], ph.children.map(function (node) {
        return node.visit(_this);
      }));return nodes.length ? nodes.forEach(function (node) {
        return tagPc.children.push(node);
      }) : tagPc.children.push(new Text$2("")), [tagPc];
    }, _WriteVisitor$1.prototype.visitPlaceholder = function (ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, { id: (this._nextPlaceholderId++).toString(), equiv: ph.name, disp: "{{" + ph.value + "}}" })];
    }, _WriteVisitor$1.prototype.visitIcuPlaceholder = function (ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, { id: (this._nextPlaceholderId++).toString() })];
    }, _WriteVisitor$1.prototype.serialize = function (nodes) {
      var _this = this;return this._nextPlaceholderId = 0, [].concat.apply([], nodes.map(function (node) {
        return node.visit(_this);
      }));
    }, _WriteVisitor$1;
  }(),
      Xliff2Parser = function () {
    function Xliff2Parser() {
      this._locale = null;
    }return Xliff2Parser.prototype.parse = function (xliff, url) {
      this._unitMlString = null, this._msgIdToHtml = {};var xml = new XmlParser().parse(xliff, url, !1);return this._errors = xml.errors, visitAll(this, xml.rootNodes, null), { msgIdToHtml: this._msgIdToHtml, errors: this._errors, locale: this._locale };
    }, Xliff2Parser.prototype.visitElement = function (element, context) {
      switch (element.name) {case _UNIT_TAG$1:
          this._unitMlString = null;var idAttr = element.attrs.find(function (attr) {
            return "id" === attr.name;
          });if (idAttr) {
            var id = idAttr.value;this._msgIdToHtml.hasOwnProperty(id) ? this._addError(element, "Duplicated translations for msg " + id) : (visitAll(this, element.children, null), "string" == typeof this._unitMlString ? this._msgIdToHtml[id] = this._unitMlString : this._addError(element, "Message " + id + " misses a translation"));
          } else this._addError(element, "<" + _UNIT_TAG$1 + '> misses the "id" attribute');break;case _SOURCE_TAG$1:
          break;case _TARGET_TAG$1:
          var innerTextStart = element.startSourceSpan.end.offset,
              innerTextEnd = element.endSourceSpan.start.offset,
              content = element.startSourceSpan.start.file.content,
              innerText = content.slice(innerTextStart, innerTextEnd);this._unitMlString = innerText;break;case _XLIFF_TAG:
          var localeAttr = element.attrs.find(function (attr) {
            return "trgLang" === attr.name;
          });localeAttr && (this._locale = localeAttr.value);var versionAttr = element.attrs.find(function (attr) {
            return "version" === attr.name;
          });if (versionAttr) {
            var version = versionAttr.value;"2.0" !== version ? this._addError(element, "The XLIFF file version " + version + " is not compatible with XLIFF 2.0 serializer") : visitAll(this, element.children, null);
          }break;default:
          visitAll(this, element.children, null);}
    }, Xliff2Parser.prototype.visitAttribute = function (attribute, context) {}, Xliff2Parser.prototype.visitText = function (text, context) {}, Xliff2Parser.prototype.visitComment = function (comment, context) {}, Xliff2Parser.prototype.visitExpansion = function (expansion, context) {}, Xliff2Parser.prototype.visitExpansionCase = function (expansionCase, context) {}, Xliff2Parser.prototype._addError = function (node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    }, Xliff2Parser;
  }(),
      XmlToI18n$1 = function () {
    function XmlToI18n$1() {}return XmlToI18n$1.prototype.convert = function (message, url) {
      var xmlIcu = new XmlParser().parse(message, url, !0);this._errors = xmlIcu.errors;var i18nNodes = this._errors.length > 0 || 0 == xmlIcu.rootNodes.length ? [] : [].concat.apply([], visitAll(this, xmlIcu.rootNodes));return { i18nNodes: i18nNodes, errors: this._errors };
    }, XmlToI18n$1.prototype.visitText = function (text, context) {
      return new Text$1(text.value, text.sourceSpan);
    }, XmlToI18n$1.prototype.visitElement = function (el, context) {
      var _this = this;switch (el.name) {case _PLACEHOLDER_TAG$1:
          var nameAttr = el.attrs.find(function (attr) {
            return "equiv" === attr.name;
          });if (nameAttr) return [new Placeholder("", nameAttr.value, el.sourceSpan)];this._addError(el, "<" + _PLACEHOLDER_TAG$1 + '> misses the "equiv" attribute');break;case _PLACEHOLDER_SPANNING_TAG:
          var startAttr = el.attrs.find(function (attr) {
            return "equivStart" === attr.name;
          }),
              endAttr = el.attrs.find(function (attr) {
            return "equivEnd" === attr.name;
          });if (startAttr) {
            if (endAttr) {
              var startId = startAttr.value,
                  endId = endAttr.value,
                  nodes = [];return nodes.concat.apply(nodes, [new Placeholder("", startId, el.sourceSpan)].concat(el.children.map(function (node) {
                return node.visit(_this, null);
              }), [new Placeholder("", endId, el.sourceSpan)]));
            }this._addError(el, "<" + _PLACEHOLDER_TAG$1 + '> misses the "equivEnd" attribute');
          } else this._addError(el, "<" + _PLACEHOLDER_TAG$1 + '> misses the "equivStart" attribute');break;default:
          this._addError(el, "Unexpected tag");}return null;
    }, XmlToI18n$1.prototype.visitExpansion = function (icu, context) {
      var caseMap = {};return visitAll(this, icu.cases).forEach(function (c) {
        caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
      }), new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
    }, XmlToI18n$1.prototype.visitExpansionCase = function (icuCase, context) {
      return { value: icuCase.value, nodes: [].concat.apply([], visitAll(this, icuCase.expression)) };
    }, XmlToI18n$1.prototype.visitComment = function (comment, context) {}, XmlToI18n$1.prototype.visitAttribute = function (attribute, context) {}, XmlToI18n$1.prototype._addError = function (node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    }, XmlToI18n$1;
  }(),
      _MESSAGES_TAG = "messagebundle",
      _MESSAGE_TAG = "msg",
      _PLACEHOLDER_TAG$2 = "ph",
      _EXEMPLE_TAG = "ex",
      _SOURCE_TAG$2 = "source",
      _DOCTYPE = '<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) "default">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>',
      Xmb = function (_super) {
    function Xmb() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(Xmb, _super), Xmb.prototype.write = function (messages, locale) {
      var exampleVisitor = new ExampleVisitor(),
          visitor = new _Visitor$2(),
          rootNode = new Tag(_MESSAGES_TAG);return messages.forEach(function (message) {
        var attrs = { id: message.id };message.description && (attrs.desc = message.description), message.meaning && (attrs.meaning = message.meaning);var sourceTags = [];message.sources.forEach(function (source) {
          sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [new Text$2(source.filePath + ":" + source.startLine + (source.endLine !== source.startLine ? "," + source.endLine : ""))]));
        }), rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, sourceTags.concat(visitor.serialize(message.nodes))));
      }), rootNode.children.push(new CR()), serialize([new Declaration({ version: "1.0", encoding: "UTF-8" }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);
    }, Xmb.prototype.load = function (content, url) {
      throw new Error("Unsupported");
    }, Xmb.prototype.digest = function (message) {
      return digest$1(message);
    }, Xmb.prototype.createNameMapper = function (message) {
      return new SimplePlaceholderMapper(message, toPublicName);
    }, Xmb;
  }(Serializer),
      _Visitor$2 = function () {
    function _Visitor$2() {}return _Visitor$2.prototype.visitText = function (text, context) {
      return [new Text$2(text.value)];
    }, _Visitor$2.prototype.visitContainer = function (container, context) {
      var _this = this,
          nodes = [];return container.children.forEach(function (node) {
        return nodes.push.apply(nodes, node.visit(_this));
      }), nodes;
    }, _Visitor$2.prototype.visitIcu = function (icu, context) {
      var _this = this,
          nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];return Object.keys(icu.cases).forEach(function (c) {
        nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
      }), nodes.push(new Text$2("}")), nodes;
    }, _Visitor$2.prototype.visitTagPlaceholder = function (ph, context) {
      var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]),
          startTagPh = new Tag(_PLACEHOLDER_TAG$2, { name: ph.startName }, [startEx]);if (ph.isVoid) return [startTagPh];var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]),
          closeTagPh = new Tag(_PLACEHOLDER_TAG$2, { name: ph.closeName }, [closeEx]);return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    }, _Visitor$2.prototype.visitPlaceholder = function (ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$2, { name: ph.name })];
    }, _Visitor$2.prototype.visitIcuPlaceholder = function (ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$2, { name: ph.name })];
    }, _Visitor$2.prototype.serialize = function (nodes) {
      var _this = this;return [].concat.apply([], nodes.map(function (node) {
        return node.visit(_this);
      }));
    }, _Visitor$2;
  }(),
      ExampleVisitor = function () {
    function ExampleVisitor() {}return ExampleVisitor.prototype.addDefaultExamples = function (node) {
      return node.visit(this), node;
    }, ExampleVisitor.prototype.visitTag = function (tag) {
      var _this = this;if (tag.name === _PLACEHOLDER_TAG$2) {
        if (!tag.children || 0 == tag.children.length) {
          var exText = new Text$2(tag.attrs.name || "...");tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
        }
      } else tag.children && tag.children.forEach(function (node) {
        return node.visit(_this);
      });
    }, ExampleVisitor.prototype.visitText = function (text) {}, ExampleVisitor.prototype.visitDeclaration = function (decl) {}, ExampleVisitor.prototype.visitDoctype = function (doctype) {}, ExampleVisitor;
  }(),
      _TRANSLATIONS_TAG = "translationbundle",
      _TRANSLATION_TAG = "translation",
      _PLACEHOLDER_TAG$3 = "ph",
      Xtb = function (_super) {
    function Xtb() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(Xtb, _super), Xtb.prototype.write = function (messages, locale) {
      throw new Error("Unsupported");
    }, Xtb.prototype.load = function (content, url) {
      var xtbParser = new XtbParser(),
          _a = xtbParser.parse(content, url),
          locale = _a.locale,
          msgIdToHtml = _a.msgIdToHtml,
          errors = _a.errors,
          i18nNodesByMsgId = {},
          converter = new XmlToI18n$2();if (Object.keys(msgIdToHtml).forEach(function (msgId) {
        var valueFn = function () {
          var _a = converter.convert(msgIdToHtml[msgId], url),
              i18nNodes = _a.i18nNodes,
              errors = _a.errors;if (errors.length) throw new Error("xtb parse errors:\n" + errors.join("\n"));return i18nNodes;
        };createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
      }), errors.length) throw new Error("xtb parse errors:\n" + errors.join("\n"));return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
    }, Xtb.prototype.digest = function (message) {
      return digest$1(message);
    }, Xtb.prototype.createNameMapper = function (message) {
      return new SimplePlaceholderMapper(message, toPublicName);
    }, Xtb;
  }(Serializer),
      XtbParser = function () {
    function XtbParser() {
      this._locale = null;
    }return XtbParser.prototype.parse = function (xtb, url) {
      this._bundleDepth = 0, this._msgIdToHtml = {};var xml = new XmlParser().parse(xtb, url, !1);return this._errors = xml.errors, visitAll(this, xml.rootNodes), { msgIdToHtml: this._msgIdToHtml, errors: this._errors, locale: this._locale };
    }, XtbParser.prototype.visitElement = function (element, context) {
      switch (element.name) {case _TRANSLATIONS_TAG:
          this._bundleDepth++, this._bundleDepth > 1 && this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");var langAttr = element.attrs.find(function (attr) {
            return "lang" === attr.name;
          });langAttr && (this._locale = langAttr.value), visitAll(this, element.children, null), this._bundleDepth--;break;case _TRANSLATION_TAG:
          var idAttr = element.attrs.find(function (attr) {
            return "id" === attr.name;
          });if (idAttr) {
            var id = idAttr.value;if (this._msgIdToHtml.hasOwnProperty(id)) this._addError(element, "Duplicated translations for msg " + id);else {
              var innerTextStart = element.startSourceSpan.end.offset,
                  innerTextEnd = element.endSourceSpan.start.offset,
                  content = element.startSourceSpan.start.file.content,
                  innerText = content.slice(innerTextStart, innerTextEnd);this._msgIdToHtml[id] = innerText;
            }
          } else this._addError(element, "<" + _TRANSLATION_TAG + '> misses the "id" attribute');break;default:
          this._addError(element, "Unexpected tag");}
    }, XtbParser.prototype.visitAttribute = function (attribute, context) {}, XtbParser.prototype.visitText = function (text, context) {}, XtbParser.prototype.visitComment = function (comment, context) {}, XtbParser.prototype.visitExpansion = function (expansion, context) {}, XtbParser.prototype.visitExpansionCase = function (expansionCase, context) {}, XtbParser.prototype._addError = function (node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    }, XtbParser;
  }(),
      XmlToI18n$2 = function () {
    function XmlToI18n$2() {}return XmlToI18n$2.prototype.convert = function (message, url) {
      var xmlIcu = new XmlParser().parse(message, url, !0);this._errors = xmlIcu.errors;var i18nNodes = this._errors.length > 0 || 0 == xmlIcu.rootNodes.length ? [] : visitAll(this, xmlIcu.rootNodes);return { i18nNodes: i18nNodes, errors: this._errors };
    }, XmlToI18n$2.prototype.visitText = function (text, context) {
      return new Text$1(text.value, text.sourceSpan);
    }, XmlToI18n$2.prototype.visitExpansion = function (icu, context) {
      var caseMap = {};return visitAll(this, icu.cases).forEach(function (c) {
        caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
      }), new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
    }, XmlToI18n$2.prototype.visitExpansionCase = function (icuCase, context) {
      return { value: icuCase.value, nodes: visitAll(this, icuCase.expression) };
    }, XmlToI18n$2.prototype.visitElement = function (el, context) {
      if (el.name === _PLACEHOLDER_TAG$3) {
        var nameAttr = el.attrs.find(function (attr) {
          return "name" === attr.name;
        });if (nameAttr) return new Placeholder("", nameAttr.value, el.sourceSpan);this._addError(el, "<" + _PLACEHOLDER_TAG$3 + '> misses the "name" attribute');
      } else this._addError(el, "Unexpected tag");return null;
    }, XmlToI18n$2.prototype.visitComment = function (comment, context) {}, XmlToI18n$2.prototype.visitAttribute = function (attribute, context) {}, XmlToI18n$2.prototype._addError = function (node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    }, XmlToI18n$2;
  }(),
      HtmlParser = function (_super) {
    function HtmlParser() {
      return _super.call(this, getHtmlTagDefinition) || this;
    }return __extends(HtmlParser, _super), HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
      return void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
    }, HtmlParser;
  }(Parser$1);HtmlParser.decorators = [{ type: CompilerInjectable }], HtmlParser.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var TranslationBundle = function () {
    function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {
      void 0 === _i18nNodesByMsgId && (_i18nNodesByMsgId = {}), void 0 === missingTranslationStrategy && (missingTranslationStrategy = _angular_core.MissingTranslationStrategy.Warning), this._i18nNodesByMsgId = _i18nNodesByMsgId, this.digest = digest, this.mapperFactory = mapperFactory, this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
    }return TranslationBundle.load = function (content, url, serializer, missingTranslationStrategy, console) {
      var _a = serializer.load(content, url),
          locale = _a.locale,
          i18nNodesByMsgId = _a.i18nNodesByMsgId,
          digestFn = function (m) {
        return serializer.digest(m);
      },
          mapperFactory = function (m) {
        return serializer.createNameMapper(m);
      };return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
    }, TranslationBundle.prototype.get = function (srcMsg) {
      var html = this._i18nToHtml.convert(srcMsg);if (html.errors.length) throw new Error(html.errors.join("\n"));return html.nodes;
    }, TranslationBundle.prototype.has = function (srcMsg) {
      return this.digest(srcMsg) in this._i18nNodesByMsgId;
    }, TranslationBundle;
  }(),
      I18nToHtmlVisitor = function () {
    function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {
      void 0 === _i18nNodesByMsgId && (_i18nNodesByMsgId = {}), this._i18nNodesByMsgId = _i18nNodesByMsgId, this._locale = _locale, this._digest = _digest, this._mapperFactory = _mapperFactory, this._missingTranslationStrategy = _missingTranslationStrategy, this._console = _console, this._contextStack = [], this._errors = [];
    }return I18nToHtmlVisitor.prototype.convert = function (srcMsg) {
      this._contextStack.length = 0, this._errors.length = 0;var text = this._convertToText(srcMsg),
          url = srcMsg.nodes[0].sourceSpan.start.file.url,
          html = new HtmlParser().parse(text, url, !0);return { nodes: html.rootNodes, errors: this._errors.concat(html.errors) };
    }, I18nToHtmlVisitor.prototype.visitText = function (text, context) {
      return text.value;
    }, I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {
      var _this = this;return container.children.map(function (n) {
        return n.visit(_this);
      }).join("");
    }, I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {
      var _this = this,
          cases = Object.keys(icu.cases).map(function (k) {
        return k + " {" + icu.cases[k].visit(_this) + "}";
      }),
          exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression] : icu.expression;return "{" + exp + ", " + icu.type + ", " + cases.join(" ") + "}";
    }, I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {
      var phName = this._mapper(ph.name);return this._srcMsg.placeholders.hasOwnProperty(phName) ? this._srcMsg.placeholders[phName] : this._srcMsg.placeholderToMessage.hasOwnProperty(phName) ? this._convertToText(this._srcMsg.placeholderToMessage[phName]) : (this._addError(ph, 'Unknown placeholder "' + ph.name + '"'), "");
    }, I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) {
      var _this = this,
          tag = "" + ph.tag,
          attrs = Object.keys(ph.attrs).map(function (name) {
        return name + '="' + ph.attrs[name] + '"';
      }).join(" ");if (ph.isVoid) return "<" + tag + " " + attrs + "/>";var children = ph.children.map(function (c) {
        return c.visit(_this);
      }).join("");return "<" + tag + " " + attrs + ">" + children + "</" + tag + ">";
    }, I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
      return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
    }, I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {
      var nodes,
          _this = this,
          id = this._digest(srcMsg),
          mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;if (this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper }), this._srcMsg = srcMsg, this._i18nNodesByMsgId.hasOwnProperty(id)) nodes = this._i18nNodesByMsgId[id], this._mapper = function (name) {
        return mapper ? mapper.toInternalName(name) : name;
      };else {
        if (this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Error) {
          var ctx = this._locale ? ' for locale "' + this._locale + '"' : "";this._addError(srcMsg.nodes[0], 'Missing translation for message "' + id + '"' + ctx);
        } else if (this._console && this._missingTranslationStrategy === _angular_core.MissingTranslationStrategy.Warning) {
          var ctx = this._locale ? ' for locale "' + this._locale + '"' : "";this._console.warn('Missing translation for message "' + id + '"' + ctx);
        }nodes = srcMsg.nodes, this._mapper = function (name) {
          return name;
        };
      }var text = nodes.map(function (node) {
        return node.visit(_this);
      }).join(""),
          context = this._contextStack.pop();return this._srcMsg = context.msg, this._mapper = context.mapper, text;
    }, I18nToHtmlVisitor.prototype._addError = function (el, msg) {
      this._errors.push(new I18nError(el.sourceSpan, msg));
    }, I18nToHtmlVisitor;
  }(),
      I18NHtmlParser = function () {
    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {
      if (void 0 === missingTranslation && (missingTranslation = _angular_core.MissingTranslationStrategy.Warning), this._htmlParser = _htmlParser, translations) {
        var serializer = createSerializer(translationsFormat);this._translationBundle = TranslationBundle.load(translations, "i18n", serializer, missingTranslation, console);
      }
    }return I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
      void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);return this._translationBundle ? parseResult.errors.length ? new ParseTreeResult(parseResult.rootNodes, parseResult.errors) : mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {}) : parseResult;
    }, I18NHtmlParser;
  }(),
      CORE = assetUrl("core"),
      Identifiers = function () {
    function Identifiers() {}return Identifiers;
  }();Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = { name: "ANALYZE_FOR_ENTRY_COMPONENTS", moduleUrl: CORE, runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS }, Identifiers.ElementRef = { name: "ElementRef", moduleUrl: CORE, runtime: _angular_core.ElementRef }, Identifiers.NgModuleRef = { name: "NgModuleRef", moduleUrl: CORE, runtime: _angular_core.NgModuleRef }, Identifiers.ViewContainerRef = { name: "ViewContainerRef", moduleUrl: CORE, runtime: _angular_core.ViewContainerRef }, Identifiers.ChangeDetectorRef = { name: "ChangeDetectorRef", moduleUrl: CORE, runtime: _angular_core.ChangeDetectorRef }, Identifiers.QueryList = { name: "QueryList", moduleUrl: CORE, runtime: _angular_core.QueryList }, Identifiers.TemplateRef = { name: "TemplateRef", moduleUrl: CORE, runtime: _angular_core.TemplateRef }, Identifiers.CodegenComponentFactoryResolver = { name: "ɵCodegenComponentFactoryResolver", moduleUrl: CORE, runtime: _angular_core.ɵCodegenComponentFactoryResolver }, Identifiers.ComponentFactoryResolver = { name: "ComponentFactoryResolver", moduleUrl: CORE, runtime: _angular_core.ComponentFactoryResolver }, Identifiers.ComponentFactory = { name: "ComponentFactory", moduleUrl: CORE, runtime: _angular_core.ComponentFactory }, Identifiers.ComponentRef = { name: "ComponentRef", moduleUrl: CORE, runtime: _angular_core.ComponentRef }, Identifiers.NgModuleFactory = { name: "NgModuleFactory", moduleUrl: CORE, runtime: _angular_core.NgModuleFactory }, Identifiers.NgModuleInjector = { name: "ɵNgModuleInjector", moduleUrl: CORE, runtime: _angular_core.ɵNgModuleInjector }, Identifiers.RegisterModuleFactoryFn = { name: "ɵregisterModuleFactory", moduleUrl: CORE, runtime: _angular_core.ɵregisterModuleFactory }, Identifiers.Injector = { name: "Injector", moduleUrl: CORE, runtime: _angular_core.Injector }, Identifiers.ViewEncapsulation = { name: "ViewEncapsulation", moduleUrl: CORE, runtime: _angular_core.ViewEncapsulation }, Identifiers.ChangeDetectionStrategy = { name: "ChangeDetectionStrategy", moduleUrl: CORE, runtime: _angular_core.ChangeDetectionStrategy }, Identifiers.SecurityContext = { name: "SecurityContext", moduleUrl: CORE, runtime: _angular_core.SecurityContext }, Identifiers.LOCALE_ID = { name: "LOCALE_ID", moduleUrl: CORE, runtime: _angular_core.LOCALE_ID }, Identifiers.TRANSLATIONS_FORMAT = { name: "TRANSLATIONS_FORMAT", moduleUrl: CORE, runtime: _angular_core.TRANSLATIONS_FORMAT }, Identifiers.inlineInterpolate = { name: "ɵinlineInterpolate", moduleUrl: CORE, runtime: _angular_core.ɵinlineInterpolate }, Identifiers.interpolate = { name: "ɵinterpolate", moduleUrl: CORE, runtime: _angular_core.ɵinterpolate }, Identifiers.EMPTY_ARRAY = { name: "ɵEMPTY_ARRAY", moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_ARRAY }, Identifiers.EMPTY_MAP = { name: "ɵEMPTY_MAP", moduleUrl: CORE, runtime: _angular_core.ɵEMPTY_MAP }, Identifiers.Renderer = { name: "Renderer", moduleUrl: CORE, runtime: _angular_core.Renderer }, Identifiers.viewDef = { name: "ɵvid", moduleUrl: CORE, runtime: _angular_core.ɵvid }, Identifiers.elementDef = { name: "ɵeld", moduleUrl: CORE, runtime: _angular_core.ɵeld }, Identifiers.anchorDef = { name: "ɵand", moduleUrl: CORE, runtime: _angular_core.ɵand }, Identifiers.textDef = { name: "ɵted", moduleUrl: CORE, runtime: _angular_core.ɵted }, Identifiers.directiveDef = { name: "ɵdid", moduleUrl: CORE, runtime: _angular_core.ɵdid }, Identifiers.providerDef = { name: "ɵprd", moduleUrl: CORE, runtime: _angular_core.ɵprd }, Identifiers.queryDef = { name: "ɵqud", moduleUrl: CORE, runtime: _angular_core.ɵqud }, Identifiers.pureArrayDef = { name: "ɵpad", moduleUrl: CORE, runtime: _angular_core.ɵpad }, Identifiers.pureObjectDef = { name: "ɵpod", moduleUrl: CORE, runtime: _angular_core.ɵpod }, Identifiers.purePipeDef = { name: "ɵppd", moduleUrl: CORE, runtime: _angular_core.ɵppd }, Identifiers.pipeDef = { name: "ɵpid", moduleUrl: CORE, runtime: _angular_core.ɵpid }, Identifiers.nodeValue = { name: "ɵnov", moduleUrl: CORE, runtime: _angular_core.ɵnov }, Identifiers.ngContentDef = { name: "ɵncd", moduleUrl: CORE, runtime: _angular_core.ɵncd }, Identifiers.unwrapValue = { name: "ɵunv", moduleUrl: CORE, runtime: _angular_core.ɵunv }, Identifiers.createRendererType2 = { name: "ɵcrt", moduleUrl: CORE, runtime: _angular_core.ɵcrt }, Identifiers.RendererType2 = { name: "RendererType2", moduleUrl: CORE, runtime: null }, Identifiers.ViewDefinition = { name: "ɵViewDefinition", moduleUrl: CORE, runtime: null }, Identifiers.createComponentFactory = { name: "ɵccf", moduleUrl: CORE, runtime: _angular_core.ɵccf }; /**
license
opyright Google Inc. All Rights Reserved.

se of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.io/license

  var PLURAL_CASES = ["zero", "one", "two", "few", "many", "other"],
      ExpansionResult = function () {
    function ExpansionResult(nodes, expanded, errors) {
      this.nodes = nodes, this.expanded = expanded, this.errors = errors;
    }return ExpansionResult;
  }(),
      ExpansionError = function (_super) {
    function ExpansionError(span, errorMsg) {
      return _super.call(this, span, errorMsg) || this;
    }return __extends(ExpansionError, _super), ExpansionError;
  }(ParseError),
      _Expander = function () {
    function _Expander() {
      this.isExpanded = !1, this.errors = [];
    }return _Expander.prototype.visitElement = function (element, context) {
      return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
    }, _Expander.prototype.visitAttribute = function (attribute, context) {
      return attribute;
    }, _Expander.prototype.visitText = function (text, context) {
      return text;
    }, _Expander.prototype.visitComment = function (comment, context) {
      return comment;
    }, _Expander.prototype.visitExpansion = function (icu, context) {
      return this.isExpanded = !0, "plural" == icu.type ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
    }, _Expander.prototype.visitExpansionCase = function (icuCase, context) {
      throw new Error("Should not be reached");
    }, _Expander;
  }(),
      ProviderError = function (_super) {
    function ProviderError(message, span) {
      return _super.call(this, span, message) || this;
    }return __extends(ProviderError, _super), ProviderError;
  }(ParseError),
      ProviderViewContext = function () {
    function ProviderViewContext(component) {
      var _this = this;this.component = component, this.errors = [], this.viewQueries = _getViewQueries(component), this.viewProviders = new Map(), component.viewProviders.forEach(function (provider) {
        null == _this.viewProviders.get(tokenReference(provider.token)) && _this.viewProviders.set(tokenReference(provider.token), !0);
      });
    }return ProviderViewContext;
  }(),
      ProviderElementContext = function () {
    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
      var _this = this;this.viewContext = viewContext, this._parent = _parent, this._isViewRoot = _isViewRoot, this._directiveAsts = _directiveAsts, this._sourceSpan = _sourceSpan, this._transformedProviders = new Map(), this._seenProviders = new Map(), this._hasViewContainer = !1, this._queriedTokens = new Map(), this._attrs = {}, attrs.forEach(function (attrAst) {
        return _this._attrs[attrAst.name] = attrAst.value;
      });var directivesMeta = _directiveAsts.map(function (directiveAst) {
        return directiveAst.directive;
      });if (this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors), this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta), Array.from(this._allProviders.values()).forEach(function (provider) {
        _this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);
      }), isTemplate) {
        var templateRefId = createIdentifierToken(Identifiers.TemplateRef);this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
      }refs.forEach(function (refAst) {
        var defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);_this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this._queriedTokens);
      }), this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef)) && (this._hasViewContainer = !0), Array.from(this._allProviders.values()).forEach(function (provider) {
        var eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));eager && _this._getOrCreateLocalProvider(provider.providerType, provider.token, !0);
      });
    }return ProviderElementContext.prototype.afterElement = function () {
      var _this = this;Array.from(this._allProviders.values()).forEach(function (provider) {
        _this._getOrCreateLocalProvider(provider.providerType, provider.token, !1);
      });
    }, Object.defineProperty(ProviderElementContext.prototype, "transformProviders", { get: function () {
        return Array.from(this._transformedProviders.values());
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", { get: function () {
        var sortedProviderTypes = this.transformProviders.map(function (provider) {
          return provider.token.identifier;
        }),
            sortedDirectives = this._directiveAsts.slice();return sortedDirectives.sort(function (dir1, dir2) {
          return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
        }), sortedDirectives;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", { get: function () {
        return this._hasViewContainer;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ProviderElementContext.prototype, "queryMatches", { get: function () {
        var allMatches = [];return this._queriedTokens.forEach(function (matches) {
          allMatches.push.apply(allMatches, matches);
        }), allMatches;
      }, enumerable: !0, configurable: !0 }), ProviderElementContext.prototype._addQueryReadsTo = function (token, defaultValue, queryReadTokens) {
      this._getQueriesFor(token).forEach(function (query) {
        var queryValue = query.meta.read || defaultValue,
            tokenRef = tokenReference(queryValue),
            queryMatches = queryReadTokens.get(tokenRef);queryMatches || (queryMatches = [], queryReadTokens.set(tokenRef, queryMatches)), queryMatches.push({ queryId: query.queryId, value: queryValue });
      });
    }, ProviderElementContext.prototype._getQueriesFor = function (token) {
      for (var queries, result = [], currentEl = this, distance = 0; null !== currentEl;) queries = currentEl._contentQueries.get(tokenReference(token)), queries && result.push.apply(result, queries.filter(function (query) {
        return query.meta.descendants || distance <= 1;
      })), currentEl._directiveAsts.length > 0 && distance++, currentEl = currentEl._parent;return queries = this.viewContext.viewQueries.get(tokenReference(token)), queries && result.push.apply(result, queries), result;
    }, ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
      var _this = this,
          resolvedProvider = this._allProviders.get(tokenReference(token));if (!resolvedProvider || (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService || (requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin) return null;var transformedProviderAst = this._transformedProviders.get(tokenReference(token));if (transformedProviderAst) return transformedProviderAst;if (null != this._seenProviders.get(tokenReference(token))) return this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan)), null;this._seenProviders.set(tokenReference(token), !0);var transformedProviders = resolvedProvider.providers.map(function (provider) {
        var transformedUseValue = provider.useValue,
            transformedUseExisting = provider.useExisting,
            transformedDeps = void 0;if (null != provider.useExisting) {
          var existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);null != existingDiDep.token ? transformedUseExisting = existingDiDep.token : (transformedUseExisting = null, transformedUseValue = existingDiDep.value);
        } else if (provider.useFactory) {
          var deps = provider.deps || provider.useFactory.diDeps;transformedDeps = deps.map(function (dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        } else if (provider.useClass) {
          var deps = provider.deps || provider.useClass.diDeps;transformedDeps = deps.map(function (dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        }return _transformProvider(provider, { useExisting: transformedUseExisting, useValue: transformedUseValue, deps: transformedDeps });
      });return transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders }), this._transformedProviders.set(tokenReference(token), transformedProviderAst), transformedProviderAst;
    }, ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
      if (void 0 === eager && (eager = !1), dep.isAttribute) {
        var attrValue = this._attrs[dep.token.value];return { isValue: !0, value: null == attrValue ? null : attrValue };
      }if (null != dep.token) {
        if (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component) {
          if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) return dep;tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef) && (this._hasViewContainer = !0);
        }if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) return dep;if (null != this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager)) return dep;
      }return null;
    }, ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
      void 0 === eager && (eager = !1);var currElement = this,
          currEager = eager,
          result = null;if (dep.isSkipSelf || (result = this._getLocalDependency(requestingProviderType, dep, eager)), dep.isSelf) !result && dep.isOptional && (result = { isValue: !0, value: null });else {
        for (; !result && currElement._parent;) {
          var prevElement = currElement;currElement = currElement._parent, prevElement._isViewRoot && (currEager = !1), result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
        }result || (result = !dep.isHost || this.viewContext.component.isHost || this.viewContext.component.type.reference === tokenReference(dep.token) || null != this.viewContext.viewProviders.get(tokenReference(dep.token)) ? dep : dep.isOptional ? result = { isValue: !0, value: null } : null);
      }return result || this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan)), result;
    }, ProviderElementContext;
  }(),
      NgModuleProviderAnalyzer = function () {
    function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
      var _this = this;this._transformedProviders = new Map(), this._seenProviders = new Map(), this._errors = [], this._allProviders = new Map(), ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
        var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };_resolveProviders([ngModuleProvider], ProviderAstType.PublicService, !0, sourceSpan, _this._errors, _this._allProviders);
      }), _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) {
        return entry.provider;
      }).concat(extraProviders), ProviderAstType.PublicService, !1, sourceSpan, this._errors, this._allProviders);
    }return NgModuleProviderAnalyzer.prototype.parse = function () {
      var _this = this;if (Array.from(this._allProviders.values()).forEach(function (provider) {
        _this._getOrCreateLocalProvider(provider.token, provider.eager);
      }), this._errors.length > 0) {
        var errorString = this._errors.join("\n");throw new Error("Provider parse errors:\n" + errorString);
      }return Array.from(this._transformedProviders.values());
    }, NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
      var _this = this,
          resolvedProvider = this._allProviders.get(tokenReference(token));if (!resolvedProvider) return null;var transformedProviderAst = this._transformedProviders.get(tokenReference(token));if (transformedProviderAst) return transformedProviderAst;if (null != this._seenProviders.get(tokenReference(token))) return this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan)), null;this._seenProviders.set(tokenReference(token), !0);var transformedProviders = resolvedProvider.providers.map(function (provider) {
        var transformedUseValue = provider.useValue,
            transformedUseExisting = provider.useExisting,
            transformedDeps = void 0;if (null != provider.useExisting) {
          var existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);null != existingDiDep.token ? transformedUseExisting = existingDiDep.token : (transformedUseExisting = null, transformedUseValue = existingDiDep.value);
        } else if (provider.useFactory) {
          var deps = provider.deps || provider.useFactory.diDeps;transformedDeps = deps.map(function (dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        } else if (provider.useClass) {
          var deps = provider.deps || provider.useClass.diDeps;transformedDeps = deps.map(function (dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        }return _transformProvider(provider, { useExisting: transformedUseExisting, useValue: transformedUseValue, deps: transformedDeps });
      });return transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders }), this._transformedProviders.set(tokenReference(token), transformedProviderAst), transformedProviderAst;
    }, NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
      void 0 === eager && (eager = !1);var foundLocal = !1;dep.isSkipSelf || null == dep.token || (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver) ? foundLocal = !0 : null != this._getOrCreateLocalProvider(dep.token, eager) && (foundLocal = !0));var result = dep;return dep.isSelf && !foundLocal && (dep.isOptional ? result = { isValue: !0, value: null } : this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan))), result;
    }, NgModuleProviderAnalyzer;
  }(),
      ElementSchemaRegistry = function () {
    function ElementSchemaRegistry() {}return ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {}, ElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {}, ElementSchemaRegistry.prototype.securityContext = function (elementName, propName, isAttribute) {}, ElementSchemaRegistry.prototype.allKnownElementNames = function () {}, ElementSchemaRegistry.prototype.getMappedPropName = function (propName) {}, ElementSchemaRegistry.prototype.getDefaultComponentElementName = function () {}, ElementSchemaRegistry.prototype.validateProperty = function (name) {}, ElementSchemaRegistry.prototype.validateAttribute = function (name) {}, ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {}, ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {}, ElementSchemaRegistry;
  }(),
      StyleWithImports = function () {
    function StyleWithImports(style$$1, styleUrls) {
      this.style = style$$1, this.styleUrls = styleUrls;
    }return StyleWithImports;
  }(),
      CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g,
      CSS_COMMENT_REGEXP = /\/\*.+?\*\//g,
      URL_WITH_SCHEMA_REGEXP = /^([^:\/?#]+):/,
      PROPERTY_PARTS_SEPARATOR = ".",
      ATTRIBUTE_PREFIX = "attr",
      CLASS_PREFIX = "class",
      STYLE_PREFIX = "style",
      ANIMATE_PROP_PREFIX = "animate-",
      BoundPropertyType = {};BoundPropertyType.DEFAULT = 0, BoundPropertyType.LITERAL_ATTR = 1, BoundPropertyType.ANIMATION = 2, BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT", BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR", BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";var BoundProperty = function () {
    function BoundProperty(name, expression, type, sourceSpan) {
      this.name = name, this.expression = expression, this.type = type, this.sourceSpan = sourceSpan;
    }return Object.defineProperty(BoundProperty.prototype, "isLiteral", { get: function () {
        return this.type === BoundPropertyType.LITERAL_ATTR;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(BoundProperty.prototype, "isAnimation", { get: function () {
        return this.type === BoundPropertyType.ANIMATION;
      }, enumerable: !0, configurable: !0 }), BoundProperty;
  }(),
      BindingParser = function () {
    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
      var _this = this;this._exprParser = _exprParser, this._interpolationConfig = _interpolationConfig, this._schemaRegistry = _schemaRegistry, this._targetErrors = _targetErrors, this.pipesByName = new Map(), this._usedPipes = new Map(), pipes.forEach(function (pipe) {
        return _this.pipesByName.set(pipe.name, pipe);
      });
    }return BindingParser.prototype.getUsedPipes = function () {
      return Array.from(this._usedPipes.values());
    }, BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, elementSelector, sourceSpan) {
      var _this = this;if (dirMeta.hostProperties) {
        var boundProps_1 = [];return Object.keys(dirMeta.hostProperties).forEach(function (propName) {
          var expression = dirMeta.hostProperties[propName];"string" == typeof expression ? _this.parsePropertyBinding(propName, expression, !0, sourceSpan, [], boundProps_1) : _this._reportError('Value of the host property binding "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan);
        }), boundProps_1.map(function (prop) {
          return _this.createElementPropertyAst(elementSelector, prop);
        });
      }return null;
    }, BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
      var _this = this;if (dirMeta.hostListeners) {
        var targetEventAsts_1 = [];return Object.keys(dirMeta.hostListeners).forEach(function (propName) {
          var expression = dirMeta.hostListeners[propName];"string" == typeof expression ? _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1) : _this._reportError('Value of the host listener "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + typeof expression + ")", sourceSpan);
        }), targetEventAsts_1;
      }return null;
    }, BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();try {
        var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);return ast && this._reportExpressionParserErrors(ast.errors, sourceSpan), this._checkPipes(ast, sourceSpan), ast;
      } catch (e) {
        return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
      }
    }, BindingParser.prototype.parseInlineTemplateBinding = function (prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
      for (var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan), i = 0; i < bindings.length; i++) {
        var binding = bindings[i];binding.keyIsVar ? targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan)) : binding.expression ? this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps) : (targetMatchableAttrs.push([binding.key, ""]), this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps));
      }
    }, BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
      var _this = this,
          sourceInfo = sourceSpan.start.toString();try {
        var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);return this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan), bindingsResult.templateBindings.forEach(function (binding) {
          binding.expression && _this._checkPipes(binding.expression, sourceSpan);
        }), bindingsResult.warnings.forEach(function (warning) {
          _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
        }), bindingsResult.templateBindings;
      } catch (e) {
        return this._reportError("" + e, sourceSpan), [];
      }
    }, BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      _isAnimationLabel(name) ? (name = name.substring(1), value && this._reportError('Assigning animation triggers via @prop="exp" attributes with an expression is invalid. Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.', sourceSpan, ParseErrorLevel.ERROR), this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps)) : targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), BoundPropertyType.LITERAL_ATTR, sourceSpan));
    }, BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
      var isAnimationProp = !1;name.startsWith(ANIMATE_PROP_PREFIX) ? (isAnimationProp = !0, name = name.substring(ANIMATE_PROP_PREFIX.length)) : _isAnimationLabel(name) && (isAnimationProp = !0, name = name.substring(1)), isAnimationProp ? this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps) : this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
    }, BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      var expr = this.parseInterpolation(value, sourceSpan);return !!expr && (this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps), !0);
    }, BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
      targetMatchableAttrs.push([name, ast.source]), targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
    }, BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
      var ast = this._parseBinding(expression || "null", !1, sourceSpan);targetMatchableAttrs.push([name, ast.source]), targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
    }, BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();try {
        var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);return ast && this._reportExpressionParserErrors(ast.errors, sourceSpan), this._checkPipes(ast, sourceSpan), ast;
      } catch (e) {
        return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
      }
    }, BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
      if (boundProp.isAnimation) return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);var unit = null,
          bindingType = void 0,
          boundPropertyName = null,
          parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR),
          securityContexts = void 0;if (parts.length > 1) if (parts[0] == ATTRIBUTE_PREFIX) {
        boundPropertyName = parts[1], this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, !0), securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, !0);var nsSeparatorIdx = boundPropertyName.indexOf(":");if (nsSeparatorIdx > -1) {
          var ns = boundPropertyName.substring(0, nsSeparatorIdx),
              name = boundPropertyName.substring(nsSeparatorIdx + 1);boundPropertyName = mergeNsAndName(ns, name);
        }bindingType = PropertyBindingType.Attribute;
      } else parts[0] == CLASS_PREFIX ? (boundPropertyName = parts[1], bindingType = PropertyBindingType.Class, securityContexts = [_angular_core.SecurityContext.NONE]) : parts[0] == STYLE_PREFIX && (unit = parts.length > 2 ? parts[2] : null, boundPropertyName = parts[1], bindingType = PropertyBindingType.Style, securityContexts = [_angular_core.SecurityContext.STYLE]);return null === boundPropertyName && (boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name), securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, !1), bindingType = PropertyBindingType.Property, this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, !1)), new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);
    }, BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      _isAnimationLabel(name) ? (name = name.substr(1), this._parseAnimationEvent(name, expression, sourceSpan, targetEvents)) : this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
    }, BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
      var matches = splitAtPeriod(name, [name, ""]),
          eventName = matches[0],
          phase = matches[1].toLowerCase();if (phase) switch (phase) {case "start":case "done":
          var ast = this._parseAction(expression, sourceSpan);targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));break;default:
          this._reportError('The provided animation output phase value "' + phase + '" for "@' + eventName + '" is not supported (use start or done)', sourceSpan);} else this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
    }, BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      var _a = splitAtColon(name, [null, name]),
          target = _a[0],
          eventName = _a[1],
          ast = this._parseAction(expression, sourceSpan);targetMatchableAttrs.push([name, ast.source]), targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
    }, BindingParser.prototype._parseAction = function (value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();try {
        var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);return ast && this._reportExpressionParserErrors(ast.errors, sourceSpan), !ast || ast.ast instanceof EmptyExpr ? (this._reportError("Empty expressions are not allowed", sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo)) : (this._checkPipes(ast, sourceSpan), ast);
      } catch (e) {
        return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
      }
    }, BindingParser.prototype._reportError = function (message, sourceSpan, level) {
      void 0 === level && (level = ParseErrorLevel.ERROR), this._targetErrors.push(new ParseError(sourceSpan, message, level));
    }, BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
      for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
        var error = errors_1[_i];this._reportError(error.message, sourceSpan);
      }
    }, BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
      var _this = this;if (ast) {
        var collector = new PipeCollector();ast.visit(collector), collector.pipes.forEach(function (ast, pipeName) {
          var pipeMeta = _this.pipesByName.get(pipeName);pipeMeta ? _this._usedPipes.set(pipeName, pipeMeta) : _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
        });
      }
    }, BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
      var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);report.error && this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
    }, BindingParser;
  }(),
      PipeCollector = function (_super) {
    function PipeCollector() {
      var _this = _super.apply(this, arguments) || this;return _this.pipes = new Map(), _this;
    }return __extends(PipeCollector, _super), PipeCollector.prototype.visitPipe = function (ast, context) {
      return this.pipes.set(ast.name, ast), ast.exp.visit(this), this.visitAll(ast.args, context), null;
    }, PipeCollector;
  }(RecursiveAstVisitor),
      NG_CONTENT_SELECT_ATTR = "select",
      LINK_ELEMENT = "link",
      LINK_STYLE_REL_ATTR = "rel",
      LINK_STYLE_HREF_ATTR = "href",
      LINK_STYLE_REL_VALUE = "stylesheet",
      STYLE_ELEMENT = "style",
      SCRIPT_ELEMENT = "script",
      NG_NON_BINDABLE_ATTR = "ngNonBindable",
      NG_PROJECT_AS = "ngProjectAs",
      PreparsedElementType = {};PreparsedElementType.NG_CONTENT = 0, PreparsedElementType.STYLE = 1, PreparsedElementType.STYLESHEET = 2, PreparsedElementType.SCRIPT = 3, PreparsedElementType.OTHER = 4, PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT", PreparsedElementType[PreparsedElementType.STYLE] = "STYLE", PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET", PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT", PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";var PreparsedElement = function () {
    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
      this.type = type, this.selectAttr = selectAttr, this.hrefAttr = hrefAttr, this.nonBindable = nonBindable, this.projectAs = projectAs;
    }return PreparsedElement;
  }(),
      BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/,
      KW_BIND_IDX = 1,
      KW_LET_IDX = 2,
      KW_REF_IDX = 3,
      KW_ON_IDX = 4,
      KW_BINDON_IDX = 5,
      KW_AT_IDX = 6,
      IDENT_KW_IDX = 7,
      IDENT_BANANA_BOX_IDX = 8,
      IDENT_PROPERTY_IDX = 9,
      IDENT_EVENT_IDX = 10,
      TEMPLATE_ELEMENT = "template",
      TEMPLATE_ATTR = "template",
      TEMPLATE_ATTR_PREFIX = "*",
      CLASS_ATTR = "class",
      TEXT_CSS_SELECTOR = CssSelector.parse("*")[0],
      TEMPLATE_ELEMENT_DEPRECATION_WARNING = "The <template> element is deprecated. Use <ng-template> instead",
      TEMPLATE_ATTR_DEPRECATION_WARNING = "The template attribute is deprecated. Use an ng-template element instead.",
      warningCounts = {},
      TEMPLATE_TRANSFORMS = new _angular_core.InjectionToken("TemplateTransforms"),
      TemplateParseError = function (_super) {
    function TemplateParseError(message, span, level) {
      return _super.call(this, span, message, level) || this;
    }return __extends(TemplateParseError, _super), TemplateParseError;
  }(ParseError),
      TemplateParseResult = function () {
    function TemplateParseResult(templateAst, usedPipes, errors) {
      this.templateAst = templateAst, this.usedPipes = usedPipes, this.errors = errors;
    }return TemplateParseResult;
  }(),
      TemplateParser = function () {
    function TemplateParser(_config, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
      this._config = _config, this._exprParser = _exprParser, this._schemaRegistry = _schemaRegistry, this._htmlParser = _htmlParser, this._console = _console, this.transforms = transforms;
    }return TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
      var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl),
          warnings = result.errors.filter(function (error) {
        return error.level === ParseErrorLevel.WARNING;
      }).filter(warnOnlyOnce([TEMPLATE_ATTR_DEPRECATION_WARNING, TEMPLATE_ELEMENT_DEPRECATION_WARNING])),
          errors = result.errors.filter(function (error) {
        return error.level === ParseErrorLevel.ERROR;
      });if (warnings.length > 0 && this._console.warn("Template parse warnings:\n" + warnings.join("\n")), errors.length > 0) {
        var errorString = errors.join("\n");throw syntaxError("Template parse errors:\n" + errorString);
      }return { template: result.templateAst, pipes: result.usedPipes };
    }, TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
      return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, !0, this.getInterpolationConfig(component))), component, directives, pipes, schemas);
    }, TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, directives, pipes, schemas) {
      var result,
          errors = htmlAstWithErrors.errors,
          usedPipes = [];if (htmlAstWithErrors.rootNodes.length > 0) {
        var uniqDirectives = removeSummaryDuplicates(directives),
            uniqPipes = removeSummaryDuplicates(pipes),
            providerViewContext = new ProviderViewContext(component),
            interpolationConfig = void 0;component.template && component.template.interpolation && (interpolationConfig = { start: component.template.interpolation[0], end: component.template.interpolation[1] });var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors),
            parseVisitor = new TemplateParseVisitor(this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT), errors.push.apply(errors, providerViewContext.errors), usedPipes.push.apply(usedPipes, bindingParser.getUsedPipes());
      } else result = [];return this._assertNoReferenceDuplicationOnTemplate(result, errors), errors.length > 0 ? new TemplateParseResult(result, usedPipes, errors) : (this.transforms && this.transforms.forEach(function (transform) {
        result = templateVisitAll(transform, result);
      }), new TemplateParseResult(result, usedPipes, errors));
    }, TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
      void 0 === forced && (forced = !1);var errors = htmlAstWithErrors.errors;if (0 == errors.length || forced) {
        var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);errors.push.apply(errors, expandedHtmlAst.errors), htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
      }return htmlAstWithErrors;
    }, TemplateParser.prototype.getInterpolationConfig = function (component) {
      if (component.template) return InterpolationConfig.fromArray(component.template.interpolation);
    }, TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
      var existingReferences = [];result.filter(function (element) {
        return !!element.references;
      }).forEach(function (element) {
        return element.references.forEach(function (reference) {
          var name = reference.name;if (existingReferences.indexOf(name) < 0) existingReferences.push(name);else {
            var error = new TemplateParseError('Reference "#' + name + '" is defined several times', reference.sourceSpan, ParseErrorLevel.ERROR);errors.push(error);
          }
        });
      });
    }, TemplateParser;
  }();TemplateParser.decorators = [{ type: CompilerInjectable }], TemplateParser.ctorParameters = function () {
    return [{ type: CompilerConfig }, { type: Parser }, { type: ElementSchemaRegistry }, { type: I18NHtmlParser }, { type: _angular_core.ɵConsole }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS] }] }];
  };var TemplateParseVisitor = function () {
    function TemplateParseVisitor(config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
      var _this = this;this.config = config, this.providerViewContext = providerViewContext, this._bindingParser = _bindingParser, this._schemaRegistry = _schemaRegistry, this._schemas = _schemas, this._targetErrors = _targetErrors, this.selectorMatcher = new SelectorMatcher(), this.directivesIndex = new Map(), this.ngContentCount = 0, this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1, directives.forEach(function (directive, index) {
        var selector = CssSelector.parse(directive.selector);_this.selectorMatcher.addSelectables(selector, directive), _this.directivesIndex.set(directive, index);
      });
    }return TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) {
      return null;
    }, TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
      return null;
    }, TemplateParseVisitor.prototype.visitText = function (text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR),
          expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) : new TextAst(text.value, ngContentIndex, text.sourceSpan);
    }, TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    }, TemplateParseVisitor.prototype.visitComment = function (comment, context) {
      return null;
    }, TemplateParseVisitor.prototype.visitElement = function (element, parent) {
      var _this = this,
          queryStartIndex = this.contentQueryStartId,
          nodeName = element.name,
          preparsedElement = preparseElement(element);if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) return null;if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) return null;var matchableAttrs = [],
          elementOrDirectiveProps = [],
          elementOrDirectiveRefs = [],
          elementVars = [],
          events = [],
          templateElementOrDirectiveProps = [],
          templateMatchableAttrs = [],
          templateElementVars = [],
          hasInlineTemplates = !1,
          attrs = [],
          isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, function (m, span) {
        return _this._reportError(m, span, ParseErrorLevel.WARNING);
      });element.attrs.forEach(function (attr) {
        var templateBindingsSource,
            prefixToken,
            hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars),
            normalizedName = _this._normalizeAttributeName(attr.name);_this.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR ? (_this._reportError(TEMPLATE_ATTR_DEPRECATION_WARNING, attr.sourceSpan, ParseErrorLevel.WARNING), templateBindingsSource = attr.value) : normalizedName.startsWith(TEMPLATE_ATTR_PREFIX) && (templateBindingsSource = attr.value, prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ":");var hasTemplateBinding = null != templateBindingsSource;hasTemplateBinding && (hasInlineTemplates && _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan), hasInlineTemplates = !0, _this._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars)), hasBinding || hasTemplateBinding || (attrs.push(_this.visitAttribute(attr, null)), matchableAttrs.push([attr.name, attr.value]));
      });var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs),
          _a = this._parseDirectives(this.selectorMatcher, elementCssSelector),
          directiveMetas = _a.directives,
          matchElement = _a.matchElement,
          references = [],
          boundDirectivePropNames = new Set(),
          directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames),
          elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames),
          isViewRoot = parent.isTemplateElement || hasInlineTemplates,
          providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan),
          children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));providerContext.afterElement();var parsedElement,
          projectionSelector = null != preparsedElement.projectAs ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector,
          ngContentIndex = parent.findNgContentIndex(projectionSelector);if (preparsedElement.type === PreparsedElementType.NG_CONTENT) element.children && !element.children.every(_isEmptyTextNode) && this._reportError("<ng-content> element cannot have content.", element.sourceSpan), parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);else if (isTemplateElement) this._assertAllEventsPublishedByDirectives(directiveAsts, events), this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan), parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);else {
        this._assertElementExists(matchElement, element), this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan || null);
      }if (hasInlineTemplates) {
        var templateQueryStartIndex = this.contentQueryStartId,
            templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs),
            templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateSelector).directives,
            templateBoundDirectivePropNames = new Set(),
            templateDirectiveAsts = this._createDirectiveAsts(!0, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames),
            templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], !0, templateQueryStartIndex, element.sourceSpan);templateProviderContext.afterElement(), parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);
      }return parsedElement;
    }, TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
      var name = this._normalizeAttributeName(attr.name),
          value = attr.value,
          srcSpan = attr.sourceSpan,
          bindParts = name.match(BIND_NAME_REGEXP),
          hasBinding = !1;if (null !== bindParts) {
        if (hasBinding = !0, null != bindParts[KW_BIND_IDX]) this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps);else if (bindParts[KW_LET_IDX]) {
          if (isTemplateElement) {
            var identifier = bindParts[IDENT_KW_IDX];this._parseVariable(identifier, value, srcSpan, targetVars);
          } else this._reportError('"let-" is only supported on template elements.', srcSpan);
        } else if (bindParts[KW_REF_IDX]) {
          var identifier = bindParts[IDENT_KW_IDX];this._parseReference(identifier, value, srcSpan, targetRefs);
        } else bindParts[KW_ON_IDX] ? this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents) : bindParts[KW_BINDON_IDX] ? (this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps), this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents)) : bindParts[KW_AT_IDX] ? this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps) : bindParts[IDENT_BANANA_BOX_IDX] ? (this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps), this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents)) : bindParts[IDENT_PROPERTY_IDX] ? this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, !1, srcSpan, targetMatchableAttrs, targetProps) : bindParts[IDENT_EVENT_IDX] && this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
      } else hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);return hasBinding || this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps), hasBinding;
    }, TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
      return (/^data-/i.test(attrName) ? attrName.substring(5) : attrName
      );
    }, TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
      identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in variable names', sourceSpan), targetVars.push(new VariableAst(identifier, value, sourceSpan));
    }, TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
      identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in reference names', sourceSpan), targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
    }, TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
    }, TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
      var _this = this,
          directives = new Array(this.directivesIndex.size),
          matchElement = !1;return selectorMatcher.match(elementCssSelector, function (selector, directive) {
        directives[_this.directivesIndex.get(directive)] = directive, matchElement = matchElement || selector.hasElementSelector();
      }), { directives: directives.filter(function (dir) {
          return !!dir;
        }), matchElement: matchElement };
    }, TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
      var _this = this,
          matchedReferences = new Set(),
          component = null,
          directiveAsts = directives.map(function (directive) {
        var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));directive.isComponent && (component = directive);var directiveProperties = [],
            hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);_this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames), elementOrDirectiveRefs.forEach(function (elOrDirRef) {
          (0 === elOrDirRef.value.length && directive.isComponent || directive.exportAs == elOrDirRef.value) && (targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan)), matchedReferences.add(elOrDirRef.name));
        });var contentQueryStartId = _this.contentQueryStartId;return _this.contentQueryStartId += directive.queries.length, new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
      });return elementOrDirectiveRefs.forEach(function (elOrDirRef) {
        if (elOrDirRef.value.length > 0) matchedReferences.has(elOrDirRef.name) || _this._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan);else if (!component) {
          var refToken = null;isTemplateElement && (refToken = createIdentifierToken(Identifiers.TemplateRef)), targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
        }
      }), directiveAsts;
    }, TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
      if (directiveProperties) {
        var boundPropsByName_1 = new Map();boundProps.forEach(function (boundProp) {
          var prevValue = boundPropsByName_1.get(boundProp.name);prevValue && !prevValue.isLiteral || boundPropsByName_1.set(boundProp.name, boundProp);
        }), Object.keys(directiveProperties).forEach(function (dirProp) {
          var elProp = directiveProperties[dirProp],
              boundProp = boundPropsByName_1.get(elProp);boundProp && (targetBoundDirectivePropNames.add(boundProp.name), isEmptyExpression(boundProp.expression) || targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan)));
        });
      }
    }, TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, boundDirectivePropNames) {
      var _this = this,
          boundElementProps = [];return props.forEach(function (prop) {
        prop.isLiteral || boundDirectivePropNames.has(prop.name) || boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
      }), this._checkPropertiesInSchema(elementName, boundElementProps);
    }, TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
      return directives.filter(function (directive) {
        return directive.directive.isComponent;
      });
    }, TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
      return this._findComponentDirectives(directives).map(function (directive) {
        return identifierName(directive.directive.type);
      });
    }, TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
      var componentTypeNames = this._findComponentDirectiveNames(directives);componentTypeNames.length > 1 && this._reportError("More than one component matched on this element.\nMake sure that only one component's selector can match a given element.\nConflicting components: " + componentTypeNames.join(","), sourceSpan);
    }, TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
      var elName = element.name.replace(/^:xhtml:/, "");if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
        var errorMsg = "'" + elName + "' is not a known element:\n";errorMsg += "1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n", errorMsg += elName.indexOf("-") > -1 ? "2. If '" + elName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message." : "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.", this._reportError(errorMsg, element.sourceSpan);
      }
    }, TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
      var _this = this,
          componentTypeNames = this._findComponentDirectiveNames(directives);componentTypeNames.length > 0 && this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan), elementProps.forEach(function (prop) {
        _this._reportError("Property binding " + prop.name + ' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "@NgModule.declarations".', sourceSpan);
      });
    }, TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
      var _this = this,
          allDirectiveEvents = new Set();directives.forEach(function (directive) {
        Object.keys(directive.directive.outputs).forEach(function (k) {
          var eventName = directive.directive.outputs[k];allDirectiveEvents.add(eventName);
        });
      }), events.forEach(function (event) {
        null == event.target && allDirectiveEvents.has(event.name) || _this._reportError("Event binding " + event.fullName + ' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "@NgModule.declarations".', event.sourceSpan);
      });
    }, TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
      var _this = this;return boundProps.filter(function (boundProp) {
        if (boundProp.type === PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
          var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";elementName.startsWith("ng-") ? errorMsg += "\n1. If '" + boundProp.name + "' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component." : elementName.indexOf("-") > -1 && (errorMsg += "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." + ("\n2. If '" + elementName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.") + "\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component."), _this._reportError(errorMsg, boundProp.sourceSpan);
        }return !isEmptyExpression(boundProp.value);
      });
    }, TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
      void 0 === level && (level = ParseErrorLevel.ERROR), this._targetErrors.push(new ParseError(sourceSpan, message, level));
    }, TemplateParseVisitor;
  }(),
      NonBindableVisitor = function () {
    function NonBindableVisitor() {}return NonBindableVisitor.prototype.visitElement = function (ast, parent) {
      var preparsedElement = preparseElement(ast);if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) return null;var attrNameAndValues = ast.attrs.map(function (attr) {
        return [attr.name, attr.value];
      }),
          selector = createElementCssSelector(ast.name, attrNameAndValues),
          ngContentIndex = parent.findNgContentIndex(selector),
          children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], !1, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
    }, NonBindableVisitor.prototype.visitComment = function (comment, context) {
      return null;
    }, NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    }, NonBindableVisitor.prototype.visitText = function (text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);return new TextAst(text.value, ngContentIndex, text.sourceSpan);
    }, NonBindableVisitor.prototype.visitExpansion = function (expansion, context) {
      return expansion;
    }, NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
      return expansionCase;
    }, NonBindableVisitor;
  }(),
      ElementOrDirectiveRef = function () {
    function ElementOrDirectiveRef(name, value, sourceSpan) {
      this.name = name, this.value = value, this.sourceSpan = sourceSpan;
    }return ElementOrDirectiveRef;
  }(),
      ElementContext = function () {
    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
      this.isTemplateElement = isTemplateElement, this._ngContentIndexMatcher = _ngContentIndexMatcher, this._wildcardNgContentIndex = _wildcardNgContentIndex, this.providerContext = providerContext;
    }return ElementContext.create = function (isTemplateElement, directives, providerContext) {
      var matcher = new SelectorMatcher(),
          wildcardNgContentIndex = null,
          component = directives.find(function (directive) {
        return directive.directive.isComponent;
      });if (component) for (var ngContentSelectors = component.directive.template.ngContentSelectors, i = 0; i < ngContentSelectors.length; i++) {
        var selector = ngContentSelectors[i];"*" === selector ? wildcardNgContentIndex = i : matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
      }return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
    }, ElementContext.prototype.findNgContentIndex = function (selector) {
      var ngContentIndices = [];return this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) {
        ngContentIndices.push(ngContentIndex);
      }), ngContentIndices.sort(), null != this._wildcardNgContentIndex && ngContentIndices.push(this._wildcardNgContentIndex), ngContentIndices.length > 0 ? ngContentIndices[0] : null;
    }, ElementContext;
  }(),
      EMPTY_ELEMENT_CONTEXT = new ElementContext(!0, new SelectorMatcher(), null, null),
      NON_BINDABLE_VISITOR = new NonBindableVisitor(),
      ResourceLoader = function () {
    function ResourceLoader() {}return ResourceLoader.prototype.get = function (url) {
      return null;
    }, ResourceLoader;
  }(),
      DEFAULT_PACKAGE_URL_PROVIDER = { provide: _angular_core.PACKAGE_ROOT_URL, useValue: "/" },
      UrlResolver = function () {
    function UrlResolver(_packagePrefix) {
      void 0 === _packagePrefix && (_packagePrefix = null), this._packagePrefix = _packagePrefix;
    }return UrlResolver.prototype.resolve = function (baseUrl, url) {
      var resolvedUrl = url;null != baseUrl && baseUrl.length > 0 && (resolvedUrl = _resolveUrl(baseUrl, resolvedUrl));var resolvedParts = _split(resolvedUrl),
          prefix = this._packagePrefix;if (null != prefix && null != resolvedParts && "package" == resolvedParts[_ComponentIndex.Scheme]) {
        var path = resolvedParts[_ComponentIndex.Path];return prefix = prefix.replace(/\/+$/, ""), path = path.replace(/^\/+/, ""), prefix + "/" + path;
      }return resolvedUrl;
    }, UrlResolver;
  }();UrlResolver.decorators = [{ type: CompilerInjectable }], UrlResolver.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL] }] }];
  };var _splitRe = new RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$"),
      _ComponentIndex = {};_ComponentIndex.Scheme = 1, _ComponentIndex.UserInfo = 2, _ComponentIndex.Domain = 3, _ComponentIndex.Port = 4, _ComponentIndex.Path = 5, _ComponentIndex.QueryData = 6, _ComponentIndex.Fragment = 7, _ComponentIndex[_ComponentIndex.Scheme] = "Scheme", _ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo", _ComponentIndex[_ComponentIndex.Domain] = "Domain", _ComponentIndex[_ComponentIndex.Port] = "Port", _ComponentIndex[_ComponentIndex.Path] = "Path", _ComponentIndex[_ComponentIndex.QueryData] = "QueryData", _ComponentIndex[_ComponentIndex.Fragment] = "Fragment"; /**
license
opyright Google Inc. All Rights Reserved.

se of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.io/license

  var DirectiveNormalizer = function () {
    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
      this._resourceLoader = _resourceLoader, this._urlResolver = _urlResolver, this._htmlParser = _htmlParser, this._config = _config, this._resourceLoaderCache = new Map();
    }return DirectiveNormalizer.prototype.clearCache = function () {
      this._resourceLoaderCache.clear();
    }, DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
      var _this = this;if (normalizedDirective.isComponent) {
        var template = normalizedDirective.template;this._resourceLoaderCache.delete(template.templateUrl), template.externalStylesheets.forEach(function (stylesheet) {
          _this._resourceLoaderCache.delete(stylesheet.moduleUrl);
        });
      }
    }, DirectiveNormalizer.prototype._fetch = function (url) {
      var result = this._resourceLoaderCache.get(url);return result || (result = this._resourceLoader.get(url), this._resourceLoaderCache.set(url, result)), result;
    }, DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
      var _this = this,
          normalizedTemplateSync = null,
          normalizedTemplateAsync = void 0;if (isDefined(prenormData.template)) {
        if (isDefined(prenormData.templateUrl)) throw syntaxError("'" + _angular_core.ɵstringify(prenormData.componentType) + "' component cannot define both template and templateUrl");if ("string" != typeof prenormData.template) throw syntaxError("The template specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");normalizedTemplateSync = this.normalizeTemplateSync(prenormData), normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
      } else {
        if (!isDefined(prenormData.templateUrl)) throw syntaxError("No template specified for component " + _angular_core.ɵstringify(prenormData.componentType));if ("string" != typeof prenormData.templateUrl) throw syntaxError("The templateUrl specified for component " + _angular_core.ɵstringify(prenormData.componentType) + " is not a string");normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
      }return normalizedTemplateSync && 0 === normalizedTemplateSync.styleUrls.length ? new SyncAsyncResult(normalizedTemplateSync) : new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) {
        return _this.normalizeExternalStylesheets(normalizedTemplate);
      }));
    }, DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
      return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
    }, DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
      var _this = this,
          templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);return this._fetch(templateUrl).then(function (value) {
        return _this.normalizeLoadedTemplate(prenomData, value, templateUrl);
      });
    }, DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenormData, template, templateAbsUrl) {
      var isInline = !!prenormData.template,
          interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation),
          rootNodesAndErrors = this._htmlParser.parse(template, templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline: isInline, templateUrl: templateAbsUrl }), !0, interpolationConfig);if (rootNodesAndErrors.errors.length > 0) {
        var errorString = rootNodesAndErrors.errors.join("\n");throw syntaxError("Template parse errors:\n" + errorString);
      }var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: prenormData.styles, styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl })),
          visitor = new TemplatePreparseVisitor();visitAll(visitor, rootNodesAndErrors.rootNodes);var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl })),
          encapsulation = prenormData.encapsulation;null == encapsulation && (encapsulation = this._config.defaultEncapsulation);var styles = templateMetadataStyles.styles.concat(templateStyles.styles),
          styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);return encapsulation === _angular_core.ViewEncapsulation.Emulated && 0 === styles.length && 0 === styleUrls.length && (encapsulation = _angular_core.ViewEncapsulation.None), new CompileTemplateMetadata({ encapsulation: encapsulation, template: template, templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls, ngContentSelectors: visitor.ngContentSelectors, animations: prenormData.animations, interpolation: prenormData.interpolation, isInline: isInline, externalStylesheets: [] });
    }, DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
      return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function (externalStylesheets) {
        return new CompileTemplateMetadata({ encapsulation: templateMeta.encapsulation, template: templateMeta.template, templateUrl: templateMeta.templateUrl, styles: templateMeta.styles, styleUrls: templateMeta.styleUrls, externalStylesheets: externalStylesheets, ngContentSelectors: templateMeta.ngContentSelectors, animations: templateMeta.animations, interpolation: templateMeta.interpolation, isInline: templateMeta.isInline });
      });
    }, DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
      var _this = this;return void 0 === loadedStylesheets && (loadedStylesheets = new Map()), Promise.all(styleUrls.filter(function (styleUrl) {
        return !loadedStylesheets.has(styleUrl);
      }).map(function (styleUrl) {
        return _this._fetch(styleUrl).then(function (loadedStyle) {
          var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));return loadedStylesheets.set(styleUrl, stylesheet), _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
        });
      })).then(function (_) {
        return Array.from(loadedStylesheets.values());
      });
    }, DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
      var _this = this,
          moduleUrl = stylesheet.moduleUrl,
          allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function (url) {
        return _this._urlResolver.resolve(moduleUrl, url);
      }),
          allStyles = stylesheet.styles.map(function (style$$1) {
        var styleWithImports = extractStyleUrls(_this._urlResolver, moduleUrl, style$$1);return allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls), styleWithImports.style;
      });return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });
    }, DirectiveNormalizer;
  }();DirectiveNormalizer.decorators = [{ type: CompilerInjectable }], DirectiveNormalizer.ctorParameters = function () {
    return [{ type: ResourceLoader }, { type: UrlResolver }, { type: HtmlParser }, { type: CompilerConfig }];
  };var TemplatePreparseVisitor = function () {
    function TemplatePreparseVisitor() {
      this.ngContentSelectors = [], this.styles = [], this.styleUrls = [], this.ngNonBindableStackCount = 0;
    }return TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
      var preparsedElement = preparseElement(ast);switch (preparsedElement.type) {case PreparsedElementType.NG_CONTENT:
          0 === this.ngNonBindableStackCount && this.ngContentSelectors.push(preparsedElement.selectAttr);break;case PreparsedElementType.STYLE:
          var textContent_1 = "";ast.children.forEach(function (child) {
            child instanceof Text && (textContent_1 += child.value);
          }), this.styles.push(textContent_1);break;case PreparsedElementType.STYLESHEET:
          this.styleUrls.push(preparsedElement.hrefAttr);}return preparsedElement.nonBindable && this.ngNonBindableStackCount++, visitAll(this, ast.children), preparsedElement.nonBindable && this.ngNonBindableStackCount--, null;
    }, TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) {
      visitAll(this, ast.cases);
    }, TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {
      visitAll(this, ast.expression);
    }, TemplatePreparseVisitor.prototype.visitComment = function (ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitText = function (ast, context) {
      return null;
    }, TemplatePreparseVisitor;
  }(),
      __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }return t;
  },
      DirectiveResolver = function () {
    function DirectiveResolver(_reflector) {
      void 0 === _reflector && (_reflector = _angular_core.ɵreflector), this._reflector = _reflector;
    }return DirectiveResolver.prototype.isDirective = function (type) {
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));return typeMetadata && typeMetadata.some(isDirectiveMetadata);
    }, DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
      void 0 === throwIfNotFound && (throwIfNotFound = !0);var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));if (typeMetadata) {
        var metadata = findLast(typeMetadata, isDirectiveMetadata);if (metadata) {
          var propertyMetadata = this._reflector.propMetadata(type);return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
        }
      }if (throwIfNotFound) throw new Error("No Directive annotation found on " + _angular_core.ɵstringify(type));return null;
    }, DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
      var inputs = [],
          outputs = [],
          host = {},
          queries = {};return Object.keys(propertyMetadata).forEach(function (propName) {
        var input = findLast(propertyMetadata[propName], function (a) {
          return a instanceof _angular_core.Input;
        });input && (input.bindingPropertyName ? inputs.push(propName + ": " + input.bindingPropertyName) : inputs.push(propName));var output = findLast(propertyMetadata[propName], function (a) {
          return a instanceof _angular_core.Output;
        });output && (output.bindingPropertyName ? outputs.push(propName + ": " + output.bindingPropertyName) : outputs.push(propName));var hostBindings = propertyMetadata[propName].filter(function (a) {
          return a && a instanceof _angular_core.HostBinding;
        });hostBindings.forEach(function (hostBinding) {
          if (hostBinding.hostPropertyName) {
            var startWith = hostBinding.hostPropertyName[0];if ("(" === startWith) throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");if ("[" === startWith) throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");host["[" + hostBinding.hostPropertyName + "]"] = propName;
          } else host["[" + propName + "]"] = propName;
        });var hostListeners = propertyMetadata[propName].filter(function (a) {
          return a && a instanceof _angular_core.HostListener;
        });hostListeners.forEach(function (hostListener) {
          var args = hostListener.args || [];host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(",") + ")";
        });var query = findLast(propertyMetadata[propName], function (a) {
          return a instanceof _angular_core.Query;
        });query && (queries[propName] = query);
      }), this._merge(dm, inputs, outputs, host, queries, directiveType);
    }, DirectiveResolver.prototype._extractPublicName = function (def) {
      return splitAtColon(def, [null, def])[1].trim();
    }, DirectiveResolver.prototype._dedupeBindings = function (bindings) {
      for (var names = new Set(), reversedResult = [], i = bindings.length - 1; i >= 0; i--) {
        var binding = bindings[i],
            name = this._extractPublicName(binding);names.has(name) || (names.add(name), reversedResult.push(binding));
      }return reversedResult.reverse();
    }, DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
      var mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs),
          mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs),
          mergedHost = directive.host ? __assign({}, directive.host, host) : host,
          mergedQueries = directive.queries ? __assign({}, directive.queries, queries) : queries;return directive instanceof _angular_core.Component ? new _angular_core.Component({ selector: directive.selector, inputs: mergedInputs, outputs: mergedOutputs, host: mergedHost, exportAs: directive.exportAs, moduleId: directive.moduleId, queries: mergedQueries, changeDetection: directive.changeDetection, providers: directive.providers, viewProviders: directive.viewProviders, entryComponents: directive.entryComponents, template: directive.template, templateUrl: directive.templateUrl, styles: directive.styles, styleUrls: directive.styleUrls, encapsulation: directive.encapsulation, animations: directive.animations, interpolation: directive.interpolation }) : new _angular_core.Directive({ selector: directive.selector, inputs: mergedInputs, outputs: mergedOutputs, host: mergedHost, exportAs: directive.exportAs, queries: mergedQueries, providers: directive.providers });
    }, DirectiveResolver;
  }();DirectiveResolver.decorators = [{ type: CompilerInjectable }], DirectiveResolver.ctorParameters = function () {
    return [{ type: _angular_core.ɵReflectorReader }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/,
      NG_FACTORY = /\.ngfactory\./,
      NgModuleResolver = function () {
    function NgModuleResolver(_reflector) {
      void 0 === _reflector && (_reflector = _angular_core.ɵreflector), this._reflector = _reflector;
    }return NgModuleResolver.prototype.isNgModule = function (type) {
      return this._reflector.annotations(type).some(_isNgModuleMetadata);
    }, NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
      void 0 === throwIfNotFound && (throwIfNotFound = !0);var ngModuleMeta = findLast(this._reflector.annotations(type), _isNgModuleMetadata);if (ngModuleMeta) return ngModuleMeta;if (throwIfNotFound) throw new Error("No NgModule metadata found for '" + _angular_core.ɵstringify(type) + "'.");return null;
    }, NgModuleResolver;
  }();NgModuleResolver.decorators = [{ type: CompilerInjectable }], NgModuleResolver.ctorParameters = function () {
    return [{ type: _angular_core.ɵReflectorReader }];
  };var PipeResolver = function () {
    function PipeResolver(_reflector) {
      void 0 === _reflector && (_reflector = _angular_core.ɵreflector), this._reflector = _reflector;
    }return PipeResolver.prototype.isPipe = function (type) {
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));return typeMetadata && typeMetadata.some(_isPipeMetadata);
    }, PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
      void 0 === throwIfNotFound && (throwIfNotFound = !0);var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));if (metas) {
        var annotation = findLast(metas, _isPipeMetadata);if (annotation) return annotation;
      }if (throwIfNotFound) throw new Error("No Pipe decorator found on " + _angular_core.ɵstringify(type));return null;
    }, PipeResolver;
  }();PipeResolver.decorators = [{ type: CompilerInjectable }], PipeResolver.ctorParameters = function () {
    return [{ type: _angular_core.ɵReflectorReader }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var SummaryResolver = function () {
    function SummaryResolver() {}return SummaryResolver.prototype.isLibraryFile = function (fileName) {
      return !1;
    }, SummaryResolver.prototype.getLibraryFileName = function (fileName) {
      return null;
    }, SummaryResolver.prototype.resolveSummary = function (reference) {
      return null;
    }, SummaryResolver.prototype.getSymbolsOf = function (filePath) {
      return [];
    }, SummaryResolver.prototype.getImportAs = function (reference) {
      return reference;
    }, SummaryResolver;
  }();SummaryResolver.decorators = [{ type: CompilerInjectable }], SummaryResolver.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var ERROR_COLLECTOR_TOKEN = new _angular_core.InjectionToken("ErrorCollector"),
      CompileMetadataResolver = function () {
    function CompileMetadataResolver(_config, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {
      void 0 === _reflector && (_reflector = _angular_core.ɵreflector), this._config = _config, this._ngModuleResolver = _ngModuleResolver, this._directiveResolver = _directiveResolver, this._pipeResolver = _pipeResolver, this._summaryResolver = _summaryResolver, this._schemaRegistry = _schemaRegistry, this._directiveNormalizer = _directiveNormalizer, this._console = _console, this._staticSymbolCache = _staticSymbolCache, this._reflector = _reflector, this._errorCollector = _errorCollector, this._nonNormalizedDirectiveCache = new Map(), this._directiveCache = new Map(), this._summaryCache = new Map(), this._pipeCache = new Map(), this._ngModuleCache = new Map(), this._ngModuleOfTypes = new Map();
    }return CompileMetadataResolver.prototype.clearCacheFor = function (type) {
      var dirMeta = this._directiveCache.get(type);this._directiveCache.delete(type), this._nonNormalizedDirectiveCache.delete(type), this._summaryCache.delete(type), this._pipeCache.delete(type), this._ngModuleOfTypes.delete(type), this._ngModuleCache.clear(), dirMeta && this._directiveNormalizer.clearCacheFor(dirMeta);
    }, CompileMetadataResolver.prototype.clearCache = function () {
      this._directiveCache.clear(), this._nonNormalizedDirectiveCache.clear(), this._summaryCache.clear(), this._pipeCache.clear(), this._ngModuleCache.clear(), this._ngModuleOfTypes.clear(), this._directiveNormalizer.clearCache();
    }, CompileMetadataResolver.prototype._createProxyClass = function (baseType, name) {
      var delegate = null,
          proxyClass = function () {
        if (!delegate) throw new Error("Illegal state: Class " + name + " for type " + _angular_core.ɵstringify(baseType) + " is not compiled yet!");return delegate.apply(this, arguments);
      };return proxyClass.setDelegate = function (d) {
        delegate = d, proxyClass.prototype = d.prototype;
      }, proxyClass.overriddenName = name, proxyClass;
    }, CompileMetadataResolver.prototype.getGeneratedClass = function (dirType, name) {
      return dirType instanceof StaticSymbol ? this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name) : this._createProxyClass(dirType, name);
    }, CompileMetadataResolver.prototype.getComponentViewClass = function (dirType) {
      return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
    }, CompileMetadataResolver.prototype.getHostComponentViewClass = function (dirType) {
      return this.getGeneratedClass(dirType, hostViewClassName(dirType));
    }, CompileMetadataResolver.prototype.getHostComponentType = function (dirType) {
      var name = identifierName({ reference: dirType }) + "_Host";if (dirType instanceof StaticSymbol) return this._staticSymbolCache.get(dirType.filePath, name);var HostClass = function () {};return HostClass.overriddenName = name, HostClass;
    }, CompileMetadataResolver.prototype.getRendererType = function (dirType) {
      return dirType instanceof StaticSymbol ? this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType)) : {};
    }, CompileMetadataResolver.prototype.getComponentFactory = function (selector, dirType, inputs, outputs) {
      if (dirType instanceof StaticSymbol) return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));var hostView = this.getHostComponentViewClass(dirType);return _angular_core.ɵccf(selector, dirType, hostView, inputs, outputs, []);
    }, CompileMetadataResolver.prototype.initComponentFactory = function (factory, ngContentSelectors) {
      factory instanceof StaticSymbol || (_a = factory.ngContentSelectors).push.apply(_a, ngContentSelectors);var _a;
    }, CompileMetadataResolver.prototype._loadSummary = function (type, kind) {
      var typeSummary = this._summaryCache.get(type);if (!typeSummary) {
        var summary = this._summaryResolver.resolveSummary(type);typeSummary = summary ? summary.type : null, this._summaryCache.set(type, typeSummary || null);
      }return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
    }, CompileMetadataResolver.prototype._loadDirectiveMetadata = function (ngModuleType, directiveType, isSync) {
      var _this = this;if (this._directiveCache.has(directiveType)) return null;directiveType = _angular_core.resolveForwardRef(directiveType);var _a = this.getNonNormalizedDirectiveMetadata(directiveType),
          annotation = _a.annotation,
          metadata = _a.metadata,
          createDirectiveMetadata = function (templateMetadata) {
        var normalizedDirMeta = new CompileDirectiveMetadata({ isHost: !1, type: metadata.type, isComponent: metadata.isComponent, selector: metadata.selector, exportAs: metadata.exportAs, changeDetection: metadata.changeDetection, inputs: metadata.inputs, outputs: metadata.outputs, hostListeners: metadata.hostListeners, hostProperties: metadata.hostProperties, hostAttributes: metadata.hostAttributes, providers: metadata.providers, viewProviders: metadata.viewProviders, queries: metadata.queries, viewQueries: metadata.viewQueries, entryComponents: metadata.entryComponents, componentViewType: metadata.componentViewType, rendererType: metadata.rendererType, componentFactory: metadata.componentFactory, template: templateMetadata });return templateMetadata && _this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors), _this._directiveCache.set(directiveType, normalizedDirMeta), _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary()), normalizedDirMeta;
      };if (metadata.isComponent) {
        var template = metadata.template,
            templateMeta = this._directiveNormalizer.normalizeTemplate({ ngModuleType: ngModuleType, componentType: directiveType, moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation), encapsulation: template.encapsulation, template: template.template, templateUrl: template.templateUrl, styles: template.styles, styleUrls: template.styleUrls, animations: template.animations, interpolation: template.interpolation });return templateMeta.syncResult ? (createDirectiveMetadata(templateMeta.syncResult), null) : isSync ? (this._reportError(componentStillLoadingError(directiveType), directiveType), null) : templateMeta.asyncResult.then(createDirectiveMetadata);
      }return createDirectiveMetadata(null), null;
    }, CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
      var _this = this;if (directiveType = _angular_core.resolveForwardRef(directiveType), !directiveType) return null;var cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);if (cacheEntry) return cacheEntry;var dirMeta = this._directiveResolver.resolve(directiveType, !1);if (!dirMeta) return null;var nonNormalizedTemplateMetadata = void 0;if (dirMeta instanceof _angular_core.Component) {
        assertArrayOfStrings("styles", dirMeta.styles), assertArrayOfStrings("styleUrls", dirMeta.styleUrls), assertInterpolationSymbols("interpolation", dirMeta.interpolation);var animations = dirMeta.animations;nonNormalizedTemplateMetadata = new CompileTemplateMetadata({ encapsulation: noUndefined(dirMeta.encapsulation), template: noUndefined(dirMeta.template), templateUrl: noUndefined(dirMeta.templateUrl), styles: dirMeta.styles || [], styleUrls: dirMeta.styleUrls || [], animations: animations || [], interpolation: noUndefined(dirMeta.interpolation), isInline: !!dirMeta.template, externalStylesheets: [], ngContentSelectors: [] });
      }var changeDetectionStrategy = null,
          viewProviders = [],
          entryComponentMetadata = [],
          selector = dirMeta.selector;dirMeta instanceof _angular_core.Component ? (changeDetectionStrategy = dirMeta.changeDetection, dirMeta.viewProviders && (viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, 'viewProviders for "' + stringifyType(directiveType) + '"', [], directiveType)), dirMeta.entryComponents && (entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function (type) {
        return _this._getEntryComponentMetadata(type);
      }).concat(entryComponentMetadata)), selector || (selector = this._schemaRegistry.getDefaultComponentElementName())) : selector || (this._reportError(syntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType), selector = "error");var providers = [];null != dirMeta.providers && (providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, 'providers for "' + stringifyType(directiveType) + '"', [], directiveType));var queries = [],
          viewQueries = [];null != dirMeta.queries && (queries = this._getQueriesMetadata(dirMeta.queries, !1, directiveType), viewQueries = this._getQueriesMetadata(dirMeta.queries, !0, directiveType));var metadata = CompileDirectiveMetadata.create({ isHost: !1, selector: selector, exportAs: noUndefined(dirMeta.exportAs), isComponent: !!nonNormalizedTemplateMetadata, type: this._getTypeMetadata(directiveType), template: nonNormalizedTemplateMetadata, changeDetection: changeDetectionStrategy, inputs: dirMeta.inputs || [], outputs: dirMeta.outputs || [], host: dirMeta.host || {}, providers: providers || [], viewProviders: viewProviders || [], queries: queries || [], viewQueries: viewQueries || [], entryComponents: entryComponentMetadata, componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) : null, rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null, componentFactory: null });return nonNormalizedTemplateMetadata && (metadata.componentFactory = this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs)), cacheEntry = { metadata: metadata, annotation: dirMeta }, this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry), cacheEntry;
    }, CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
      var dirMeta = this._directiveCache.get(directiveType);return dirMeta || this._reportError(syntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType), dirMeta;
    }, CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
      var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);return dirSummary || this._reportError(syntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType), dirSummary;
    }, CompileMetadataResolver.prototype.isDirective = function (type) {
      return this._directiveResolver.isDirective(type);
    }, CompileMetadataResolver.prototype.isPipe = function (type) {
      return this._pipeResolver.isPipe(type);
    }, CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) {
      var moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);if (!moduleSummary) {
        var moduleMeta = this.getNgModuleMetadata(moduleType, !1);moduleSummary = moduleMeta ? moduleMeta.toSummary() : null, moduleSummary && this._summaryCache.set(moduleType, moduleSummary);
      }return moduleSummary;
    }, CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {
      var _this = this;void 0 === throwIfNotFound && (throwIfNotFound = !0);var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound),
          loading = [];return ngModule && (ngModule.declaredDirectives.forEach(function (id) {
        var promise = _this._loadDirectiveMetadata(moduleType, id.reference, isSync);promise && loading.push(promise);
      }), ngModule.declaredPipes.forEach(function (id) {
        return _this._loadPipeMetadata(id.reference);
      })), Promise.all(loading);
    }, CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
      var _this = this;void 0 === throwIfNotFound && (throwIfNotFound = !0), moduleType = _angular_core.resolveForwardRef(moduleType);var compileMeta = this._ngModuleCache.get(moduleType);if (compileMeta) return compileMeta;var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);if (!meta) return null;var declaredDirectives = [],
          exportedNonModuleIdentifiers = [],
          declaredPipes = [],
          importedModules = [],
          exportedModules = [],
          providers = [],
          entryComponents = [],
          bootstrapComponents = [],
          schemas = [];meta.imports && flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
        var importedModuleType = void 0;if (isValidType(importedType)) importedModuleType = importedType;else if (importedType && importedType.ngModule) {
          var moduleWithProviders = importedType;importedModuleType = moduleWithProviders.ngModule, moduleWithProviders.providers && providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType));
        }if (!importedModuleType) return void _this._reportError(syntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);if (!_this._checkSelfImport(moduleType, importedModuleType)) {
          var importedModuleSummary = _this.getNgModuleSummary(importedModuleType);return importedModuleSummary ? void importedModules.push(importedModuleSummary) : void _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'. Please add a @NgModule annotation."), moduleType);
        }
      }), meta.exports && flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
        if (!isValidType(exportedType)) return void _this._reportError(syntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);var exportedModuleSummary = _this.getNgModuleSummary(exportedType);exportedModuleSummary ? exportedModules.push(exportedModuleSummary) : exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
      });var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);meta.declarations && flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
        if (!isValidType(declaredType)) return void _this._reportError(syntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);var declaredIdentifier = _this._getIdentifierMetadata(declaredType);if (_this._directiveResolver.isDirective(declaredType)) transitiveModule.addDirective(declaredIdentifier), declaredDirectives.push(declaredIdentifier), _this._addTypeToModule(declaredType, moduleType);else {
          if (!_this._pipeResolver.isPipe(declaredType)) return void _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'. Please add a @Pipe/@Directive/@Component annotation."), moduleType);transitiveModule.addPipe(declaredIdentifier), transitiveModule.pipes.push(declaredIdentifier), declaredPipes.push(declaredIdentifier), _this._addTypeToModule(declaredType, moduleType);
        }
      });var exportedDirectives = [],
          exportedPipes = [];return exportedNonModuleIdentifiers.forEach(function (exportedId) {
        if (transitiveModule.directivesSet.has(exportedId.reference)) exportedDirectives.push(exportedId), transitiveModule.addExportedDirective(exportedId);else {
          if (!transitiveModule.pipesSet.has(exportedId.reference)) return void _this._reportError(syntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);exportedPipes.push(exportedId), transitiveModule.addExportedPipe(exportedId);
        }
      }), meta.providers && providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType)), meta.entryComponents && entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function (type) {
        return _this._getEntryComponentMetadata(type);
      })), meta.bootstrap && flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
        return isValidType(type) ? void bootstrapComponents.push(_this._getIdentifierMetadata(type)) : void _this._reportError(syntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
      }), entryComponents.push.apply(entryComponents, bootstrapComponents.map(function (type) {
        return _this._getEntryComponentMetadata(type.reference);
      })), meta.schemas && schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas)), compileMeta = new CompileNgModuleMetadata({ type: this._getTypeMetadata(moduleType), providers: providers, entryComponents: entryComponents, bootstrapComponents: bootstrapComponents, schemas: schemas, declaredDirectives: declaredDirectives, exportedDirectives: exportedDirectives, declaredPipes: declaredPipes, exportedPipes: exportedPipes, importedModules: importedModules, exportedModules: exportedModules, transitiveModule: transitiveModule, id: meta.id || null }), entryComponents.forEach(function (id) {
        return transitiveModule.addEntryComponent(id);
      }), providers.forEach(function (provider) {
        return transitiveModule.addProvider(provider, compileMeta.type);
      }), transitiveModule.addModule(compileMeta.type), this._ngModuleCache.set(moduleType, compileMeta), compileMeta;
    }, CompileMetadataResolver.prototype._checkSelfImport = function (moduleType, importedModuleType) {
      return moduleType === importedModuleType && (this._reportError(syntaxError("'" + stringifyType(moduleType) + "' module can't import itself"), moduleType), !0);
    }, CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
      return this._directiveResolver.isDirective(type) ? "directive" : this._pipeResolver.isPipe(type) ? "pipe" : this._ngModuleResolver.isNgModule(type) ? "module" : type.provide ? "provider" : "value";
    }, CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
      var oldModule = this._ngModuleOfTypes.get(type);return oldModule && oldModule !== moduleType ? void this._reportError(syntaxError("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! " + ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType) : void this._ngModuleOfTypes.set(type, moduleType);
    }, CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
      var result = new TransitiveCompileNgModuleMetadata(),
          modulesByToken = new Map();return importedModules.concat(exportedModules).forEach(function (modSummary) {
        modSummary.modules.forEach(function (mod) {
          return result.addModule(mod);
        }), modSummary.entryComponents.forEach(function (comp) {
          return result.addEntryComponent(comp);
        });var addedTokens = new Set();modSummary.providers.forEach(function (entry) {
          var tokenRef = tokenReference(entry.provider.token),
              prevModules = modulesByToken.get(tokenRef);prevModules || (prevModules = new Set(), modulesByToken.set(tokenRef, prevModules));var moduleRef = entry.module.reference;!addedTokens.has(tokenRef) && prevModules.has(moduleRef) || (prevModules.add(moduleRef), addedTokens.add(tokenRef), result.addProvider(entry.provider, entry.module));
        });
      }), exportedModules.forEach(function (modSummary) {
        modSummary.exportedDirectives.forEach(function (id) {
          return result.addExportedDirective(id);
        }), modSummary.exportedPipes.forEach(function (id) {
          return result.addExportedPipe(id);
        });
      }), importedModules.forEach(function (modSummary) {
        modSummary.exportedDirectives.forEach(function (id) {
          return result.addDirective(id);
        }), modSummary.exportedPipes.forEach(function (id) {
          return result.addPipe(id);
        });
      }), result;
    }, CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {
      return type = _angular_core.resolveForwardRef(type), { reference: type };
    }, CompileMetadataResolver.prototype.isInjectable = function (type) {
      var annotations = this._reflector.annotations(type);return annotations.some(function (ann) {
        return ann.constructor === _angular_core.Injectable;
      });
    }, CompileMetadataResolver.prototype.getInjectableSummary = function (type) {
      return { summaryKind: CompileSummaryKind.Injectable, type: this._getTypeMetadata(type, null, !1) };
    }, CompileMetadataResolver.prototype._getInjectableMetadata = function (type, dependencies) {
      void 0 === dependencies && (dependencies = null);var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);return typeSummary ? typeSummary.type : this._getTypeMetadata(type, dependencies);
    }, CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies, throwOnUnknownDeps) {
      void 0 === dependencies && (dependencies = null), void 0 === throwOnUnknownDeps && (throwOnUnknownDeps = !0);var identifier = this._getIdentifierMetadata(type);return { reference: identifier.reference, diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps), lifecycleHooks: _angular_core.ɵLIFECYCLE_HOOKS_VALUES.filter(function (hook) {
          return hasLifecycleHook(hook, identifier.reference);
        }) };
    }, CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {
      return void 0 === dependencies && (dependencies = null), factory = _angular_core.resolveForwardRef(factory), { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
    }, CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
      var pipeMeta = this._pipeCache.get(pipeType);return pipeMeta || this._reportError(syntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType), pipeMeta || null;
    }, CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
      var pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);return pipeSummary || this._reportError(syntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType), pipeSummary;
    }, CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
      var pipeMeta = this._pipeCache.get(pipeType);return pipeMeta || (pipeMeta = this._loadPipeMetadata(pipeType)), pipeMeta;
    }, CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
      pipeType = _angular_core.resolveForwardRef(pipeType);var pipeAnnotation = this._pipeResolver.resolve(pipeType),
          pipeMeta = new CompilePipeMetadata({ type: this._getTypeMetadata(pipeType), name: pipeAnnotation.name, pure: !!pipeAnnotation.pure });return this._pipeCache.set(pipeType, pipeMeta), this._summaryCache.set(pipeType, pipeMeta.toSummary()), pipeMeta;
    }, CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies, throwOnUnknownDeps) {
      var _this = this;void 0 === throwOnUnknownDeps && (throwOnUnknownDeps = !0);var hasUnknownDeps = !1,
          params = dependencies || this._reflector.parameters(typeOrFunc) || [],
          dependenciesMetadata = params.map(function (param) {
        var isAttribute = !1,
            isHost = !1,
            isSelf = !1,
            isSkipSelf = !1,
            isOptional = !1,
            token = null;return Array.isArray(param) ? param.forEach(function (paramEntry) {
          paramEntry instanceof _angular_core.Host ? isHost = !0 : paramEntry instanceof _angular_core.Self ? isSelf = !0 : paramEntry instanceof _angular_core.SkipSelf ? isSkipSelf = !0 : paramEntry instanceof _angular_core.Optional ? isOptional = !0 : paramEntry instanceof _angular_core.Attribute ? (isAttribute = !0, token = paramEntry.attributeName) : paramEntry instanceof _angular_core.Inject ? token = paramEntry.token : paramEntry instanceof _angular_core.InjectionToken ? token = paramEntry : isValidType(paramEntry) && null == token && (token = paramEntry);
        }) : token = param, null == token ? (hasUnknownDeps = !0, null) : { isAttribute: isAttribute, isHost: isHost, isSelf: isSelf, isSkipSelf: isSkipSelf, isOptional: isOptional, token: _this._getTokenMetadata(token) };
      });if (hasUnknownDeps) {
        var depsTokens = dependenciesMetadata.map(function (dep) {
          return dep ? stringifyType(dep.token) : "?";
        }).join(", "),
            message = "Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ").";throwOnUnknownDeps ? this._reportError(syntaxError(message), typeOrFunc) : this._console.warn("Warning: " + message + " This will become an error in Angular v5.x");
      }return dependenciesMetadata;
    }, CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
      token = _angular_core.resolveForwardRef(token);var compileToken;return compileToken = "string" == typeof token ? { value: token } : { identifier: { reference: token } };
    }, CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {
      var _this = this;return void 0 === compileProviders && (compileProviders = []), providers.forEach(function (provider, providerIdx) {
        if (Array.isArray(provider)) _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);else {
          provider = _angular_core.resolveForwardRef(provider);var providerMeta = void 0;if (provider && "object" == typeof provider && provider.hasOwnProperty("provide")) _this._validateProvider(provider), providerMeta = new ProviderMeta(provider.provide, provider);else {
            if (!isValidType(provider)) {
              if (void 0 === provider) return void _this._reportError(syntaxError("Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files."));var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
                return seenProviderIdx < providerIdx ? soFar.push("" + stringifyType(seenProvider)) : seenProviderIdx == providerIdx ? soFar.push("?" + stringifyType(seenProvider) + "?") : seenProviderIdx == providerIdx + 1 && soFar.push("..."), soFar;
              }, []).join(", ");return void _this._reportError(syntaxError("Invalid " + (debugInfo ? debugInfo : "provider") + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
            }providerMeta = new ProviderMeta(provider, { useClass: provider });
          }providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS) ? targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type)) : compileProviders.push(_this.getProviderMetadata(providerMeta));
        }
      }), compileProviders;
    }, CompileMetadataResolver.prototype._validateProvider = function (provider) {
      provider.hasOwnProperty("useClass") && null == provider.useClass && this._reportError(syntaxError("Invalid provider for " + stringifyType(provider.provide) + ". useClass cannot be " + provider.useClass + ".\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case."));
    }, CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {
      var _this = this,
          components = [],
          collectedIdentifiers = [];return provider.useFactory || provider.useExisting || provider.useClass ? (this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type), []) : provider.multi ? (extractIdentifiers(provider.useValue, collectedIdentifiers), collectedIdentifiers.forEach(function (identifier) {
        var entry = _this._getEntryComponentMetadata(identifier.reference, !1);entry && components.push(entry);
      }), components) : (this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type), []);
    }, CompileMetadataResolver.prototype._getEntryComponentMetadata = function (dirType, throwIfNotFound) {
      void 0 === throwIfNotFound && (throwIfNotFound = !0);var dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);if (dirMeta && dirMeta.metadata.isComponent) return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);if (dirSummary && dirSummary.isComponent) return { componentType: dirType, componentFactory: dirSummary.componentFactory };if (throwIfNotFound) throw syntaxError(dirType.name + " cannot be used as an entry component.");return null;
    }, CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
      var compileDeps = void 0,
          compileTypeMetadata = null,
          compileFactoryMetadata = null,
          token = this._getTokenMetadata(provider.token);return provider.useClass ? (compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies), compileDeps = compileTypeMetadata.diDeps, provider.token === provider.useClass && (token = { identifier: compileTypeMetadata })) : provider.useFactory && (compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies), compileDeps = compileFactoryMetadata.diDeps), { token: token, useClass: compileTypeMetadata, useValue: provider.useValue, useFactory: compileFactoryMetadata, useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : void 0, deps: compileDeps, multi: provider.multi };
    }, CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
      var _this = this,
          res = [];return Object.keys(queries).forEach(function (propertyName) {
        var query = queries[propertyName];query.isViewQuery === isViewQuery && res.push(_this._getQueryMetadata(query, propertyName, directiveType));
      }), res;
    }, CompileMetadataResolver.prototype._queryVarBindings = function (selector) {
      return selector.split(/\s*,\s*/);
    }, CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
      var selectors,
          _this = this;return "string" == typeof q.selector ? selectors = this._queryVarBindings(q.selector).map(function (varName) {
        return _this._getTokenMetadata(varName);
      }) : q.selector ? selectors = [this._getTokenMetadata(q.selector)] : (this._reportError(syntaxError("Can't construct a query for the property \"" + propertyName + '" of "' + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc), selectors = []), { selectors: selectors, first: q.first, descendants: q.descendants, propertyName: propertyName, read: q.read ? this._getTokenMetadata(q.read) : null };
    }, CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {
      if (!this._errorCollector) throw error;this._errorCollector(error, type), otherType && this._errorCollector(error, otherType);
    }, CompileMetadataResolver;
  }();CompileMetadataResolver.decorators = [{ type: CompilerInjectable }], CompileMetadataResolver.ctorParameters = function () {
    return [{ type: CompilerConfig }, { type: NgModuleResolver }, { type: DirectiveResolver }, { type: PipeResolver }, { type: SummaryResolver }, { type: ElementSchemaRegistry }, { type: DirectiveNormalizer }, { type: _angular_core.ɵConsole }, { type: StaticSymbolCache, decorators: [{ type: _angular_core.Optional }] }, { type: _angular_core.ɵReflectorReader }, { type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN] }] }];
  };var _CompileValueConverter = function (_super) {
    function _CompileValueConverter() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(_CompileValueConverter, _super), _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
      targetIdentifiers.push({ reference: value });
    }, _CompileValueConverter;
  }(ValueTransformer),
      TypeModifier = {};TypeModifier.Const = 0, TypeModifier[TypeModifier.Const] = "Const";var Type$1 = function () {
    function Type$1(modifiers) {
      void 0 === modifiers && (modifiers = null), this.modifiers = modifiers, modifiers || (this.modifiers = []);
    }return Type$1.prototype.visitType = function (visitor, context) {}, Type$1.prototype.hasModifier = function (modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    }, Type$1;
  }(),
      BuiltinTypeName = {};BuiltinTypeName.Dynamic = 0, BuiltinTypeName.Bool = 1, BuiltinTypeName.String = 2, BuiltinTypeName.Int = 3, BuiltinTypeName.Number = 4, BuiltinTypeName.Function = 5, BuiltinTypeName.Inferred = 6, BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic", BuiltinTypeName[BuiltinTypeName.Bool] = "Bool", BuiltinTypeName[BuiltinTypeName.String] = "String", BuiltinTypeName[BuiltinTypeName.Int] = "Int", BuiltinTypeName[BuiltinTypeName.Number] = "Number", BuiltinTypeName[BuiltinTypeName.Function] = "Function", BuiltinTypeName[BuiltinTypeName.Inferred] = "Inferred";var BuiltinType = function (_super) {
    function BuiltinType(name, modifiers) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, modifiers) || this;return _this.name = name, _this;
    }return __extends(BuiltinType, _super), BuiltinType.prototype.visitType = function (visitor, context) {
      return visitor.visitBuiltintType(this, context);
    }, BuiltinType;
  }(Type$1),
      ExpressionType = function (_super) {
    function ExpressionType(value, modifiers) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, modifiers) || this;return _this.value = value, _this;
    }return __extends(ExpressionType, _super), ExpressionType.prototype.visitType = function (visitor, context) {
      return visitor.visitExpressionType(this, context);
    }, ExpressionType;
  }(Type$1),
      ArrayType = function (_super) {
    function ArrayType(of, modifiers) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, modifiers) || this;return _this.of = of, _this;
    }return __extends(ArrayType, _super), ArrayType.prototype.visitType = function (visitor, context) {
      return visitor.visitArrayType(this, context);
    }, ArrayType;
  }(Type$1),
      MapType = function (_super) {
    function MapType(valueType, modifiers) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, modifiers) || this;return _this.valueType = valueType || null, _this;
    }return __extends(MapType, _super), MapType.prototype.visitType = function (visitor, context) {
      return visitor.visitMapType(this, context);
    }, MapType;
  }(Type$1),
      DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic),
      INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred),
      BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool),
      BinaryOperator = (new BuiltinType(BuiltinTypeName.Int), new BuiltinType(BuiltinTypeName.Number), new BuiltinType(BuiltinTypeName.String), new BuiltinType(BuiltinTypeName.Function), {});BinaryOperator.Equals = 0, BinaryOperator.NotEquals = 1, BinaryOperator.Identical = 2, BinaryOperator.NotIdentical = 3, BinaryOperator.Minus = 4, BinaryOperator.Plus = 5, BinaryOperator.Divide = 6, BinaryOperator.Multiply = 7, BinaryOperator.Modulo = 8, BinaryOperator.And = 9, BinaryOperator.Or = 10, BinaryOperator.Lower = 11, BinaryOperator.LowerEquals = 12, BinaryOperator.Bigger = 13, BinaryOperator.BiggerEquals = 14, BinaryOperator[BinaryOperator.Equals] = "Equals", BinaryOperator[BinaryOperator.NotEquals] = "NotEquals", BinaryOperator[BinaryOperator.Identical] = "Identical", BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical", BinaryOperator[BinaryOperator.Minus] = "Minus", BinaryOperator[BinaryOperator.Plus] = "Plus", BinaryOperator[BinaryOperator.Divide] = "Divide", BinaryOperator[BinaryOperator.Multiply] = "Multiply", BinaryOperator[BinaryOperator.Modulo] = "Modulo", BinaryOperator[BinaryOperator.And] = "And", BinaryOperator[BinaryOperator.Or] = "Or", BinaryOperator[BinaryOperator.Lower] = "Lower", BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals", BinaryOperator[BinaryOperator.Bigger] = "Bigger", BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";var Expression = function () {
    function Expression(type, sourceSpan) {
      this.type = type || null, this.sourceSpan = sourceSpan || null;
    }return Expression.prototype.visitExpression = function (visitor, context) {}, Expression.prototype.prop = function (name, sourceSpan) {
      return new ReadPropExpr(this, name, null, sourceSpan);
    }, Expression.prototype.key = function (index, type, sourceSpan) {
      return new ReadKeyExpr(this, index, type, sourceSpan);
    }, Expression.prototype.callMethod = function (name, params, sourceSpan) {
      return new InvokeMethodExpr(this, name, params, null, sourceSpan);
    }, Expression.prototype.callFn = function (params, sourceSpan) {
      return new InvokeFunctionExpr(this, params, null, sourceSpan);
    }, Expression.prototype.instantiate = function (params, type, sourceSpan) {
      return new InstantiateExpr(this, params, type, sourceSpan);
    }, Expression.prototype.conditional = function (trueCase, falseCase, sourceSpan) {
      return void 0 === falseCase && (falseCase = null), new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
    }, Expression.prototype.equals = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
    }, Expression.prototype.notEquals = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
    }, Expression.prototype.identical = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
    }, Expression.prototype.notIdentical = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
    }, Expression.prototype.minus = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
    }, Expression.prototype.plus = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
    }, Expression.prototype.divide = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
    }, Expression.prototype.multiply = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
    }, Expression.prototype.modulo = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
    }, Expression.prototype.and = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
    }, Expression.prototype.or = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
    }, Expression.prototype.lower = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
    }, Expression.prototype.lowerEquals = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
    }, Expression.prototype.bigger = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
    }, Expression.prototype.biggerEquals = function (rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
    }, Expression.prototype.isBlank = function (sourceSpan) {
      return this.equals(TYPED_NULL_EXPR, sourceSpan);
    }, Expression.prototype.cast = function (type, sourceSpan) {
      return new CastExpr(this, type, sourceSpan);
    }, Expression.prototype.toStmt = function () {
      return new ExpressionStatement(this, null);
    }, Expression;
  }(),
      BuiltinVar = {};BuiltinVar.This = 0, BuiltinVar.Super = 1, BuiltinVar.CatchError = 2, BuiltinVar.CatchStack = 3, BuiltinVar[BuiltinVar.This] = "This", BuiltinVar[BuiltinVar.Super] = "Super", BuiltinVar[BuiltinVar.CatchError] = "CatchError", BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";var ReadVarExpr = function (_super) {
    function ReadVarExpr(name, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return "string" == typeof name ? (_this.name = name, _this.builtin = null) : (_this.name = null, _this.builtin = name), _this;
    }return __extends(ReadVarExpr, _super), ReadVarExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitReadVarExpr(this, context);
    }, ReadVarExpr.prototype.set = function (value) {
      if (!this.name) throw new Error("Built in variable " + this.builtin + " can not be assigned to.");return new WriteVarExpr(this.name, value, null, this.sourceSpan);
    }, ReadVarExpr;
  }(Expression),
      WriteVarExpr = function (_super) {
    function WriteVarExpr(name, value, type, sourceSpan) {
      var _this = _super.call(this, type || value.type, sourceSpan) || this;return _this.name = name, _this.value = value, _this;
    }return __extends(WriteVarExpr, _super), WriteVarExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitWriteVarExpr(this, context);
    }, WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
      return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
    }, WriteVarExpr;
  }(Expression),
      WriteKeyExpr = function (_super) {
    function WriteKeyExpr(receiver, index, value, type, sourceSpan) {
      var _this = _super.call(this, type || value.type, sourceSpan) || this;return _this.receiver = receiver, _this.index = index, _this.value = value, _this;
    }return __extends(WriteKeyExpr, _super), WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitWriteKeyExpr(this, context);
    }, WriteKeyExpr;
  }(Expression),
      WritePropExpr = function (_super) {
    function WritePropExpr(receiver, name, value, type, sourceSpan) {
      var _this = _super.call(this, type || value.type, sourceSpan) || this;return _this.receiver = receiver, _this.name = name, _this.value = value, _this;
    }return __extends(WritePropExpr, _super), WritePropExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitWritePropExpr(this, context);
    }, WritePropExpr;
  }(Expression),
      BuiltinMethod = {};BuiltinMethod.ConcatArray = 0, BuiltinMethod.SubscribeObservable = 1, BuiltinMethod.Bind = 2, BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray", BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable", BuiltinMethod[BuiltinMethod.Bind] = "Bind";var InvokeMethodExpr = function (_super) {
    function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.receiver = receiver, _this.args = args, "string" == typeof method ? (_this.name = method, _this.builtin = null) : (_this.name = null, _this.builtin = method), _this;
    }return __extends(InvokeMethodExpr, _super), InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitInvokeMethodExpr(this, context);
    }, InvokeMethodExpr;
  }(Expression),
      InvokeFunctionExpr = function (_super) {
    function InvokeFunctionExpr(fn, args, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.fn = fn, _this.args = args, _this;
    }return __extends(InvokeFunctionExpr, _super), InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitInvokeFunctionExpr(this, context);
    }, InvokeFunctionExpr;
  }(Expression),
      InstantiateExpr = function (_super) {
    function InstantiateExpr(classExpr, args, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.classExpr = classExpr, _this.args = args, _this;
    }return __extends(InstantiateExpr, _super), InstantiateExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitInstantiateExpr(this, context);
    }, InstantiateExpr;
  }(Expression),
      LiteralExpr = function (_super) {
    function LiteralExpr(value, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.value = value, _this;
    }return __extends(LiteralExpr, _super), LiteralExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitLiteralExpr(this, context);
    }, LiteralExpr;
  }(Expression),
      ExternalExpr = function (_super) {
    function ExternalExpr(value, type, typeParams, sourceSpan) {
      void 0 === typeParams && (typeParams = null);var _this = _super.call(this, type, sourceSpan) || this;return _this.value = value, _this.typeParams = typeParams, _this;
    }return __extends(ExternalExpr, _super), ExternalExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitExternalExpr(this, context);
    }, ExternalExpr;
  }(Expression),
      ConditionalExpr = function (_super) {
    function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {
      void 0 === falseCase && (falseCase = null);var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;return _this.condition = condition, _this.falseCase = falseCase, _this.trueCase = trueCase, _this;
    }return __extends(ConditionalExpr, _super), ConditionalExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitConditionalExpr(this, context);
    }, ConditionalExpr;
  }(Expression),
      NotExpr = function (_super) {
    function NotExpr(condition, sourceSpan) {
      var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;return _this.condition = condition, _this;
    }return __extends(NotExpr, _super), NotExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitNotExpr(this, context);
    }, NotExpr;
  }(Expression),
      CastExpr = function (_super) {
    function CastExpr(value, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.value = value, _this;
    }return __extends(CastExpr, _super), CastExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitCastExpr(this, context);
    }, CastExpr;
  }(Expression),
      FnParam = function () {
    function FnParam(name, type) {
      void 0 === type && (type = null), this.name = name, this.type = type;
    }return FnParam;
  }(),
      FunctionExpr = function (_super) {
    function FunctionExpr(params, statements, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.params = params, _this.statements = statements, _this;
    }return __extends(FunctionExpr, _super), FunctionExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitFunctionExpr(this, context);
    }, FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
      return void 0 === modifiers && (modifiers = null), new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
    }, FunctionExpr;
  }(Expression),
      BinaryOperatorExpr = function (_super) {
    function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan) {
      var _this = _super.call(this, type || lhs.type, sourceSpan) || this;return _this.operator = operator, _this.rhs = rhs, _this.lhs = lhs, _this;
    }return __extends(BinaryOperatorExpr, _super), BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitBinaryOperatorExpr(this, context);
    }, BinaryOperatorExpr;
  }(Expression),
      ReadPropExpr = function (_super) {
    function ReadPropExpr(receiver, name, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.receiver = receiver, _this.name = name, _this;
    }return __extends(ReadPropExpr, _super), ReadPropExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitReadPropExpr(this, context);
    }, ReadPropExpr.prototype.set = function (value) {
      return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
    }, ReadPropExpr;
  }(Expression),
      ReadKeyExpr = function (_super) {
    function ReadKeyExpr(receiver, index, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.receiver = receiver, _this.index = index, _this;
    }return __extends(ReadKeyExpr, _super), ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitReadKeyExpr(this, context);
    }, ReadKeyExpr.prototype.set = function (value) {
      return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
    }, ReadKeyExpr;
  }(Expression),
      LiteralArrayExpr = function (_super) {
    function LiteralArrayExpr(entries, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.entries = entries, _this;
    }return __extends(LiteralArrayExpr, _super), LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitLiteralArrayExpr(this, context);
    }, LiteralArrayExpr;
  }(Expression),
      LiteralMapEntry = function () {
    function LiteralMapEntry(key, value, quoted) {
      void 0 === quoted && (quoted = !1), this.key = key, this.value = value, this.quoted = quoted;
    }return LiteralMapEntry;
  }(),
      LiteralMapExpr = function (_super) {
    function LiteralMapExpr(entries, type, sourceSpan) {
      var _this = _super.call(this, type, sourceSpan) || this;return _this.entries = entries, _this.valueType = null, type && (_this.valueType = type.valueType), _this;
    }return __extends(LiteralMapExpr, _super), LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitLiteralMapExpr(this, context);
    }, LiteralMapExpr;
  }(Expression),
      CommaExpr = function (_super) {
    function CommaExpr(parts, sourceSpan) {
      var _this = _super.call(this, parts[parts.length - 1].type, sourceSpan) || this;return _this.parts = parts, _this;
    }return __extends(CommaExpr, _super), CommaExpr.prototype.visitExpression = function (visitor, context) {
      return visitor.visitCommaExpr(this, context);
    }, CommaExpr;
  }(Expression),
      THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null),
      SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null),
      NULL_EXPR = (new ReadVarExpr(BuiltinVar.CatchError, null, null), new ReadVarExpr(BuiltinVar.CatchStack, null, null), new LiteralExpr(null, null, null)),
      TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null),
      StmtModifier = {};StmtModifier.Final = 0, StmtModifier.Private = 1, StmtModifier[StmtModifier.Final] = "Final", StmtModifier[StmtModifier.Private] = "Private";var Statement = function () {
    function Statement(modifiers, sourceSpan) {
      this.modifiers = modifiers || [], this.sourceSpan = sourceSpan || null;
    }return Statement.prototype.visitStatement = function (visitor, context) {}, Statement.prototype.hasModifier = function (modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    }, Statement;
  }(),
      DeclareVarStmt = function (_super) {
    function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, modifiers, sourceSpan) || this;return _this.name = name, _this.value = value, _this.type = type || value.type, _this;
    }return __extends(DeclareVarStmt, _super), DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
      return visitor.visitDeclareVarStmt(this, context);
    }, DeclareVarStmt;
  }(Statement),
      DeclareFunctionStmt = function (_super) {
    function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, modifiers, sourceSpan) || this;return _this.name = name, _this.params = params, _this.statements = statements, _this.type = type || null, _this;
    }return __extends(DeclareFunctionStmt, _super), DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
      return visitor.visitDeclareFunctionStmt(this, context);
    }, DeclareFunctionStmt;
  }(Statement),
      ExpressionStatement = function (_super) {
    function ExpressionStatement(expr, sourceSpan) {
      var _this = _super.call(this, null, sourceSpan) || this;return _this.expr = expr, _this;
    }return __extends(ExpressionStatement, _super), ExpressionStatement.prototype.visitStatement = function (visitor, context) {
      return visitor.visitExpressionStmt(this, context);
    }, ExpressionStatement;
  }(Statement),
      ReturnStatement = function (_super) {
    function ReturnStatement(value, sourceSpan) {
      var _this = _super.call(this, null, sourceSpan) || this;return _this.value = value, _this;
    }return __extends(ReturnStatement, _super), ReturnStatement.prototype.visitStatement = function (visitor, context) {
      return visitor.visitReturnStmt(this, context);
    }, ReturnStatement;
  }(Statement),
      AbstractClassPart = function () {
    function AbstractClassPart(type, modifiers) {
      this.modifiers = modifiers, modifiers || (this.modifiers = []), this.type = type || null;
    }return AbstractClassPart.prototype.hasModifier = function (modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    }, AbstractClassPart;
  }(),
      ClassField = function (_super) {
    function ClassField(name, type, modifiers) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, type, modifiers) || this;return _this.name = name, _this;
    }return __extends(ClassField, _super), ClassField;
  }(AbstractClassPart),
      ClassMethod = function (_super) {
    function ClassMethod(name, params, body, type, modifiers) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, type, modifiers) || this;return _this.name = name, _this.params = params, _this.body = body, _this;
    }return __extends(ClassMethod, _super), ClassMethod;
  }(AbstractClassPart),
      ClassGetter = function (_super) {
    function ClassGetter(name, body, type, modifiers) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, type, modifiers) || this;return _this.name = name, _this.body = body, _this;
    }return __extends(ClassGetter, _super), ClassGetter;
  }(AbstractClassPart),
      ClassStmt = function (_super) {
    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {
      void 0 === modifiers && (modifiers = null);var _this = _super.call(this, modifiers, sourceSpan) || this;return _this.name = name, _this.parent = parent, _this.fields = fields, _this.getters = getters, _this.constructorMethod = constructorMethod, _this.methods = methods, _this;
    }return __extends(ClassStmt, _super), ClassStmt.prototype.visitStatement = function (visitor, context) {
      return visitor.visitDeclareClassStmt(this, context);
    }, ClassStmt;
  }(Statement),
      IfStmt = function (_super) {
    function IfStmt(condition, trueCase, falseCase, sourceSpan) {
      void 0 === falseCase && (falseCase = []);var _this = _super.call(this, null, sourceSpan) || this;return _this.condition = condition, _this.trueCase = trueCase, _this.falseCase = falseCase, _this;
    }return __extends(IfStmt, _super), IfStmt.prototype.visitStatement = function (visitor, context) {
      return visitor.visitIfStmt(this, context);
    }, IfStmt;
  }(Statement),
      TryCatchStmt = function (_super) {
    function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {
      var _this = _super.call(this, null, sourceSpan) || this;return _this.bodyStmts = bodyStmts, _this.catchStmts = catchStmts, _this;
    }return __extends(TryCatchStmt, _super), TryCatchStmt.prototype.visitStatement = function (visitor, context) {
      return visitor.visitTryCatchStmt(this, context);
    }, TryCatchStmt;
  }(Statement),
      ThrowStmt = function (_super) {
    function ThrowStmt(error, sourceSpan) {
      var _this = _super.call(this, null, sourceSpan) || this;return _this.error = error, _this;
    }return __extends(ThrowStmt, _super), ThrowStmt.prototype.visitStatement = function (visitor, context) {
      return visitor.visitThrowStmt(this, context);
    }, ThrowStmt;
  }(Statement),
      AstTransformer$1 = function () {
    function AstTransformer$1() {}return AstTransformer$1.prototype.transformExpr = function (expr, context) {
      return expr;
    }, AstTransformer$1.prototype.transformStmt = function (stmt, context) {
      return stmt;
    }, AstTransformer$1.prototype.visitReadVarExpr = function (ast, context) {
      return this.transformExpr(ast, context);
    }, AstTransformer$1.prototype.visitWriteVarExpr = function (expr, context) {
      return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
    }, AstTransformer$1.prototype.visitWriteKeyExpr = function (expr, context) {
      return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
    }, AstTransformer$1.prototype.visitWritePropExpr = function (expr, context) {
      return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
    }, AstTransformer$1.prototype.visitInvokeMethodExpr = function (ast, context) {
      var method = ast.builtin || ast.name;return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitInvokeFunctionExpr = function (ast, context) {
      return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitInstantiateExpr = function (ast, context) {
      return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitLiteralExpr = function (ast, context) {
      return this.transformExpr(ast, context);
    }, AstTransformer$1.prototype.visitExternalExpr = function (ast, context) {
      return this.transformExpr(ast, context);
    }, AstTransformer$1.prototype.visitConditionalExpr = function (ast, context) {
      return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitNotExpr = function (ast, context) {
      return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitCastExpr = function (ast, context) {
      return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitFunctionExpr = function (ast, context) {
      return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitBinaryOperatorExpr = function (ast, context) {
      return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitReadPropExpr = function (ast, context) {
      return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitReadKeyExpr = function (ast, context) {
      return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitLiteralArrayExpr = function (ast, context) {
      return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitLiteralMapExpr = function (ast, context) {
      var _this = this,
          entries = ast.entries.map(function (entry) {
        return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted);
      }),
          mapType = new MapType(ast.valueType, null);return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitCommaExpr = function (ast, context) {
      return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);
    }, AstTransformer$1.prototype.visitAllExpressions = function (exprs, context) {
      var _this = this;return exprs.map(function (expr) {
        return expr.visitExpression(_this, context);
      });
    }, AstTransformer$1.prototype.visitDeclareVarStmt = function (stmt, context) {
      return this.transformStmt(new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitDeclareFunctionStmt = function (stmt, context) {
      return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitExpressionStmt = function (stmt, context) {
      return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitReturnStmt = function (stmt, context) {
      return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitDeclareClassStmt = function (stmt, context) {
      var _this = this,
          parent = stmt.parent.visitExpression(this, context),
          getters = stmt.getters.map(function (getter) {
        return new ClassGetter(getter.name, _this.visitAllStatements(getter.body, context), getter.type, getter.modifiers);
      }),
          ctorMethod = stmt.constructorMethod && new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers),
          methods = stmt.methods.map(function (method) {
        return new ClassMethod(method.name, method.params, _this.visitAllStatements(method.body, context), method.type, method.modifiers);
      });return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitIfStmt = function (stmt, context) {
      return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitTryCatchStmt = function (stmt, context) {
      return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitThrowStmt = function (stmt, context) {
      return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);
    }, AstTransformer$1.prototype.visitCommentStmt = function (stmt, context) {
      return this.transformStmt(stmt, context);
    }, AstTransformer$1.prototype.visitAllStatements = function (stmts, context) {
      var _this = this;return stmts.map(function (stmt) {
        return stmt.visitStatement(_this, context);
      });
    }, AstTransformer$1;
  }(),
      RecursiveAstVisitor$1 = function () {
    function RecursiveAstVisitor$1() {}return RecursiveAstVisitor$1.prototype.visitReadVarExpr = function (ast, context) {
      return ast;
    }, RecursiveAstVisitor$1.prototype.visitWriteVarExpr = function (expr, context) {
      return expr.value.visitExpression(this, context), expr;
    }, RecursiveAstVisitor$1.prototype.visitWriteKeyExpr = function (expr, context) {
      return expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr;
    }, RecursiveAstVisitor$1.prototype.visitWritePropExpr = function (expr, context) {
      return expr.receiver.visitExpression(this, context), expr.value.visitExpression(this, context), expr;
    }, RecursiveAstVisitor$1.prototype.visitInvokeMethodExpr = function (ast, context) {
      return ast.receiver.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitInvokeFunctionExpr = function (ast, context) {
      return ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitInstantiateExpr = function (ast, context) {
      return ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitLiteralExpr = function (ast, context) {
      return ast;
    }, RecursiveAstVisitor$1.prototype.visitExternalExpr = function (ast, context) {
      return ast;
    }, RecursiveAstVisitor$1.prototype.visitConditionalExpr = function (ast, context) {
      return ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitNotExpr = function (ast, context) {
      return ast.condition.visitExpression(this, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitCastExpr = function (ast, context) {
      return ast.value.visitExpression(this, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitFunctionExpr = function (ast, context) {
      return this.visitAllStatements(ast.statements, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitBinaryOperatorExpr = function (ast, context) {
      return ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitReadPropExpr = function (ast, context) {
      return ast.receiver.visitExpression(this, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitReadKeyExpr = function (ast, context) {
      return ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitLiteralArrayExpr = function (ast, context) {
      return this.visitAllExpressions(ast.entries, context), ast;
    }, RecursiveAstVisitor$1.prototype.visitLiteralMapExpr = function (ast, context) {
      var _this = this;return ast.entries.forEach(function (entry) {
        return entry.value.visitExpression(_this, context);
      }), ast;
    }, RecursiveAstVisitor$1.prototype.visitCommaExpr = function (ast, context) {
      this.visitAllExpressions(ast.parts, context);
    }, RecursiveAstVisitor$1.prototype.visitAllExpressions = function (exprs, context) {
      var _this = this;exprs.forEach(function (expr) {
        return expr.visitExpression(_this, context);
      });
    }, RecursiveAstVisitor$1.prototype.visitDeclareVarStmt = function (stmt, context) {
      return stmt.value.visitExpression(this, context), stmt;
    }, RecursiveAstVisitor$1.prototype.visitDeclareFunctionStmt = function (stmt, context) {
      return this.visitAllStatements(stmt.statements, context), stmt;
    }, RecursiveAstVisitor$1.prototype.visitExpressionStmt = function (stmt, context) {
      return stmt.expr.visitExpression(this, context), stmt;
    }, RecursiveAstVisitor$1.prototype.visitReturnStmt = function (stmt, context) {
      return stmt.value.visitExpression(this, context), stmt;
    }, RecursiveAstVisitor$1.prototype.visitDeclareClassStmt = function (stmt, context) {
      var _this = this;return stmt.parent.visitExpression(this, context), stmt.getters.forEach(function (getter) {
        return _this.visitAllStatements(getter.body, context);
      }), stmt.constructorMethod && this.visitAllStatements(stmt.constructorMethod.body, context), stmt.methods.forEach(function (method) {
        return _this.visitAllStatements(method.body, context);
      }), stmt;
    }, RecursiveAstVisitor$1.prototype.visitIfStmt = function (stmt, context) {
      return stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt;
    }, RecursiveAstVisitor$1.prototype.visitTryCatchStmt = function (stmt, context) {
      return this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt;
    }, RecursiveAstVisitor$1.prototype.visitThrowStmt = function (stmt, context) {
      return stmt.error.visitExpression(this, context), stmt;
    }, RecursiveAstVisitor$1.prototype.visitCommentStmt = function (stmt, context) {
      return stmt;
    }, RecursiveAstVisitor$1.prototype.visitAllStatements = function (stmts, context) {
      var _this = this;stmts.forEach(function (stmt) {
        return stmt.visitStatement(_this, context);
      });
    }, RecursiveAstVisitor$1;
  }(),
      _ReadVarVisitor = function (_super) {
    function _ReadVarVisitor() {
      var _this = _super.apply(this, arguments) || this;return _this.varNames = new Set(), _this;
    }return __extends(_ReadVarVisitor, _super), _ReadVarVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
      return stmt;
    }, _ReadVarVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
      return stmt;
    }, _ReadVarVisitor.prototype.visitReadVarExpr = function (ast, context) {
      return ast.name && this.varNames.add(ast.name), null;
    }, _ReadVarVisitor;
  }(RecursiveAstVisitor$1),
      _ApplySourceSpanTransformer = function (_super) {
    function _ApplySourceSpanTransformer(sourceSpan) {
      var _this = _super.call(this) || this;return _this.sourceSpan = sourceSpan, _this;
    }return __extends(_ApplySourceSpanTransformer, _super), _ApplySourceSpanTransformer.prototype._clone = function (obj) {
      var clone = Object.create(obj.constructor.prototype);for (var prop in obj) clone[prop] = obj[prop];return clone;
    }, _ApplySourceSpanTransformer.prototype.transformExpr = function (expr, context) {
      return expr.sourceSpan || (expr = this._clone(expr), expr.sourceSpan = this.sourceSpan), expr;
    }, _ApplySourceSpanTransformer.prototype.transformStmt = function (stmt, context) {
      return stmt.sourceSpan || (stmt = this._clone(stmt), stmt.sourceSpan = this.sourceSpan), stmt;
    }, _ApplySourceSpanTransformer;
  }(AstTransformer$1),
      QUOTED_KEYS = "$quoted$",
      _ValueOutputAstTransformer = function () {
    function _ValueOutputAstTransformer() {}return _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
      var _this = this;return literalArr(arr.map(function (value) {
        return visitValue(value, _this, null);
      }), type);
    }, _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
      var _this = this,
          entries = [],
          quotedSet = new Set(map && map[QUOTED_KEYS]);return Object.keys(map).forEach(function (key) {
        entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
      }), new LiteralMapExpr(entries, type);
    }, _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) {
      return literal(value, type);
    }, _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
      return value instanceof Expression ? value : importExpr({ reference: value });
    }, _ValueOutputAstTransformer;
  }(),
      ComponentFactoryDependency = function () {
    function ComponentFactoryDependency(compType) {
      this.compType = compType;
    }return ComponentFactoryDependency;
  }(),
      NgModuleCompileResult = function () {
    function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
      this.statements = statements, this.ngModuleFactoryVar = ngModuleFactoryVar, this.dependencies = dependencies;
    }return NgModuleCompileResult;
  }(),
      NgModuleCompiler = function () {
    function NgModuleCompiler() {}return NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
      var sourceSpan = typeSourceSpan("NgModule", ngModuleMeta.type),
          deps = [],
          bootstrapComponentFactories = [],
          entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
        return ngModuleMeta.bootstrapComponents.some(function (id) {
          return id.reference === entryComponent.componentType;
        }) && bootstrapComponentFactories.push({ reference: entryComponent.componentFactory }), deps.push(new ComponentFactoryDependency(entryComponent.componentType)), { reference: entryComponent.componentFactory };
      }),
          builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan),
          providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);providerParser.parse().forEach(function (provider) {
        return builder.addProvider(provider);
      });var injectorClass = builder.build(),
          ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory",
          ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(createIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]),
          stmts = [injectorClass, ngModuleFactoryStmt];if (ngModuleMeta.id) {
        var registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)]).toStmt();stmts.push(registerFactoryStmt);
      }return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
    }, NgModuleCompiler;
  }();NgModuleCompiler.decorators = [{ type: CompilerInjectable }], NgModuleCompiler.ctorParameters = function () {
    return [];
  };var _InjectorBuilder = function () {
    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
      this._ngModuleMeta = _ngModuleMeta, this._entryComponentFactories = _entryComponentFactories, this._bootstrapComponentFactories = _bootstrapComponentFactories, this._sourceSpan = _sourceSpan, this.fields = [], this.getters = [], this.methods = [], this.ctorStmts = [], this._lazyProps = new Map(), this._tokens = [], this._instances = new Map(), this._createStmts = [], this._destroyStmts = [];
    }return _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
      var _this = this,
          providerValueExpressions = resolvedProvider.providers.map(function (provider) {
        return _this._getProviderValue(provider);
      }),
          propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size,
          instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);if (resolvedProvider.lifecycleHooks.indexOf(_angular_core.ɵLifecycleHooks.OnDestroy) !== -1) {
        var callNgOnDestroy = instance.callMethod("ngOnDestroy", []);resolvedProvider.eager || (callNgOnDestroy = this._lazyProps.get(instance.name).and(callNgOnDestroy)), this._destroyStmts.push(callNgOnDestroy.toStmt());
      }this._tokens.push(resolvedProvider.token), this._instances.set(tokenReference(resolvedProvider.token), instance);
    }, _InjectorBuilder.prototype.build = function () {
      var _this = this,
          getMethodStmts = this._tokens.map(function (token) {
        var providerExpr = _this._instances.get(tokenReference(token));return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
      }),
          methods = [new ClassMethod("createInternal", [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod("getInternal", [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod("destroyInternal", [], this._destroyStmts)],
          parentArgs = [variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function (componentFactory) {
        return importExpr(componentFactory);
      })), literalArr(this._bootstrapComponentFactories.map(function (componentFactory) {
        return importExpr(componentFactory);
      }))],
          injClassName = identifierName(this._ngModuleMeta.type) + "Injector";return createClassStmt({ name: injClassName, ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))], parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]), parentArgs: parentArgs, builders: [{ methods: methods }, this] });
    }, _InjectorBuilder.prototype._getProviderValue = function (provider) {
      var result,
          _this = this;if (null != provider.useExisting) result = this._getDependency({ token: provider.useExisting });else if (null != provider.useFactory) {
        var deps = provider.deps || provider.useFactory.diDeps,
            depsExpr = deps.map(function (dep) {
          return _this._getDependency(dep);
        });result = importExpr(provider.useFactory).callFn(depsExpr);
      } else if (null != provider.useClass) {
        var deps = provider.deps || provider.useClass.diDeps,
            depsExpr = deps.map(function (dep) {
          return _this._getDependency(dep);
        });result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
      } else result = convertValueToOutputAst(provider.useValue);return result;
    }, _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
      var resolvedProviderValueExpr, type;if (isMulti ? (resolvedProviderValueExpr = literalArr(providerValueExpressions), type = new ArrayType(DYNAMIC_TYPE)) : (resolvedProviderValueExpr = providerValueExpressions[0], type = providerValueExpressions[0].type), type || (type = DYNAMIC_TYPE), isEager) this.fields.push(new ClassField(propName, type)), this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());else {
        var internalFieldProp = THIS_EXPR.prop("_" + propName);this.fields.push(new ClassField(internalFieldProp.name, type));var getterStmts = [new IfStmt(internalFieldProp.isBlank(), [internalFieldProp.set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(internalFieldProp)];this.getters.push(new ClassGetter(propName, getterStmts, type)), this._lazyProps.set(propName, internalFieldProp);
      }return THIS_EXPR.prop(propName);
    }, _InjectorBuilder.prototype._getDependency = function (dep) {
      var result = null;if (dep.isValue && (result = literal(dep.value)), dep.isSkipSelf || (dep.token && (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ? result = THIS_EXPR : tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver) && (result = THIS_EXPR.prop("componentFactoryResolver"))), result || (result = this._instances.get(tokenReference(dep.token)))), !result) {
        var args = [createDiTokenExpression(dep.token)];dep.isOptional && args.push(NULL_EXPR), result = InjectorProps.parent.callMethod("get", args);
      }return result;
    }, _InjectorBuilder;
  }(),
      InjectorProps = function () {
    function InjectorProps() {}return InjectorProps;
  }();InjectorProps.parent = THIS_EXPR.prop("parent");var InjectMethodVars = function () {
    function InjectMethodVars() {}return InjectMethodVars;
  }();InjectMethodVars.token = variable("token"), InjectMethodVars.notFoundResult = variable("notFoundResult"); /**
                                                                                                                * @license
                                                                                                                * Copyright Google Inc. All Rights Reserved.
                                                                                                                *
                                                                                                                * Use of this source code is governed by an MIT-style license that can be
                                                                                                                * found in the LICENSE file at https://angular.io/license
                                                                                                                */
  var VERSION$1 = 3,
      JS_B64_PREFIX = "# sourceMappingURL=data:application/json;base64,",
      SourceMapGenerator = function () {
    function SourceMapGenerator(file) {
      void 0 === file && (file = null), this.file = file, this.sourcesContent = new Map(), this.lines = [], this.lastCol0 = 0, this.hasMappings = !1;
    }return SourceMapGenerator.prototype.addSource = function (url, content) {
      return void 0 === content && (content = null), this.sourcesContent.has(url) || this.sourcesContent.set(url, content), this;
    }, SourceMapGenerator.prototype.addLine = function () {
      return this.lines.push([]), this.lastCol0 = 0, this;
    }, SourceMapGenerator.prototype.addMapping = function (col0, sourceUrl, sourceLine0, sourceCol0) {
      if (!this.currentLine) throw new Error("A line must be added before mappings can be added");if (null != sourceUrl && !this.sourcesContent.has(sourceUrl)) throw new Error('Unknown source file "' + sourceUrl + '"');if (null == col0) throw new Error("The column in the generated code must be provided");if (col0 < this.lastCol0) throw new Error("Mapping should be added in output order");if (sourceUrl && (null == sourceLine0 || null == sourceCol0)) throw new Error("The source location must be provided when a source url is provided");return this.hasMappings = !0, this.lastCol0 = col0, this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 }), this;
    }, Object.defineProperty(SourceMapGenerator.prototype, "currentLine", { get: function () {
        return this.lines.slice(-1)[0];
      }, enumerable: !0, configurable: !0 }), SourceMapGenerator.prototype.toJSON = function () {
      var _this = this;if (!this.hasMappings) return null;var sourcesIndex = new Map(),
          sources = [],
          sourcesContent = [];Array.from(this.sourcesContent.keys()).forEach(function (url, i) {
        sourcesIndex.set(url, i), sources.push(url), sourcesContent.push(_this.sourcesContent.get(url) || null);
      });var mappings = "",
          lastCol0 = 0,
          lastSourceIndex = 0,
          lastSourceLine0 = 0,
          lastSourceCol0 = 0;return this.lines.forEach(function (segments) {
        lastCol0 = 0, mappings += segments.map(function (segment) {
          var segAsStr = toBase64VLQ(segment.col0 - lastCol0);return lastCol0 = segment.col0, null != segment.sourceUrl && (segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex), lastSourceIndex = sourcesIndex.get(segment.sourceUrl), segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0), lastSourceLine0 = segment.sourceLine0, segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0), lastSourceCol0 = segment.sourceCol0), segAsStr;
        }).join(","), mappings += ";";
      }), mappings = mappings.slice(0, -1), { file: this.file || "", version: VERSION$1, sourceRoot: "", sources: sources, sourcesContent: sourcesContent, mappings: mappings };
    }, SourceMapGenerator.prototype.toJsComment = function () {
      return this.hasMappings ? "//" + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : "";
    }, SourceMapGenerator;
  }(),
      B64_DIGITS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g,
      _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i,
      _INDENT_WITH = "  ",
      CATCH_ERROR_VAR$1 = variable("error", null, null),
      CATCH_STACK_VAR$1 = variable("stack", null, null),
      _EmittedLine = function () {
    function _EmittedLine(indent) {
      this.indent = indent, this.parts = [], this.srcSpans = [];
    }return _EmittedLine;
  }(),
      EmitterVisitorContext = function () {
    function EmitterVisitorContext(_exportedVars, _indent) {
      this._exportedVars = _exportedVars, this._indent = _indent, this._classes = [], this._lines = [new _EmittedLine(_indent)];
    }return EmitterVisitorContext.createRoot = function (exportedVars) {
      return new EmitterVisitorContext(exportedVars, 0);
    }, Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", { get: function () {
        return this._lines[this._lines.length - 1];
      }, enumerable: !0, configurable: !0 }), EmitterVisitorContext.prototype.isExportedVar = function (varName) {
      return this._exportedVars.indexOf(varName) !== -1;
    }, EmitterVisitorContext.prototype.println = function (from, lastPart) {
      void 0 === lastPart && (lastPart = ""), this.print(from || null, lastPart, !0);
    }, EmitterVisitorContext.prototype.lineIsEmpty = function () {
      return 0 === this._currentLine.parts.length;
    }, EmitterVisitorContext.prototype.print = function (from, part, newLine) {
      void 0 === newLine && (newLine = !1), part.length > 0 && (this._currentLine.parts.push(part), this._currentLine.srcSpans.push(from && from.sourceSpan || null)), newLine && this._lines.push(new _EmittedLine(this._indent));
    }, EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
      this.lineIsEmpty() && this._lines.pop();
    }, EmitterVisitorContext.prototype.incIndent = function () {
      this._indent++, this._currentLine.indent = this._indent;
    }, EmitterVisitorContext.prototype.decIndent = function () {
      this._indent--, this._currentLine.indent = this._indent;
    }, EmitterVisitorContext.prototype.pushClass = function (clazz) {
      this._classes.push(clazz);
    }, EmitterVisitorContext.prototype.popClass = function () {
      return this._classes.pop();
    }, Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", { get: function () {
        return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
      }, enumerable: !0, configurable: !0 }), EmitterVisitorContext.prototype.toSource = function () {
      return this.sourceLines.map(function (l) {
        return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join("") : "";
      }).join("\n");
    }, EmitterVisitorContext.prototype.toSourceMapGenerator = function (sourceFilePath, genFilePath, startsAtLine) {
      void 0 === startsAtLine && (startsAtLine = 0);for (var map = new SourceMapGenerator(genFilePath), firstOffsetMapped = !1, mapFirstOffsetIfNeeded = function () {
        firstOffsetMapped || (map.addSource(sourceFilePath, " ").addMapping(0, sourceFilePath, 0, 0), firstOffsetMapped = !0);
      }, i = 0; i < startsAtLine; i++) map.addLine(), mapFirstOffsetIfNeeded();return this.sourceLines.forEach(function (line, lineIdx) {
        map.addLine();for (var spans = line.srcSpans, parts = line.parts, col0 = line.indent * _INDENT_WITH.length, spanIdx = 0; spanIdx < spans.length && !spans[spanIdx];) col0 += parts[spanIdx].length, spanIdx++;for (spanIdx < spans.length && 0 === lineIdx && 0 === col0 ? firstOffsetMapped = !0 : mapFirstOffsetIfNeeded(); spanIdx < spans.length;) {
          var span = spans[spanIdx],
              source = span.start.file,
              sourceLine = span.start.line,
              sourceCol = span.start.col;for (map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol), col0 += parts[spanIdx].length, spanIdx++; spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx]);) col0 += parts[spanIdx].length, spanIdx++;
        }
      }), map;
    }, Object.defineProperty(EmitterVisitorContext.prototype, "sourceLines", { get: function () {
        return this._lines.length && 0 === this._lines[this._lines.length - 1].parts.length ? this._lines.slice(0, -1) : this._lines;
      }, enumerable: !0, configurable: !0 }), EmitterVisitorContext;
  }(),
      AbstractEmitterVisitor = function () {
    function AbstractEmitterVisitor(_escapeDollarInStrings) {
      this._escapeDollarInStrings = _escapeDollarInStrings;
    }return AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
      return stmt.expr.visitExpression(this, ctx), ctx.println(stmt, ";"), null;
    }, AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
      return ctx.print(stmt, "return "), stmt.value.visitExpression(this, ctx), ctx.println(stmt, ";"), null;
    }, AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) {}, AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {}, AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
      ctx.print(stmt, "if ("), stmt.condition.visitExpression(this, ctx), ctx.print(stmt, ") {");var hasElseCase = null != stmt.falseCase && stmt.falseCase.length > 0;return stmt.trueCase.length <= 1 && !hasElseCase ? (ctx.print(stmt, " "), this.visitAllStatements(stmt.trueCase, ctx), ctx.removeEmptyLastLine(), ctx.print(stmt, " ")) : (ctx.println(), ctx.incIndent(), this.visitAllStatements(stmt.trueCase, ctx), ctx.decIndent(), hasElseCase && (ctx.println(stmt, "} else {"), ctx.incIndent(), this.visitAllStatements(stmt.falseCase, ctx), ctx.decIndent())), ctx.println(stmt, "}"), null;
    }, AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {}, AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
      return ctx.print(stmt, "throw "), stmt.error.visitExpression(this, ctx), ctx.println(stmt, ";"), null;
    }, AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
      var lines = stmt.comment.split("\n");return lines.forEach(function (line) {
        ctx.println(stmt, "// " + line);
      }), null;
    }, AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {}, AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();return lineWasEmpty || ctx.print(expr, "("), ctx.print(expr, expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(expr, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();return lineWasEmpty || ctx.print(expr, "("), expr.receiver.visitExpression(this, ctx), ctx.print(expr, "["), expr.index.visitExpression(this, ctx), ctx.print(expr, "] = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(expr, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();return lineWasEmpty || ctx.print(expr, "("), expr.receiver.visitExpression(this, ctx), ctx.print(expr, "." + expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(expr, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
      expr.receiver.visitExpression(this, ctx);var name = expr.name;return null != expr.builtin && (name = this.getBuiltinMethodName(expr.builtin), null == name) ? null : (ctx.print(expr, "." + name + "("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(expr, ")"), null);
    }, AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) {}, AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
      return expr.fn.visitExpression(this, ctx), ctx.print(expr, "("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(expr, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
      var varName = ast.name;if (null != ast.builtin) switch (ast.builtin) {case BuiltinVar.Super:
          varName = "super";break;case BuiltinVar.This:
          varName = "this";break;case BuiltinVar.CatchError:
          varName = CATCH_ERROR_VAR$1.name;break;case BuiltinVar.CatchStack:
          varName = CATCH_STACK_VAR$1.name;break;default:
          throw new Error("Unknown builtin variable " + ast.builtin);}return ctx.print(ast, varName), null;
    }, AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
      return ctx.print(ast, "new "), ast.classExpr.visitExpression(this, ctx), ctx.print(ast, "("), this.visitAllExpressions(ast.args, ctx, ","), ctx.print(ast, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
      var value = ast.value;return "string" == typeof value ? ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings)) : ctx.print(ast, "" + value), null;
    }, AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {}, AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
      return ctx.print(ast, "("), ast.condition.visitExpression(this, ctx), ctx.print(ast, "? "), ast.trueCase.visitExpression(this, ctx), ctx.print(ast, ": "), ast.falseCase.visitExpression(this, ctx), ctx.print(ast, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
      return ctx.print(ast, "!"), ast.condition.visitExpression(this, ctx), null;
    }, AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {}, AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {}, AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
      var opStr;switch (ast.operator) {case BinaryOperator.Equals:
          opStr = "==";break;case BinaryOperator.Identical:
          opStr = "===";break;case BinaryOperator.NotEquals:
          opStr = "!=";break;case BinaryOperator.NotIdentical:
          opStr = "!==";break;case BinaryOperator.And:
          opStr = "&&";break;case BinaryOperator.Or:
          opStr = "||";break;case BinaryOperator.Plus:
          opStr = "+";break;case BinaryOperator.Minus:
          opStr = "-";break;case BinaryOperator.Divide:
          opStr = "/";break;case BinaryOperator.Multiply:
          opStr = "*";break;case BinaryOperator.Modulo:
          opStr = "%";break;case BinaryOperator.Lower:
          opStr = "<";break;case BinaryOperator.LowerEquals:
          opStr = "<=";break;case BinaryOperator.Bigger:
          opStr = ">";break;case BinaryOperator.BiggerEquals:
          opStr = ">=";break;default:
          throw new Error("Unknown operator " + ast.operator);}return ctx.print(ast, "("), ast.lhs.visitExpression(this, ctx), ctx.print(ast, " " + opStr + " "), ast.rhs.visitExpression(this, ctx), ctx.print(ast, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
      return ast.receiver.visitExpression(this, ctx), ctx.print(ast, "."), ctx.print(ast, ast.name), null;
    }, AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
      return ast.receiver.visitExpression(this, ctx), ctx.print(ast, "["), ast.index.visitExpression(this, ctx), ctx.print(ast, "]"), null;
    }, AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
      var useNewLine = ast.entries.length > 1;return ctx.print(ast, "[", useNewLine), ctx.incIndent(), this.visitAllExpressions(ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print(ast, "]", useNewLine), null;
    }, AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
      var _this = this,
          useNewLine = ast.entries.length > 1;return ctx.print(ast, "{", useNewLine), ctx.incIndent(), this.visitAllObjects(function (entry) {
        ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": "), entry.value.visitExpression(_this, ctx);
      }, ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print(ast, "}", useNewLine), null;
    }, AbstractEmitterVisitor.prototype.visitCommaExpr = function (ast, ctx) {
      return ctx.print(ast, "("), this.visitAllExpressions(ast.parts, ctx, ","), ctx.print(ast, ")"), null;
    }, AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
      var _this = this;void 0 === newLine && (newLine = !1), this.visitAllObjects(function (expr) {
        return expr.visitExpression(_this, ctx);
      }, expressions, ctx, separator, newLine);
    }, AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
      void 0 === newLine && (newLine = !1);for (var i = 0; i < expressions.length; i++) i > 0 && ctx.print(null, separator, newLine), handler(expressions[i]);newLine && ctx.println();
    }, AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
      var _this = this;statements.forEach(function (stmt) {
        return stmt.visitStatement(_this, ctx);
      });
    }, AbstractEmitterVisitor;
  }(),
      _debugFilePath = "/debug/lib",
      TypeScriptEmitter = function () {
    function TypeScriptEmitter(_importResolver) {
      this._importResolver = _importResolver;
    }return TypeScriptEmitter.prototype.emitStatements = function (srcFilePath, genFilePath, stmts, exportedVars, preamble) {
      var _this = this;void 0 === preamble && (preamble = "");var converter = new _TsEmitterVisitor(genFilePath, this._importResolver),
          ctx = EmitterVisitorContext.createRoot(exportedVars);converter.visitAllStatements(stmts, ctx);var preambleLines = preamble ? preamble.split("\n") : [];converter.reexports.forEach(function (reexports, exportedFilePath) {
        var reexportsCode = reexports.map(function (reexport) {
          return reexport.name + " as " + reexport.as;
        }).join(",");preambleLines.push("export {" + reexportsCode + "} from '" + _this._importResolver.fileNameToModuleName(exportedFilePath, genFilePath) + "';");
      }), converter.importsWithPrefixes.forEach(function (prefix, importedFilePath) {
        preambleLines.push("imp" + ("ort * as " + prefix + " from '" + _this._importResolver.fileNameToModuleName(importedFilePath, genFilePath) + "';"));
      });var sm = ctx.toSourceMapGenerator(srcFilePath, genFilePath, preambleLines.length).toJsComment(),
          lines = preambleLines.concat([ctx.toSource(), sm]);return sm && lines.push(""), lines.join("\n");
    }, TypeScriptEmitter;
  }(),
      _TsEmitterVisitor = function (_super) {
    function _TsEmitterVisitor(_genFilePath, _importResolver) {
      var _this = _super.call(this, !1) || this;return _this._genFilePath = _genFilePath, _this._importResolver = _importResolver, _this.typeExpression = 0, _this.importsWithPrefixes = new Map(), _this.reexports = new Map(), _this;
    }return __extends(_TsEmitterVisitor, _super), _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
      void 0 === defaultType && (defaultType = "any"), t ? (this.typeExpression++, t.visitType(this, ctx), this.typeExpression--) : ctx.print(null, defaultType);
    }, _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
      var value = ast.value;return null == value && ast.type != INFERRED_TYPE ? (ctx.print(ast, "(" + value + " as any)"), null) : _super.prototype.visitLiteralExpr.call(this, ast, ctx);
    }, _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
      0 === ast.entries.length && ctx.print(ast, "(");var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);return 0 === ast.entries.length && ctx.print(ast, " as any[])"), result;
    }, _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
      return this._visitIdentifier(ast.value, ast.typeParams, ctx), null;
    }, _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
      if (ctx.isExportedVar(stmt.name) && stmt.value instanceof ExternalExpr && !stmt.type) {
        var _a = this._resolveStaticSymbol(stmt.value.value),
            name = _a.name,
            filePath = _a.filePath,
            members = _a.members;if (0 === members.length && filePath !== this._genFilePath) {
          var reexports = this.reexports.get(filePath);return reexports || (reexports = [], this.reexports.set(filePath, reexports)), reexports.push({ name: name, as: stmt.name }), null;
        }
      }return ctx.isExportedVar(stmt.name) && ctx.print(stmt, "export "), stmt.hasModifier(StmtModifier.Final) ? ctx.print(stmt, "const") : ctx.print(stmt, "var"), ctx.print(stmt, " " + stmt.name), this._printColonType(stmt.type, ctx), ctx.print(stmt, " = "), stmt.value.visitExpression(this, ctx), ctx.println(stmt, ";"), null;
    }, _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
      return ctx.print(ast, "(<"), ast.type.visitType(this, ctx), ctx.print(ast, ">"), ast.value.visitExpression(this, ctx), ctx.print(ast, ")"), null;
    }, _TsEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
      return ctx.print(ast, "new "), this.typeExpression++, ast.classExpr.visitExpression(this, ctx), this.typeExpression--, ctx.print(ast, "("), this.visitAllExpressions(ast.args, ctx, ","), ctx.print(ast, ")"), null;
    }, _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
      var _this = this;return ctx.pushClass(stmt), ctx.isExportedVar(stmt.name) && ctx.print(stmt, "export "), ctx.print(stmt, "class " + stmt.name), null != stmt.parent && (ctx.print(stmt, " extends "), this.typeExpression++, stmt.parent.visitExpression(this, ctx), this.typeExpression--), ctx.println(stmt, " {"), ctx.incIndent(), stmt.fields.forEach(function (field) {
        return _this._visitClassField(field, ctx);
      }), null != stmt.constructorMethod && this._visitClassConstructor(stmt, ctx), stmt.getters.forEach(function (getter) {
        return _this._visitClassGetter(getter, ctx);
      }), stmt.methods.forEach(function (method) {
        return _this._visitClassMethod(method, ctx);
      }), ctx.decIndent(), ctx.println(stmt, "}"), ctx.popClass(), null;
    }, _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
      field.hasModifier(StmtModifier.Private) && ctx.print(null, "/*private*/ "), ctx.print(null, field.name), this._printColonType(field.type, ctx), ctx.println(null, ";");
    }, _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
      getter.hasModifier(StmtModifier.Private) && ctx.print(null, "private "), ctx.print(null, "get " + getter.name + "()"), this._printColonType(getter.type, ctx), ctx.println(null, " {"), ctx.incIndent(), this.visitAllStatements(getter.body, ctx), ctx.decIndent(), ctx.println(null, "}");
    }, _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
      ctx.print(stmt, "constructor("), this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(stmt, ") {"), ctx.incIndent(), this.visitAllStatements(stmt.constructorMethod.body, ctx), ctx.decIndent(), ctx.println(stmt, "}");
    }, _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
      method.hasModifier(StmtModifier.Private) && ctx.print(null, "private "), ctx.print(null, method.name + "("), this._visitParams(method.params, ctx), ctx.print(null, ")"), this._printColonType(method.type, ctx, "void"), ctx.println(null, " {"), ctx.incIndent(), this.visitAllStatements(method.body, ctx), ctx.decIndent(), ctx.println(null, "}");
    }, _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
      return ctx.print(ast, "("), this._visitParams(ast.params, ctx), ctx.print(ast, ")"), this._printColonType(ast.type, ctx, "void"), ctx.println(ast, " => {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print(ast, "}"), null;
    }, _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
      return ctx.isExportedVar(stmt.name) && ctx.print(stmt, "export "), ctx.print(stmt, "function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.print(stmt, ")"), this._printColonType(stmt.type, ctx, "void"), ctx.println(stmt, " {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println(stmt, "}"), null;
    }, _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
      ctx.println(stmt, "try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {"), ctx.incIndent();var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack", null)).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println(stmt, "}"), null;
    }, _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
      var typeStr;switch (type.name) {case BuiltinTypeName.Bool:
          typeStr = "boolean";break;case BuiltinTypeName.Dynamic:
          typeStr = "any";break;case BuiltinTypeName.Function:
          typeStr = "Function";break;case BuiltinTypeName.Number:
          typeStr = "number";break;case BuiltinTypeName.Int:
          typeStr = "number";break;case BuiltinTypeName.String:
          typeStr = "string";break;default:
          throw new Error("Unsupported builtin type " + type.name);}return ctx.print(null, typeStr), null;
    }, _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {
      return ast.value.visitExpression(this, ctx), null;
    }, _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
      return this.visitType(type.of, ctx), ctx.print(null, "[]"), null;
    }, _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
      return ctx.print(null, "{[key: string]:"), this.visitType(type.valueType, ctx), ctx.print(null, "}"), null;
    }, _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
      var name;switch (method) {case BuiltinMethod.ConcatArray:
          name = "concat";break;case BuiltinMethod.SubscribeObservable:
          name = "subscribe";break;case BuiltinMethod.Bind:
          name = "bind";break;default:
          throw new Error("Unknown builtin method: " + method);}return name;
    }, _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
      var _this = this;this.visitAllObjects(function (param) {
        ctx.print(null, param.name), _this._printColonType(param.type, ctx);
      }, params, ctx, ",");
    }, _TsEmitterVisitor.prototype._resolveStaticSymbol = function (value) {
      var reference = value.reference;if (!(reference instanceof StaticSymbol)) throw new Error("Internal error: unknown identifier " + JSON.stringify(value));var arity = this._importResolver.getTypeArity(reference) || void 0,
          importReference = this._importResolver.getImportAs(reference) || reference;return { name: importReference.name, filePath: importReference.filePath, members: importReference.members, arity: arity };
    }, _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
      var _this = this,
          _a = this._resolveStaticSymbol(value),
          name = _a.name,
          filePath = _a.filePath,
          members = _a.members,
          arity = _a.arity;if (filePath != this._genFilePath) {
        var prefix = this.importsWithPrefixes.get(filePath);null == prefix && (prefix = "import" + this.importsWithPrefixes.size, this.importsWithPrefixes.set(filePath, prefix)), ctx.print(null, prefix + ".");
      }if (members.length ? (ctx.print(null, name), ctx.print(null, "."), ctx.print(null, members.join("."))) : ctx.print(null, name), this.typeExpression > 0) {
        var suppliedParameters = typeParams && typeParams.length || 0,
            additionalParameters = (arity || 0) - suppliedParameters;if (suppliedParameters > 0 || additionalParameters > 0) {
          if (ctx.print(null, "<"), suppliedParameters > 0 && this.visitAllObjects(function (type) {
            return type.visitType(_this, ctx);
          }, typeParams, ctx, ","), additionalParameters > 0) for (var i = 0; i < additionalParameters; i++) (i > 0 || suppliedParameters > 0) && ctx.print(null, ","), ctx.print(null, "any");ctx.print(null, ">");
        }
      }
    }, _TsEmitterVisitor.prototype._printColonType = function (type, ctx, defaultType) {
      type !== INFERRED_TYPE && (ctx.print(null, ":"), this.visitType(type, ctx, defaultType));
    }, _TsEmitterVisitor;
  }(AbstractEmitterVisitor),
      SECURITY_SCHEMA = {};registerContext(_angular_core.SecurityContext.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]), registerContext(_angular_core.SecurityContext.STYLE, ["*|style"]), registerContext(_angular_core.SecurityContext.URL, ["*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "img|srcset", "input|src", "ins|cite", "q|cite", "source|src", "source|srcset", "track|src", "video|poster", "video|src"]), registerContext(_angular_core.SecurityContext.RESOURCE_URL, ["applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src"]); /**
license
opyright Google Inc. All Rights Reserved.

se of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.io/license

  var BOOLEAN = "boolean",
      NUMBER = "number",
      STRING = "string",
      OBJECT = "object",
      SCHEMA = ["[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop", "[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume", ":svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username", "area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username", "audio^media|", "br^[HTMLElement]|clear", "base^[HTMLElement]|href,target", "body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas^[HTMLElement]|#height,#width", "content^[HTMLElement]|select", "dl^[HTMLElement]|!compact", "datalist^[HTMLElement]|", "details^[HTMLElement]|!open", "dialog^[HTMLElement]|!open,returnValue", "dir^[HTMLElement]|!compact", "div^[HTMLElement]|align", "embed^[HTMLElement]|align,height,name,src,type,width", "fieldset^[HTMLElement]|!disabled,name", "font^[HTMLElement]|color,face,size", "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr^[HTMLElement]|align,color,!noShade,size,width", "head^[HTMLElement]|", "h1,h2,h3,h4,h5,h6^[HTMLElement]|align", "html^[HTMLElement]|version", "iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width", "img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width", "input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name", "li^[HTMLElement]|type,#value", "label^[HTMLElement]|htmlFor", "legend^[HTMLElement]|align", "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type", "map^[HTMLElement]|name", "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu^[HTMLElement]|!compact", "meta^[HTMLElement]|content,httpEquiv,name,scheme", "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value", "ins,del^[HTMLElement]|cite,dateTime", "ol^[HTMLElement]|!compact,!reversed,#start,type", "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup^[HTMLElement]|!disabled,label", "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value", "output^[HTMLElement]|defaultValue,%htmlFor,name,value", "p^[HTMLElement]|align", "param^[HTMLElement]|name,type,value,valueType", "picture^[HTMLElement]|", "pre^[HTMLElement]|#width", "progress^[HTMLElement]|#max,#value", "q,blockquote,cite^[HTMLElement]|", "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type", "select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "shadow^[HTMLElement]|", "source^[HTMLElement]|media,sizes,src,srcset,type", "span^[HTMLElement]|", "style^[HTMLElement]|!disabled,media,type", "caption^[HTMLElement]|align", "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width", "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign", "template^[HTMLElement]|", "textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "title^[HTMLElement]|text", "track^[HTMLElement]|!default,kind,label,src,srclang", "ul^[HTMLElement]|!compact,type", "unknown^[HTMLElement]|", "video^media|#height,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:cursor^:svg:|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan", "data^[HTMLElement]|value", "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default", "summary^[HTMLElement]|", "time^[HTMLElement]|dateTime"],
      _ATTR_TO_PROP = { class: "className", for: "htmlFor", formaction: "formAction", innerHtml: "innerHTML", readonly: "readOnly", tabindex: "tabIndex" },
      DomElementSchemaRegistry = function (_super) {
    function DomElementSchemaRegistry() {
      var _this = _super.call(this) || this;return _this._schema = {}, SCHEMA.forEach(function (encodedType) {
        var type = {},
            _a = encodedType.split("|"),
            strType = _a[0],
            strProperties = _a[1],
            properties = strProperties.split(","),
            _b = strType.split("^"),
            typeNames = _b[0],
            superName = _b[1];typeNames.split(",").forEach(function (tag) {
          return _this._schema[tag.toLowerCase()] = type;
        });var superType = superName && _this._schema[superName.toLowerCase()];superType && Object.keys(superType).forEach(function (prop) {
          type[prop] = superType[prop];
        }), properties.forEach(function (property) {
          if (property.length > 0) switch (property[0]) {case "*":
              break;case "!":
              type[property.substring(1)] = BOOLEAN;break;case "#":
              type[property.substring(1)] = NUMBER;break;case "%":
              type[property.substring(1)] = OBJECT;break;default:
              type[property] = STRING;}
        });
      }), _this;
    }return __extends(DomElementSchemaRegistry, _super), DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
      if (schemaMetas.some(function (schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) return !0;if (tagName.indexOf("-") > -1) {
        if (isNgContainer(tagName) || isNgContent(tagName)) return !1;if (schemaMetas.some(function (schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) return !0;
      }var elementProperties = this._schema[tagName.toLowerCase()] || this._schema.unknown;return !!elementProperties[propName];
    }, DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
      if (schemaMetas.some(function (schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) return !0;if (tagName.indexOf("-") > -1) {
        if (isNgContainer(tagName) || isNgContent(tagName)) return !0;if (schemaMetas.some(function (schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) return !0;
      }return !!this._schema[tagName.toLowerCase()];
    }, DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
      isAttribute && (propName = this.getMappedPropName(propName)), tagName = tagName.toLowerCase(), propName = propName.toLowerCase();var ctx = SECURITY_SCHEMA[tagName + "|" + propName];return ctx ? ctx : (ctx = SECURITY_SCHEMA["*|" + propName], ctx ? ctx : _angular_core.SecurityContext.NONE);
    }, DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
      return _ATTR_TO_PROP[propName] || propName;
    }, DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () {
      return "ng-component";
    }, DomElementSchemaRegistry.prototype.validateProperty = function (name) {
      if (name.toLowerCase().startsWith("on")) {
        var msg = "Binding to event property '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module.";return { error: !0, msg: msg };
      }return { error: !1 };
    }, DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
      if (name.toLowerCase().startsWith("on")) {
        var msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " + ("please use (" + name.slice(2) + ")=...");return { error: !0, msg: msg };
      }return { error: !1 };
    }, DomElementSchemaRegistry.prototype.allKnownElementNames = function () {
      return Object.keys(this._schema);
    }, DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
      return dashCaseToCamelCase(propName);
    }, DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
      var unit = "",
          strVal = val.toString().trim(),
          errorMsg = null;if (_isPixelDimensionStyle(camelCaseProp) && 0 !== val && "0" !== val) if ("number" == typeof val) unit = "px";else {
        var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);valAndSuffixMatch && 0 == valAndSuffixMatch[1].length && (errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val);
      }return { error: errorMsg, value: strVal + unit };
    }, DomElementSchemaRegistry;
  }(ElementSchemaRegistry);DomElementSchemaRegistry.decorators = [{ type: CompilerInjectable }], DomElementSchemaRegistry.ctorParameters = function () {
    return [];
  };var ShadowCss = function () {
    function ShadowCss() {
      this.strictStyling = !0;
    }return ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
      void 0 === hostSelector && (hostSelector = "");var sourceMappingUrl = extractSourceMappingUrl(cssText);return cssText = stripComments(cssText), cssText = this._insertDirectives(cssText), this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
    }, ShadowCss.prototype._insertDirectives = function (cssText) {
      return cssText = this._insertPolyfillDirectivesInCssText(cssText), this._insertPolyfillRulesInCssText(cssText);
    }, ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
      return cssText.replace(_cssContentNextSelectorRe, function () {
        for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];return m[2] + "{";
      });
    }, ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
      return cssText.replace(_cssContentRuleRe, function () {
        for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];var rule = m[0].replace(m[1], "").replace(m[2], "");return m[4] + rule;
      });
    }, ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
      var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);return cssText = this._insertPolyfillHostInCssText(cssText), cssText = this._convertColonHost(cssText), cssText = this._convertColonHostContext(cssText), cssText = this._convertShadowDOMSelectors(cssText), scopeSelector && (cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector)), cssText = cssText + "\n" + unscopedRules, cssText.trim();
    }, ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
      var m,
          r = "";for (_cssContentUnscopedRuleRe.lastIndex = 0; null !== (m = _cssContentUnscopedRuleRe.exec(cssText));) {
        var rule = m[0].replace(m[2], "").replace(m[1], m[4]);r += rule + "\n\n";
      }return r;
    }, ShadowCss.prototype._convertColonHost = function (cssText) {
      return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
    }, ShadowCss.prototype._convertColonHostContext = function (cssText) {
      return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
    }, ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
      return cssText.replace(regExp, function () {
        for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];if (m[2]) {
          for (var parts = m[2].split(","), r = [], i = 0; i < parts.length; i++) {
            var p = parts[i].trim();if (!p) break;r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
          }return r.join(",");
        }return _polyfillHostNoCombinator + m[3];
      });
    }, ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
      return part.indexOf(_polyfillHost) > -1 ? this._colonHostPartReplacer(host, part, suffix) : host + part + suffix + ", " + part + " " + host + suffix;
    }, ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
      return host + part.replace(_polyfillHost, "") + suffix;
    }, ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
      return _shadowDOMSelectorsRe.reduce(function (result, pattern) {
        return result.replace(pattern, " ");
      }, cssText);
    }, ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
      var _this = this;return processRules(cssText, function (rule) {
        var selector = rule.selector,
            content = rule.content;return "@" != rule.selector[0] ? selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling) : (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) && (content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector)), new CssRule(selector, content);
      });
    }, ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
      var _this = this;return selector.split(",").map(function (part) {
        return part.trim().split(_shadowDeepSelectors);
      }).map(function (deepParts) {
        var shallowPart = deepParts[0],
            otherParts = deepParts.slice(1),
            applyScope = function (shallowPart) {
          return _this._selectorNeedsScoping(shallowPart, scopeSelector) ? strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector) : shallowPart;
        };return [applyScope(shallowPart)].concat(otherParts).join(" ");
      }).join(", ");
    }, ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
      var re = this._makeScopeMatcher(scopeSelector);return !re.test(selector);
    }, ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
      var lre = /\[/g,
          rre = /\]/g;return scopeSelector = scopeSelector.replace(lre, "\\[").replace(rre, "\\]"), new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
    }, ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
      return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
    }, ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
      if (_polyfillHostRe.lastIndex = 0, _polyfillHostRe.test(selector)) {
        var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;return selector.replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
          return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
            return before + replaceBy_1 + colon + after;
          });
        }).replace(_polyfillHostRe, replaceBy_1 + " ");
      }return scopeSelector + " " + selector;
    }, ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
      var _this = this,
          isRe = /\[is=([^\]]*)\]/g;scopeSelector = scopeSelector.replace(isRe, function (_) {
        for (var parts = [], _i = 1; _i < arguments.length; _i++) parts[_i - 1] = arguments[_i];return parts[0];
      });var attrName = "[" + scopeSelector + "]",
          _scopeSelectorPart = function (p) {
        var scopedP = p.trim();if (!scopedP) return "";if (p.indexOf(_polyfillHostNoCombinator) > -1) scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);else {
          var t = p.replace(_polyfillHostRe, "");if (t.length > 0) {
            var matches = t.match(/([^:]*)(:*)(.*)/);matches && (scopedP = matches[1] + attrName + matches[2] + matches[3]);
          }
        }return scopedP;
      },
          safeContent = new SafeSelector(selector);selector = safeContent.content();for (var res, scopedSelector = "", startIndex = 0, sep = /( |>|\+|~(?!=))\s*/g, scopeAfter = selector.indexOf(_polyfillHostNoCombinator); null !== (res = sep.exec(selector));) {
        var separator = res[1],
            part = selector.slice(startIndex, res.index).trim(),
            scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;scopedSelector += scopedPart + " " + separator + " ", startIndex = sep.lastIndex;
      }return scopedSelector += _scopeSelectorPart(selector.substring(startIndex)), safeContent.restore(scopedSelector);
    }, ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
      return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
    }, ShadowCss;
  }(),
      SafeSelector = function () {
    function SafeSelector(selector) {
      var _this = this;this.placeholders = [], this.index = 0, selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
        var replaceBy = "__ph-" + _this.index + "__";return _this.placeholders.push(keep), _this.index++, replaceBy;
      }), this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
        var replaceBy = "__ph-" + _this.index + "__";return _this.placeholders.push(exp), _this.index++, pseudo + replaceBy;
      });
    }return SafeSelector.prototype.restore = function (content) {
      var _this = this;return content.replace(/__ph-(\d+)__/g, function (ph, index) {
        return _this.placeholders[+index];
      });
    }, SafeSelector.prototype.content = function () {
      return this._content;
    }, SafeSelector;
  }(),
      _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim,
      _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim,
      _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim,
      _polyfillHost = "-shadowcsshost",
      _polyfillHostContext = "-shadowcsscontext",
      _parenSuffix = ")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",
      _cssColonHostRe = new RegExp("(" + _polyfillHost + _parenSuffix, "gim"),
      _cssColonHostContextRe = new RegExp("(" + _polyfillHostContext + _parenSuffix, "gim"),
      _polyfillHostNoCombinator = _polyfillHost + "-no-combinator",
      _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/,
      _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g],
      _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g,
      _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$",
      _polyfillHostRe = /-shadowcsshost/gim,
      _colonHostRe = /:host/gim,
      _colonHostContextRe = /:host-context/gim,
      _commentRe = /\/\*\s*[\s\S]*?\*\//g,
      _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//,
      _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g,
      _curlyRe = /([{}])/g,
      OPEN_CURLY = "{",
      CLOSE_CURLY = "}",
      BLOCK_PLACEHOLDER = "%BLOCK%",
      CssRule = function () {
    function CssRule(selector, content) {
      this.selector = selector, this.content = content;
    }return CssRule;
  }(),
      StringWithEscapedBlocks = function () {
    function StringWithEscapedBlocks(escapedString, blocks) {
      this.escapedString = escapedString, this.blocks = blocks;
    }return StringWithEscapedBlocks;
  }(),
      COMPONENT_VARIABLE = "%COMP%",
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE,
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE,
      StylesCompileDependency = function () {
    function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
      this.name = name, this.moduleUrl = moduleUrl, this.isShimmed = isShimmed, this.valuePlaceholder = valuePlaceholder;
    }return StylesCompileDependency;
  }(),
      StylesCompileResult = function () {
    function StylesCompileResult(componentStylesheet, externalStylesheets) {
      this.componentStylesheet = componentStylesheet, this.externalStylesheets = externalStylesheets;
    }return StylesCompileResult;
  }(),
      CompiledStylesheet = function () {
    function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
      this.statements = statements, this.stylesVar = stylesVar, this.dependencies = dependencies, this.isShimmed = isShimmed, this.meta = meta;
    }return CompiledStylesheet;
  }(),
      StyleCompiler = function () {
    function StyleCompiler(_urlResolver) {
      this._urlResolver = _urlResolver, this._shadowCss = new ShadowCss();
    }return StyleCompiler.prototype.compileComponent = function (comp) {
      var _this = this,
          template = comp.template,
          externalStylesheets = [],
          componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({ styles: template.styles, styleUrls: template.styleUrls, moduleUrl: identifierModuleUrl(comp.type) }), !0);return template.externalStylesheets.forEach(function (stylesheetMeta) {
        var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, !1);externalStylesheets.push(compiledStylesheet);
      }), new StylesCompileResult(componentStylesheet, externalStylesheets);
    }, StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
      for (var _this = this, shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated, styleExpressions = stylesheet.styles.map(function (plainStyle) {
        return literal(_this._shimIfNeeded(plainStyle, shim));
      }), dependencies = [], i = 0; i < stylesheet.styleUrls.length; i++) {
        var identifier = { reference: null };dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier)), styleExpressions.push(new ExternalExpr(identifier));
      }var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null),
          stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
    }, StyleCompiler.prototype._shimIfNeeded = function (style$$1, shim) {
      return shim ? this._shadowCss.shimCssText(style$$1, CONTENT_ATTR, HOST_ATTR) : style$$1;
    }, StyleCompiler;
  }();StyleCompiler.decorators = [{ type: CompilerInjectable }], StyleCompiler.ctorParameters = function () {
    return [{ type: UrlResolver }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var EventHandlerVars = function () {
    function EventHandlerVars() {}return EventHandlerVars;
  }();EventHandlerVars.event = variable("$event");var ConvertActionBindingResult = function () {
    function ConvertActionBindingResult(stmts, allowDefault) {
      this.stmts = stmts, this.allowDefault = allowDefault;
    }return ConvertActionBindingResult;
  }(),
      ConvertPropertyBindingResult = function () {
    function ConvertPropertyBindingResult(stmts, currValExpr) {
      this.stmts = stmts, this.currValExpr = currValExpr;
    }return ConvertPropertyBindingResult;
  }(),
      _Mode = {};_Mode.Statement = 0, _Mode.Expression = 1, _Mode[_Mode.Statement] = "Statement", _Mode[_Mode.Expression] = "Expression";var _BuiltinAstConverter = function (_super) {
    function _BuiltinAstConverter(_converterFactory) {
      var _this = _super.call(this) || this;return _this._converterFactory = _converterFactory, _this;
    }return __extends(_BuiltinAstConverter, _super), _BuiltinAstConverter.prototype.visitPipe = function (ast, context) {
      var _this = this,
          args = [ast.exp].concat(ast.args).map(function (ast) {
        return ast.visit(_this, context);
      });return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));
    }, _BuiltinAstConverter.prototype.visitLiteralArray = function (ast, context) {
      var _this = this,
          args = ast.expressions.map(function (ast) {
        return ast.visit(_this, context);
      });return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
    }, _BuiltinAstConverter.prototype.visitLiteralMap = function (ast, context) {
      var _this = this,
          args = ast.values.map(function (ast) {
        return ast.visit(_this, context);
      });return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));
    }, _BuiltinAstConverter;
  }(AstTransformer),
      _AstToIrVisitor = function () {
    function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId) {
      this._localResolver = _localResolver, this._implicitReceiver = _implicitReceiver, this.bindingId = bindingId, this._nodeMap = new Map(), this._resultMap = new Map(), this._currentTemporary = 0, this.temporaryCount = 0;
    }return _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
      var op;switch (ast.operation) {case "+":
          op = BinaryOperator.Plus;break;case "-":
          op = BinaryOperator.Minus;break;case "*":
          op = BinaryOperator.Multiply;break;case "/":
          op = BinaryOperator.Divide;break;case "%":
          op = BinaryOperator.Modulo;break;case "&&":
          op = BinaryOperator.And;break;case "||":
          op = BinaryOperator.Or;break;case "==":
          op = BinaryOperator.Equals;break;case "!=":
          op = BinaryOperator.NotEquals;break;case "===":
          op = BinaryOperator.Identical;break;case "!==":
          op = BinaryOperator.NotIdentical;break;case "<":
          op = BinaryOperator.Lower;break;case ">":
          op = BinaryOperator.Bigger;break;case "<=":
          op = BinaryOperator.LowerEquals;break;case ">=":
          op = BinaryOperator.BiggerEquals;break;default:
          throw new Error("Unsupported operation " + ast.operation);}return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
      return ensureStatementMode(mode, ast), this.visitAll(ast.expressions, mode);
    }, _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
      var value = this.visit(ast.condition, _Mode.Expression);return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
      throw new Error("Illegal state: Pipes should have been converted into functions. Pipe: " + ast.name);
    }, _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
      var fnResult,
          convertedArgs = this.visitAll(ast.args, _Mode.Expression);return fnResult = ast instanceof BuiltinFunctionCall ? ast.converter(convertedArgs) : this.visit(ast.target, _Mode.Expression).callFn(convertedArgs), convertToStatementIfNeeded(mode, fnResult);
    }, _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
      return ensureExpressionMode(mode, ast), this._implicitReceiver;
    }, _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
      ensureExpressionMode(mode, ast);for (var args = [literal(ast.expressions.length)], i = 0; i < ast.strings.length - 1; i++) args.push(literal(ast.strings[i])), args.push(this.visit(ast.expressions[i], _Mode.Expression));return args.push(literal(ast.strings[ast.strings.length - 1])), ast.expressions.length <= 9 ? importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(createIdentifier(Identifiers.interpolate)).callFn([args[0], literalArr(args.slice(1))]);
    }, _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);return leftMostSafe ? this.convertSafeAccess(ast, leftMostSafe, mode) : convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
      var obj = this.visit(ast.obj, _Mode.Expression),
          key = this.visit(ast.key, _Mode.Expression),
          value = this.visit(ast.value, _Mode.Expression);return convertToStatementIfNeeded(mode, obj.key(key).set(value));
    }, _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
      throw new Error("Illegal State: literal arrays should have been converted into functions");
    }, _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
      throw new Error("Illegal State: literal maps should have been converted into functions");
    }, _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
      return convertToStatementIfNeeded(mode, literal(ast.value));
    }, _AstToIrVisitor.prototype._getLocal = function (name) {
      return this._localResolver.getLocal(name);
    }, _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);if (leftMostSafe) return this.convertSafeAccess(ast, leftMostSafe, mode);var args = this.visitAll(ast.args, _Mode.Expression),
          result = null,
          receiver = this.visit(ast.receiver, _Mode.Expression);if (receiver === this._implicitReceiver) {
        var varExpr = this._getLocal(ast.name);varExpr && (result = varExpr.callFn(args));
      }return null == result && (result = receiver.callMethod(ast.name, args)), convertToStatementIfNeeded(mode, result);
    }, _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
      return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);if (leftMostSafe) return this.convertSafeAccess(ast, leftMostSafe, mode);var result = null,
          receiver = this.visit(ast.receiver, _Mode.Expression);return receiver === this._implicitReceiver && (result = this._getLocal(ast.name)), null == result && (result = receiver.prop(ast.name)), convertToStatementIfNeeded(mode, result);
    }, _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
      var receiver = this.visit(ast.receiver, _Mode.Expression);if (receiver === this._implicitReceiver) {
        var varExpr = this._getLocal(ast.name);if (varExpr) throw new Error("Cannot assign to a reference or variable!");
      }return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    }, _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    }, _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
      var _this = this;return asts.map(function (ast) {
        return _this.visit(ast, mode);
      });
    }, _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
      throw new Error("Quotes are not supported for evaluation!\n        Statement: " + ast.uninterpretedExpression + " located at " + ast.location);
    }, _AstToIrVisitor.prototype.visit = function (ast, mode) {
      var result = this._resultMap.get(ast);return result ? result : (this._nodeMap.get(ast) || ast).visit(this, mode);
    }, _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
      var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression),
          temporary = void 0;this.needsTemporary(leftMostSafe.receiver) && (temporary = this.allocateTemporary(), guardedExpression = temporary.set(guardedExpression), this._resultMap.set(leftMostSafe.receiver, temporary));var condition = guardedExpression.isBlank();leftMostSafe instanceof SafeMethodCall ? this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args)) : this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));var access = this.visit(ast, _Mode.Expression);return this._nodeMap.delete(leftMostSafe), temporary && this.releaseTemporary(temporary), convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
    }, _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
      var _this = this,
          visit = function (visitor, ast) {
        return (_this._nodeMap.get(ast) || ast).visit(visitor);
      };return ast.visit({ visitBinary: function (ast) {
          return null;
        }, visitChain: function (ast) {
          return null;
        }, visitConditional: function (ast) {
          return null;
        }, visitFunctionCall: function (ast) {
          return null;
        }, visitImplicitReceiver: function (ast) {
          return null;
        }, visitInterpolation: function (ast) {
          return null;
        }, visitKeyedRead: function (ast) {
          return visit(this, ast.obj);
        }, visitKeyedWrite: function (ast) {
          return null;
        }, visitLiteralArray: function (ast) {
          return null;
        }, visitLiteralMap: function (ast) {
          return null;
        }, visitLiteralPrimitive: function (ast) {
          return null;
        }, visitMethodCall: function (ast) {
          return visit(this, ast.receiver);
        }, visitPipe: function (ast) {
          return null;
        }, visitPrefixNot: function (ast) {
          return null;
        }, visitPropertyRead: function (ast) {
          return visit(this, ast.receiver);
        }, visitPropertyWrite: function (ast) {
          return null;
        }, visitQuote: function (ast) {
          return null;
        }, visitSafeMethodCall: function (ast) {
          return visit(this, ast.receiver) || ast;
        }, visitSafePropertyRead: function (ast) {
          return visit(this, ast.receiver) || ast;
        } });
    }, _AstToIrVisitor.prototype.needsTemporary = function (ast) {
      var _this = this,
          visit = function (visitor, ast) {
        return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
      },
          visitSome = function (visitor, ast) {
        return ast.some(function (ast) {
          return visit(visitor, ast);
        });
      };return ast.visit({ visitBinary: function (ast) {
          return visit(this, ast.left) || visit(this, ast.right);
        }, visitChain: function (ast) {
          return !1;
        }, visitConditional: function (ast) {
          return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
        }, visitFunctionCall: function (ast) {
          return !0;
        }, visitImplicitReceiver: function (ast) {
          return !1;
        }, visitInterpolation: function (ast) {
          return visitSome(this, ast.expressions);
        }, visitKeyedRead: function (ast) {
          return !1;
        }, visitKeyedWrite: function (ast) {
          return !1;
        }, visitLiteralArray: function (ast) {
          return !0;
        }, visitLiteralMap: function (ast) {
          return !0;
        }, visitLiteralPrimitive: function (ast) {
          return !1;
        }, visitMethodCall: function (ast) {
          return !0;
        }, visitPipe: function (ast) {
          return !0;
        }, visitPrefixNot: function (ast) {
          return visit(this, ast.expression);
        }, visitPropertyRead: function (ast) {
          return !1;
        }, visitPropertyWrite: function (ast) {
          return !1;
        }, visitQuote: function (ast) {
          return !1;
        }, visitSafeMethodCall: function (ast) {
          return !0;
        }, visitSafePropertyRead: function (ast) {
          return !1;
        } });
    }, _AstToIrVisitor.prototype.allocateTemporary = function () {
      var tempNumber = this._currentTemporary++;return this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount), new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
    }, _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
      if (this._currentTemporary--, temporary.name != temporaryName(this.bindingId, this._currentTemporary)) throw new Error("Temporary " + temporary.name + " released out of order");
    }, _AstToIrVisitor;
  }(),
      DefaultLocalResolver = function () {
    function DefaultLocalResolver() {}return DefaultLocalResolver.prototype.getLocal = function (name) {
      return name === EventHandlerVars.event.name ? EventHandlerVars.event : null;
    }, DefaultLocalResolver;
  }(),
      BuiltinFunctionCall = function (_super) {
    function BuiltinFunctionCall(span, args, converter) {
      var _this = _super.call(this, span, null, args) || this;return _this.args = args, _this.converter = converter, _this;
    }return __extends(BuiltinFunctionCall, _super), BuiltinFunctionCall;
  }(FunctionCall),
      CLASS_ATTR$1 = "class",
      STYLE_ATTR = "style",
      IMPLICIT_TEMPLATE_VAR = "$implicit",
      ViewCompileResult = function () {
    function ViewCompileResult(statements, viewClassVar, rendererTypeVar) {
      this.statements = statements, this.viewClassVar = viewClassVar, this.rendererTypeVar = rendererTypeVar;
    }return ViewCompileResult;
  }(),
      ViewCompiler = function () {
    function ViewCompiler(_genConfigNext, _schemaRegistry) {
      this._genConfigNext = _genConfigNext, this._schemaRegistry = _schemaRegistry;
    }return ViewCompiler.prototype.compileComponent = function (component, template, styles, usedPipes) {
      var embeddedViewCount = 0,
          staticQueryIds = findStaticQueryIds(template),
          statements = [],
          renderComponentVarName = void 0;if (!component.isHost) {
        var template_1 = component.template,
            customRenderData = [];template_1.animations && template_1.animations.length && customRenderData.push(new LiteralMapEntry("animation", convertValueToOutputAst(template_1.animations), !0));var renderComponentVar = variable(rendererTypeName(component.type.reference));renderComponentVarName = renderComponentVar.name, statements.push(renderComponentVar.set(importExpr(createIdentifier(Identifiers.createRendererType2)).callFn([new LiteralMapExpr([new LiteralMapEntry("encapsulation", literal(template_1.encapsulation)), new LiteralMapEntry("styles", styles), new LiteralMapEntry("data", new LiteralMapExpr(customRenderData))])])).toDeclStmt(importType(createIdentifier(Identifiers.RendererType2)), [StmtModifier.Final]));
      }var viewBuilderFactory = function (parent) {
        var embeddedViewIndex = embeddedViewCount++;return new ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);
      },
          visitor = viewBuilderFactory(null);return visitor.visitAll([], template), statements.push.apply(statements, visitor.build()), new ViewCompileResult(statements, visitor.viewName, renderComponentVarName);
    }, ViewCompiler;
  }();ViewCompiler.decorators = [{ type: CompilerInjectable }], ViewCompiler.ctorParameters = function () {
    return [{ type: CompilerConfig }, { type: ElementSchemaRegistry }];
  };var LOG_VAR = variable("l"),
      VIEW_VAR = variable("v"),
      CHECK_VAR = variable("ck"),
      COMP_VAR = variable("co"),
      EVENT_NAME_VAR = variable("en"),
      ALLOW_DEFAULT_VAR = variable("ad"),
      ViewBuilder = function () {
    function ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {
      this.parent = parent, this.component = component, this.embeddedViewIndex = embeddedViewIndex, this.usedPipes = usedPipes, this.staticQueryIds = staticQueryIds, this.viewBuilderFactory = viewBuilderFactory, this.nodes = [], this.purePipeNodeIndices = Object.create(null), this.refNodeIndices = Object.create(null), this.variables = [], this.children = [], this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : importType(this.component.type);
    }return Object.defineProperty(ViewBuilder.prototype, "viewName", { get: function () {
        return viewClassName(this.component.type.reference, this.embeddedViewIndex);
      }, enumerable: !0, configurable: !0 }), ViewBuilder.prototype.visitAll = function (variables, astNodes) {
      var _this = this;if (this.variables = variables, this.parent || this.usedPipes.forEach(function (pipe) {
        pipe.pure && (_this.purePipeNodeIndices[pipe.name] = _this._createPipe(null, pipe));
      }), !this.parent) {
        var queryIds_1 = staticViewQueryIds(this.staticQueryIds);this.component.viewQueries.forEach(function (query, queryIndex) {
          var queryId = queryIndex + 1,
              bindingType = query.first ? 0 : 1,
              flags = 134217728 | calcStaticDynamicQueryFlags(queryIds_1, queryId, query.first);_this.nodes.push(function () {
            return { sourceSpan: null, nodeFlags: flags, nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])]) };
          });
        });
      }templateVisitAll(this, astNodes), this.parent && (0 === astNodes.length || needsAdditionalRootNode(astNodes)) && this.nodes.push(function () {
        return { sourceSpan: null, nodeFlags: 1, nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([literal(0), NULL_EXPR, NULL_EXPR, literal(0)]) };
      });
    }, ViewBuilder.prototype.build = function (targetStatements) {
      void 0 === targetStatements && (targetStatements = []), this.children.forEach(function (child) {
        return child.build(targetStatements);
      });var _a = this._createNodeExpressions(),
          updateRendererStmts = _a.updateRendererStmts,
          updateDirectivesStmts = _a.updateDirectivesStmts,
          nodeDefExprs = _a.nodeDefExprs,
          updateRendererFn = this._createUpdateFn(updateRendererStmts),
          updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts),
          viewFlags = 0;this.parent || this.component.changeDetection !== _angular_core.ChangeDetectionStrategy.OnPush || (viewFlags |= 2);var viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(LOG_VAR.name)], [new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([literal(viewFlags), literalArr(nodeDefExprs), updateDirectivesFn, updateRendererFn]))], importType(createIdentifier(Identifiers.ViewDefinition)));return targetStatements.push(viewFactory), targetStatements;
    }, ViewBuilder.prototype._createUpdateFn = function (updateStmts) {
      var updateFn;if (updateStmts.length > 0) {
        var preStmts = [];!this.component.isHost && findReadVarNames(updateStmts).has(COMP_VAR.name) && preStmts.push(COMP_VAR.set(VIEW_VAR.prop("component")).toDeclStmt(this.compType)), updateFn = fn([new FnParam(CHECK_VAR.name, INFERRED_TYPE), new FnParam(VIEW_VAR.name, INFERRED_TYPE)], preStmts.concat(updateStmts), INFERRED_TYPE);
      } else updateFn = NULL_EXPR;return updateFn;
    }, ViewBuilder.prototype.visitNgContent = function (ast, context) {
      this.nodes.push(function () {
        return { sourceSpan: ast.sourceSpan, nodeFlags: 8, nodeDef: importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([literal(ast.ngContentIndex), literal(ast.index)]) };
      });
    }, ViewBuilder.prototype.visitText = function (ast, context) {
      this.nodes.push(function () {
        return { sourceSpan: ast.sourceSpan, nodeFlags: 2, nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([literal(ast.ngContentIndex), literalArr([literal(ast.value)])]) };
      });
    }, ViewBuilder.prototype.visitBoundText = function (ast, context) {
      var _this = this,
          nodeIndex = this.nodes.length;this.nodes.push(null);var astWithSource = ast.value,
          inter = astWithSource.ast,
          updateRendererExpressions = inter.expressions.map(function (expr, bindingIndex) {
        return _this._preprocessUpdateExpression({ nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr });
      });this.nodes[nodeIndex] = function () {
        return { sourceSpan: ast.sourceSpan, nodeFlags: 2, nodeDef: importExpr(createIdentifier(Identifiers.textDef)).callFn([literal(ast.ngContentIndex), literalArr(inter.strings.map(function (s) {
            return literal(s);
          }))]), updateRenderer: updateRendererExpressions };
      };
    }, ViewBuilder.prototype.visitEmbeddedTemplate = function (ast, context) {
      var _this = this,
          nodeIndex = this.nodes.length;this.nodes.push(null);var _a = this._visitElementOrTemplate(nodeIndex, ast),
          flags = _a.flags,
          queryMatchesExpr = _a.queryMatchesExpr,
          hostEvents = _a.hostEvents,
          childVisitor = this.viewBuilderFactory(this);this.children.push(childVisitor), childVisitor.visitAll(ast.variables, ast.children);var childCount = this.nodes.length - nodeIndex - 1;this.nodes[nodeIndex] = function () {
        return { sourceSpan: ast.sourceSpan, nodeFlags: 1 | flags, nodeDef: importExpr(createIdentifier(Identifiers.anchorDef)).callFn([literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), _this._createElementHandleEventFn(nodeIndex, hostEvents), variable(childVisitor.viewName)]) };
      };
    }, ViewBuilder.prototype.visitElement = function (ast, context) {
      var _this = this,
          nodeIndex = this.nodes.length;this.nodes.push(null);var elName = isNgContainer(ast.name) ? null : ast.name,
          _a = this._visitElementOrTemplate(nodeIndex, ast),
          flags = _a.flags,
          usedEvents = _a.usedEvents,
          queryMatchesExpr = _a.queryMatchesExpr,
          dirHostBindings = _a.hostBindings,
          hostEvents = _a.hostEvents,
          inputDefs = [],
          updateRendererExpressions = [],
          outputDefs = [];if (elName) {
        var hostBindings = ast.inputs.map(function (inputAst) {
          return { context: COMP_VAR, inputAst: inputAst, dirAst: null };
        }).concat(dirHostBindings);hostBindings.length && (updateRendererExpressions = hostBindings.map(function (hostBinding, bindingIndex) {
          return _this._preprocessUpdateExpression({ context: hostBinding.context, nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: hostBinding.inputAst.sourceSpan, value: hostBinding.inputAst.value });
        }), inputDefs = hostBindings.map(function (hostBinding) {
          return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst);
        })), outputDefs = usedEvents.map(function (_a) {
          var target = _a[0],
              eventName = _a[1];return literalArr([literal(target), literal(eventName)]);
        });
      }templateVisitAll(this, ast.children);var childCount = this.nodes.length - nodeIndex - 1,
          compAst = ast.directives.find(function (dirAst) {
        return dirAst.directive.isComponent;
      }),
          compRendererType = NULL_EXPR,
          compView = NULL_EXPR;compAst && (compView = importExpr({ reference: compAst.directive.componentViewType }), compRendererType = importExpr({ reference: compAst.directive.rendererType })), this.nodes[nodeIndex] = function () {
        return { sourceSpan: ast.sourceSpan, nodeFlags: 1 | flags, nodeDef: importExpr(createIdentifier(Identifiers.elementDef)).callFn([literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), literal(elName), elName ? fixedAttrsDef(ast) : NULL_EXPR, inputDefs.length ? literalArr(inputDefs) : NULL_EXPR, outputDefs.length ? literalArr(outputDefs) : NULL_EXPR, _this._createElementHandleEventFn(nodeIndex, hostEvents), compView, compRendererType]), updateRenderer: updateRendererExpressions };
      };
    }, ViewBuilder.prototype._visitElementOrTemplate = function (nodeIndex, ast) {
      var _this = this,
          flags = 0;ast.hasViewContainer && (flags |= 16777216);var usedEvents = new Map();ast.outputs.forEach(function (event) {
        var _a = elementEventNameAndTarget(event, null),
            name = _a.name,
            target = _a.target;usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);
      }), ast.directives.forEach(function (dirAst) {
        dirAst.hostEvents.forEach(function (event) {
          var _a = elementEventNameAndTarget(event, dirAst),
              name = _a.name,
              target = _a.target;usedEvents.set(_angular_core.ɵelementEventFullName(target, name), [target, name]);
        });
      });var hostBindings = [],
          hostEvents = [],
          componentFactoryResolverProvider = createComponentFactoryResolver(ast.directives);componentFactoryResolverProvider && this._visitProvider(componentFactoryResolverProvider, ast.queryMatches), ast.providers.forEach(function (providerAst, providerIndex) {
        var dirAst = void 0,
            dirIndex = void 0;if (ast.directives.forEach(function (localDirAst, i) {
          localDirAst.directive.type.reference === tokenReference(providerAst.token) && (dirAst = localDirAst, dirIndex = i);
        }), dirAst) {
          var _a = _this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, _this.staticQueryIds.get(ast)),
              dirHostBindings = _a.hostBindings,
              dirHostEvents = _a.hostEvents;hostBindings.push.apply(hostBindings, dirHostBindings), hostEvents.push.apply(hostEvents, dirHostEvents);
        } else _this._visitProvider(providerAst, ast.queryMatches);
      });var queryMatchExprs = [];return ast.queryMatches.forEach(function (match) {
        var valueType = void 0;tokenReference(match.value) === resolveIdentifier(Identifiers.ElementRef) ? valueType = 0 : tokenReference(match.value) === resolveIdentifier(Identifiers.ViewContainerRef) ? valueType = 3 : tokenReference(match.value) === resolveIdentifier(Identifiers.TemplateRef) && (valueType = 2), null != valueType && queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));
      }), ast.references.forEach(function (ref) {
        var valueType = void 0;ref.value ? tokenReference(ref.value) === resolveIdentifier(Identifiers.TemplateRef) && (valueType = 2) : valueType = 1, null != valueType && (_this.refNodeIndices[ref.name] = nodeIndex, queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)])));
      }), ast.outputs.forEach(function (outputAst) {
        hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: null });
      }), { flags: flags, usedEvents: Array.from(usedEvents.values()), queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, hostBindings: hostBindings, hostEvents: hostEvents };
    }, ViewBuilder.prototype._visitDirective = function (providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {
      var _this = this,
          nodeIndex = this.nodes.length;this.nodes.push(null), dirAst.directive.queries.forEach(function (query, queryIndex) {
        var queryId = dirAst.contentQueryStartId + queryIndex,
            flags = 67108864 | calcStaticDynamicQueryFlags(queryIds, queryId, query.first),
            bindingType = query.first ? 0 : 1;_this.nodes.push(function () {
          return { sourceSpan: dirAst.sourceSpan, nodeFlags: flags, nodeDef: importExpr(createIdentifier(Identifiers.queryDef)).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])]) };
        });
      });var childCount = this.nodes.length - nodeIndex - 1,
          _a = this._visitProviderOrDirective(providerAst, queryMatches),
          flags = _a.flags,
          queryMatchExprs = _a.queryMatchExprs,
          providerExpr = _a.providerExpr,
          depsExpr = _a.depsExpr;refs.forEach(function (ref) {
        ref.value && tokenReference(ref.value) === tokenReference(providerAst.token) && (_this.refNodeIndices[ref.name] = nodeIndex, queryMatchExprs.push(literalArr([literal(ref.name), literal(4)])));
      }), dirAst.directive.isComponent && (flags |= 32768);var inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {
        var mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);return new LiteralMapEntry(inputAst.directiveName, mapValue, !1);
      }),
          outputDefs = [],
          dirMeta = dirAst.directive;Object.keys(dirMeta.outputs).forEach(function (propName) {
        var eventName = dirMeta.outputs[propName];usedEvents.has(eventName) && outputDefs.push(new LiteralMapEntry(propName, literal(eventName), !1));
      });var updateDirectiveExpressions = [];(dirAst.inputs.length || (327680 & flags) > 0) && (updateDirectiveExpressions = dirAst.inputs.map(function (input, bindingIndex) {
        return _this._preprocessUpdateExpression({ nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: input.sourceSpan, context: COMP_VAR, value: input.value });
      }));var dirContextExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([VIEW_VAR, literal(nodeIndex)]),
          hostBindings = dirAst.hostProperties.map(function (inputAst) {
        return { context: dirContextExpr, dirAst: dirAst, inputAst: inputAst };
      }),
          hostEvents = dirAst.hostEvents.map(function (hostEventAst) {
        return { context: dirContextExpr, eventAst: hostEventAst, dirAst: dirAst };
      });return this.nodes[nodeIndex] = function () {
        return { sourceSpan: dirAst.sourceSpan, nodeFlags: 16384 | flags, nodeDef: importExpr(createIdentifier(Identifiers.directiveDef)).callFn([literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, literal(childCount), providerExpr, depsExpr, inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR, outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR]), updateDirectives: updateDirectiveExpressions, directive: dirAst.directive.type };
      }, { hostBindings: hostBindings, hostEvents: hostEvents };
    }, ViewBuilder.prototype._visitProvider = function (providerAst, queryMatches) {
      var nodeIndex = this.nodes.length;this.nodes.push(null);var _a = this._visitProviderOrDirective(providerAst, queryMatches),
          flags = _a.flags,
          queryMatchExprs = _a.queryMatchExprs,
          providerExpr = _a.providerExpr,
          depsExpr = _a.depsExpr;this.nodes[nodeIndex] = function () {
        return { sourceSpan: providerAst.sourceSpan, nodeFlags: flags, nodeDef: importExpr(createIdentifier(Identifiers.providerDef)).callFn([literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, tokenExpr(providerAst.token), providerExpr, depsExpr]) };
      };
    }, ViewBuilder.prototype._visitProviderOrDirective = function (providerAst, queryMatches) {
      var flags = 0;providerAst.eager || (flags |= 4096), providerAst.providerType === ProviderAstType.PrivateService && (flags |= 8192), providerAst.lifecycleHooks.forEach(function (lifecycleHook) {
        lifecycleHook !== _angular_core.ɵLifecycleHooks.OnDestroy && providerAst.providerType !== ProviderAstType.Directive && providerAst.providerType !== ProviderAstType.Component || (flags |= lifecycleHookToNodeFlag(lifecycleHook));
      });var queryMatchExprs = [];queryMatches.forEach(function (match) {
        tokenReference(match.value) === tokenReference(providerAst.token) && queryMatchExprs.push(literalArr([literal(match.queryId), literal(4)]));
      });var _a = providerDef(providerAst),
          providerExpr = _a.providerExpr,
          depsExpr = _a.depsExpr,
          providerType = _a.flags;return { flags: flags | providerType, queryMatchExprs: queryMatchExprs, providerExpr: providerExpr, depsExpr: depsExpr };
    }, ViewBuilder.prototype.getLocal = function (name) {
      if (name == EventHandlerVars.event.name) return EventHandlerVars.event;for (var currViewExpr = VIEW_VAR, currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop("parent").cast(DYNAMIC_TYPE)) {
        var refNodeIndex = currBuilder.refNodeIndices[name];if (null != refNodeIndex) return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([currViewExpr, literal(refNodeIndex)]);var varAst = currBuilder.variables.find(function (varAst) {
          return varAst.name === name;
        });if (varAst) {
          var varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;return currViewExpr.prop("context").prop(varValue);
        }
      }return null;
    }, ViewBuilder.prototype.createLiteralArrayConverter = function (sourceSpan, argCount) {
      if (0 === argCount) {
        var valueExpr_1 = importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));return function () {
          return valueExpr_1;
        };
      }var nodeIndex = this.nodes.length;return this.nodes.push(function () {
        return { sourceSpan: sourceSpan, nodeFlags: 32, nodeDef: importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([literal(argCount)]) };
      }), function (args) {
        return callCheckStmt(nodeIndex, args);
      };
    }, ViewBuilder.prototype.createLiteralMapConverter = function (sourceSpan, keys) {
      if (0 === keys.length) {
        var valueExpr_2 = importExpr(createIdentifier(Identifiers.EMPTY_MAP));return function () {
          return valueExpr_2;
        };
      }var nodeIndex = this.nodes.length;return this.nodes.push(function () {
        return { sourceSpan: sourceSpan, nodeFlags: 64, nodeDef: importExpr(createIdentifier(Identifiers.pureObjectDef)).callFn([literalArr(keys.map(function (key) {
            return literal(key);
          }))]) };
      }), function (args) {
        return callCheckStmt(nodeIndex, args);
      };
    }, ViewBuilder.prototype.createPipeConverter = function (expression, name, argCount) {
      var pipe = this.usedPipes.find(function (pipeSummary) {
        return pipeSummary.name === name;
      });if (pipe.pure) {
        var nodeIndex_1 = this.nodes.length;this.nodes.push(function () {
          return { sourceSpan: expression.sourceSpan, nodeFlags: 128, nodeDef: importExpr(createIdentifier(Identifiers.purePipeDef)).callFn([literal(argCount)]) };
        });for (var compViewExpr = VIEW_VAR, compBuilder = this; compBuilder.parent;) compBuilder = compBuilder.parent, compViewExpr = compViewExpr.prop("parent").cast(DYNAMIC_TYPE);var pipeNodeIndex = compBuilder.purePipeNodeIndices[name],
            pipeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([compViewExpr, literal(pipeNodeIndex)]);return function (args) {
          return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(nodeIndex_1, [pipeValueExpr_1].concat(args)));
        };
      }var nodeIndex = this._createPipe(expression.sourceSpan, pipe),
          nodeValueExpr_1 = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([VIEW_VAR, literal(nodeIndex)]);return function (args) {
        return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr_1.callMethod("transform", args));
      };
    }, ViewBuilder.prototype._createPipe = function (sourceSpan, pipe) {
      var nodeIndex = this.nodes.length,
          flags = 0;pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {
        lifecycleHook === _angular_core.ɵLifecycleHooks.OnDestroy && (flags |= lifecycleHookToNodeFlag(lifecycleHook));
      });var depExprs = pipe.type.diDeps.map(depDef);return this.nodes.push(function () {
        return { sourceSpan: sourceSpan, nodeFlags: 16, nodeDef: importExpr(createIdentifier(Identifiers.pipeDef)).callFn([literal(flags), importExpr(pipe.type), literalArr(depExprs)]) };
      }), nodeIndex;
    }, ViewBuilder.prototype._preprocessUpdateExpression = function (expression) {
      var _this = this;return { nodeIndex: expression.nodeIndex, bindingIndex: expression.bindingIndex, sourceSpan: expression.sourceSpan, context: expression.context, value: convertPropertyBindingBuiltins({ createLiteralArrayConverter: function (argCount) {
            return _this.createLiteralArrayConverter(expression.sourceSpan, argCount);
          }, createLiteralMapConverter: function (keys) {
            return _this.createLiteralMapConverter(expression.sourceSpan, keys);
          }, createPipeConverter: function (name, argCount) {
            return _this.createPipeConverter(expression, name, argCount);
          } }, expression.value) };
    }, ViewBuilder.prototype._createNodeExpressions = function () {
      function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {
        var updateStmts = [],
            exprs = expressions.map(function (_a) {
          var sourceSpan = _a.sourceSpan,
              context = _a.context,
              value = _a.value,
              bindingId = "" + updateBindingCount++,
              nameResolver = context === COMP_VAR ? self : null,
              _b = convertPropertyBinding(nameResolver, context, value, bindingId),
              stmts = _b.stmts,
              currValExpr = _b.currValExpr;
          return updateStmts.push.apply(updateStmts, stmts.map(function (stmt) {
            return applySourceSpanToStatementIfNeeded(stmt, sourceSpan);
          })), applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);
        });return (expressions.length || allowEmptyExprs) && updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan)), updateStmts;
      }var self = this,
          updateBindingCount = 0,
          updateRendererStmts = [],
          updateDirectivesStmts = [],
          nodeDefExprs = this.nodes.map(function (factory, nodeIndex) {
        var _a = factory(),
            nodeDef = _a.nodeDef,
            nodeFlags = _a.nodeFlags,
            updateDirectives = _a.updateDirectives,
            updateRenderer = _a.updateRenderer,
            sourceSpan = _a.sourceSpan;updateRenderer && updateRendererStmts.push.apply(updateRendererStmts, createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, !1)), updateDirectives && updateDirectivesStmts.push.apply(updateDirectivesStmts, createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (327680 & nodeFlags) > 0));var logWithNodeDef = 3 & nodeFlags ? new CommaExpr([LOG_VAR.callFn([]).callFn([]), nodeDef]) : nodeDef;return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);
      });return { updateRendererStmts: updateRendererStmts, updateDirectivesStmts: updateDirectivesStmts, nodeDefExprs: nodeDefExprs };
    }, ViewBuilder.prototype._createElementHandleEventFn = function (nodeIndex, handlers) {
      var _this = this,
          handleEventStmts = [],
          handleEventBindingCount = 0;handlers.forEach(function (_a) {
        var context = _a.context,
            eventAst = _a.eventAst,
            dirAst = _a.dirAst,
            bindingId = "" + handleEventBindingCount++,
            nameResolver = context === COMP_VAR ? _this : null,
            _b = convertActionBinding(nameResolver, context, eventAst.handler, bindingId),
            stmts = _b.stmts,
            allowDefault = _b.allowDefault,
            trueStmts = stmts;allowDefault && trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());var _c = elementEventNameAndTarget(eventAst, dirAst),
            eventTarget = _c.target,
            eventName = _c.name,
            fullEventName = _angular_core.ɵelementEventFullName(eventTarget, eventName);handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));
      });var handleEventFn;if (handleEventStmts.length > 0) {
        var preStmts = [ALLOW_DEFAULT_VAR.set(literal(!0)).toDeclStmt(BOOL_TYPE)];!this.component.isHost && findReadVarNames(handleEventStmts).has(COMP_VAR.name) && preStmts.push(COMP_VAR.set(VIEW_VAR.prop("component")).toDeclStmt(this.compType)), handleEventFn = fn([new FnParam(VIEW_VAR.name, INFERRED_TYPE), new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE), new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)], preStmts.concat(handleEventStmts, [new ReturnStatement(ALLOW_DEFAULT_VAR)]), INFERRED_TYPE);
      } else handleEventFn = NULL_EXPR;return handleEventFn;
    }, ViewBuilder.prototype.visitDirective = function (ast, context) {}, ViewBuilder.prototype.visitDirectiveProperty = function (ast, context) {}, ViewBuilder.prototype.visitReference = function (ast, context) {}, ViewBuilder.prototype.visitVariable = function (ast, context) {}, ViewBuilder.prototype.visitEvent = function (ast, context) {}, ViewBuilder.prototype.visitElementProperty = function (ast, context) {}, ViewBuilder.prototype.visitAttr = function (ast, context) {}, ViewBuilder;
  }(),
      GeneratedFile = function () {
    function GeneratedFile(srcFileUrl, genFileUrl, source) {
      this.srcFileUrl = srcFileUrl, this.genFileUrl = genFileUrl, this.source = source;
    }return GeneratedFile;
  }(),
      Serializer$1 = function (_super) {
    function Serializer$1(symbolResolver, summaryResolver) {
      var _this = _super.call(this) || this;return _this.symbolResolver = symbolResolver, _this.summaryResolver = summaryResolver, _this.symbols = [], _this.indexBySymbol = new Map(), _this.processedSummaryBySymbol = new Map(), _this.processedSummaries = [], _this;
    }return __extends(Serializer$1, _super), Serializer$1.prototype.addOrMergeSummary = function (summary) {
      var symbolMeta = summary.metadata;if (symbolMeta && "class" === symbolMeta.__symbolic) {
        var clone_1 = {};Object.keys(symbolMeta).forEach(function (propName) {
          "decorators" !== propName && (clone_1[propName] = symbolMeta[propName]);
        }), symbolMeta = clone_1;
      }var processedSummary = this.processedSummaryBySymbol.get(summary.symbol);processedSummary || (processedSummary = this.processValue({ symbol: summary.symbol }), this.processedSummaries.push(processedSummary), this.processedSummaryBySymbol.set(summary.symbol, processedSummary)), null == processedSummary.metadata && null != symbolMeta && (processedSummary.metadata = this.processValue(symbolMeta)), null == processedSummary.type && null != summary.type && (processedSummary.type = this.processValue(summary.type));
    }, Serializer$1.prototype.serialize = function () {
      var _this = this,
          exportAs = [],
          json = JSON.stringify({ summaries: this.processedSummaries, symbols: this.symbols.map(function (symbol, index) {
          symbol.assertNoMembers();var importAs = void 0;return _this.summaryResolver.isLibraryFile(symbol.filePath) && (importAs = symbol.name + "_" + index, exportAs.push({ symbol: symbol, exportAs: importAs })), { __symbol: index, name: symbol.name, filePath: _this.summaryResolver.getLibraryFileName(symbol.filePath), importAs: importAs };
        }) });return { json: json, exportAs: exportAs };
    }, Serializer$1.prototype.processValue = function (value) {
      return visitValue(value, this, null);
    }, Serializer$1.prototype.visitOther = function (value, context) {
      if (value instanceof StaticSymbol) {
        var baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name),
            index = this.indexBySymbol.get(baseSymbol);return null == index && (index = this.indexBySymbol.size, this.indexBySymbol.set(baseSymbol, index), this.symbols.push(baseSymbol)), { __symbol: index, members: value.members };
      }
    }, Serializer$1;
  }(ValueTransformer),
      Deserializer = function (_super) {
    function Deserializer(symbolCache) {
      var _this = _super.call(this) || this;return _this.symbolCache = symbolCache, _this;
    }return __extends(Deserializer, _super), Deserializer.prototype.deserialize = function (json) {
      var _this = this,
          data = JSON.parse(json),
          importAs = [];this.symbols = [], data.symbols.forEach(function (serializedSymbol) {
        var symbol = _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);_this.symbols.push(symbol), serializedSymbol.importAs && importAs.push({ symbol: symbol, importAs: serializedSymbol.importAs });
      });var summaries = visitValue(data.summaries, this, null);return { summaries: summaries, importAs: importAs };
    }, Deserializer.prototype.visitStringMap = function (map, context) {
      if ("__symbol" in map) {
        var baseSymbol = this.symbols[map.__symbol],
            members = map.members;return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) : baseSymbol;
      }return _super.prototype.visitStringMap.call(this, map, context);
    }, Deserializer;
  }(ValueTransformer),
      AotCompiler = function () {
    function AotCompiler(_config, _host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _genFilePreamble, _symbolResolver) {
      this._config = _config, this._host = _host, this._metadataResolver = _metadataResolver, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._ngModuleCompiler = _ngModuleCompiler, this._outputEmitter = _outputEmitter, this._summaryResolver = _summaryResolver, this._localeId = _localeId, this._translationFormat = _translationFormat, this._genFilePreamble = _genFilePreamble, this._symbolResolver = _symbolResolver;
    }return AotCompiler.prototype.clearCache = function () {
      this._metadataResolver.clearCache();
    }, AotCompiler.prototype.compileAll = function (rootFiles) {
      var _this = this,
          programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host),
          _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver),
          ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective,
          files = _a.files,
          ngModules = _a.ngModules;return Promise.all(ngModules.map(function (ngModule) {
        return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, !1);
      })).then(function () {
        var sourceModules = files.map(function (file) {
          return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables);
        });return flatten(sourceModules);
      });
    }, AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
      var _this = this,
          fileSuffix = splitTypescriptSuffix(srcFileUrl)[1],
          statements = [],
          exportedVars = [],
          generatedFiles = [];if (generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, statements, exportedVars)), exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) {
        return _this._compileModule(ngModuleType, statements);
      })), directives.forEach(function (dirType) {
        var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);if (!compMeta.isComponent) return Promise.resolve(null);var ngModule = ngModuleByPipeOrDirective.get(dirType);if (!ngModule) throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");_assertComponent(compMeta);var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
          generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
        });var compViewVars = _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements);exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), compViewVars.viewClassVar, compViewVars.compRenderTypeVar);
      }), statements.length > 0) {
        var srcModule = this._codegenSourceModule(srcFileUrl, ngfactoryFilePath(srcFileUrl), statements, exportedVars);generatedFiles.unshift(srcModule);
      }return generatedFiles;
    }, AotCompiler.prototype._createSummary = function (srcFileUrl, directives, pipes, ngModules, injectables, targetStatements, targetExportedVars) {
      var _this = this,
          symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl).map(function (symbol) {
        return _this._symbolResolver.resolveSymbol(symbol);
      }),
          typeSummaries = ngModules.map(function (ref) {
        return _this._metadataResolver.getNgModuleSummary(ref);
      }).concat(directives.map(function (ref) {
        return _this._metadataResolver.getDirectiveSummary(ref);
      }), pipes.map(function (ref) {
        return _this._metadataResolver.getPipeSummary(ref);
      }), injectables.map(function (ref) {
        return _this._metadataResolver.getInjectableSummary(ref);
      })),
          _a = serializeSummaries(this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries),
          json = _a.json,
          exportAs = _a.exportAs;return exportAs.forEach(function (entry) {
        targetStatements.push(variable(entry.exportAs).set(importExpr({ reference: entry.symbol })).toDeclStmt()), targetExportedVars.push(entry.exportAs);
      }), new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
    }, AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
      var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType),
          providers = [];this._localeId && providers.push({ token: createIdentifierToken(Identifiers.LOCALE_ID), useValue: this._localeId }), this._translationFormat && providers.push({ token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT), useValue: this._translationFormat });var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);return targetStatements.push.apply(targetStatements, appCompileResult.statements), appCompileResult.ngModuleFactoryVar;
    }, AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
      var hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference),
          hostMeta = createHostComponentMeta(hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType)),
          hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements).viewClassVar,
          compFactoryVar = componentFactoryName(compMeta.type.reference),
          inputsExprs = [];for (var propName in compMeta.inputs) {
        var templateName = compMeta.inputs[propName];inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), !1));
      }var outputsExprs = [];for (var propName in compMeta.outputs) {
        var templateName = compMeta.outputs[propName];outputsExprs.push(new LiteralMapEntry(propName, literal(templateName), !1));
      }return targetStatements.push(variable(compFactoryVar).set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([literal(compMeta.selector), importExpr(compMeta.type), variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs), new LiteralMapExpr(outputsExprs), literalArr(compMeta.template.ngContentSelectors.map(function (selector) {
        return literal(selector);
      }))])).toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]), [StmtModifier.Final])), compFactoryVar;
    }, AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
      var _this = this,
          directives = directiveIdentifiers.map(function (dir) {
        return _this._metadataResolver.getDirectiveSummary(dir.reference);
      }),
          pipes = ngModule.transitiveModule.pipes.map(function (pipe) {
        return _this._metadataResolver.getPipeSummary(pipe.reference);
      }),
          _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template)),
          parsedTemplate = _a.template,
          usedPipes = _a.pipes,
          stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]),
          viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, usedPipes);return componentStyles && targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix)), targetStatements.push.apply(targetStatements, viewResult.statements), { viewClassVar: viewResult.viewClassVar, compRenderTypeVar: viewResult.rendererTypeVar };
    }, AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
      return _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix), this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
    }, AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) {
      return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(sourceUrl(srcFileUrl), genFileUrl, statements, exportedVars, this._genFilePreamble));
    }, AotCompiler;
  }(),
      StaticAndDynamicReflectionCapabilities = function () {
    function StaticAndDynamicReflectionCapabilities(staticDelegate) {
      this.staticDelegate = staticDelegate, this.dynamicDelegate = new _angular_core.ɵReflectionCapabilities();
    }return StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) {
      _angular_core.ɵreflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
    }, StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () {
      return !0;
    }, StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) {
      return this.dynamicDelegate.factory(type);
    }, StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
      return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) : this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
    }, StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) {
      return isStaticType(type) ? this.staticDelegate.parameters(type) : this.dynamicDelegate.parameters(type);
    }, StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) {
      return isStaticType(type) ? this.staticDelegate.annotations(type) : this.dynamicDelegate.annotations(type);
    }, StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
      return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) : this.dynamicDelegate.propMetadata(typeOrFunc);
    }, StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) {
      return this.dynamicDelegate.getter(name);
    }, StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) {
      return this.dynamicDelegate.setter(name);
    }, StaticAndDynamicReflectionCapabilities.prototype.method = function (name) {
      return this.dynamicDelegate.method(name);
    }, StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) {
      return this.staticDelegate.importUri(type);
    }, StaticAndDynamicReflectionCapabilities.prototype.resourceUri = function (type) {
      return this.staticDelegate.resourceUri(type);
    }, StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
      return this.staticDelegate.resolveIdentifier(name, moduleUrl, members);
    }, StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
      return isStaticType(enumIdentifier) ? this.staticDelegate.resolveEnum(enumIdentifier, name) : null;
    }, StaticAndDynamicReflectionCapabilities;
  }(),
      ANGULAR_CORE = "@angular/core",
      HIDDEN_KEY = /^\$.*\$$/,
      IGNORE = { __symbolic: "ignore" },
      StaticReflector = function () {
    function StaticReflector(summaryResolver, symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
      void 0 === knownMetadataClasses && (knownMetadataClasses = []), void 0 === knownMetadataFunctions && (knownMetadataFunctions = []);var _this = this;this.summaryResolver = summaryResolver, this.symbolResolver = symbolResolver, this.errorRecorder = errorRecorder, this.annotationCache = new Map(), this.propertyCache = new Map(), this.parameterCache = new Map(), this.methodCache = new Map(), this.conversionMap = new Map(), this.annotationForParentClassWithSummaryKind = new Map(), this.annotationNames = new Map(), this.initializeConversionMap(), knownMetadataClasses.forEach(function (kc) {
        return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor);
      }), knownMetadataFunctions.forEach(function (kf) {
        return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn);
      }), this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [_angular_core.Directive, _angular_core.Component]), this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [_angular_core.Pipe]), this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [_angular_core.NgModule]), this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [_angular_core.Injectable, _angular_core.Pipe, _angular_core.Directive, _angular_core.Component, _angular_core.NgModule]), this.annotationNames.set(_angular_core.Directive, "Directive"), this.annotationNames.set(_angular_core.Component, "Component"), this.annotationNames.set(_angular_core.Pipe, "Pipe"), this.annotationNames.set(_angular_core.NgModule, "NgModule"), this.annotationNames.set(_angular_core.Injectable, "Injectable");
    }return StaticReflector.prototype.importUri = function (typeOrFunc) {
      var staticSymbol = this.findSymbolDeclaration(typeOrFunc);return staticSymbol ? staticSymbol.filePath : null;
    }, StaticReflector.prototype.resourceUri = function (typeOrFunc) {
      var staticSymbol = this.findSymbolDeclaration(typeOrFunc);return this.symbolResolver.getResourcePath(staticSymbol);
    }, StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl, members) {
      var importSymbol = this.getStaticSymbol(moduleUrl, name),
          rootSymbol = this.findDeclaration(moduleUrl, name);return importSymbol != rootSymbol && this.symbolResolver.recordImportAs(rootSymbol, importSymbol), members && members.length ? this.getStaticSymbol(rootSymbol.filePath, rootSymbol.name, members) : rootSymbol;
    }, StaticReflector.prototype.findDeclaration = function (moduleUrl, name, containingFile) {
      return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
    }, StaticReflector.prototype.findSymbolDeclaration = function (symbol) {
      var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);return resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol ? this.findSymbolDeclaration(resolvedSymbol.metadata) : symbol;
    }, StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) {
      var staticSymbol = enumIdentifier,
          members = (staticSymbol.members || []).concat(name);return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, members);
    }, StaticReflector.prototype.annotations = function (type) {
      var _this = this,
          annotations = this.annotationCache.get(type);if (!annotations) {
        annotations = [];var classMetadata = this.getTypeMetadata(type),
            parentType = this.findParentType(type, classMetadata);if (parentType) {
          var parentAnnotations = this.annotations(parentType);annotations.push.apply(annotations, parentAnnotations);
        }var ownAnnotations_1 = [];if (classMetadata.decorators && (ownAnnotations_1 = this.simplify(type, classMetadata.decorators), annotations.push.apply(annotations, ownAnnotations_1)), parentType && !this.summaryResolver.isLibraryFile(type.filePath) && this.summaryResolver.isLibraryFile(parentType.filePath)) {
          var summary = this.summaryResolver.resolveSummary(parentType);if (summary && summary.type) {
            var requiredAnnotationTypes = this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind),
                typeHasRequiredAnnotation = requiredAnnotationTypes.some(function (requiredType) {
              return ownAnnotations_1.some(function (ann) {
                return ann instanceof requiredType;
              });
            });typeHasRequiredAnnotation || this.reportError(syntaxError("Class " + type.name + " in " + type.filePath + " extends from a " + CompileSummaryKind[summary.type.summaryKind] + " in another compilation unit without duplicating the decorator. " + ("Please add a " + requiredAnnotationTypes.map(function (type) {
              return _this.annotationNames.get(type);
            }).join(" or ") + " decorator to the class.")), type);
          }
        }this.annotationCache.set(type, annotations.filter(function (ann) {
          return !!ann;
        }));
      }return annotations;
    }, StaticReflector.prototype.propMetadata = function (type) {
      var _this = this,
          propMetadata = this.propertyCache.get(type);if (!propMetadata) {
        var classMetadata = this.getTypeMetadata(type);propMetadata = {};var parentType = this.findParentType(type, classMetadata);if (parentType) {
          var parentPropMetadata_1 = this.propMetadata(parentType);Object.keys(parentPropMetadata_1).forEach(function (parentProp) {
            propMetadata[parentProp] = parentPropMetadata_1[parentProp];
          });
        }var members_1 = classMetadata.members || {};Object.keys(members_1).forEach(function (propName) {
          var propData = members_1[propName],
              prop = propData.find(function (a) {
            return "property" == a.__symbolic || "method" == a.__symbolic;
          }),
              decorators = [];propMetadata[propName] && decorators.push.apply(decorators, propMetadata[propName]), propMetadata[propName] = decorators, prop && prop.decorators && decorators.push.apply(decorators, _this.simplify(type, prop.decorators));
        }), this.propertyCache.set(type, propMetadata);
      }return propMetadata;
    }, StaticReflector.prototype.parameters = function (type) {
      if (!(type instanceof StaticSymbol)) return this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type), [];try {
        var parameters_1 = this.parameterCache.get(type);if (!parameters_1) {
          var classMetadata = this.getTypeMetadata(type),
              parentType = this.findParentType(type, classMetadata),
              members = classMetadata ? classMetadata.members : null,
              ctorData = members ? members.__ctor__ : null;if (ctorData) {
            var ctor = ctorData.find(function (a) {
              return "constructor" == a.__symbolic;
            }),
                parameterTypes = this.simplify(type, ctor.parameters || []),
                parameterDecorators_1 = this.simplify(type, ctor.parameterDecorators || []);parameters_1 = [], parameterTypes.forEach(function (paramType, index) {
              var nestedResult = [];paramType && nestedResult.push(paramType);var decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;decorators && nestedResult.push.apply(nestedResult, decorators), parameters_1.push(nestedResult);
            });
          } else parentType && (parameters_1 = this.parameters(parentType));parameters_1 || (parameters_1 = []), this.parameterCache.set(type, parameters_1);
        }return parameters_1;
      } catch (e) {
        throw console.error("Failed on type " + JSON.stringify(type) + " with error " + e), e;
      }
    }, StaticReflector.prototype._methodNames = function (type) {
      var methodNames = this.methodCache.get(type);if (!methodNames) {
        var classMetadata = this.getTypeMetadata(type);methodNames = {};var parentType = this.findParentType(type, classMetadata);if (parentType) {
          var parentMethodNames_1 = this._methodNames(parentType);Object.keys(parentMethodNames_1).forEach(function (parentProp) {
            methodNames[parentProp] = parentMethodNames_1[parentProp];
          });
        }var members_2 = classMetadata.members || {};Object.keys(members_2).forEach(function (propName) {
          var propData = members_2[propName],
              isMethod = propData.some(function (a) {
            return "method" == a.__symbolic;
          });methodNames[propName] = methodNames[propName] || isMethod;
        }), this.methodCache.set(type, methodNames);
      }return methodNames;
    }, StaticReflector.prototype.findParentType = function (type, classMetadata) {
      var parentType = this.trySimplify(type, classMetadata.extends);if (parentType instanceof StaticSymbol) return parentType;
    }, StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
      type instanceof StaticSymbol || this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);try {
        return !!this._methodNames(type)[lcProperty];
      } catch (e) {
        throw console.error("Failed on type " + JSON.stringify(type) + " with error " + e), e;
      }
    }, StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) {
      this.conversionMap.set(type, function (context, args) {
        return new (ctor.bind.apply(ctor, [void 0].concat(args)))();
      });
    }, StaticReflector.prototype._registerFunction = function (type, fn) {
      this.conversionMap.set(type, function (context, args) {
        return fn.apply(void 0, args);
      });
    }, StaticReflector.prototype.initializeConversionMap = function () {
      this.injectionToken = this.findDeclaration(ANGULAR_CORE, "InjectionToken"), this.opaqueToken = this.findDeclaration(ANGULAR_CORE, "OpaqueToken"), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Host"), _angular_core.Host), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Injectable"), _angular_core.Injectable), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Self"), _angular_core.Self), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "SkipSelf"), _angular_core.SkipSelf), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Inject"), _angular_core.Inject), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Optional"), _angular_core.Optional), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Attribute"), _angular_core.Attribute), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ContentChild"), _angular_core.ContentChild), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ContentChildren"), _angular_core.ContentChildren), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ViewChild"), _angular_core.ViewChild), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "ViewChildren"), _angular_core.ViewChildren), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Input"), _angular_core.Input), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Output"), _angular_core.Output), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Pipe"), _angular_core.Pipe), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "HostBinding"), _angular_core.HostBinding), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "HostListener"), _angular_core.HostListener), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Directive"), _angular_core.Directive), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Component"), _angular_core.Component), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "NgModule"), _angular_core.NgModule), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Host"), _angular_core.Host), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Self"), _angular_core.Self), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "SkipSelf"), _angular_core.SkipSelf), this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, "Optional"), _angular_core.Optional), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "trigger"), _angular_core.trigger), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "state"), _angular_core.state), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "transition"), _angular_core.transition), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "style"), _angular_core.style), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "animate"), _angular_core.animate), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "keyframes"), _angular_core.keyframes), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "sequence"), _angular_core.sequence), this._registerFunction(this.findDeclaration(ANGULAR_CORE, "group"), _angular_core.group);
    }, StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) {
      return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
    }, StaticReflector.prototype.reportError = function (error, context, path) {
      if (!this.errorRecorder) throw error;this.errorRecorder(error, context && context.filePath || path);
    }, StaticReflector.prototype.trySimplify = function (context, value) {
      var originalRecorder = this.errorRecorder;this.errorRecorder = function (error, fileName) {};var result = this.simplify(context, value);return this.errorRecorder = originalRecorder, result;
    }, StaticReflector.prototype.simplify = function (context, value) {
      function simplifyInContext(context, value, depth) {
        function resolveReferenceValue(staticSymbol) {
          var resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);return resolvedSymbol ? resolvedSymbol.metadata : null;
        }function simplifyCall(functionSymbol, targetFunction, args) {
          if (targetFunction && "function" == targetFunction.__symbolic) {
            if (calling.get(functionSymbol)) throw new Error("Recursion not supported");calling.set(functionSymbol, !0);try {
              var value_1 = targetFunction.value;if (value_1 && (0 != depth || "error" != value_1.__symbolic)) {
                var parameters = targetFunction.parameters,
                    defaults = targetFunction.defaults;args = args.map(function (arg) {
                  return simplifyInContext(context, arg, depth + 1);
                }).map(function (arg) {
                  return shouldIgnore(arg) ? void 0 : arg;
                }), defaults && defaults.length > args.length && args.push.apply(args, defaults.slice(args.length).map(function (value) {
                  return simplify(value);
                }));for (var functionScope = BindingScope.build(), i = 0; i < parameters.length; i++) functionScope.define(parameters[i], args[i]);var result_1,
                    oldScope = scope;try {
                  scope = functionScope.done(), result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
                } finally {
                  scope = oldScope;
                }return result_1;
              }
            } finally {
              calling.delete(functionSymbol);
            }
          }return 0 === depth ? IGNORE : simplify({ __symbolic: "error", message: "Function call not supported", context: functionSymbol });
        }function simplify(expression) {
          if (isPrimitive(expression)) return expression;if (expression instanceof Array) {
            for (var result_2 = [], _i = 0, _a = expression; _i < _a.length; _i++) {
              var item = _a[_i];if (item && "spread" === item.__symbolic) {
                var spreadArray = simplify(item.expression);if (Array.isArray(spreadArray)) {
                  for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
                    var spreadItem = spreadArray_1[_b];result_2.push(spreadItem);
                  }continue;
                }
              }var value_2 = simplify(item);shouldIgnore(value_2) || result_2.push(value_2);
            }return result_2;
          }if (expression instanceof StaticSymbol) {
            if (expression === self.injectionToken || expression === self.opaqueToken || self.conversionMap.has(expression)) return expression;var staticSymbol = expression,
                declarationValue = resolveReferenceValue(staticSymbol);return declarationValue ? simplifyInContext(staticSymbol, declarationValue, depth + 1) : staticSymbol;
          }if (expression) {
            if (expression.__symbolic) {
              var staticSymbol = void 0;switch (expression.__symbolic) {case "binop":
                  var left = simplify(expression.left);if (shouldIgnore(left)) return left;var right = simplify(expression.right);if (shouldIgnore(right)) return right;switch (expression.operator) {case "&&":
                      return left && right;case "||":
                      return left || right;case "|":
                      return left | right;case "^":
                      return left ^ right;case "&":
                      return left & right;case "==":
                      return left == right;case "!=":
                      return left != right;case "===":
                      return left === right;case "!==":
                      return left !== right;case "<":
                      return left < right;case ">":
                      return left > right;case "<=":
                      return left <= right;case ">=":
                      return left >= right;case "<<":
                      return left << right;case ">>":
                      return left >> right;case "+":
                      return left + right;case "-":
                      return left - right;case "*":
                      return left * right;case "/":
                      return left / right;case "%":
                      return left % right;}return null;case "if":
                  var condition = simplify(expression.condition);return simplify(condition ? expression.thenExpression : expression.elseExpression);
                case "pre":
                  var operand = simplify(expression.operand);if (shouldIgnore(operand)) return operand;switch (expression.operator) {case "+":
                      return operand;case "-":
                      return -operand;case "!":
                      return !operand;case "~":
                      return ~operand;}return null;case "index":
                  var indexTarget = simplify(expression.expression),
                      index = simplify(expression.index);return indexTarget && isPrimitive(index) ? indexTarget[index] : null;case "select":
                  var member = expression.member,
                      selectContext = context,
                      selectTarget = simplify(expression.expression);if (selectTarget instanceof StaticSymbol) {
                    var members = selectTarget.members.concat(member);selectContext = self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);var declarationValue = resolveReferenceValue(selectContext);return declarationValue ? simplifyInContext(selectContext, declarationValue, depth + 1) : selectContext;
                  }return selectTarget && isPrimitive(member) ? simplifyInContext(selectContext, selectTarget[member], depth + 1) : null;case "reference":
                  var name = expression.name,
                      localValue = scope.resolve(name);if (localValue != BindingScope.missing) return localValue;break;case "class":
                  return context;case "function":
                  return context;case "new":case "call":
                  if (staticSymbol = simplifyInContext(context, expression.expression, depth + 1), staticSymbol instanceof StaticSymbol) {
                    if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) return context;var argExpressions = expression.arguments || [],
                        converter = self.conversionMap.get(staticSymbol);if (converter) {
                      var args = argExpressions.map(function (arg) {
                        return simplifyInContext(context, arg, depth + 1);
                      }).map(function (arg) {
                        return shouldIgnore(arg) ? void 0 : arg;
                      });return converter(context, args);
                    }var targetFunction = resolveReferenceValue(staticSymbol);return simplifyCall(staticSymbol, targetFunction, argExpressions);
                  }return IGNORE;case "error":
                  var message = produceErrorMessage(expression);return expression.line ? (message = message + " (position " + (expression.line + 1) + ":" + (expression.character + 1) + " in the original .ts file)", self.reportError(positionalError(message, context.filePath, expression.line, expression.character), context)) : self.reportError(new Error(message), context), IGNORE;case "ignore":
                  return expression;}return null;
            }return mapStringMap(expression, function (value, name) {
              return simplify(value);
            });
          }return IGNORE;
        }try {
          return simplify(value);
        } catch (e) {
          var members = context.members.length ? "." + context.members.join(".") : "",
              message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath;if (e.fileName) throw positionalError(message, e.fileName, e.line, e.column);throw syntaxError(message);
        }
      }var _this = this,
          self = this,
          scope = BindingScope.empty,
          calling = new Map(),
          recordedSimplifyInContext = function (context, value, depth) {
        try {
          return simplifyInContext(context, value, depth);
        } catch (e) {
          _this.reportError(e, context);
        }
      },
          result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) : simplifyInContext(context, value, 0);if (!shouldIgnore(result)) return result;
    }, StaticReflector.prototype.getTypeMetadata = function (type) {
      var resolvedSymbol = this.symbolResolver.resolveSymbol(type);return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata : { __symbolic: "class" };
    }, StaticReflector;
  }(),
      BindingScope = function () {
    function BindingScope() {}return BindingScope.prototype.resolve = function (name) {}, BindingScope.build = function () {
      var current = new Map();return { define: function (name, value) {
          return current.set(name, value), this;
        }, done: function () {
          return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
        } };
    }, BindingScope;
  }();BindingScope.missing = {}, BindingScope.empty = { resolve: function (name) {
      return BindingScope.missing;
    } };var PopulatedScope = function (_super) {
    function PopulatedScope(bindings) {
      var _this = _super.call(this) || this;return _this.bindings = bindings, _this;
    }return __extends(PopulatedScope, _super), PopulatedScope.prototype.resolve = function (name) {
      return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
    }, PopulatedScope;
  }(BindingScope),
      ResolvedStaticSymbol = function () {
    function ResolvedStaticSymbol(symbol, metadata) {
      this.symbol = symbol, this.metadata = metadata;
    }return ResolvedStaticSymbol;
  }(),
      SUPPORTED_SCHEMA_VERSION = 3,
      StaticSymbolResolver = function () {
    function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
      this.host = host, this.staticSymbolCache = staticSymbolCache, this.summaryResolver = summaryResolver, this.errorRecorder = errorRecorder, this.metadataCache = new Map(), this.resolvedSymbols = new Map(), this.resolvedFilePaths = new Set(), this.importAs = new Map(), this.symbolResourcePaths = new Map(), this.symbolFromFile = new Map();
    }return StaticSymbolResolver.prototype.resolveSymbol = function (staticSymbol) {
      if (staticSymbol.members.length > 0) return this._resolveSymbolMembers(staticSymbol);var result = this.resolvedSymbols.get(staticSymbol);return result ? result : (result = this._resolveSymbolFromSummary(staticSymbol)) ? result : (this._createSymbolsOf(staticSymbol.filePath), result = this.resolvedSymbols.get(staticSymbol));
    }, StaticSymbolResolver.prototype.getImportAs = function (staticSymbol) {
      if (staticSymbol.members.length) {
        var baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name),
            baseImportAs = this.getImportAs(baseSymbol);return baseImportAs ? this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) : null;
      }var result = this.summaryResolver.getImportAs(staticSymbol);return result || (result = this.importAs.get(staticSymbol)), result;
    }, StaticSymbolResolver.prototype.getResourcePath = function (staticSymbol) {
      return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;
    }, StaticSymbolResolver.prototype.getTypeArity = function (staticSymbol) {
      if (isNgFactoryFile(staticSymbol.filePath)) return null;for (var resolvedSymbol = this.resolveSymbol(staticSymbol); resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol;) resolvedSymbol = this.resolveSymbol(resolvedSymbol.metadata);return resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity || null;
    }, StaticSymbolResolver.prototype.recordImportAs = function (sourceSymbol, targetSymbol) {
      sourceSymbol.assertNoMembers(), targetSymbol.assertNoMembers(), this.importAs.set(sourceSymbol, targetSymbol);
    }, StaticSymbolResolver.prototype.invalidateFile = function (fileName) {
      this.metadataCache.delete(fileName), this.resolvedFilePaths.delete(fileName);var symbols = this.symbolFromFile.get(fileName);if (symbols) {
        this.symbolFromFile.delete(fileName);for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
          var symbol = symbols_1[_i];this.resolvedSymbols.delete(symbol), this.importAs.delete(symbol), this.symbolResourcePaths.delete(symbol);
        }
      }
    }, StaticSymbolResolver.prototype._resolveSymbolMembers = function (staticSymbol) {
      var members = staticSymbol.members,
          baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));if (!baseResolvedSymbol) return null;var baseMetadata = baseResolvedSymbol.metadata;if (baseMetadata instanceof StaticSymbol) return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));if (!baseMetadata || "class" !== baseMetadata.__symbolic) {
        for (var value = baseMetadata, i = 0; i < members.length && value; i++) value = value[members[i]];return new ResolvedStaticSymbol(staticSymbol, value);
      }return baseMetadata.statics && 1 === members.length ? new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]) : null;
    }, StaticSymbolResolver.prototype._resolveSymbolFromSummary = function (staticSymbol) {
      var summary = this.summaryResolver.resolveSummary(staticSymbol);return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
    }, StaticSymbolResolver.prototype.getStaticSymbol = function (declarationFile, name, members) {
      return this.staticSymbolCache.get(declarationFile, name, members);
    }, StaticSymbolResolver.prototype.getSymbolsOf = function (filePath) {
      var symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));return this._createSymbolsOf(filePath), this.resolvedSymbols.forEach(function (resolvedSymbol) {
        resolvedSymbol.symbol.filePath === filePath && symbols.add(resolvedSymbol.symbol);
      }), Array.from(symbols);
    }, StaticSymbolResolver.prototype._createSymbolsOf = function (filePath) {
      var _this = this;if (!this.resolvedFilePaths.has(filePath)) {
        this.resolvedFilePaths.add(filePath);var resolvedSymbols = [],
            metadata = this.getModuleMetadata(filePath);if (metadata.metadata) {
          var topLevelSymbolNames_1 = new Set(Object.keys(metadata.metadata).map(unescapeIdentifier)),
              origins_1 = metadata.origins || {};Object.keys(metadata.metadata).forEach(function (metadataKey) {
            var symbolMeta = metadata.metadata[metadataKey],
                name = unescapeIdentifier(metadataKey),
                symbol = _this.getStaticSymbol(filePath, name),
                importSymbol = void 0;metadata.importAs && (importSymbol = _this.getStaticSymbol(metadata.importAs, name), _this.recordImportAs(symbol, importSymbol));var origin = origins_1.hasOwnProperty(metadataKey) && origins_1[metadataKey];if (origin) {
              var originFilePath = _this.resolveModule(origin, filePath);originFilePath ? _this.symbolResourcePaths.set(symbol, originFilePath) : _this.reportError(new Error("Couldn't resolve original symbol for " + origin + " from " + filePath));
            }resolvedSymbols.push(_this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames_1, symbolMeta));
          });
        }if (metadata.exports) for (var _loop_1 = function (moduleExport) {
          if (moduleExport.export) moduleExport.export.forEach(function (exportSymbol) {
            var symbolName;symbolName = "string" == typeof exportSymbol ? exportSymbol : exportSymbol.as, symbolName = unescapeIdentifier(symbolName);var symName = symbolName;"string" != typeof exportSymbol && (symName = unescapeIdentifier(exportSymbol.name));var resolvedModule = _this.resolveModule(moduleExport.from, filePath);if (resolvedModule) {
              var targetSymbol = _this.getStaticSymbol(resolvedModule, symName),
                  sourceSymbol = _this.getStaticSymbol(filePath, symbolName);resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
            }
          });else {
            var resolvedModule = this_1.resolveModule(moduleExport.from, filePath);if (resolvedModule) {
              var nestedExports = this_1.getSymbolsOf(resolvedModule);nestedExports.forEach(function (targetSymbol) {
                var sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));
              });
            }
          }
        }, this_1 = this, _i = 0, _a = metadata.exports; _i < _a.length; _i++) {
          var moduleExport = _a[_i];_loop_1(moduleExport);
        }resolvedSymbols.forEach(function (resolvedSymbol) {
          return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol);
        }), this.symbolFromFile.set(filePath, resolvedSymbols.map(function (resolvedSymbol) {
          return resolvedSymbol.symbol;
        }));
      }
    }, StaticSymbolResolver.prototype.createResolvedSymbol = function (sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {
      if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && metadata && "class" === metadata.__symbolic) {
        var transformedMeta_1 = { __symbolic: "class", arity: metadata.arity };return new ResolvedStaticSymbol(sourceSymbol, transformedMeta_1);
      }var self = this,
          ReferenceTransformer = function (_super) {
        function ReferenceTransformer() {
          return null !== _super && _super.apply(this, arguments) || this;
        }return __extends(ReferenceTransformer, _super), ReferenceTransformer.prototype.visitStringMap = function (map, functionParams) {
          var symbolic = map.__symbolic;if ("function" === symbolic) {
            var oldLen = functionParams.length;functionParams.push.apply(functionParams, map.parameters || []);var result = _super.prototype.visitStringMap.call(this, map, functionParams);return functionParams.length = oldLen, result;
          }if ("reference" !== symbolic) return _super.prototype.visitStringMap.call(this, map, functionParams);var module_1 = map.module,
              name = map.name ? unescapeIdentifier(map.name) : map.name;if (!name) return null;var filePath = void 0;return module_1 ? (filePath = self.resolveModule(module_1, sourceSymbol.filePath), filePath ? self.getStaticSymbol(filePath, name) : { __symbolic: "error", message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "." }) : functionParams.indexOf(name) >= 0 ? { __symbolic: "reference", name: name } : topLevelSymbolNames.has(name) ? self.getStaticSymbol(topLevelPath, name) : void 0;
        }, ReferenceTransformer;
      }(ValueTransformer),
          transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);return transformedMeta instanceof StaticSymbol ? this.createExport(sourceSymbol, transformedMeta) : new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
    }, StaticSymbolResolver.prototype.createExport = function (sourceSymbol, targetSymbol) {
      return sourceSymbol.assertNoMembers(), targetSymbol.assertNoMembers(), this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol), new ResolvedStaticSymbol(sourceSymbol, targetSymbol);
    }, StaticSymbolResolver.prototype.reportError = function (error, context, path) {
      if (!this.errorRecorder) throw error;this.errorRecorder(error, context && context.filePath || path);
    }, StaticSymbolResolver.prototype.getModuleMetadata = function (module) {
      var moduleMetadata = this.metadataCache.get(module);if (!moduleMetadata) {
        var moduleMetadatas = this.host.getMetadataFor(module);if (moduleMetadatas) {
          var maxVersion_1 = -1;moduleMetadatas.forEach(function (md) {
            md.version > maxVersion_1 && (maxVersion_1 = md.version, moduleMetadata = md);
          });
        }if (moduleMetadata || (moduleMetadata = { __symbolic: "module", version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} }), moduleMetadata.version != SUPPORTED_SCHEMA_VERSION) {
          var errorMessage = 2 == moduleMetadata.version ? "Unsupported metadata version " + moduleMetadata.version + " for module " + module + ". This module should be compiled with a newer version of ngc" : "Metadata version mismatch for module " + module + ", found version " + moduleMetadata.version + ", expected " + SUPPORTED_SCHEMA_VERSION;this.reportError(new Error(errorMessage));
        }this.metadataCache.set(module, moduleMetadata);
      }return moduleMetadata;
    }, StaticSymbolResolver.prototype.getSymbolByModule = function (module, symbolName, containingFile) {
      var filePath = this.resolveModule(module, containingFile);return filePath ? this.getStaticSymbol(filePath, symbolName) : (this.reportError(new Error("Could not resolve module " + module + (containingFile ? " relative to $ {\n            containingFile\n          } " : ""))), this.getStaticSymbol("ERROR:" + module, symbolName));
    }, StaticSymbolResolver.prototype.resolveModule = function (module, containingFile) {
      try {
        return this.host.moduleNameToFileName(module, containingFile);
      } catch (e) {
        console.error("Could not resolve module '" + module + "' relative to file " + containingFile), this.reportError(e, void 0, containingFile);
      }return null;
    }, StaticSymbolResolver;
  }(),
      AotSummaryResolver = function () {
    function AotSummaryResolver(host, staticSymbolCache) {
      this.host = host, this.staticSymbolCache = staticSymbolCache, this.summaryCache = new Map(), this.loadedFilePaths = new Set(), this.importAs = new Map();
    }return AotSummaryResolver.prototype.isLibraryFile = function (filePath) {
      return !this.host.isSourceFile(stripNgFactory(filePath));
    }, AotSummaryResolver.prototype.getLibraryFileName = function (filePath) {
      return this.host.getOutputFileName(filePath);
    }, AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) {
      staticSymbol.assertNoMembers();var summary = this.summaryCache.get(staticSymbol);return summary || (this._loadSummaryFile(staticSymbol.filePath), summary = this.summaryCache.get(staticSymbol)), summary;
    }, AotSummaryResolver.prototype.getSymbolsOf = function (filePath) {
      return this._loadSummaryFile(filePath), Array.from(this.summaryCache.keys()).filter(function (symbol) {
        return symbol.filePath === filePath;
      });
    }, AotSummaryResolver.prototype.getImportAs = function (staticSymbol) {
      return staticSymbol.assertNoMembers(), this.importAs.get(staticSymbol);
    }, AotSummaryResolver.prototype._loadSummaryFile = function (filePath) {
      var _this = this;if (!this.loadedFilePaths.has(filePath) && (this.loadedFilePaths.add(filePath), this.isLibraryFile(filePath))) {
        var summaryFilePath = summaryFileName(filePath),
            json = void 0;try {
          json = this.host.loadSummary(summaryFilePath);
        } catch (e) {
          throw console.error("Error loading summary file " + summaryFilePath), e;
        }if (json) {
          var _a = deserializeSummaries(this.staticSymbolCache, json),
              summaries = _a.summaries,
              importAs = _a.importAs;summaries.forEach(function (summary) {
            return _this.summaryCache.set(summary.symbol, summary);
          }), importAs.forEach(function (importAs) {
            _this.importAs.set(importAs.symbol, _this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));
          });
        }
      }
    }, AotSummaryResolver;
  }(),
      _ExecutionContext = function () {
    function _ExecutionContext(parent, instance, className, vars) {
      this.parent = parent, this.instance = instance, this.className = className, this.vars = vars;
    }return _ExecutionContext.prototype.createChildWihtLocalVars = function () {
      return new _ExecutionContext(this, this.instance, this.className, new Map());
    }, _ExecutionContext;
  }(),
      ReturnValue = function () {
    function ReturnValue(value) {
      this.value = value;
    }return ReturnValue;
  }(),
      StatementInterpreter = function () {
    function StatementInterpreter() {}return StatementInterpreter.prototype.debugAst = function (ast) {
      return debugOutputAstAsTypeScript(ast);
    }, StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
      return ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx)), null;
    }, StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
      for (var value = expr.value.visitExpression(this, ctx), currCtx = ctx; null != currCtx;) {
        if (currCtx.vars.has(expr.name)) return currCtx.vars.set(expr.name, value), value;currCtx = currCtx.parent;
      }throw new Error("Not declared variable " + expr.name);
    }, StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
      var varName = ast.name;if (null != ast.builtin) switch (ast.builtin) {case BuiltinVar.Super:
          return ctx.instance.__proto__;case BuiltinVar.This:
          return ctx.instance;case BuiltinVar.CatchError:
          varName = CATCH_ERROR_VAR$2;break;case BuiltinVar.CatchStack:
          varName = CATCH_STACK_VAR$2;break;default:
          throw new Error("Unknown builtin variable " + ast.builtin);}for (var currCtx = ctx; null != currCtx;) {
        if (currCtx.vars.has(varName)) return currCtx.vars.get(varName);currCtx = currCtx.parent;
      }throw new Error("Not declared variable " + varName);
    }, StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx),
          index = expr.index.visitExpression(this, ctx),
          value = expr.value.visitExpression(this, ctx);return receiver[index] = value, value;
    }, StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx),
          value = expr.value.visitExpression(this, ctx);return receiver[expr.name] = value, value;
    }, StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
      var result,
          receiver = expr.receiver.visitExpression(this, ctx),
          args = this.visitAllExpressions(expr.args, ctx);if (null != expr.builtin) switch (expr.builtin) {case BuiltinMethod.ConcatArray:
          result = receiver.concat.apply(receiver, args);break;case BuiltinMethod.SubscribeObservable:
          result = receiver.subscribe({ next: args[0] });break;case BuiltinMethod.Bind:
          result = receiver.bind.apply(receiver, args);break;default:
          throw new Error("Unknown builtin method " + expr.builtin);} else result = receiver[expr.name].apply(receiver, args);return result;
    }, StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
      var args = this.visitAllExpressions(stmt.args, ctx),
          fnExpr = stmt.fn;if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) return ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args), null;var fn$$1 = stmt.fn.visitExpression(this, ctx);return fn$$1.apply(null, args);
    }, StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
      return new ReturnValue(stmt.value.visitExpression(this, ctx));
    }, StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
      var clazz = createDynamicClass(stmt, ctx, this);return ctx.vars.set(stmt.name, clazz), null;
    }, StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
      return stmt.expr.visitExpression(this, ctx);
    }, StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
      var condition = stmt.condition.visitExpression(this, ctx);return condition ? this.visitAllStatements(stmt.trueCase, ctx) : null != stmt.falseCase ? this.visitAllStatements(stmt.falseCase, ctx) : null;
    }, StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
      try {
        return this.visitAllStatements(stmt.bodyStmts, ctx);
      } catch (e) {
        var childCtx = ctx.createChildWihtLocalVars();return childCtx.vars.set(CATCH_ERROR_VAR$2, e), childCtx.vars.set(CATCH_STACK_VAR$2, e.stack), this.visitAllStatements(stmt.catchStmts, childCtx);
      }
    }, StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
      throw stmt.error.visitExpression(this, ctx);
    }, StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) {
      return null;
    }, StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
      var args = this.visitAllExpressions(ast.args, ctx),
          clazz = ast.classExpr.visitExpression(this, ctx);return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
    }, StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) {
      return ast.value;
    }, StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
      return ast.value.reference;
    }, StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
      return ast.condition.visitExpression(this, ctx) ? ast.trueCase.visitExpression(this, ctx) : null != ast.falseCase ? ast.falseCase.visitExpression(this, ctx) : null;
    }, StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
      return !ast.condition.visitExpression(this, ctx);
    }, StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
      return ast.value.visitExpression(this, ctx);
    }, StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
      var paramNames = ast.params.map(function (param) {
        return param.name;
      });return _declareFn(paramNames, ast.statements, ctx, this);
    }, StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
      var paramNames = stmt.params.map(function (param) {
        return param.name;
      });return ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this)), null;
    }, StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
      var _this = this,
          lhs = function () {
        return ast.lhs.visitExpression(_this, ctx);
      },
          rhs = function () {
        return ast.rhs.visitExpression(_this, ctx);
      };switch (ast.operator) {case BinaryOperator.Equals:
          return lhs() == rhs();case BinaryOperator.Identical:
          return lhs() === rhs();case BinaryOperator.NotEquals:
          return lhs() != rhs();case BinaryOperator.NotIdentical:
          return lhs() !== rhs();case BinaryOperator.And:
          return lhs() && rhs();case BinaryOperator.Or:
          return lhs() || rhs();case BinaryOperator.Plus:
          return lhs() + rhs();case BinaryOperator.Minus:
          return lhs() - rhs();case BinaryOperator.Divide:
          return lhs() / rhs();case BinaryOperator.Multiply:
          return lhs() * rhs();case BinaryOperator.Modulo:
          return lhs() % rhs();case BinaryOperator.Lower:
          return lhs() < rhs();case BinaryOperator.LowerEquals:
          return lhs() <= rhs();case BinaryOperator.Bigger:
          return lhs() > rhs();case BinaryOperator.BiggerEquals:
          return lhs() >= rhs();default:
          throw new Error("Unknown operator " + ast.operator);}
    }, StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
      var result,
          receiver = ast.receiver.visitExpression(this, ctx);return result = receiver[ast.name];
    }, StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
      var receiver = ast.receiver.visitExpression(this, ctx),
          prop = ast.index.visitExpression(this, ctx);return receiver[prop];
    }, StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
      return this.visitAllExpressions(ast.entries, ctx);
    }, StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
      var _this = this,
          result = {};return ast.entries.forEach(function (entry) {
        return result[entry.key] = entry.value.visitExpression(_this, ctx);
      }), result;
    }, StatementInterpreter.prototype.visitCommaExpr = function (ast, context) {
      var values = this.visitAllExpressions(ast.parts, context);return values[values.length - 1];
    }, StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
      var _this = this;return expressions.map(function (expr) {
        return expr.visitExpression(_this, ctx);
      });
    }, StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
      for (var i = 0; i < statements.length; i++) {
        var stmt = statements[i],
            val = stmt.visitStatement(this, ctx);if (val instanceof ReturnValue) return val;
      }return null;
    }, StatementInterpreter;
  }(),
      CATCH_ERROR_VAR$2 = "error",
      CATCH_STACK_VAR$2 = "stack",
      AbstractJsEmitterVisitor = function (_super) {
    function AbstractJsEmitterVisitor() {
      return _super.call(this, !1) || this;
    }return __extends(AbstractJsEmitterVisitor, _super), AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
      var _this = this;return ctx.pushClass(stmt), this._visitClassConstructor(stmt, ctx), null != stmt.parent && (ctx.print(stmt, stmt.name + ".prototype = Object.create("), stmt.parent.visitExpression(this, ctx), ctx.println(stmt, ".prototype);")), stmt.getters.forEach(function (getter) {
        return _this._visitClassGetter(stmt, getter, ctx);
      }), stmt.methods.forEach(function (method) {
        return _this._visitClassMethod(stmt, method, ctx);
      }), ctx.popClass(), null;
    }, AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
      ctx.print(stmt, "function " + stmt.name + "("), null != stmt.constructorMethod && this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(stmt, ") {"), ctx.incIndent(), null != stmt.constructorMethod && stmt.constructorMethod.body.length > 0 && (ctx.println(stmt, "var self = this;"), this.visitAllStatements(stmt.constructorMethod.body, ctx)), ctx.decIndent(), ctx.println(stmt, "}");
    }, AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
      ctx.println(stmt, "Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {"), ctx.incIndent(), getter.body.length > 0 && (ctx.println(stmt, "var self = this;"), this.visitAllStatements(getter.body, ctx)), ctx.decIndent(), ctx.println(stmt, "}});");
    }, AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
      ctx.print(stmt, stmt.name + ".prototype." + method.name + " = function("), this._visitParams(method.params, ctx), ctx.println(stmt, ") {"), ctx.incIndent(), method.body.length > 0 && (ctx.println(stmt, "var self = this;"), this.visitAllStatements(method.body, ctx)), ctx.decIndent(), ctx.println(stmt, "};");
    }, AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
      if (ast.builtin === BuiltinVar.This) ctx.print(ast, "self");else {
        if (ast.builtin === BuiltinVar.Super) throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");_super.prototype.visitReadVarExpr.call(this, ast, ctx);
      }return null;
    }, AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
      return ctx.print(stmt, "var " + stmt.name + " = "), stmt.value.visitExpression(this, ctx), ctx.println(stmt, ";"), null;
    }, AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
      return ast.value.visitExpression(this, ctx), null;
    }, AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
      var fnExpr = expr.fn;return fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super ? (ctx.currentClass.parent.visitExpression(this, ctx), ctx.print(expr, ".call(this"), expr.args.length > 0 && (ctx.print(expr, ", "), this.visitAllExpressions(expr.args, ctx, ",")), ctx.print(expr, ")")) : _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx), null;
    }, AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
      return ctx.print(ast, "function("), this._visitParams(ast.params, ctx), ctx.println(ast, ") {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print(ast, "}"), null;
    }, AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
      return ctx.print(stmt, "function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.println(stmt, ") {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println(stmt, "}"), null;
    }, AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
      ctx.println(stmt, "try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {"), ctx.incIndent();var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop("stack")).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println(stmt, "}"), null;
    }, AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
      this.visitAllObjects(function (param) {
        return ctx.print(null, param.name);
      }, params, ctx, ",");
    }, AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
      var name;switch (method) {case BuiltinMethod.ConcatArray:
          name = "concat";break;case BuiltinMethod.SubscribeObservable:
          name = "subscribe";break;case BuiltinMethod.Bind:
          name = "bind";break;default:
          throw new Error("Unknown builtin method: " + method);}return name;
    }, AbstractJsEmitterVisitor;
  }(AbstractEmitterVisitor),
      JitEmitterVisitor = function (_super) {
    function JitEmitterVisitor() {
      var _this = _super.apply(this, arguments) || this;return _this._evalArgNames = [], _this._evalArgValues = [], _this;
    }return __extends(JitEmitterVisitor, _super), JitEmitterVisitor.prototype.getArgs = function () {
      for (var result = {}, i = 0; i < this._evalArgNames.length; i++) result[this._evalArgNames[i]] = this._evalArgValues[i];return result;
    }, JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
      var value = ast.value.reference,
          id = this._evalArgValues.indexOf(value);if (id === -1) {
        id = this._evalArgValues.length, this._evalArgValues.push(value);var name = identifierName(ast.value) || "val";this._evalArgNames.push("jit_" + name + id);
      }return ctx.print(ast, this._evalArgNames[id]), null;
    }, JitEmitterVisitor;
  }(AbstractJsEmitterVisitor),
      JitCompiler = function () {
    function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig, _console) {
      this._injector = _injector, this._metadataResolver = _metadataResolver, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._ngModuleCompiler = _ngModuleCompiler, this._compilerConfig = _compilerConfig, this._console = _console, this._compiledTemplateCache = new Map(), this._compiledHostTemplateCache = new Map(), this._compiledDirectiveWrapperCache = new Map(), this._compiledNgModuleCache = new Map(), this._sharedStylesheetCount = 0;
    }return Object.defineProperty(JitCompiler.prototype, "injector", { get: function () {
        return this._injector;
      }, enumerable: !0, configurable: !0 }), JitCompiler.prototype.compileModuleSync = function (moduleType) {
      return this._compileModuleAndComponents(moduleType, !0).syncResult;
    }, JitCompiler.prototype.compileModuleAsync = function (moduleType) {
      return this._compileModuleAndComponents(moduleType, !1).asyncResult;
    }, JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
      return this._compileModuleAndAllComponents(moduleType, !0).syncResult;
    }, JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
      return this._compileModuleAndAllComponents(moduleType, !1).asyncResult;
    }, JitCompiler.prototype.getNgContentSelectors = function (component) {
      this._console.warn("Compiler.getNgContentSelectors is deprecated. Use ComponentFactory.ngContentSelectors instead!");var template = this._compiledTemplateCache.get(component);if (!template) throw new Error("The component " + _angular_core.ɵstringify(component) + " is not yet compiled!");return template.compMeta.template.ngContentSelectors;
    }, JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
      var _this = this,
          loadingPromise = this._loadModules(moduleType, isSync),
          createResult = function () {
        return _this._compileComponents(moduleType, null), _this._compileModule(moduleType);
      };return isSync ? new SyncAsyncResult(createResult()) : new SyncAsyncResult(null, loadingPromise.then(createResult));
    }, JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
      var _this = this,
          loadingPromise = this._loadModules(moduleType, isSync),
          createResult = function () {
        var componentFactories = [];return _this._compileComponents(moduleType, componentFactories), new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
      };return isSync ? new SyncAsyncResult(createResult()) : new SyncAsyncResult(null, loadingPromise.then(createResult));
    }, JitCompiler.prototype._loadModules = function (mainModule, isSync) {
      var _this = this,
          loadingPromises = [],
          ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);return ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
        loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
      }), Promise.all(loadingPromises);
    }, JitCompiler.prototype._compileModule = function (moduleType) {
      var _this = this,
          ngModuleFactory = this._compiledNgModuleCache.get(moduleType);if (!ngModuleFactory) {
        var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType),
            extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, {
          useFactory: function () {
            return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
          } }))],
            compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);ngModuleFactory = this._compilerConfig.useJit ? jitStatements(ngModuleJitUrl(moduleMeta_1), compileResult.statements, [compileResult.ngModuleFactoryVar])[0] : interpretStatements(compileResult.statements, [compileResult.ngModuleFactoryVar])[0], this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
      }return ngModuleFactory;
    }, JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
      var _this = this,
          ngModule = this._metadataResolver.getNgModuleMetadata(mainModule),
          moduleByDirective = new Map(),
          templates = new Set();ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
        var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
          moduleByDirective.set(dirIdentifier.reference, localModuleMeta);var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);if (dirMeta.isComponent && (templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta)), allComponentFactories)) {
            var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);templates.add(template), allComponentFactories.push(dirMeta.componentFactory);
          }
        });
      }), ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
        var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
          var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);dirMeta.isComponent && dirMeta.entryComponents.forEach(function (entryComponentType) {
            var moduleMeta = moduleByDirective.get(entryComponentType.componentType);templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
          });
        }), localModuleMeta.entryComponents.forEach(function (entryComponentType) {
          var moduleMeta = moduleByDirective.get(entryComponentType.componentType);templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
        });
      }), templates.forEach(function (template) {
        return _this._compileTemplate(template);
      });
    }, JitCompiler.prototype.clearCacheFor = function (type) {
      this._compiledNgModuleCache.delete(type), this._metadataResolver.clearCacheFor(type), this._compiledHostTemplateCache.delete(type);var compiledTemplate = this._compiledTemplateCache.get(type);compiledTemplate && this._compiledTemplateCache.delete(type);
    }, JitCompiler.prototype.clearCache = function () {
      this._metadataResolver.clearCache(), this._compiledTemplateCache.clear(), this._compiledHostTemplateCache.clear(), this._compiledNgModuleCache.clear();
    }, JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
      if (!ngModule) throw new Error("Component " + _angular_core.ɵstringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");var compiledTemplate = this._compiledHostTemplateCache.get(compType);if (!compiledTemplate) {
        var compMeta = this._metadataResolver.getDirectiveMetadata(compType);assertComponent(compMeta);var componentFactory = compMeta.componentFactory,
            hostClass = this._metadataResolver.getHostComponentType(compType),
            hostMeta = createHostComponentMeta(hostClass, compMeta, _angular_core.ɵgetComponentViewDefinitionFactory(componentFactory));compiledTemplate = new CompiledTemplate(!0, compMeta.type, hostMeta, ngModule, [compMeta.type]), this._compiledHostTemplateCache.set(compType, compiledTemplate);
      }return compiledTemplate;
    }, JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
      var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);return compiledTemplate || (assertComponent(compMeta), compiledTemplate = new CompiledTemplate(!1, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives), this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate)), compiledTemplate;
    }, JitCompiler.prototype._compileTemplate = function (template) {
      var _this = this;if (!template.isCompiled) {
        var compMeta = template.compMeta,
            externalStylesheetsByModuleUrl = new Map(),
            stylesCompileResult = this._styleCompiler.compileComponent(compMeta);stylesCompileResult.externalStylesheets.forEach(function (r) {
          externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
        }), this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);var viewClass,
            rendererType,
            directives = template.directives.map(function (dir) {
          return _this._metadataResolver.getDirectiveSummary(dir.reference);
        }),
            pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) {
          return _this._metadataResolver.getPipeSummary(pipe.reference);
        }),
            _a = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, templateSourceUrl(template.ngModule.type, template.compMeta, template.compMeta.template)),
            parsedTemplate = _a.template,
            usedPipes = _a.pipes,
            compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), usedPipes),
            statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements),
            viewClassAndRendererTypeVars = compMeta.isHost ? [compileResult.viewClassVar] : [compileResult.viewClassVar, compileResult.rendererTypeVar];this._compilerConfig.useJit ? (_c = jitStatements(templateJitUrl(template.ngModule.type, template.compMeta), statements, viewClassAndRendererTypeVars), viewClass = _c[0], rendererType = _c[1]) : (_b = interpretStatements(statements, viewClassAndRendererTypeVars), viewClass = _b[0], rendererType = _b[1]), template.compiled(viewClass, rendererType);var _b, _c;
      }
    }, JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
      var _this = this;result.dependencies.forEach(function (dep, i) {
        var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl),
            nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);dep.valuePlaceholder.reference = nestedStylesArr;
      });
    }, JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
      return this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl), this._compilerConfig.useJit ? jitStatements(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.statements, [result.stylesVar])[0] : interpretStatements(result.statements, [result.stylesVar])[0];
    }, JitCompiler;
  }();JitCompiler.decorators = [{ type: CompilerInjectable }], JitCompiler.ctorParameters = function () {
    return [{ type: _angular_core.Injector }, { type: CompileMetadataResolver }, { type: TemplateParser }, { type: StyleCompiler }, { type: ViewCompiler }, { type: NgModuleCompiler }, { type: CompilerConfig }, { type: _angular_core.ɵConsole }];
  };var CompiledTemplate = function () {
    function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {
      this.isHost = isHost, this.compType = compType, this.compMeta = compMeta, this.ngModule = ngModule, this.directives = directives, this._viewClass = null, this.isCompiled = !1;
    }return CompiledTemplate.prototype.compiled = function (viewClass, rendererType) {
      this._viewClass = viewClass, this.compMeta.componentViewType.setDelegate(viewClass);for (var prop in rendererType) this.compMeta.rendererType[prop] = rendererType[prop];this.isCompiled = !0;
    }, CompiledTemplate;
  }(),
      ModuleBoundCompiler = function () {
    function ModuleBoundCompiler(_delegate, _ngModule) {
      this._delegate = _delegate, this._ngModule = _ngModule;
    }return Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", { get: function () {
        return this._delegate.injector;
      }, enumerable: !0, configurable: !0 }), ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
      return this._delegate.compileModuleSync(moduleType);
    }, ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
      return this._delegate.compileModuleAsync(moduleType);
    }, ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
      return this._delegate.compileModuleAndAllComponentsSync(moduleType);
    }, ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
      return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
    }, ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) {
      return this._delegate.getNgContentSelectors(component);
    }, ModuleBoundCompiler.prototype.clearCache = function () {
      this._delegate.clearCache();
    }, ModuleBoundCompiler.prototype.clearCacheFor = function (type) {
      this._delegate.clearCacheFor(type);
    }, ModuleBoundCompiler;
  }(),
      MessageBundle = function () {
    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {
      void 0 === _locale && (_locale = null), this._htmlParser = _htmlParser, this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs, this._locale = _locale, this._messages = [];
    }return MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
      var htmlParserResult = this._htmlParser.parse(html, url, !0, interpolationConfig);if (htmlParserResult.errors.length) return htmlParserResult.errors;var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);return i18nParserResult.errors.length ? i18nParserResult.errors : ((_a = this._messages).push.apply(_a, i18nParserResult.messages), []);var _a;
    }, MessageBundle.prototype.getMessages = function () {
      return this._messages;
    }, MessageBundle.prototype.write = function (serializer, filterSources) {
      var messages = {},
          mapperVisitor = new MapPlaceholderNames();this._messages.forEach(function (message) {
        var id = serializer.digest(message);messages.hasOwnProperty(id) ? (_a = messages[id].sources).push.apply(_a, message.sources) : messages[id] = message;var _a;
      });var msgList = Object.keys(messages).map(function (id) {
        var mapper = serializer.createNameMapper(messages[id]),
            src = messages[id],
            nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes,
            transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);return transformedMessage.sources = src.sources, filterSources && transformedMessage.sources.forEach(function (source) {
          return source.filePath = filterSources(source.filePath);
        }), transformedMessage;
      });return serializer.write(msgList, this._locale);
    }, MessageBundle;
  }(),
      MapPlaceholderNames = function (_super) {
    function MapPlaceholderNames() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(MapPlaceholderNames, _super), MapPlaceholderNames.prototype.convert = function (nodes, mapper) {
      var _this = this;return mapper ? nodes.map(function (n) {
        return n.visit(_this, mapper);
      }) : nodes;
    }, MapPlaceholderNames.prototype.visitTagPlaceholder = function (ph, mapper) {
      var _this = this,
          startName = mapper.toPublicName(ph.startName),
          closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName,
          children = ph.children.map(function (n) {
        return n.visit(_this, mapper);
      });return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);
    }, MapPlaceholderNames.prototype.visitPlaceholder = function (ph, mapper) {
      return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
    }, MapPlaceholderNames.prototype.visitIcuPlaceholder = function (ph, mapper) {
      return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
    }, MapPlaceholderNames;
  }(CloneVisitor),
      Extractor = function () {
    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
      this.host = host, this.staticSymbolResolver = staticSymbolResolver, this.messageBundle = messageBundle, this.metadataResolver = metadataResolver;
    }return Extractor.prototype.extract = function (rootFiles) {
      var _this = this,
          programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host),
          _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver),
          files = _a.files,
          ngModules = _a.ngModules;return Promise.all(ngModules.map(function (ngModule) {
        return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, !1);
      })).then(function () {
        var errors = [];if (files.forEach(function (file) {
          var compMetas = [];file.directives.forEach(function (directiveType) {
            var dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);dirMeta && dirMeta.isComponent && compMetas.push(dirMeta);
          }), compMetas.forEach(function (compMeta) {
            var html = compMeta.template.template,
                interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
          });
        }), errors.length) throw new Error(errors.map(function (e) {
          return e.toString();
        }).join("\n"));return _this.messageBundle;
      });
    }, Extractor.create = function (host, locale) {
      var htmlParser = new I18NHtmlParser(new HtmlParser()),
          urlResolver = createOfflineCompileUrlResolver(),
          symbolCache = new StaticSymbolCache(),
          summaryResolver = new AotSummaryResolver(host, symbolCache),
          staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver),
          staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);StaticAndDynamicReflectionCapabilities.install(staticReflector);var config = new CompilerConfig({ defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated, useJit: !1 }),
          normalizer = new DirectiveNormalizer({ get: function (url) {
          return host.loadResource(url);
        } }, urlResolver, htmlParser, config),
          elementSchemaRegistry = new DomElementSchemaRegistry(),
          resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, new _angular_core.ɵConsole(), symbolCache, staticReflector),
          messageBundle = new MessageBundle(htmlParser, [], {}, locale),
          extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);return { extractor: extractor, staticReflector: staticReflector };
    }, Extractor;
  }(),
      _NO_RESOURCE_LOADER = { get: function (url) {
      throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + '"');
    } },
      baseHtmlParser = new _angular_core.InjectionToken("HtmlParser"),
      COMPILER_PROVIDERS = [{ provide: _angular_core.ɵReflector, useValue: _angular_core.ɵreflector }, { provide: _angular_core.ɵReflectorReader, useExisting: _angular_core.ɵReflector }, { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER }, SummaryResolver, _angular_core.ɵConsole, Lexer, Parser, { provide: baseHtmlParser, useClass: HtmlParser }, { provide: I18NHtmlParser, useFactory: i18nHtmlParserFactory, deps: [baseHtmlParser, [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)], [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)], [CompilerConfig], [_angular_core.ɵConsole]] }, { provide: HtmlParser, useExisting: I18NHtmlParser }, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, { provide: CompilerConfig, useValue: new CompilerConfig() }, JitCompiler, { provide: _angular_core.Compiler, useExisting: JitCompiler }, DomElementSchemaRegistry, { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver],
      JitCompilerFactory = function () {
    function JitCompilerFactory(defaultOptions) {
      var compilerOptions = { useDebug: _angular_core.isDevMode(), useJit: !0, defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated, missingTranslation: _angular_core.MissingTranslationStrategy.Warning, enableLegacyTemplate: !0 };this._defaultOptions = [compilerOptions].concat(defaultOptions);
    }return JitCompilerFactory.prototype.createCompiler = function (options) {
      void 0 === options && (options = []);var opts = _mergeOptions(this._defaultOptions.concat(options)),
          injector = _angular_core.ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, { provide: CompilerConfig, useFactory: function () {
          return new CompilerConfig({ useJit: opts.useJit, defaultEncapsulation: opts.defaultEncapsulation, missingTranslation: opts.missingTranslation, enableLegacyTemplate: opts.enableLegacyTemplate });
        }, deps: [] }, opts.providers]);return injector.get(_angular_core.Compiler);
    }, JitCompilerFactory;
  }();JitCompilerFactory.decorators = [{ type: CompilerInjectable }], JitCompilerFactory.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS] }] }];
  };var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, "coreDynamic", [{ provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: !0 }, { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory }, { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: !0 }]),
      ImportResolver = function () {
    function ImportResolver() {}return ImportResolver.prototype.fileNameToModuleName = function (importedFilePath, containingFilePath) {}, ImportResolver.prototype.getImportAs = function (symbol) {}, ImportResolver.prototype.getTypeArity = function (symbol) {}, ImportResolver;
  }();exports.VERSION = VERSION, exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS, exports.CompilerConfig = CompilerConfig, exports.JitCompiler = JitCompiler, exports.DirectiveResolver = DirectiveResolver, exports.PipeResolver = PipeResolver, exports.NgModuleResolver = NgModuleResolver, exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG, exports.InterpolationConfig = InterpolationConfig, exports.NgModuleCompiler = NgModuleCompiler, exports.ViewCompiler = ViewCompiler, exports.isSyntaxError = isSyntaxError, exports.syntaxError = syntaxError, exports.TextAst = TextAst, exports.BoundTextAst = BoundTextAst, exports.AttrAst = AttrAst, exports.BoundElementPropertyAst = BoundElementPropertyAst, exports.BoundEventAst = BoundEventAst, exports.ReferenceAst = ReferenceAst, exports.VariableAst = VariableAst, exports.ElementAst = ElementAst, exports.EmbeddedTemplateAst = EmbeddedTemplateAst, exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst, exports.DirectiveAst = DirectiveAst, exports.ProviderAst = ProviderAst, exports.ProviderAstType = ProviderAstType, exports.NgContentAst = NgContentAst, exports.PropertyBindingType = PropertyBindingType, exports.templateVisitAll = templateVisitAll, exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata, exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata, exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata, exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata, exports.CompileAnimationMetadata = CompileAnimationMetadata, exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata, exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata, exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata, exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata, exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata, exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata, exports.identifierName = identifierName, exports.identifierModuleUrl = identifierModuleUrl, exports.viewClassName = viewClassName, exports.rendererTypeName = rendererTypeName, exports.hostViewClassName = hostViewClassName, exports.dirWrapperClassName = dirWrapperClassName, exports.componentFactoryName = componentFactoryName, exports.CompileSummaryKind = CompileSummaryKind, exports.tokenName = tokenName, exports.tokenReference = tokenReference, exports.CompileStylesheetMetadata = CompileStylesheetMetadata, exports.CompileTemplateMetadata = CompileTemplateMetadata, exports.CompileDirectiveMetadata = CompileDirectiveMetadata, exports.createHostComponentMeta = createHostComponentMeta, exports.CompilePipeMetadata = CompilePipeMetadata, exports.CompileNgModuleMetadata = CompileNgModuleMetadata, exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata, exports.ProviderMeta = ProviderMeta, exports.flatten = flatten, exports.sourceUrl = sourceUrl, exports.templateSourceUrl = templateSourceUrl, exports.sharedStylesheetJitUrl = sharedStylesheetJitUrl, exports.ngModuleJitUrl = ngModuleJitUrl, exports.templateJitUrl = templateJitUrl, exports.createAotCompiler = createAotCompiler, exports.AotCompiler = AotCompiler, exports.analyzeNgModules = analyzeNgModules, exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules, exports.extractProgramSymbols = extractProgramSymbols, exports.GeneratedFile = GeneratedFile, exports.StaticReflector = StaticReflector, exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities, exports.StaticSymbol = StaticSymbol, exports.StaticSymbolCache = StaticSymbolCache, exports.ResolvedStaticSymbol = ResolvedStaticSymbol, exports.StaticSymbolResolver = StaticSymbolResolver, exports.unescapeIdentifier = unescapeIdentifier, exports.AotSummaryResolver = AotSummaryResolver, exports.SummaryResolver = SummaryResolver, exports.i18nHtmlParserFactory = i18nHtmlParserFactory, exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS, exports.JitCompilerFactory = JitCompilerFactory, exports.platformCoreDynamic = platformCoreDynamic, exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix, exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver, exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER, exports.UrlResolver = UrlResolver, exports.getUrlScheme = getUrlScheme, exports.ResourceLoader = ResourceLoader, exports.ElementSchemaRegistry = ElementSchemaRegistry, exports.Extractor = Extractor, exports.I18NHtmlParser = I18NHtmlParser, exports.MessageBundle = MessageBundle, exports.Serializer = Serializer, exports.Xliff = Xliff, exports.Xliff2 = Xliff2, exports.Xmb = Xmb, exports.Xtb = Xtb, exports.DirectiveNormalizer = DirectiveNormalizer, exports.ParserError = ParserError, exports.ParseSpan = ParseSpan, exports.AST = AST, exports.Quote = Quote, exports.EmptyExpr = EmptyExpr, exports.ImplicitReceiver = ImplicitReceiver, exports.Chain = Chain, exports.Conditional = Conditional, exports.PropertyRead = PropertyRead, exports.PropertyWrite = PropertyWrite, exports.SafePropertyRead = SafePropertyRead, exports.KeyedRead = KeyedRead, exports.KeyedWrite = KeyedWrite, exports.BindingPipe = BindingPipe, exports.LiteralPrimitive = LiteralPrimitive, exports.LiteralArray = LiteralArray, exports.LiteralMap = LiteralMap, exports.Interpolation = Interpolation, exports.Binary = Binary, exports.PrefixNot = PrefixNot, exports.MethodCall = MethodCall, exports.SafeMethodCall = SafeMethodCall, exports.FunctionCall = FunctionCall, exports.ASTWithSource = ASTWithSource, exports.TemplateBinding = TemplateBinding, exports.RecursiveAstVisitor = RecursiveAstVisitor, exports.AstTransformer = AstTransformer, exports.TokenType = TokenType, exports.Lexer = Lexer, exports.Token = Token, exports.EOF = EOF, exports.isIdentifier = isIdentifier, exports.isQuote = isQuote, exports.SplitInterpolation = SplitInterpolation, exports.TemplateBindingParseResult = TemplateBindingParseResult, exports.Parser = Parser, exports._ParseAST = _ParseAST, exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN, exports.CompileMetadataResolver = CompileMetadataResolver, exports.componentModuleUrl = componentModuleUrl, exports.Text = Text, exports.Expansion = Expansion, exports.ExpansionCase = ExpansionCase, exports.Attribute = Attribute$1, exports.Element = Element, exports.Comment = Comment, exports.visitAll = visitAll, exports.ParseTreeResult = ParseTreeResult, exports.TreeError = TreeError, exports.HtmlParser = HtmlParser, exports.HtmlTagDefinition = HtmlTagDefinition, exports.getHtmlTagDefinition = getHtmlTagDefinition, exports.TagContentType = TagContentType, exports.splitNsName = splitNsName, exports.isNgContainer = isNgContainer, exports.isNgContent = isNgContent, exports.isNgTemplate = isNgTemplate, exports.getNsPrefix = getNsPrefix, exports.mergeNsAndName = mergeNsAndName, exports.NAMED_ENTITIES = NAMED_ENTITIES, exports.ImportResolver = ImportResolver, exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript, exports.TypeScriptEmitter = TypeScriptEmitter, exports.ParseLocation = ParseLocation, exports.ParseSourceFile = ParseSourceFile, exports.ParseSourceSpan = ParseSourceSpan, exports.ParseErrorLevel = ParseErrorLevel, exports.ParseError = ParseError, exports.typeSourceSpan = typeSourceSpan, exports.DomElementSchemaRegistry = DomElementSchemaRegistry, exports.CssSelector = CssSelector, exports.SelectorMatcher = SelectorMatcher, exports.SelectorListContext = SelectorListContext, exports.SelectorContext = SelectorContext, exports.StylesCompileDependency = StylesCompileDependency, exports.StylesCompileResult = StylesCompileResult, exports.CompiledStylesheet = CompiledStylesheet, exports.StyleCompiler = StyleCompiler, exports.TemplateParseError = TemplateParseError, exports.TemplateParseResult = TemplateParseResult, exports.TemplateParser = TemplateParser, exports.splitClasses = splitClasses, exports.createElementCssSelector = createElementCssSelector, exports.removeSummaryDuplicates = removeSummaryDuplicates, Object.defineProperty(exports, "__esModule", { value: !0 });
});

/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/compiler"), require("@angular/core"), require("@angular/common"), require("@angular/platform-browser")) : "function" == "function" && true ? $__System.registerDynamic("11", ["10", "e", "12", "f"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("10"), $__require("e"), $__require("12"), $__require("f"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.common, global.ng.platformBrowser);
}(this, function (exports, _angular_compiler, _angular_core, _angular_common, _angular_platformBrowser) {
  "use strict";
  var __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      ResourceLoaderImpl = function (_super) {
    function ResourceLoaderImpl() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(ResourceLoaderImpl, _super), ResourceLoaderImpl.prototype.get = function (url) {
      var resolve,
          reject,
          promise = new Promise(function (res, rej) {
        resolve = res, reject = rej;
      }),
          xhr = new XMLHttpRequest();return xhr.open("GET", url, !0), xhr.responseType = "text", xhr.onload = function () {
        var response = xhr.response || xhr.responseText,
            status = 1223 === xhr.status ? 204 : xhr.status;0 === status && (status = response ? 200 : 0), 200 <= status && status <= 300 ? resolve(response) : reject("Failed to load " + url);
      }, xhr.onerror = function () {
        reject("Failed to load " + url);
      }, xhr.send(), promise;
    }, ResourceLoaderImpl;
  }(_angular_compiler.ResourceLoader);ResourceLoaderImpl.decorators = [{ type: _angular_core.Injectable }], ResourceLoaderImpl.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [_angular_platformBrowser.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, { provide: _angular_core.COMPILER_OPTIONS, useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] }, multi: !0 }, { provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_BROWSER_ID }],
      CachedResourceLoader = function (_super) {
    function CachedResourceLoader() {
      var _this = _super.call(this) || this;if (_this._cache = _angular_core.ɵglobal.$templateCache, null == _this._cache) throw new Error("CachedResourceLoader: Template cache was not found in $templateCache.");return _this;
    }return __extends(CachedResourceLoader, _super), CachedResourceLoader.prototype.get = function (url) {
      return this._cache.hasOwnProperty(url) ? Promise.resolve(this._cache[url]) : Promise.reject("CachedResourceLoader: Did not find cached template for " + url);
    }, CachedResourceLoader;
  }(_angular_compiler.ResourceLoader),
      VERSION = new _angular_core.Version("4.1.3"),
      RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }],
      platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, "browserDynamic", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER, exports.platformBrowserDynamic = platformBrowserDynamic, exports.VERSION = VERSION, exports.ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, exports.ɵResourceLoaderImpl = ResourceLoaderImpl, Object.defineProperty(exports, "__esModule", { value: !0 });
});

$__System.registerDynamic("13", ["e", "14", "15", "16"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var api_1 = $__require("14");
    var popup_1 = $__require("15");
    var noty_1 = $__require("16");
    var App = function () {
        function App(popupService, notyService, viewRef) {
            this.popupService = popupService;
            this.notyService = notyService;
            this.viewRef = viewRef;
        }
        App.prototype.ngOnInit = function () {
            var _this = this;
            this.popupService.viewContainerRef = this.viewRef;
            this.notyService.viewContainerRef = this.viewRef;
            api_1.sessionTimeoutStream.subscribe(function () {
                _this.popupService.renderPopup('Warning!', 'You session has timed out!\nPlease, reload the page').subscribe();
            });
        };
        return App;
    }();
    App = __decorate([core_1.Component({
        selector: 'app',
        templateUrl: '/assets/templates/app.html',
        providers: [popup_1.PopupService]
    }), __metadata("design:paramtypes", [popup_1.PopupService, noty_1.NotyService, core_1.ViewContainerRef])], App);
    exports.App = App;

});
$__System.registerDynamic('17', ['18', '19', '1a'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('18');
    var Observable_1 = $__require('19');
    var iterator_1 = $__require('1a');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IteratorObservable = function (_super) {
        __extends(IteratorObservable, _super);
        function IteratorObservable(iterator, scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
            if (iterator == null) {
                throw new Error('iterator cannot be null.');
            }
            this.iterator = getIterator(iterator);
        }
        IteratorObservable.create = function (iterator, scheduler) {
            return new IteratorObservable(iterator, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index,
                hasError = state.hasError,
                iterator = state.iterator,
                subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            subscriber.next(result.value);
            state.index = index + 1;
            if (subscriber.closed) {
                if (typeof iterator.return === 'function') {
                    iterator.return();
                }
                return;
            }
            this.schedule(state);
        };
        IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                iterator = _a.iterator,
                scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, iterator: iterator, subscriber: subscriber
                });
            } else {
                do {
                    var result = iterator.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    } else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.closed) {
                        if (typeof iterator.return === 'function') {
                            iterator.return();
                        }
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1.Observable);
    exports.IteratorObservable = IteratorObservable;
    var StringIterator = function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = str.length;
            }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator_1.iterator] = function () {
            return this;
        };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }();
    var ArrayIterator = function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = toLength(arr);
            }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator_1.iterator] = function () {
            return this;
        };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }();
    function getIterator(obj) {
        var i = obj[iterator_1.iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('object is not iterable');
        }
        return obj[iterator_1.iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root_1.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }

});
$__System.registerDynamic('1b', ['19', '1c', '1d'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('19');
    var ScalarObservable_1 = $__require('1c');
    var EmptyObservable_1 = $__require('1d');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayLikeObservable = function (_super) {
        __extends(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
        }
        ArrayLikeObservable.create = function (arrayLike, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            } else if (length === 1) {
                return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
            } else {
                return new ArrayLikeObservable(arrayLike, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike,
                index = state.index,
                length = state.length,
                subscriber = state.subscriber;
            if (subscriber.closed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            subscriber.next(arrayLike[index]);
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                arrayLike = _a.arrayLike,
                scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < length && !subscriber.closed; i++) {
                    subscriber.next(arrayLike[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1.Observable);
    exports.ArrayLikeObservable = ArrayLikeObservable;

});
$__System.registerDynamic('1e', ['1f', '20'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('1f');
    var Notification_1 = $__require('20');
    /**
     *
     * Re-emits all notifications from source Observable with specified scheduler.
     *
     * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
     *
     * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
     * notifications emitted by the source Observable. It might be useful, if you do not have control over
     * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
     *
     * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
     * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
     * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
     * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
     * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
     * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
     * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
     * little bit more, to ensure that they are emitted at expected moments.
     *
     * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
     * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
     * will delay all notifications - including error notifications - while `delay` will pass through error
     * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
     * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
     * for notification emissions in general.
     *
     * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
     * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
     *                                               // with async scheduler by default...
     *
     * intervals
     * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
     * .subscribe(val => {                           // scheduler to ensure smooth animation.
     *   someDiv.style.height = val + 'px';
     * });
     *
     * @see {@link delay}
     *
     * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
     * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
     * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
     * but with provided scheduler.
     *
     * @method observeOn
     * @owner Observable
     */
    function observeOn(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this.lift(new ObserveOnOperator(scheduler, delay));
    }
    exports.observeOn = observeOn;
    var ObserveOnOperator = function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }();
    exports.ObserveOnOperator = ObserveOnOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ObserveOnSubscriber = function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification,
                destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ObserveOnSubscriber = ObserveOnSubscriber;
    var ObserveOnMessage = function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }();
    exports.ObserveOnMessage = ObserveOnMessage;

});
$__System.registerDynamic('21', ['22', '23', '24', '25', '17', '26', '1b', '1a', '19', '1e', '27'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('22');
    var isArrayLike_1 = $__require('23');
    var isPromise_1 = $__require('24');
    var PromiseObservable_1 = $__require('25');
    var IteratorObservable_1 = $__require('17');
    var ArrayObservable_1 = $__require('26');
    var ArrayLikeObservable_1 = $__require('1b');
    var iterator_1 = $__require('1a');
    var Observable_1 = $__require('19');
    var observeOn_1 = $__require('1e');
    var observable_1 = $__require('27');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromObservable = function (_super) {
        __extends(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable from an Array, an array-like object, a Promise, an
         * iterable object, or an Observable-like object.
         *
         * <span class="informal">Converts almost anything to an Observable.</span>
         *
         * <img src="./img/from.png" width="100%">
         *
         * Convert various other objects and data types into Observables. `from`
         * converts a Promise or an array-like or an
         * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
         * object into an Observable that emits the items in that promise or array or
         * iterable. A String, in this context, is treated as an array of characters.
         * Observable-like objects (contains a function named with the ES2015 Symbol
         * for Observable) can also be converted through this operator.
         *
         * @example <caption>Converts an array to an Observable</caption>
         * var array = [10, 20, 30];
         * var result = Rx.Observable.from(array);
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following:
         * // 10 20 30
         *
         * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
         * function* generateDoubles(seed) {
         *   var i = seed;
         *   while (true) {
         *     yield i;
         *     i = 2 * i; // double it
         *   }
         * }
         *
         * var iterator = generateDoubles(3);
         * var result = Rx.Observable.from(iterator).take(10);
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following:
         * // 3 6 12 24 48 96 192 384 768 1536
         *
         * @see {@link create}
         * @see {@link fromEvent}
         * @see {@link fromEventPattern}
         * @see {@link fromPromise}
         *
         * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
         * Observable-like, an Array, an iterable or an array-like object to be
         * converted.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * emissions of values.
         * @return {Observable<T>} The Observable whose values are originally from the
         * input object that was converted.
         * @static true
         * @name from
         * @owner Observable
         */
        FromObservable.create = function (ish, scheduler) {
            if (ish != null) {
                if (typeof ish[observable_1.observable] === 'function') {
                    if (ish instanceof Observable_1.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                } else if (isArray_1.isArray(ish)) {
                    return new ArrayObservable_1.ArrayObservable(ish, scheduler);
                } else if (isPromise_1.isPromise(ish)) {
                    return new PromiseObservable_1.PromiseObservable(ish, scheduler);
                } else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, scheduler);
                } else if (isArrayLike_1.isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable_1.observable]().subscribe(subscriber);
            } else {
                return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1.Observable);
    exports.FromObservable = FromObservable;

});
$__System.registerDynamic("28", ["21"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var FromObservable_1 = $__require("21");
  exports.from = FromObservable_1.FromObservable.create;

});
$__System.registerDynamic("29", ["2a"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var mergeMap_1 = $__require("2a");
  /* tslint:enable:max-line-length */
  /**
   * Projects each source value to an Observable which is merged in the output
   * Observable, in a serialized fashion waiting for each one to complete before
   * merging the next.
   *
   * <span class="informal">Maps each value to an Observable, then flattens all of
   * these inner Observables using {@link concatAll}.</span>
   *
   * <img src="./img/concatMap.png" width="100%">
   *
   * Returns an Observable that emits items based on applying a function that you
   * supply to each item emitted by the source Observable, where that function
   * returns an (so-called "inner") Observable. Each new inner Observable is
   * concatenated with the previous inner Observable.
   *
   * __Warning:__ if source values arrive endlessly and faster than their
   * corresponding inner Observables can complete, it will result in memory issues
   * as inner Observables amass in an unbounded buffer waiting for their turn to
   * be subscribed to.
   *
   * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
   * result.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // (results are not concurrent)
   * // For every click on the "document" it will emit values 0 to 3 spaced
   * // on a 1000ms interval
   * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
   *
   * @see {@link concat}
   * @see {@link concatAll}
   * @see {@link concatMapTo}
   * @see {@link exhaustMap}
   * @see {@link mergeMap}
   * @see {@link switchMap}
   *
   * @param {function(value: T, ?index: number): ObservableInput} project A function
   * that, when applied to an item emitted by the source Observable, returns an
   * Observable.
   * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
   * A function to produce the value on the output Observable based on the values
   * and the indices of the source (outer) emission and the inner Observable
   * emission. The arguments passed to this function are:
   * - `outerValue`: the value that came from the source
   * - `innerValue`: the value that came from the projected Observable
   * - `outerIndex`: the "index" of the value that came from the source
   * - `innerIndex`: the "index" of the value from the projected Observable
   * @return {Observable} An observable of values merged from the projected
   * Observables as they were subscribed to, one at a time. Optionally, these
   * values may have been projected from a passed `projectResult` argument.
   * @return {Observable} An Observable that emits the result of applying the
   * projection function (and the optional `resultSelector`) to each item emitted
   * by the source Observable and taking values from each projected inner
   * Observable sequentially.
   * @method concatMap
   * @owner Observable
   */
  function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
  }
  exports.concatMap = concatMap;

});
$__System.registerDynamic("2b", ["1f"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("1f");
    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     *
     * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
     *  Observable.of(1, 2, 3, 4, 5, 6)
     *     .every(x => x < 5)
     *     .subscribe(x => console.log(x)); // -> false
     *
     * @param {function} predicate A function for determining if an item meets a specified condition.
     * @param {any} [thisArg] Optional object to use for `this` in the callback.
     * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every(predicate, thisArg) {
        return this.lift(new EveryOperator(predicate, thisArg, this));
    }
    exports.every = every;
    var EveryOperator = function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var EverySubscriber = function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1.Subscriber);

});
$__System.registerDynamic('2c', ['1f', '2d'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('1f');
    var EmptyError_1 = $__require('2d');
    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} An Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first(predicate, resultSelector, defaultValue) {
        return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.first = first;
    var FirstOperator = function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FirstSubscriber = function (_super) {
        __extends(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
            this._emitted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            if (!this._emitted) {
                this._emitted = true;
                destination.next(value);
                destination.complete();
                this.hasCompleted = true;
            }
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            } else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return FirstSubscriber;
    }(Subscriber_1.Subscriber);

});
$__System.registerDynamic('2a', ['2e', '2f'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1 = $__require('2e');
    var OuterSubscriber_1 = $__require('2f');
    /* tslint:enable:max-line-length */
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // a0
     * // b0
     * // c0
     * // a1
     * // b1
     * // c1
     * // continues to list a,b,c with respective ascending integers
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): ObservableInput} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
    }
    exports.mergeMap = mergeMap;
    var MergeMapOperator = function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }();
    exports.MergeMapOperator = MergeMapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapSubscriber = function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            } else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapSubscriber = MergeMapSubscriber;

});
$__System.registerDynamic("30", ["1f"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("1f");
    /* tslint:enable:max-line-length */
    /**
     * Applies an accumulator function over the source Observable, and returns the
     * accumulated result when the source completes, given an optional seed value.
     *
     * <span class="informal">Combines together all values emitted on the source,
     * using an accumulator function that knows how to join a new source value into
     * the accumulation from the past.</span>
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * Like
     * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
     * `reduce` applies an `accumulator` function against an accumulation and each
     * value of the source Observable (from the past) to reduce it to a single
     * value, emitted on the output Observable. Note that `reduce` will only emit
     * one value, only when the source Observable completes. It is equivalent to
     * applying operator {@link scan} followed by operator {@link last}.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events that happened in 5 seconds</caption>
     * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
     *   .takeUntil(Rx.Observable.interval(5000));
     * var ones = clicksInFiveSeconds.mapTo(1);
     * var seed = 0;
     * var count = ones.reduce((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link count}
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link scan}
     *
     * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
     * called on each source value.
     * @param {R} [seed] The initial accumulation value.
     * @return {Observable<R>} An Observable that emits a single value that is the
     * result of accumulating the values emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce(accumulator, seed) {
        var hasSeed = false;
        // providing a seed of `undefined` *should* be valid and trigger
        // hasSeed! so don't use `seed !== undefined` checks!
        // For this reason, we have to check it here at the original call site
        // otherwise inside Operator/Subscriber we won't know if `undefined`
        // means they didn't provide anything or if they literally provided `undefined`
        if (arguments.length >= 2) {
            hasSeed = true;
        }
        return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
    }
    exports.reduce = reduce;
    var ReduceOperator = function () {
        function ReduceOperator(accumulator, seed, hasSeed) {
            if (hasSeed === void 0) {
                hasSeed = false;
            }
            this.accumulator = accumulator;
            this.seed = seed;
            this.hasSeed = hasSeed;
        }
        ReduceOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
        };
        return ReduceOperator;
    }();
    exports.ReduceOperator = ReduceOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ReduceSubscriber = function (_super) {
        __extends(ReduceSubscriber, _super);
        function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.hasSeed = hasSeed;
            this.index = 0;
            this.hasValue = false;
            this.acc = seed;
            if (!this.hasSeed) {
                this.index++;
            }
        }
        ReduceSubscriber.prototype._next = function (value) {
            if (this.hasValue || (this.hasValue = this.hasSeed)) {
                this._tryReduce(value);
            } else {
                this.acc = value;
                this.hasValue = true;
            }
        };
        ReduceSubscriber.prototype._tryReduce = function (value) {
            var result;
            try {
                result = this.accumulator(this.acc, value, this.index++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.acc = result;
        };
        ReduceSubscriber.prototype._complete = function () {
            if (this.hasValue || this.hasSeed) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        };
        return ReduceSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ReduceSubscriber = ReduceSubscriber;

});
$__System.registerDynamic("31", ["32"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var mergeAll_1 = $__require("32");
  /* tslint:enable:max-line-length */
  /**
   * Converts a higher-order Observable into a first-order Observable by
   * concatenating the inner Observables in order.
   *
   * <span class="informal">Flattens an Observable-of-Observables by putting one
   * inner Observable after the other.</span>
   *
   * <img src="./img/concatAll.png" width="100%">
   *
   * Joins every Observable emitted by the source (a higher-order Observable), in
   * a serial fashion. It subscribes to each inner Observable only after the
   * previous inner Observable has completed, and merges all of their values into
   * the returned observable.
   *
   * __Warning:__ If the source Observable emits Observables quickly and
   * endlessly, and the inner Observables it emits generally complete slower than
   * the source emits, you can run into memory issues as the incoming Observables
   * collect in an unbounded buffer.
   *
   * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
   * var firstOrder = higherOrder.concatAll();
   * firstOrder.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // (results are not concurrent)
   * // For every click on the "document" it will emit values 0 to 3 spaced
   * // on a 1000ms interval
   * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
   *
   * @see {@link combineAll}
   * @see {@link concat}
   * @see {@link concatMap}
   * @see {@link concatMapTo}
   * @see {@link exhaust}
   * @see {@link mergeAll}
   * @see {@link switch}
   * @see {@link zipAll}
   *
   * @return {Observable} An Observable emitting values from all the inner
   * Observables concatenated.
   * @method concatAll
   * @owner Observable
   */
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;

});
$__System.registerDynamic('2d', [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = function (_super) {
        __extends(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error);
    exports.EmptyError = EmptyError;

});
$__System.registerDynamic('33', ['1f', '2d'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('1f');
    var EmptyError_1 = $__require('2d');
    /* tslint:enable:max-line-length */
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - The condition any source emitted item has to satisfy.
     * @return {Observable} An Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last(predicate, resultSelector, defaultValue) {
        return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.last = last;
    var LastOperator = function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var LastSubscriber = function (_super) {
        __extends(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            } else {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return LastSubscriber;
    }(Subscriber_1.Subscriber);

});
/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/common"), require("@angular/core"), require("rxjs/BehaviorSubject"), require("rxjs/Subject"), require("rxjs/observable/from"), require("rxjs/observable/of"), require("rxjs/operator/concatMap"), require("rxjs/operator/every"), require("rxjs/operator/first"), require("rxjs/operator/map"), require("rxjs/operator/mergeMap"), require("rxjs/operator/reduce"), require("rxjs/Observable"), require("rxjs/operator/catch"), require("rxjs/operator/concatAll"), require("rxjs/util/EmptyError"), require("rxjs/observable/fromPromise"), require("rxjs/operator/last"), require("rxjs/operator/mergeAll"), require("@angular/platform-browser"), require("rxjs/operator/filter")) : "function" == "function" && true ? $__System.registerDynamic("34", ["12", "e", "35", "36", "28", "37", "29", "2b", "2c", "38", "2a", "30", "19", "39", "31", "2d", "3a", "33", "32", "f", "3b"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("12"), $__require("e"), $__require("35"), $__require("36"), $__require("28"), $__require("37"), $__require("29"), $__require("2b"), $__require("2c"), $__require("38"), $__require("2a"), $__require("30"), $__require("19"), $__require("39"), $__require("31"), $__require("2d"), $__require("3a"), $__require("33"), $__require("32"), $__require("f"), $__require("3b"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}), global.ng.common, global.ng.core, global.Rx, global.Rx, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.ng.platformBrowser, global.Rx.Observable.prototype);
}(this, function (exports, _angular_common, _angular_core, rxjs_BehaviorSubject, rxjs_Subject, rxjs_observable_from, rxjs_observable_of, rxjs_operator_concatMap, rxjs_operator_every, rxjs_operator_first, rxjs_operator_map, rxjs_operator_mergeMap, rxjs_operator_reduce, rxjs_Observable, rxjs_operator_catch, rxjs_operator_concatAll, rxjs_util_EmptyError, rxjs_observable_fromPromise, rxjs_operator_last, rxjs_operator_mergeAll, _angular_platformBrowser, rxjs_operator_filter) {
  "use strict";
  function convertToParamMap(params) {
    return new ParamsAsMap(params);
  }function navigationCancelingError(message) {
    var error = Error("NavigationCancelingError: " + message);return error[NAVIGATION_CANCELING_ERROR] = !0, error;
  }function isNavigationCancelingError(error) {
    return error[NAVIGATION_CANCELING_ERROR];
  }function defaultUrlMatcher(segments, segmentGroup, route) {
    var parts = route.path.split("/");if (parts.length > segments.length) return null;if ("full" === route.pathMatch && (segmentGroup.hasChildren() || parts.length < segments.length)) return null;for (var posParams = {}, index = 0; index < parts.length; index++) {
      var part = parts[index],
          segment = segments[index],
          isParameter = part.startsWith(":");if (isParameter) posParams[part.substring(1)] = segment;else if (part !== segment.path) return null;
    }return { consumed: segments.slice(0, parts.length), posParams: posParams };
  }function validateConfig(config, parentPath) {
    void 0 === parentPath && (parentPath = "");for (var i = 0; i < config.length; i++) {
      var route = config[i],
          fullPath = getFullPath(parentPath, route);validateNode(route, fullPath);
    }
  }function validateNode(route, fullPath) {
    if (!route) throw new Error("\n      Invalid configuration of route '" + fullPath + "': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");if (Array.isArray(route)) throw new Error("Invalid configuration of route '" + fullPath + "': Array cannot be specified");if (!route.component && route.outlet && route.outlet !== PRIMARY_OUTLET) throw new Error("Invalid configuration of route '" + fullPath + "': a componentless route cannot have a named outlet set");if (route.redirectTo && route.children) throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and children cannot be used together");if (route.redirectTo && route.loadChildren) throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and loadChildren cannot be used together");if (route.children && route.loadChildren) throw new Error("Invalid configuration of route '" + fullPath + "': children and loadChildren cannot be used together");if (route.redirectTo && route.component) throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and component cannot be used together");if (route.path && route.matcher) throw new Error("Invalid configuration of route '" + fullPath + "': path and matcher cannot be used together");if (void 0 === route.redirectTo && !route.component && !route.children && !route.loadChildren) throw new Error("Invalid configuration of route '" + fullPath + "'. One of the following must be provided: component, redirectTo, children or loadChildren");if (void 0 === route.path && void 0 === route.matcher) throw new Error("Invalid configuration of route '" + fullPath + "': routes must have either a path or a matcher specified");if ("string" == typeof route.path && "/" === route.path.charAt(0)) throw new Error("Invalid configuration of route '" + fullPath + "': path cannot start with a slash");if ("" === route.path && void 0 !== route.redirectTo && void 0 === route.pathMatch) {
      var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";throw new Error("Invalid configuration of route '{path: \"" + fullPath + '", redirectTo: "' + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
    }if (void 0 !== route.pathMatch && "full" !== route.pathMatch && "prefix" !== route.pathMatch) throw new Error("Invalid configuration of route '" + fullPath + "': pathMatch can only be set to 'prefix' or 'full'");route.children && validateConfig(route.children, fullPath);
  }function getFullPath(parentPath, currentRoute) {
    return currentRoute ? parentPath || currentRoute.path ? parentPath && !currentRoute.path ? parentPath + "/" : !parentPath && currentRoute.path ? currentRoute.path : parentPath + "/" + currentRoute.path : "" : parentPath;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function shallowEqualArrays(a, b) {
    if (a.length !== b.length) return !1;for (var i = 0; i < a.length; ++i) if (!shallowEqual(a[i], b[i])) return !1;return !0;
  }function shallowEqual(a, b) {
    var k1 = Object.keys(a),
        k2 = Object.keys(b);if (k1.length != k2.length) return !1;for (var key, i = 0; i < k1.length; i++) if (key = k1[i], a[key] !== b[key]) return !1;return !0;
  }function flatten(arr) {
    return Array.prototype.concat.apply([], arr);
  }function last$1(a) {
    return a.length > 0 ? a[a.length - 1] : null;
  }function forEach(map$$1, callback) {
    for (var prop in map$$1) map$$1.hasOwnProperty(prop) && callback(map$$1[prop], prop);
  }function waitForMap(obj, fn) {
    if (0 === Object.keys(obj).length) return rxjs_observable_of.of({});var waitHead = [],
        waitTail = [],
        res = {};forEach(obj, function (a, k) {
      var mapped = rxjs_operator_map.map.call(fn(k, a), function (r) {
        return res[k] = r;
      });k === PRIMARY_OUTLET ? waitHead.push(mapped) : waitTail.push(mapped);
    });var concat$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitHead.concat(waitTail))),
        last$ = rxjs_operator_last.last.call(concat$);return rxjs_operator_map.map.call(last$, function () {
      return res;
    });
  }function andObservables(observables) {
    var merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);return rxjs_operator_every.every.call(merged$, function (result) {
      return result === !0;
    });
  }function wrapIntoObservable(value) {
    return _angular_core.ɵisObservable(value) ? value : _angular_core.ɵisPromise(value) ? rxjs_observable_fromPromise.fromPromise(Promise.resolve(value)) : rxjs_observable_of.of(value);
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function createEmptyUrlTree() {
    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
  }function containsTree(container, containee, exact) {
    return exact ? equalQueryParams(container.queryParams, containee.queryParams) && equalSegmentGroups(container.root, containee.root) : containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root);
  }function equalQueryParams(container, containee) {
    return shallowEqual(container, containee);
  }function equalSegmentGroups(container, containee) {
    if (!equalPath(container.segments, containee.segments)) return !1;if (container.numberOfChildren !== containee.numberOfChildren) return !1;for (var c in containee.children) {
      if (!container.children[c]) return !1;if (!equalSegmentGroups(container.children[c], containee.children[c])) return !1;
    }return !0;
  }function containsQueryParams(container, containee) {
    return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(function (key) {
      return containee[key] === container[key];
    });
  }function containsSegmentGroup(container, containee) {
    return containsSegmentGroupHelper(container, containee, containee.segments);
  }function containsSegmentGroupHelper(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
      var current = container.segments.slice(0, containeePaths.length);return !!equalPath(current, containeePaths) && !containee.hasChildren();
    }if (container.segments.length === containeePaths.length) {
      if (!equalPath(container.segments, containeePaths)) return !1;for (var c in containee.children) {
        if (!container.children[c]) return !1;if (!containsSegmentGroup(container.children[c], containee.children[c])) return !1;
      }return !0;
    }var current = containeePaths.slice(0, container.segments.length),
        next = containeePaths.slice(container.segments.length);return !!equalPath(container.segments, current) && !!container.children[PRIMARY_OUTLET] && containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
  }function equalSegments(as, bs) {
    return equalPath(as, bs) && as.every(function (a, i) {
      return shallowEqual(a.parameters, bs[i].parameters);
    });
  }function equalPath(as, bs) {
    return as.length === bs.length && as.every(function (a, i) {
      return a.path === bs[i].path;
    });
  }function mapChildrenIntoArray(segment, fn) {
    var res = [];return forEach(segment.children, function (child, childOutlet) {
      childOutlet === PRIMARY_OUTLET && (res = res.concat(fn(child, childOutlet)));
    }), forEach(segment.children, function (child, childOutlet) {
      childOutlet !== PRIMARY_OUTLET && (res = res.concat(fn(child, childOutlet)));
    }), res;
  }function serializePaths(segment) {
    return segment.segments.map(function (p) {
      return serializePath(p);
    }).join("/");
  }function serializeSegment(segment, root) {
    if (!segment.hasChildren()) return serializePaths(segment);if (root) {
      var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], !1) : "",
          children_1 = [];return forEach(segment.children, function (v, k) {
        k !== PRIMARY_OUTLET && children_1.push(k + ":" + serializeSegment(v, !1));
      }), children_1.length > 0 ? primary + "(" + children_1.join("//") + ")" : primary;
    }var children = mapChildrenIntoArray(segment, function (v, k) {
      return k === PRIMARY_OUTLET ? [serializeSegment(segment.children[PRIMARY_OUTLET], !1)] : [k + ":" + serializeSegment(v, !1)];
    });return serializePaths(segment) + "/(" + children.join("//") + ")";
  }function encode(s) {
    return encodeURIComponent(s);
  }function decode(s) {
    return decodeURIComponent(s);
  }function serializePath(path) {
    return "" + encode(path.path) + serializeParams(path.parameters);
  }function serializeParams(params) {
    return Object.keys(params).map(function (key) {
      return ";" + encode(key) + "=" + encode(params[key]);
    }).join("");
  }function serializeQueryParams(params) {
    var strParams = Object.keys(params).map(function (name) {
      var value = params[name];return Array.isArray(value) ? value.map(function (v) {
        return encode(name) + "=" + encode(v);
      }).join("&") : encode(name) + "=" + encode(value);
    });return strParams.length ? "?" + strParams.join("&") : "";
  }function matchSegments(str) {
    var match = str.match(SEGMENT_RE);return match ? match[0] : "";
  }function matchQueryParams(str) {
    var match = str.match(QUERY_PARAM_RE);return match ? match[0] : "";
  }function matchUrlQueryParamValue(str) {
    var match = str.match(QUERY_PARAM_VALUE_RE);return match ? match[0] : "";
  }function noMatch(segmentGroup) {
    return new rxjs_Observable.Observable(function (obs) {
      return obs.error(new NoMatch(segmentGroup));
    });
  }function absoluteRedirect(newTree) {
    return new rxjs_Observable.Observable(function (obs) {
      return obs.error(new AbsoluteRedirect(newTree));
    });
  }function namedOutletsRedirect(redirectTo) {
    return new rxjs_Observable.Observable(function (obs) {
      return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'"));
    });
  }function canLoadFails(route) {
    return new rxjs_Observable.Observable(function (obs) {
      return obs.error(navigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
    });
  }function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
  }function runCanLoadGuard(moduleInjector, route) {
    var canLoad = route.canLoad;if (!canLoad || 0 === canLoad.length) return rxjs_observable_of.of(!0);var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function (injectionToken) {
      var guard = moduleInjector.get(injectionToken);return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));
    });return andObservables(obs);
  }function match(segmentGroup, route, segments) {
    if ("" === route.path) return "full" === route.pathMatch && (segmentGroup.hasChildren() || segments.length > 0) ? { matched: !1, consumedSegments: [], lastChild: 0, positionalParamSegments: {} } : { matched: !0, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };var matcher = route.matcher || defaultUrlMatcher,
        res = matcher(segments, segmentGroup, route);return res ? { matched: !0, consumedSegments: res.consumed, lastChild: res.consumed.length, positionalParamSegments: res.posParams } : { matched: !1, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
  }function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
    }if (0 === slicedSegments.length && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };
    }return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };
  }function mergeTrivialChildren(s) {
    if (1 === s.numberOfChildren && s.children[PRIMARY_OUTLET]) {
      var c = s.children[PRIMARY_OUTLET];return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    }return s;
  }function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    for (var res = {}, _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
      var r = routes_1[_i];isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)] && (res[getOutlet$1(r)] = new UrlSegmentGroup([], {}));
    }return __assign$1({}, children, res);
  }function createChildrenForEmptySegments(routes, primarySegmentGroup) {
    var res = {};res[PRIMARY_OUTLET] = primarySegmentGroup;for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
      var r = routes_2[_i];"" === r.path && getOutlet$1(r) !== PRIMARY_OUTLET && (res[getOutlet$1(r)] = new UrlSegmentGroup([], {}));
    }return res;
  }function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {
    return routes.some(function (r) {
      return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet$1(r) !== PRIMARY_OUTLET;
    });
  }function containsEmptyPathRedirects(segmentGroup, segments, routes) {
    return routes.some(function (r) {
      return isEmptyPathRedirect(segmentGroup, segments, r);
    });
  }function isEmptyPathRedirect(segmentGroup, segments, r) {
    return (!(segmentGroup.hasChildren() || segments.length > 0) || "full" !== r.pathMatch) && "" === r.path && void 0 !== r.redirectTo;
  }function getOutlet$1(route) {
    return route.outlet || PRIMARY_OUTLET;
  }function findNode(expected, c) {
    if (expected === c.value) return c;for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i],
          r = findNode(expected, cc);if (r) return r;
    }return null;
  }function findPath(expected, c, collected) {
    if (collected.push(c), expected === c.value) return collected;for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i],
          cloned = collected.slice(0),
          r = findPath(expected, cc, cloned);if (r.length > 0) return r;
    }return [];
  }function createEmptyState(urlTree, rootComponent) {
    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent),
        emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment("", {})]),
        emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({}),
        emptyData = new rxjs_BehaviorSubject.BehaviorSubject({}),
        emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({}),
        fragment = new rxjs_BehaviorSubject.BehaviorSubject(""),
        activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);return activated.snapshot = snapshot.root, new RouterState(new TreeNode(activated, []), snapshot);
  }function createEmptyStateSnapshot(urlTree, rootComponent) {
    var emptyParams = {},
        emptyData = {},
        emptyQueryParams = {},
        fragment = "",
        activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});return new RouterStateSnapshot("", new TreeNode(activated, []));
  }function inheritedParamsDataResolve(route) {
    for (var pathToRoot = route.pathFromRoot, inhertingStartingFrom = pathToRoot.length - 1; inhertingStartingFrom >= 1;) {
      var current = pathToRoot[inhertingStartingFrom],
          parent = pathToRoot[inhertingStartingFrom - 1];if (current.routeConfig && "" === current.routeConfig.path) inhertingStartingFrom--;else {
        if (parent.component) break;inhertingStartingFrom--;
      }
    }return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {
      var params = __assign$2({}, res.params, curr.params),
          data = __assign$2({}, res.data, curr.data),
          resolve = __assign$2({}, res.resolve, curr._resolvedData);return { params: params, data: data, resolve: resolve };
    }, { params: {}, data: {}, resolve: {} });
  }function setRouterStateSnapshot(state, node) {
    node.value._routerState = state, node.children.forEach(function (c) {
      return setRouterStateSnapshot(state, c);
    });
  }function serializeNode(node) {
    var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : "";return "" + node.value + c;
  }function advanceActivatedRoute(route) {
    if (route.snapshot) {
      var currentSnapshot = route.snapshot;route.snapshot = route._futureSnapshot, shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams) || route.queryParams.next(route._futureSnapshot.queryParams), currentSnapshot.fragment !== route._futureSnapshot.fragment && route.fragment.next(route._futureSnapshot.fragment), shallowEqual(currentSnapshot.params, route._futureSnapshot.params) || route.params.next(route._futureSnapshot.params), shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url) || route.url.next(route._futureSnapshot.url), shallowEqual(currentSnapshot.data, route._futureSnapshot.data) || route.data.next(route._futureSnapshot.data);
    } else route.snapshot = route._futureSnapshot, route.data.next(route._futureSnapshot.data);
  }function equalParamsAndUrlSegments(a, b) {
    var equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url),
        parentsMismatch = !a.parent != !b.parent;return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function createRouterState(routeReuseStrategy, curr, prevState) {
    var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : void 0);return new RouterState(root, curr);
  }function createNode(routeReuseStrategy, curr, prevState) {
    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
      var value = prevState.value;value._futureSnapshot = curr.value;var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);return new TreeNode(value, children);
    }if (routeReuseStrategy.retrieve(curr.value)) {
      var tree_1 = routeReuseStrategy.retrieve(curr.value).route;return setFutureSnapshotsOfActivatedRoutes(curr, tree_1), tree_1;
    }var value = createActivatedRoute(curr.value),
        children = curr.children.map(function (c) {
      return createNode(routeReuseStrategy, c);
    });return new TreeNode(value, children);
  }function setFutureSnapshotsOfActivatedRoutes(curr, result) {
    if (curr.value.routeConfig !== result.value.routeConfig) throw new Error("Cannot reattach ActivatedRouteSnapshot created from a different route");if (curr.children.length !== result.children.length) throw new Error("Cannot reattach ActivatedRouteSnapshot with a different number of children");result.value._futureSnapshot = curr.value;for (var i = 0; i < curr.children.length; ++i) setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
  }function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
    return curr.children.map(function (child) {
      for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
        var p = _a[_i];if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) return createNode(routeReuseStrategy, child, p);
      }return createNode(routeReuseStrategy, child);
    });
  }function createActivatedRoute(c) {
    return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (0 === commands.length) return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);var nav = computeNavigation(commands);if (nav.toRoot()) return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);var startingPosition = findStartingPosition(nav, urlTree, route),
        segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
  }function isMatrixParams(command) {
    return "object" == typeof command && null != command && !command.outlets && !command.segmentPath;
  }function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
    var qp = {};return queryParams && forEach(queryParams, function (value, name) {
      qp[name] = Array.isArray(value) ? value.map(function (v) {
        return "" + v;
      }) : "" + value;
    }), urlTree.root === oldSegmentGroup ? new UrlTree(newSegmentGroup, qp, fragment) : new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
  }function replaceSegment(current, oldSegment, newSegment) {
    var children = {};return forEach(current.children, function (c, outletName) {
      c === oldSegment ? children[outletName] = newSegment : children[outletName] = replaceSegment(c, oldSegment, newSegment);
    }), new UrlSegmentGroup(current.segments, children);
  }function computeNavigation(commands) {
    if ("string" == typeof commands[0] && 1 === commands.length && "/" === commands[0]) return new Navigation(!0, 0, commands);var numberOfDoubleDots = 0,
        isAbsolute = !1,
        res = commands.reduce(function (res, cmd, cmdIdx) {
      if ("object" == typeof cmd && null != cmd) {
        if (cmd.outlets) {
          var outlets_1 = {};return forEach(cmd.outlets, function (commands, name) {
            outlets_1[name] = "string" == typeof commands ? commands.split("/") : commands;
          }), res.concat([{ outlets: outlets_1 }]);
        }if (cmd.segmentPath) return res.concat([cmd.segmentPath]);
      }return "string" != typeof cmd ? res.concat([cmd]) : 0 === cmdIdx ? (cmd.split("/").forEach(function (urlPart, partIndex) {
        0 == partIndex && "." === urlPart || (0 == partIndex && "" === urlPart ? isAbsolute = !0 : ".." === urlPart ? numberOfDoubleDots++ : "" != urlPart && res.push(urlPart));
      }), res) : res.concat([cmd]);
    }, []);return new Navigation(isAbsolute, numberOfDoubleDots, res);
  }function findStartingPosition(nav, tree, route) {
    if (nav.isAbsolute) return new Position(tree.root, !0, 0);if (route.snapshot._lastPathIndex === -1) return new Position(route.snapshot._urlSegment, !0, 0);var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1,
        index = route.snapshot._lastPathIndex + modifier;return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
  }function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    for (var g = group, ci = index, dd = numberOfDoubleDots; dd > ci;) {
      if (dd -= ci, g = g.parent, !g) throw new Error("Invalid number of '../'");ci = g.segments.length;
    }return new Position(g, !1, ci - dd);
  }function getPath(command) {
    return "object" == typeof command && null != command && command.outlets ? command.outlets[PRIMARY_OUTLET] : "" + command;
  }function getOutlets(commands) {
    return "object" != typeof commands[0] ? (_a = {}, _a[PRIMARY_OUTLET] = commands, _a) : void 0 === commands[0].outlets ? (_b = {}, _b[PRIMARY_OUTLET] = commands, _b) : commands[0].outlets;var _a, _b;
  }function updateSegmentGroup(segmentGroup, startIndex, commands) {
    if (segmentGroup || (segmentGroup = new UrlSegmentGroup([], {})), 0 === segmentGroup.segments.length && segmentGroup.hasChildren()) return updateSegmentGroupChildren(segmentGroup, startIndex, commands);var m = prefixedWith(segmentGroup, startIndex, commands),
        slicedCommands = commands.slice(m.commandIndex);if (m.match && m.pathIndex < segmentGroup.segments.length) {
      var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});return g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children), updateSegmentGroupChildren(g, 0, slicedCommands);
    }return m.match && 0 === slicedCommands.length ? new UrlSegmentGroup(segmentGroup.segments, {}) : m.match && !segmentGroup.hasChildren() ? createNewSegmentGroup(segmentGroup, startIndex, commands) : m.match ? updateSegmentGroupChildren(segmentGroup, 0, slicedCommands) : createNewSegmentGroup(segmentGroup, startIndex, commands);
  }function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (0 === commands.length) return new UrlSegmentGroup(segmentGroup.segments, {});var outlets_2 = getOutlets(commands),
        children_2 = {};return forEach(outlets_2, function (commands, outlet) {
      null !== commands && (children_2[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands));
    }), forEach(segmentGroup.children, function (child, childOutlet) {
      void 0 === outlets_2[childOutlet] && (children_2[childOutlet] = child);
    }), new UrlSegmentGroup(segmentGroup.segments, children_2);
  }function prefixedWith(segmentGroup, startIndex, commands) {
    for (var currentCommandIndex = 0, currentPathIndex = startIndex, noMatch = { match: !1, pathIndex: 0, commandIndex: 0 }; currentPathIndex < segmentGroup.segments.length;) {
      if (currentCommandIndex >= commands.length) return noMatch;var path = segmentGroup.segments[currentPathIndex],
          curr = getPath(commands[currentCommandIndex]),
          next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;if (currentPathIndex > 0 && void 0 === curr) break;if (curr && next && "object" == typeof next && void 0 === next.outlets) {
        if (!compare(curr, next, path)) return noMatch;currentCommandIndex += 2;
      } else {
        if (!compare(curr, {}, path)) return noMatch;currentCommandIndex++;
      }currentPathIndex++;
    }return { match: !0, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
  }function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    for (var paths = segmentGroup.segments.slice(0, startIndex), i = 0; i < commands.length;) {
      if ("object" == typeof commands[i] && void 0 !== commands[i].outlets) {
        var children = createNewSegmentChildren(commands[i].outlets);return new UrlSegmentGroup(paths, children);
      }if (0 === i && isMatrixParams(commands[0])) {
        var p = segmentGroup.segments[startIndex];paths.push(new UrlSegment(p.path, commands[0])), i++;
      } else {
        var curr = getPath(commands[i]),
            next = i < commands.length - 1 ? commands[i + 1] : null;curr && next && isMatrixParams(next) ? (paths.push(new UrlSegment(curr, stringify(next))), i += 2) : (paths.push(new UrlSegment(curr, {})), i++);
      }
    }return new UrlSegmentGroup(paths, {});
  }function createNewSegmentChildren(outlets) {
    var children = {};return forEach(outlets, function (commands, outlet) {
      null !== commands && (children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands));
    }), children;
  }function stringify(params) {
    var res = {};return forEach(params, function (v, k) {
      return res[k] = "" + v;
    }), res;
  }function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
  }function recognize(rootComponentType, config, urlTree, url) {
    return new Recognizer(rootComponentType, config, urlTree, url).recognize();
  }function sortActivatedRouteSnapshots(nodes) {
    nodes.sort(function (a, b) {
      return a.value.outlet === PRIMARY_OUTLET ? -1 : b.value.outlet === PRIMARY_OUTLET ? 1 : a.value.outlet.localeCompare(b.value.outlet);
    });
  }function getChildConfig(route) {
    return route.children ? route.children : route.loadChildren ? route._loadedConfig.routes : [];
  }function match$1(segmentGroup, route, segments) {
    if ("" === route.path) {
      if ("full" === route.pathMatch && (segmentGroup.hasChildren() || segments.length > 0)) throw new NoMatch$1();return { consumedSegments: [], lastChild: 0, parameters: {} };
    }var matcher = route.matcher || defaultUrlMatcher,
        res = matcher(segments, segmentGroup, route);if (!res) throw new NoMatch$1();var posParams = {};forEach(res.posParams, function (v, k) {
      posParams[k] = v.path;
    });var parameters = __assign$3({}, posParams, res.consumed[res.consumed.length - 1].parameters);return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };
  }function checkOutletNameUniqueness(nodes) {
    var names = {};nodes.forEach(function (n) {
      var routeWithSameOutletName = names[n.value.outlet];if (routeWithSameOutletName) {
        var p = routeWithSameOutletName.url.map(function (s) {
          return s.toString();
        }).join("/"),
            c = n.value.url.map(function (s) {
          return s.toString();
        }).join("/");throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
      }names[n.value.outlet] = n.value;
    });
  }function getSourceSegmentGroup(segmentGroup) {
    for (var s = segmentGroup; s._sourceSegment;) s = s._sourceSegment;return s;
  }function getPathIndexShift(segmentGroup) {
    for (var s = segmentGroup, res = s._segmentIndexShift ? s._segmentIndexShift : 0; s._sourceSegment;) s = s._sourceSegment, res += s._segmentIndexShift ? s._segmentIndexShift : 0;return res - 1;
  }function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));return s_1._sourceSegment = segmentGroup, s_1._segmentIndexShift = consumedSegments.length, { segmentGroup: s_1, slicedSegments: [] };
    }if (0 === slicedSegments.length && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
      var s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));return s_2._sourceSegment = segmentGroup, s_2._segmentIndexShift = consumedSegments.length, { segmentGroup: s_2, slicedSegments: slicedSegments };
    }var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);return s._sourceSegment = segmentGroup, s._segmentIndexShift = consumedSegments.length, { segmentGroup: s, slicedSegments: slicedSegments };
  }function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    for (var res = {}, _i = 0, routes_3 = routes; _i < routes_3.length; _i++) {
      var r = routes_3[_i];if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
        var s = new UrlSegmentGroup([], {});s._sourceSegment = segmentGroup, s._segmentIndexShift = segmentGroup.segments.length, res[getOutlet$2(r)] = s;
      }
    }return __assign$3({}, children, res);
  }function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
    var res = {};res[PRIMARY_OUTLET] = primarySegment, primarySegment._sourceSegment = segmentGroup, primarySegment._segmentIndexShift = consumedSegments.length;for (var _i = 0, routes_4 = routes; _i < routes_4.length; _i++) {
      var r = routes_4[_i];if ("" === r.path && getOutlet$2(r) !== PRIMARY_OUTLET) {
        var s = new UrlSegmentGroup([], {});s._sourceSegment = segmentGroup, s._segmentIndexShift = consumedSegments.length, res[getOutlet$2(r)] = s;
      }
    }return res;
  }function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.some(function (r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$2(r) !== PRIMARY_OUTLET;
    });
  }function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
    return routes.some(function (r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r);
    });
  }function emptyPathMatch(segmentGroup, slicedSegments, r) {
    return (!(segmentGroup.hasChildren() || slicedSegments.length > 0) || "full" !== r.pathMatch) && "" === r.path && void 0 === r.redirectTo;
  }function getOutlet$2(route) {
    return route.outlet || PRIMARY_OUTLET;
  }function getData(route) {
    return route.data || {};
  }function getResolve(route) {
    return route.resolve || {};
  }function defaultErrorHandler(error) {
    throw error;
  }function defaultRouterHook(snapshot) {
    return rxjs_observable_of.of(null);
  }function advanceActivatedRouteNodeAndItsChildren(node) {
    advanceActivatedRoute(node.value), node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
  }function parentLoadedConfig(snapshot) {
    for (var s = snapshot.parent; s; s = s.parent) {
      var route = s._routeConfig;if (route && route._loadedConfig) return route._loadedConfig;if (route && route.component) return null;
    }return null;
  }function closestLoadedConfig(snapshot) {
    if (!snapshot) return null;for (var s = snapshot.parent; s; s = s.parent) {
      var route = s._routeConfig;if (route && route._loadedConfig) return route._loadedConfig;
    }return null;
  }function nodeChildrenAsMap(node) {
    var map$$1 = {};return node && node.children.forEach(function (child) {
      return map$$1[child.value.outlet] = child;
    }), map$$1;
  }function getOutlet(outletMap, route) {
    var outlet = outletMap._outlets[route.outlet];if (!outlet) {
      var componentName = route.component.name;throw route.outlet === PRIMARY_OUTLET ? new Error("Cannot find primary outlet to load '" + componentName + "'") : new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
    }return outlet;
  }function validateCommands(commands) {
    for (var i = 0; i < commands.length; i++) {
      var cmd = commands[i];if (null == cmd) throw new Error("The requested path contains " + cmd + " segment at index " + i);
    }
  }function attrBoolValue(s) {
    return "" === s || !!s;
  }function routerNgProbeToken() {
    return new _angular_core.NgProbeToken("Router", Router);
  }function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
    return void 0 === options && (options = {}), options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);
  }function provideForRootGuard(router) {
    if (router) throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");return "guarded";
  }function provideRoutes(routes) {
    return [{ provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS, multi: !0, useValue: routes }, { provide: ROUTES, multi: !0, useValue: routes }];
  }function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {
    void 0 === opts && (opts = {});var router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));if (urlHandlingStrategy && (router.urlHandlingStrategy = urlHandlingStrategy), routeReuseStrategy && (router.routeReuseStrategy = routeReuseStrategy), opts.errorHandler && (router.errorHandler = opts.errorHandler), opts.enableTracing) {
      var dom_1 = _angular_platformBrowser.ɵgetDOM();router.events.subscribe(function (e) {
        dom_1.logGroup("Router Event: " + e.constructor.name), dom_1.log(e.toString()), dom_1.log(e), dom_1.logGroupEnd();
      });
    }return router;
  }function rootRoute(router) {
    return router.routerState.root;
  }function getAppInitializer(r) {
    return r.appInitializer.bind(r);
  }function getBootstrapListener(r) {
    return r.bootstrapListener.bind(r);
  }function provideRouterInitializer() {
    return [RouterInitializer, { provide: _angular_core.APP_INITIALIZER, multi: !0, useFactory: getAppInitializer, deps: [RouterInitializer] }, { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] }, { provide: _angular_core.APP_BOOTSTRAP_LISTENER, multi: !0, useExisting: ROUTER_INITIALIZER }];
  }var __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      NavigationStart = function () {
    function NavigationStart(id, url) {
      this.id = id, this.url = url;
    }return NavigationStart.prototype.toString = function () {
      return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
    }, NavigationStart;
  }(),
      NavigationEnd = function () {
    function NavigationEnd(id, url, urlAfterRedirects) {
      this.id = id, this.url = url, this.urlAfterRedirects = urlAfterRedirects;
    }return NavigationEnd.prototype.toString = function () {
      return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
    }, NavigationEnd;
  }(),
      NavigationCancel = function () {
    function NavigationCancel(id, url, reason) {
      this.id = id, this.url = url, this.reason = reason;
    }return NavigationCancel.prototype.toString = function () {
      return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
    }, NavigationCancel;
  }(),
      NavigationError = function () {
    function NavigationError(id, url, error) {
      this.id = id, this.url = url, this.error = error;
    }return NavigationError.prototype.toString = function () {
      return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
    }, NavigationError;
  }(),
      RoutesRecognized = function () {
    function RoutesRecognized(id, url, urlAfterRedirects, state) {
      this.id = id, this.url = url, this.urlAfterRedirects = urlAfterRedirects, this.state = state;
    }return RoutesRecognized.prototype.toString = function () {
      return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    }, RoutesRecognized;
  }(),
      RouteConfigLoadStart = function () {
    function RouteConfigLoadStart(route) {
      this.route = route;
    }return RouteConfigLoadStart.prototype.toString = function () {
      return "RouteConfigLoadStart(path: " + this.route.path + ")";
    }, RouteConfigLoadStart;
  }(),
      RouteConfigLoadEnd = function () {
    function RouteConfigLoadEnd(route) {
      this.route = route;
    }return RouteConfigLoadEnd.prototype.toString = function () {
      return "RouteConfigLoadEnd(path: " + this.route.path + ")";
    }, RouteConfigLoadEnd;
  }(),
      PRIMARY_OUTLET = "primary",
      ParamsAsMap = function () {
    function ParamsAsMap(params) {
      this.params = params || {};
    }return ParamsAsMap.prototype.has = function (name) {
      return this.params.hasOwnProperty(name);
    }, ParamsAsMap.prototype.get = function (name) {
      if (this.has(name)) {
        var v = this.params[name];return Array.isArray(v) ? v[0] : v;
      }return null;
    }, ParamsAsMap.prototype.getAll = function (name) {
      if (this.has(name)) {
        var v = this.params[name];return Array.isArray(v) ? v : [v];
      }return [];
    }, Object.defineProperty(ParamsAsMap.prototype, "keys", { get: function () {
        return Object.keys(this.params);
      }, enumerable: !0, configurable: !0 }), ParamsAsMap;
  }(),
      NAVIGATION_CANCELING_ERROR = "ngNavigationCancelingError",
      LoadedRouterConfig = function () {
    function LoadedRouterConfig(routes, module) {
      this.routes = routes, this.module = module;
    }return LoadedRouterConfig;
  }(),
      UrlTree = function () {
    function UrlTree(root, queryParams, fragment) {
      this.root = root, this.queryParams = queryParams, this.fragment = fragment;
    }return Object.defineProperty(UrlTree.prototype, "queryParamMap", { get: function () {
        return this._queryParamMap || (this._queryParamMap = convertToParamMap(this.queryParams)), this._queryParamMap;
      }, enumerable: !0, configurable: !0 }), UrlTree.prototype.toString = function () {
      return DEFAULT_SERIALIZER.serialize(this);
    }, UrlTree;
  }(),
      UrlSegmentGroup = function () {
    function UrlSegmentGroup(segments, children) {
      var _this = this;this.segments = segments, this.children = children, this.parent = null, forEach(children, function (v, k) {
        return v.parent = _this;
      });
    }return UrlSegmentGroup.prototype.hasChildren = function () {
      return this.numberOfChildren > 0;
    }, Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", { get: function () {
        return Object.keys(this.children).length;
      }, enumerable: !0, configurable: !0 }), UrlSegmentGroup.prototype.toString = function () {
      return serializePaths(this);
    }, UrlSegmentGroup;
  }(),
      UrlSegment = function () {
    function UrlSegment(path, parameters) {
      this.path = path, this.parameters = parameters;
    }return Object.defineProperty(UrlSegment.prototype, "parameterMap", { get: function () {
        return this._parameterMap || (this._parameterMap = convertToParamMap(this.parameters)), this._parameterMap;
      }, enumerable: !0, configurable: !0 }), UrlSegment.prototype.toString = function () {
      return serializePath(this);
    }, UrlSegment;
  }(),
      UrlSerializer = function () {
    function UrlSerializer() {}return UrlSerializer.prototype.parse = function (url) {}, UrlSerializer.prototype.serialize = function (tree) {}, UrlSerializer;
  }(),
      DefaultUrlSerializer = function () {
    function DefaultUrlSerializer() {}return DefaultUrlSerializer.prototype.parse = function (url) {
      var p = new UrlParser(url);return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
    }, DefaultUrlSerializer.prototype.serialize = function (tree) {
      var segment = "/" + serializeSegment(tree.root, !0),
          query = serializeQueryParams(tree.queryParams),
          fragment = "string" == typeof tree.fragment ? "#" + encodeURI(tree.fragment) : "";return "" + segment + query + fragment;
    }, DefaultUrlSerializer;
  }(),
      DEFAULT_SERIALIZER = new DefaultUrlSerializer(),
      SEGMENT_RE = /^[^\/()?;=&#]+/,
      QUERY_PARAM_RE = /^[^=?&#]+/,
      QUERY_PARAM_VALUE_RE = /^[^?&#]+/,
      UrlParser = function () {
    function UrlParser(url) {
      this.url = url, this.remaining = url;
    }return UrlParser.prototype.parseRootSegment = function () {
      return this.consumeOptional("/"), "" === this.remaining || this.peekStartsWith("?") || this.peekStartsWith("#") ? new UrlSegmentGroup([], {}) : new UrlSegmentGroup([], this.parseChildren());
    }, UrlParser.prototype.parseQueryParams = function () {
      var params = {};if (this.consumeOptional("?")) do this.parseQueryParam(params); while (this.consumeOptional("&"));return params;
    }, UrlParser.prototype.parseFragment = function () {
      return this.consumeOptional("#") ? decodeURI(this.remaining) : null;
    }, UrlParser.prototype.parseChildren = function () {
      if ("" === this.remaining) return {};this.consumeOptional("/");var segments = [];for (this.peekStartsWith("(") || segments.push(this.parseSegment()); this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(");) this.capture("/"), segments.push(this.parseSegment());var children = {};this.peekStartsWith("/(") && (this.capture("/"), children = this.parseParens(!0));var res = {};return this.peekStartsWith("(") && (res = this.parseParens(!1)), (segments.length > 0 || Object.keys(children).length > 0) && (res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children)), res;
    }, UrlParser.prototype.parseSegment = function () {
      var path = matchSegments(this.remaining);if ("" === path && this.peekStartsWith(";")) throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");return this.capture(path), new UrlSegment(decode(path), this.parseMatrixParams());
    }, UrlParser.prototype.parseMatrixParams = function () {
      for (var params = {}; this.consumeOptional(";");) this.parseParam(params);return params;
    }, UrlParser.prototype.parseParam = function (params) {
      var key = matchSegments(this.remaining);if (key) {
        this.capture(key);var value = "";if (this.consumeOptional("=")) {
          var valueMatch = matchSegments(this.remaining);valueMatch && (value = valueMatch, this.capture(value));
        }params[decode(key)] = decode(value);
      }
    }, UrlParser.prototype.parseQueryParam = function (params) {
      var key = matchQueryParams(this.remaining);if (key) {
        this.capture(key);var value = "";if (this.consumeOptional("=")) {
          var valueMatch = matchUrlQueryParamValue(this.remaining);valueMatch && (value = valueMatch, this.capture(value));
        }var decodedKey = decode(key),
            decodedVal = decode(value);if (params.hasOwnProperty(decodedKey)) {
          var currentVal = params[decodedKey];Array.isArray(currentVal) || (currentVal = [currentVal], params[decodedKey] = currentVal), currentVal.push(decodedVal);
        } else params[decodedKey] = decodedVal;
      }
    }, UrlParser.prototype.parseParens = function (allowPrimary) {
      var segments = {};for (this.capture("("); !this.consumeOptional(")") && this.remaining.length > 0;) {
        var path = matchSegments(this.remaining),
            next = this.remaining[path.length];if ("/" !== next && ")" !== next && ";" !== next) throw new Error("Cannot parse url '" + this.url + "'");var outletName = void 0;path.indexOf(":") > -1 ? (outletName = path.substr(0, path.indexOf(":")), this.capture(outletName), this.capture(":")) : allowPrimary && (outletName = PRIMARY_OUTLET);var children = this.parseChildren();segments[outletName] = 1 === Object.keys(children).length ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children), this.consumeOptional("//");
      }return segments;
    }, UrlParser.prototype.peekStartsWith = function (str) {
      return this.remaining.startsWith(str);
    }, UrlParser.prototype.consumeOptional = function (str) {
      return !!this.peekStartsWith(str) && (this.remaining = this.remaining.substring(str.length), !0);
    }, UrlParser.prototype.capture = function (str) {
      if (!this.consumeOptional(str)) throw new Error('Expected "' + str + '".');
    }, UrlParser;
  }(),
      __assign$1 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }return t;
  },
      NoMatch = function () {
    function NoMatch(segmentGroup) {
      this.segmentGroup = segmentGroup || null;
    }return NoMatch;
  }(),
      AbsoluteRedirect = function () {
    function AbsoluteRedirect(urlTree) {
      this.urlTree = urlTree;
    }return AbsoluteRedirect;
  }(),
      ApplyRedirects = function () {
    function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
      this.configLoader = configLoader, this.urlSerializer = urlSerializer, this.urlTree = urlTree, this.config = config, this.allowRedirects = !0, this.ngModule = moduleInjector.get(_angular_core.NgModuleRef);
    }return ApplyRedirects.prototype.apply = function () {
      var _this = this,
          expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET),
          urlTrees$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {
        return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment);
      });return rxjs_operator_catch._catch.call(urlTrees$, function (e) {
        if (e instanceof AbsoluteRedirect) return _this.allowRedirects = !1, _this.match(e.urlTree);if (e instanceof NoMatch) throw _this.noMatchError(e);throw e;
      });
    }, ApplyRedirects.prototype.match = function (tree) {
      var _this = this,
          expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET),
          mapped$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {
        return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);
      });return rxjs_operator_catch._catch.call(mapped$, function (e) {
        if (e instanceof NoMatch) throw _this.noMatchError(e);throw e;
      });
    }, ApplyRedirects.prototype.noMatchError = function (e) {
      return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
    }, ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {
      var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;return new UrlTree(root, queryParams, fragment);var _a;
    }, ApplyRedirects.prototype.expandSegmentGroup = function (ngModule, routes, segmentGroup, outlet) {
      return 0 === segmentGroup.segments.length && segmentGroup.hasChildren() ? rxjs_operator_map.map.call(this.expandChildren(ngModule, routes, segmentGroup), function (children) {
        return new UrlSegmentGroup([], children);
      }) : this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, !0);
    }, ApplyRedirects.prototype.expandChildren = function (ngModule, routes, segmentGroup) {
      var _this = this;return waitForMap(segmentGroup.children, function (childOutlet, child) {
        return _this.expandSegmentGroup(ngModule, routes, child, childOutlet);
      });
    }, ApplyRedirects.prototype.expandSegment = function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
      var _this = this,
          routes$ = rxjs_observable_of.of.apply(void 0, routes),
          processedRoutes$ = rxjs_operator_map.map.call(routes$, function (r) {
        var expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);return rxjs_operator_catch._catch.call(expanded$, function (e) {
          if (e instanceof NoMatch) return rxjs_observable_of.of(null);throw e;
        });
      }),
          concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$),
          first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function (s) {
        return !!s;
      });return rxjs_operator_catch._catch.call(first$, function (e, _) {
        if (e instanceof rxjs_util_EmptyError.EmptyError) {
          if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) return rxjs_observable_of.of(new UrlSegmentGroup([], {}));throw new NoMatch(segmentGroup);
        }throw e;
      });
    }, ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
      return 0 === segments.length && !segmentGroup.children[outlet];
    }, ApplyRedirects.prototype.expandSegmentAgainstRoute = function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
      return getOutlet$1(route) !== outlet ? noMatch(segmentGroup) : void 0 === route.redirectTo ? this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths) : allowRedirects && this.allowRedirects ? this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet) : noMatch(segmentGroup);
    }, ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
      return "**" === route.path ? this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) : this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
    }, ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (ngModule, routes, route, outlet) {
      var _this = this,
          newTree = this.applyRedirectCommands([], route.redirectTo, {});return route.redirectTo.startsWith("/") ? absoluteRedirect(newTree) : rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {
        var group = new UrlSegmentGroup(newSegments, {});return _this.expandSegment(ngModule, group, routes, newSegments, outlet, !1);
      });
    }, ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
      var _this = this,
          _a = match(segmentGroup, route, segments),
          matched = _a.matched,
          consumedSegments = _a.consumedSegments,
          lastChild = _a.lastChild,
          positionalParamSegments = _a.positionalParamSegments;if (!matched) return noMatch(segmentGroup);var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);return route.redirectTo.startsWith("/") ? absoluteRedirect(newTree) : rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {
        return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, !1);
      });
    }, ApplyRedirects.prototype.matchSegmentAgainstRoute = function (ngModule, rawSegmentGroup, route, segments) {
      var _this = this;if ("**" === route.path) return route.loadChildren ? rxjs_operator_map.map.call(this.configLoader.load(ngModule.injector, route), function (cfg) {
        return route._loadedConfig = cfg, new UrlSegmentGroup(segments, {});
      }) : rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));var _a = match(rawSegmentGroup, route, segments),
          matched = _a.matched,
          consumedSegments = _a.consumedSegments,
          lastChild = _a.lastChild;if (!matched) return noMatch(rawSegmentGroup);var rawSlicedSegments = segments.slice(lastChild),
          childConfig$ = this.getChildConfig(ngModule, route);return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function (routerConfig) {
        var childModule = routerConfig.module,
            childConfig = routerConfig.routes,
            _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig),
            segmentGroup = _a.segmentGroup,
            slicedSegments = _a.slicedSegments;if (0 === slicedSegments.length && segmentGroup.hasChildren()) {
          var expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);return rxjs_operator_map.map.call(expanded$_1, function (children) {
            return new UrlSegmentGroup(consumedSegments, children);
          });
        }if (0 === childConfig.length && 0 === slicedSegments.length) return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments, {}));var expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, !0);return rxjs_operator_map.map.call(expanded$, function (cs) {
          return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children);
        });
      });
    }, ApplyRedirects.prototype.getChildConfig = function (ngModule, route) {
      var _this = this;return route.children ? rxjs_observable_of.of(new LoadedRouterConfig(route.children, ngModule)) : route.loadChildren ? void 0 !== route._loadedConfig ? rxjs_observable_of.of(route._loadedConfig) : rxjs_operator_mergeMap.mergeMap.call(runCanLoadGuard(ngModule.injector, route), function (shouldLoad) {
        return shouldLoad ? rxjs_operator_map.map.call(_this.configLoader.load(ngModule.injector, route), function (cfg) {
          return route._loadedConfig = cfg, cfg;
        }) : canLoadFails(route);
      }) : rxjs_observable_of.of(new LoadedRouterConfig([], ngModule));
    }, ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {
      for (var res = [], c = urlTree.root;;) {
        if (res = res.concat(c.segments), 0 === c.numberOfChildren) return rxjs_observable_of.of(res);if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) return namedOutletsRedirect(route.redirectTo);c = c.children[PRIMARY_OUTLET];
      }
    }, ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {
      return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    }, ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {
      var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
    }, ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {
      var res = {};return forEach(redirectToParams, function (v, k) {
        var copySourceValue = "string" == typeof v && v.startsWith(":");if (copySourceValue) {
          var sourceName = v.substring(1);res[k] = actualParams[sourceName];
        } else res[k] = v;
      }), res;
    }, ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {
      var _this = this,
          updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams),
          children = {};return forEach(group.children, function (child, name) {
        children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
      }), new UrlSegmentGroup(updatedSegments, children);
    }, ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {
      var _this = this;return redirectToSegments.map(function (s) {
        return s.path.startsWith(":") ? _this.findPosParam(redirectTo, s, posParams) : _this.findOrReturn(s, actualSegments);
      });
    }, ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {
      var pos = posParams[redirectToUrlSegment.path.substring(1)];if (!pos) throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");return pos;
    }, ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {
      for (var idx = 0, _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
        var s = actualSegments_1[_i];if (s.path === redirectToUrlSegment.path) return actualSegments.splice(idx), s;idx++;
      }return redirectToUrlSegment;
    }, ApplyRedirects;
  }(),
      Tree = function () {
    function Tree(root) {
      this._root = root;
    }return Object.defineProperty(Tree.prototype, "root", { get: function () {
        return this._root.value;
      }, enumerable: !0, configurable: !0 }), Tree.prototype.parent = function (t) {
      var p = this.pathFromRoot(t);return p.length > 1 ? p[p.length - 2] : null;
    }, Tree.prototype.children = function (t) {
      var n = findNode(t, this._root);return n ? n.children.map(function (t) {
        return t.value;
      }) : [];
    }, Tree.prototype.firstChild = function (t) {
      var n = findNode(t, this._root);return n && n.children.length > 0 ? n.children[0].value : null;
    }, Tree.prototype.siblings = function (t) {
      var p = findPath(t, this._root, []);if (p.length < 2) return [];var c = p[p.length - 2].children.map(function (c) {
        return c.value;
      });return c.filter(function (cc) {
        return cc !== t;
      });
    }, Tree.prototype.pathFromRoot = function (t) {
      return findPath(t, this._root, []).map(function (s) {
        return s.value;
      });
    }, Tree;
  }(),
      TreeNode = function () {
    function TreeNode(value, children) {
      this.value = value, this.children = children;
    }return TreeNode.prototype.toString = function () {
      return "TreeNode(" + this.value + ")";
    }, TreeNode;
  }(),
      __assign$2 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }return t;
  },
      RouterState = function (_super) {
    function RouterState(root, snapshot) {
      var _this = _super.call(this, root) || this;return _this.snapshot = snapshot, setRouterStateSnapshot(_this, root), _this;
    }return __extends(RouterState, _super), RouterState.prototype.toString = function () {
      return this.snapshot.toString();
    }, RouterState;
  }(Tree),
      ActivatedRoute = function () {
    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
      this.url = url, this.params = params, this.queryParams = queryParams, this.fragment = fragment, this.data = data, this.outlet = outlet, this.component = component, this._futureSnapshot = futureSnapshot;
    }return Object.defineProperty(ActivatedRoute.prototype, "routeConfig", { get: function () {
        return this._futureSnapshot.routeConfig;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRoute.prototype, "root", { get: function () {
        return this._routerState.root;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRoute.prototype, "parent", { get: function () {
        return this._routerState.parent(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRoute.prototype, "firstChild", { get: function () {
        return this._routerState.firstChild(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRoute.prototype, "children", { get: function () {
        return this._routerState.children(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", { get: function () {
        return this._routerState.pathFromRoot(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRoute.prototype, "paramMap", { get: function () {
        return this._paramMap || (this._paramMap = rxjs_operator_map.map.call(this.params, function (p) {
          return convertToParamMap(p);
        })), this._paramMap;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRoute.prototype, "queryParamMap", { get: function () {
        return this._queryParamMap || (this._queryParamMap = rxjs_operator_map.map.call(this.queryParams, function (p) {
          return convertToParamMap(p);
        })), this._queryParamMap;
      }, enumerable: !0, configurable: !0 }), ActivatedRoute.prototype.toString = function () {
      return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
    }, ActivatedRoute;
  }(),
      ActivatedRouteSnapshot = function () {
    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
      this.url = url, this.params = params, this.queryParams = queryParams, this.fragment = fragment, this.data = data, this.outlet = outlet, this.component = component, this._routeConfig = routeConfig, this._urlSegment = urlSegment, this._lastPathIndex = lastPathIndex, this._resolve = resolve;
    }return Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", { get: function () {
        return this._routeConfig;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", { get: function () {
        return this._routerState.root;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", { get: function () {
        return this._routerState.parent(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", { get: function () {
        return this._routerState.firstChild(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", { get: function () {
        return this._routerState.children(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", { get: function () {
        return this._routerState.pathFromRoot(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRouteSnapshot.prototype, "paramMap", { get: function () {
        return this._paramMap || (this._paramMap = convertToParamMap(this.params)), this._paramMap;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ActivatedRouteSnapshot.prototype, "queryParamMap", { get: function () {
        return this._queryParamMap || (this._queryParamMap = convertToParamMap(this.queryParams)), this._queryParamMap;
      }, enumerable: !0, configurable: !0 }), ActivatedRouteSnapshot.prototype.toString = function () {
      var url = this.url.map(function (segment) {
        return segment.toString();
      }).join("/"),
          matched = this._routeConfig ? this._routeConfig.path : "";return "Route(url:'" + url + "', path:'" + matched + "')";
    }, ActivatedRouteSnapshot;
  }(),
      RouterStateSnapshot = function (_super) {
    function RouterStateSnapshot(url, root) {
      var _this = _super.call(this, root) || this;return _this.url = url, setRouterStateSnapshot(_this, root), _this;
    }return __extends(RouterStateSnapshot, _super), RouterStateSnapshot.prototype.toString = function () {
      return serializeNode(this._root);
    }, RouterStateSnapshot;
  }(Tree),
      Navigation = function () {
    function Navigation(isAbsolute, numberOfDoubleDots, commands) {
      if (this.isAbsolute = isAbsolute, this.numberOfDoubleDots = numberOfDoubleDots, this.commands = commands, isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) throw new Error("Root segment cannot have matrix parameters");var cmdWithOutlet = commands.find(function (c) {
        return "object" == typeof c && null != c && c.outlets;
      });if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) throw new Error("{outlets:{}} has to be the last command");
    }return Navigation.prototype.toRoot = function () {
      return this.isAbsolute && 1 === this.commands.length && "/" == this.commands[0];
    }, Navigation;
  }(),
      Position = function () {
    function Position(segmentGroup, processChildren, index) {
      this.segmentGroup = segmentGroup, this.processChildren = processChildren, this.index = index;
    }return Position;
  }(),
      __assign$3 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }return t;
  },
      NoMatch$1 = function () {
    function NoMatch$1() {}return NoMatch$1;
  }(),
      Recognizer = function () {
    function Recognizer(rootComponentType, config, urlTree, url) {
      this.rootComponentType = rootComponentType, this.config = config, this.urlTree = urlTree, this.url = url;
    }return Recognizer.prototype.recognize = function () {
      try {
        var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup,
            children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET),
            root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {}),
            rootNode = new TreeNode(root, children),
            routeState = new RouterStateSnapshot(this.url, rootNode);return this.inheriteParamsAndData(routeState._root), rxjs_observable_of.of(routeState);
      } catch (e) {
        return new rxjs_Observable.Observable(function (obs) {
          return obs.error(e);
        });
      }
    }, Recognizer.prototype.inheriteParamsAndData = function (routeNode) {
      var _this = this,
          route = routeNode.value,
          i = inheritedParamsDataResolve(route);route.params = Object.freeze(i.params), route.data = Object.freeze(i.data), routeNode.children.forEach(function (n) {
        return _this.inheriteParamsAndData(n);
      });
    }, Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {
      return 0 === segmentGroup.segments.length && segmentGroup.hasChildren() ? this.processChildren(config, segmentGroup) : this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
    }, Recognizer.prototype.processChildren = function (config, segmentGroup) {
      var _this = this,
          children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) {
        return _this.processSegmentGroup(config, child, childOutlet);
      });return checkOutletNameUniqueness(children), sortActivatedRouteSnapshots(children), children;
    }, Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {
      for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
        var r = config_1[_i];try {
          return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
        } catch (e) {
          if (!(e instanceof NoMatch$1)) throw e;
        }
      }if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) return [];throw new NoMatch$1();
    }, Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
      return 0 === segments.length && !segmentGroup.children[outlet];
    }, Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {
      if (route.redirectTo) throw new NoMatch$1();if ((route.outlet || PRIMARY_OUTLET) !== outlet) throw new NoMatch$1();if ("**" === route.path) {
        var params = segments.length > 0 ? last$1(segments).parameters : {},
            snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));return [new TreeNode(snapshot_1, [])];
      }var _a = match$1(rawSegment, route, segments),
          consumedSegments = _a.consumedSegments,
          parameters = _a.parameters,
          lastChild = _a.lastChild,
          rawSlicedSegments = segments.slice(lastChild),
          childConfig = getChildConfig(route),
          _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig),
          segmentGroup = _b.segmentGroup,
          slicedSegments = _b.slicedSegments,
          snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));if (0 === slicedSegments.length && segmentGroup.hasChildren()) {
        var children_3 = this.processChildren(childConfig, segmentGroup);return [new TreeNode(snapshot, children_3)];
      }if (0 === childConfig.length && 0 === slicedSegments.length) return [new TreeNode(snapshot, [])];var children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);return [new TreeNode(snapshot, children)];
    }, Recognizer;
  }(),
      ROUTES = new _angular_core.InjectionToken("ROUTES"),
      RouterConfigLoader = function () {
    function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
      this.loader = loader, this.compiler = compiler, this.onLoadStartListener = onLoadStartListener, this.onLoadEndListener = onLoadEndListener;
    }return RouterConfigLoader.prototype.load = function (parentInjector, route) {
      var _this = this;this.onLoadStartListener && this.onLoadStartListener(route);var moduleFactory$ = this.loadModuleFactory(route.loadChildren);return rxjs_operator_map.map.call(moduleFactory$, function (factory) {
        _this.onLoadEndListener && _this.onLoadEndListener(route);var module = factory.create(parentInjector);return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);
      });
    }, RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
      var _this = this;return "string" == typeof loadChildren ? rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren)) : rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function (t) {
        return t instanceof _angular_core.NgModuleFactory ? rxjs_observable_of.of(t) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t));
      });
    }, RouterConfigLoader;
  }(),
      RouterOutletMap = function () {
    function RouterOutletMap() {
      this._outlets = {};
    }return RouterOutletMap.prototype.registerOutlet = function (name, outlet) {
      this._outlets[name] = outlet;
    }, RouterOutletMap.prototype.removeOutlet = function (name) {
      this._outlets[name] = void 0;
    }, RouterOutletMap;
  }(),
      UrlHandlingStrategy = function () {
    function UrlHandlingStrategy() {}return UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) {}, UrlHandlingStrategy.prototype.extract = function (url) {}, UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) {}, UrlHandlingStrategy;
  }(),
      DefaultUrlHandlingStrategy = function () {
    function DefaultUrlHandlingStrategy() {}return DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) {
      return !0;
    }, DefaultUrlHandlingStrategy.prototype.extract = function (url) {
      return url;
    }, DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) {
      return newUrlPart;
    }, DefaultUrlHandlingStrategy;
  }(),
      __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }return t;
  },
      DefaultRouteReuseStrategy = function () {
    function DefaultRouteReuseStrategy() {}return DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) {
      return !1;
    }, DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) {}, DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) {
      return !1;
    }, DefaultRouteReuseStrategy.prototype.retrieve = function (route) {
      return null;
    }, DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {
      return future.routeConfig === curr.routeConfig;
    }, DefaultRouteReuseStrategy;
  }(),
      Router = function () {
    function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
      var _this = this;this.rootComponentType = rootComponentType, this.urlSerializer = urlSerializer, this.outletMap = outletMap, this.location = location, this.config = config, this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null), this.routerEvents = new rxjs_Subject.Subject(), this.navigationId = 0, this.errorHandler = defaultErrorHandler, this.navigated = !1, this.hooks = { beforePreactivation: defaultRouterHook, afterPreactivation: defaultRouterHook }, this.urlHandlingStrategy = new DefaultUrlHandlingStrategy(), this.routeReuseStrategy = new DefaultRouteReuseStrategy();var onLoadStart = function (r) {
        return _this.triggerEvent(new RouteConfigLoadStart(r));
      },
          onLoadEnd = function (r) {
        return _this.triggerEvent(new RouteConfigLoadEnd(r));
      };this.ngModule = injector.get(_angular_core.NgModuleRef), this.resetConfig(config), this.currentUrlTree = createEmptyUrlTree(), this.rawUrlTree = this.currentUrlTree, this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd), this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType), this.processNavigations();
    }return Router.prototype.resetRootComponentType = function (rootComponentType) {
      this.rootComponentType = rootComponentType, this.currentRouterState.root.component = this.rootComponentType;
    }, Router.prototype.initialNavigation = function () {
      this.setUpLocationChangeListener(), 0 === this.navigationId && this.navigateByUrl(this.location.path(!0), { replaceUrl: !0 });
    }, Router.prototype.setUpLocationChangeListener = function () {
      var _this = this;this.locationSubscription || (this.locationSubscription = this.location.subscribe(Zone.current.wrap(function (change) {
        var rawUrlTree = _this.urlSerializer.parse(change.url),
            source = "popstate" === change.type ? "popstate" : "hashchange";setTimeout(function () {
          _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: !0 });
        }, 0);
      })));
    }, Object.defineProperty(Router.prototype, "routerState", { get: function () {
        return this.currentRouterState;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(Router.prototype, "url", { get: function () {
        return this.serializeUrl(this.currentUrlTree);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(Router.prototype, "events", { get: function () {
        return this.routerEvents;
      }, enumerable: !0, configurable: !0 }), Router.prototype.triggerEvent = function (e) {
      this.routerEvents.next(e);
    }, Router.prototype.resetConfig = function (config) {
      validateConfig(config), this.config = config;
    }, Router.prototype.ngOnDestroy = function () {
      this.dispose();
    }, Router.prototype.dispose = function () {
      this.locationSubscription && (this.locationSubscription.unsubscribe(), this.locationSubscription = null);
    }, Router.prototype.createUrlTree = function (commands, _a) {
      var _b = void 0 === _a ? {} : _a,
          relativeTo = _b.relativeTo,
          queryParams = _b.queryParams,
          fragment = _b.fragment,
          preserveQueryParams = _b.preserveQueryParams,
          queryParamsHandling = _b.queryParamsHandling,
          preserveFragment = _b.preserveFragment;_angular_core.isDevMode() && preserveQueryParams && console && console.warn && console.warn("preserveQueryParams is deprecated, use queryParamsHandling instead.");var a = relativeTo || this.routerState.root,
          f = preserveFragment ? this.currentUrlTree.fragment : fragment,
          q = null;if (queryParamsHandling) switch (queryParamsHandling) {case "merge":
          q = __assign({}, this.currentUrlTree.queryParams, queryParams);break;case "preserve":
          q = this.currentUrlTree.queryParams;break;default:
          q = queryParams || null;} else q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;return createUrlTree(a, this.currentUrlTree, commands, q, f);
    }, Router.prototype.navigateByUrl = function (url, extras) {
      void 0 === extras && (extras = { skipLocationChange: !1 });var urlTree = url instanceof UrlTree ? url : this.parseUrl(url),
          mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);return this.scheduleNavigation(mergedTree, "imperative", extras);
    }, Router.prototype.navigate = function (commands, extras) {
      return void 0 === extras && (extras = { skipLocationChange: !1 }), validateCommands(commands), "object" == typeof extras.queryParams && null !== extras.queryParams && (extras.queryParams = this.removeEmptyProps(extras.queryParams)), this.navigateByUrl(this.createUrlTree(commands, extras), extras);
    }, Router.prototype.serializeUrl = function (url) {
      return this.urlSerializer.serialize(url);
    }, Router.prototype.parseUrl = function (url) {
      return this.urlSerializer.parse(url);
    }, Router.prototype.isActive = function (url, exact) {
      if (url instanceof UrlTree) return containsTree(this.currentUrlTree, url, exact);var urlTree = this.urlSerializer.parse(url);return containsTree(this.currentUrlTree, urlTree, exact);
    }, Router.prototype.removeEmptyProps = function (params) {
      return Object.keys(params).reduce(function (result, key) {
        var value = params[key];return null !== value && void 0 !== value && (result[key] = value), result;
      }, {});
    }, Router.prototype.processNavigations = function () {
      var _this = this;rxjs_operator_concatMap.concatMap.call(this.navigations, function (nav) {
        return nav ? (_this.executeScheduledNavigation(nav), nav.promise.catch(function () {})) : rxjs_observable_of.of(null);
      }).subscribe(function () {});
    }, Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {
      var lastNavigation = this.navigations.value;if (lastNavigation && "imperative" !== source && "imperative" === lastNavigation.source && lastNavigation.rawUrl.toString() === rawUrl.toString()) return Promise.resolve(!0);if (lastNavigation && "hashchange" == source && "popstate" === lastNavigation.source && lastNavigation.rawUrl.toString() === rawUrl.toString()) return Promise.resolve(!0);var resolve = null,
          reject = null,
          promise = new Promise(function (res, rej) {
        resolve = res, reject = rej;
      }),
          id = ++this.navigationId;return this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise }), promise.catch(function (e) {
        return Promise.reject(e);
      });
    }, Router.prototype.executeScheduledNavigation = function (_a) {
      var _this = this,
          id = _a.id,
          rawUrl = _a.rawUrl,
          extras = _a.extras,
          resolve = _a.resolve,
          reject = _a.reject,
          url = this.urlHandlingStrategy.extract(rawUrl),
          urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl) ? (this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url))), Promise.resolve().then(function (_) {
        return _this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null);
      }).then(resolve, reject)) : urlTransition && this.rawUrlTree && this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree) ? (this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url))), Promise.resolve().then(function (_) {
        return _this.runNavigate(url, rawUrl, !1, !1, id, createEmptyState(url, _this.rootComponentType).snapshot);
      }).then(resolve, reject)) : (this.rawUrlTree = rawUrl, resolve(null));
    }, Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
      var _this = this;return id !== this.navigationId ? (this.location.go(this.urlSerializer.serialize(this.currentUrlTree)), this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId)), Promise.resolve(!1)) : new Promise(function (resolvePromise, rejectPromise) {
        var urlAndSnapshot$;if (precreatedState) urlAndSnapshot$ = rxjs_observable_of.of({ appliedUrl: url, snapshot: precreatedState });else {
          var moduleInjector = _this.ngModule.injector,
              redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function (appliedUrl) {
            return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {
              return _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot)), { appliedUrl: appliedUrl, snapshot: snapshot };
            });
          });
        }var preActivation,
            navigationIsSuccessful,
            beforePreactivationDone$ = rxjs_operator_mergeMap.mergeMap.call(urlAndSnapshot$, function (p) {
          return rxjs_operator_map.map.call(_this.hooks.beforePreactivation(p.snapshot), function () {
            return p;
          });
        }),
            preactivationTraverse$ = rxjs_operator_map.map.call(beforePreactivationDone$, function (_a) {
          var appliedUrl = _a.appliedUrl,
              snapshot = _a.snapshot,
              moduleInjector = _this.ngModule.injector;return preActivation = new PreActivation(snapshot, _this.currentRouterState.snapshot, moduleInjector), preActivation.traverse(_this.outletMap), { appliedUrl: appliedUrl, snapshot: snapshot };
        }),
            preactivationCheckGuards$ = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function (_a) {
          var appliedUrl = _a.appliedUrl,
              snapshot = _a.snapshot;return _this.navigationId !== id ? rxjs_observable_of.of(!1) : rxjs_operator_map.map.call(preActivation.checkGuards(), function (shouldActivate) {
            return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };
          });
        }),
            preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards$, function (p) {
          return _this.navigationId !== id ? rxjs_observable_of.of(!1) : p.shouldActivate ? rxjs_operator_map.map.call(preActivation.resolveData(), function () {
            return p;
          }) : rxjs_observable_of.of(p);
        }),
            preactivationDone$ = rxjs_operator_mergeMap.mergeMap.call(preactivationResolveData$, function (p) {
          return rxjs_operator_map.map.call(_this.hooks.afterPreactivation(p.snapshot), function () {
            return p;
          });
        }),
            routerState$ = rxjs_operator_map.map.call(preactivationDone$, function (_a) {
          var appliedUrl = _a.appliedUrl,
              snapshot = _a.snapshot,
              shouldActivate = _a.shouldActivate;if (shouldActivate) {
            var state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };
          }return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };
        }),
            storedState = _this.currentRouterState,
            storedUrl = _this.currentUrlTree;routerState$.forEach(function (_a) {
          var appliedUrl = _a.appliedUrl,
              state = _a.state,
              shouldActivate = _a.shouldActivate;if (!shouldActivate || id !== _this.navigationId) return void (navigationIsSuccessful = !1);if (_this.currentUrlTree = appliedUrl, _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl), _this.currentRouterState = state, !shouldPreventPushState) {
            var path = _this.urlSerializer.serialize(_this.rawUrlTree);_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl ? _this.location.replaceState(path) : _this.location.go(path);
          }new ActivateRoutes(_this.routeReuseStrategy, state, storedState).activate(_this.outletMap), navigationIsSuccessful = !0;
        }).then(function () {
          navigationIsSuccessful ? (_this.navigated = !0, _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree))), resolvePromise(!0)) : (_this.resetUrlToCurrentUrlTree(), _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), "")), resolvePromise(!1));
        }, function (e) {
          if (isNavigationCancelingError(e)) _this.resetUrlToCurrentUrlTree(), _this.navigated = !0, _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message)), resolvePromise(!1);else {
            _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));try {
              resolvePromise(_this.errorHandler(e));
            } catch (ee) {
              rejectPromise(ee);
            }
          }_this.currentRouterState = storedState, _this.currentUrlTree = storedUrl, _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl), _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
        });
      });
    }, Router.prototype.resetUrlToCurrentUrlTree = function () {
      var path = this.urlSerializer.serialize(this.rawUrlTree);this.location.replaceState(path);
    }, Router;
  }(),
      CanActivate = function () {
    function CanActivate(path) {
      this.path = path;
    }return Object.defineProperty(CanActivate.prototype, "route", { get: function () {
        return this.path[this.path.length - 1];
      }, enumerable: !0, configurable: !0 }), CanActivate;
  }(),
      CanDeactivate = function () {
    function CanDeactivate(component, route) {
      this.component = component, this.route = route;
    }return CanDeactivate;
  }(),
      PreActivation = function () {
    function PreActivation(future, curr, moduleInjector) {
      this.future = future, this.curr = curr, this.moduleInjector = moduleInjector, this.canActivateChecks = [], this.canDeactivateChecks = [];
    }return PreActivation.prototype.traverse = function (parentOutletMap) {
      var futureRoot = this.future._root,
          currRoot = this.curr ? this.curr._root : null;this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
    }, PreActivation.prototype.checkGuards = function () {
      var _this = this;if (0 === this.canDeactivateChecks.length && 0 === this.canActivateChecks.length) return rxjs_observable_of.of(!0);var canDeactivate$ = this.runCanDeactivateChecks();return rxjs_operator_mergeMap.mergeMap.call(canDeactivate$, function (canDeactivate) {
        return canDeactivate ? _this.runCanActivateChecks() : rxjs_observable_of.of(!1);
      });
    }, PreActivation.prototype.resolveData = function () {
      var _this = this;if (0 === this.canActivateChecks.length) return rxjs_observable_of.of(null);var checks$ = rxjs_observable_from.from(this.canActivateChecks),
          runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function (check) {
        return _this.runResolve(check.route);
      });return rxjs_operator_reduce.reduce.call(runningChecks$, function (_, __) {
        return _;
      });
    }, PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {
      var _this = this,
          prevChildren = nodeChildrenAsMap(currNode);futureNode.children.forEach(function (c) {
        _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value])), delete prevChildren[c.value.outlet];
      }), forEach(prevChildren, function (v, k) {
        return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]);
      });
    }, PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {
      var future = futureNode.value,
          curr = currNode ? currNode.value : null,
          outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;curr && future._routeConfig === curr._routeConfig ? (this.shouldRunGuardsAndResolvers(curr, future, future._routeConfig.runGuardsAndResolvers) ? (this.canActivateChecks.push(new CanActivate(futurePath)), this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr))) : (future.data = curr.data, future._resolvedData = curr._resolvedData), future.component ? this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath) : this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath)) : (curr && this.deactiveRouteAndItsChildren(currNode, outlet), this.canActivateChecks.push(new CanActivate(futurePath)), future.component ? this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath) : this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath));
    }, PreActivation.prototype.shouldRunGuardsAndResolvers = function (curr, future, mode) {
      switch (mode) {case "always":
          return !0;case "paramsOrQueryParamsChange":
          return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);case "paramsChange":default:
          return !equalParamsAndUrlSegments(curr, future);}
    }, PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {
      var _this = this,
          prevChildren = nodeChildrenAsMap(route),
          r = route.value;forEach(prevChildren, function (v, k) {
        r.component ? outlet ? _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]) : _this.deactiveRouteAndItsChildren(v, null) : _this.deactiveRouteAndItsChildren(v, outlet);
      }), r.component && outlet && outlet.isActivated ? this.canDeactivateChecks.push(new CanDeactivate(outlet.component, r)) : this.canDeactivateChecks.push(new CanDeactivate(null, r));
    }, PreActivation.prototype.runCanDeactivateChecks = function () {
      var _this = this,
          checks$ = rxjs_observable_from.from(this.canDeactivateChecks),
          runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function (check) {
        return _this.runCanDeactivate(check.component, check.route);
      });return rxjs_operator_every.every.call(runningChecks$, function (result) {
        return result === !0;
      });
    }, PreActivation.prototype.runCanActivateChecks = function () {
      var _this = this,
          checks$ = rxjs_observable_from.from(this.canActivateChecks),
          runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function (check) {
        return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(check.path), _this.runCanActivate(check.route)]));
      });return rxjs_operator_every.every.call(runningChecks$, function (result) {
        return result === !0;
      });
    }, PreActivation.prototype.runCanActivate = function (future) {
      var _this = this,
          canActivate = future._routeConfig ? future._routeConfig.canActivate : null;if (!canActivate || 0 === canActivate.length) return rxjs_observable_of.of(!0);var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function (c) {
        var observable,
            guard = _this.getToken(c, future);return observable = wrapIntoObservable(guard.canActivate ? guard.canActivate(future, _this.future) : guard(future, _this.future)), rxjs_operator_first.first.call(observable);
      });return andObservables(obs);
    }, PreActivation.prototype.runCanActivateChild = function (path) {
      var _this = this,
          future = path[path.length - 1],
          canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function (p) {
        return _this.extractCanActivateChild(p);
      }).filter(function (_) {
        return null !== _;
      });return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function (d) {
        var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function (c) {
          var observable,
              guard = _this.getToken(c, d.node);return observable = wrapIntoObservable(guard.canActivateChild ? guard.canActivateChild(future, _this.future) : guard(future, _this.future)), rxjs_operator_first.first.call(observable);
        });return andObservables(obs);
      }));
    }, PreActivation.prototype.extractCanActivateChild = function (p) {
      var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;return canActivateChild && 0 !== canActivateChild.length ? { node: p, guards: canActivateChild } : null;
    }, PreActivation.prototype.runCanDeactivate = function (component, curr) {
      var _this = this,
          canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;if (!canDeactivate || 0 === canDeactivate.length) return rxjs_observable_of.of(!0);var canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function (c) {
        var observable,
            guard = _this.getToken(c, curr);return observable = wrapIntoObservable(guard.canDeactivate ? guard.canDeactivate(component, curr, _this.curr, _this.future) : guard(component, curr, _this.curr, _this.future)), rxjs_operator_first.first.call(observable);
      });return rxjs_operator_every.every.call(canDeactivate$, function (result) {
        return result === !0;
      });
    }, PreActivation.prototype.runResolve = function (future) {
      var resolve = future._resolve;return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function (resolvedData) {
        return future._resolvedData = resolvedData, future.data = __assign({}, future.data, inheritedParamsDataResolve(future).resolve), null;
      });
    }, PreActivation.prototype.resolveNode = function (resolve, future) {
      var _this = this;return waitForMap(resolve, function (k, v) {
        var resolver = _this.getToken(v, future);return wrapIntoObservable(resolver.resolve ? resolver.resolve(future, _this.future) : resolver(future, _this.future));
      });
    }, PreActivation.prototype.getToken = function (token, snapshot) {
      var config = closestLoadedConfig(snapshot),
          injector = config ? config.module.injector : this.moduleInjector;return injector.get(token);
    }, PreActivation;
  }(),
      ActivateRoutes = function () {
    function ActivateRoutes(routeReuseStrategy, futureState, currState) {
      this.routeReuseStrategy = routeReuseStrategy, this.futureState = futureState, this.currState = currState;
    }return ActivateRoutes.prototype.activate = function (parentOutletMap) {
      var futureRoot = this.futureState._root,
          currRoot = this.currState ? this.currState._root : null;this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap), advanceActivatedRoute(this.futureState.root), this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
    }, ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {
      var _this = this,
          prevChildren = nodeChildrenAsMap(currNode);futureNode.children.forEach(function (c) {
        _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap), delete prevChildren[c.value.outlet];
      }), forEach(prevChildren, function (v, k) {
        return _this.deactiveRouteAndItsChildren(v, outletMap);
      });
    }, ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
      var _this = this,
          prevChildren = nodeChildrenAsMap(currNode);futureNode.children.forEach(function (c) {
        _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
      });
    }, ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {
      var future = futureNode.value,
          curr = currNode ? currNode.value : null;if (future === curr) {
        if (future.component) {
          var outlet = getOutlet(parentOutletMap, future);this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
        } else this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
      } else curr && this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
    }, ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
      var future = futureNode.value,
          curr = currNode ? currNode.value : null;if (future === curr) {
        if (advanceActivatedRoute(future), future.component) {
          var outlet = getOutlet(parentOutletMap, future);this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
        } else this.activateChildRoutes(futureNode, currNode, parentOutletMap);
      } else if (future.component) {
        advanceActivatedRoute(future);var outlet = getOutlet(parentOutletMap, futureNode.value);if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
          var stored = this.routeReuseStrategy.retrieve(future.snapshot);this.routeReuseStrategy.store(future.snapshot, null), outlet.attach(stored.componentRef, stored.route.value), advanceActivatedRouteNodeAndItsChildren(stored.route);
        } else {
          var outletMap = new RouterOutletMap();this.placeComponentIntoOutlet(outletMap, future, outlet), this.activateChildRoutes(futureNode, null, outletMap);
        }
      } else advanceActivatedRoute(future), this.activateChildRoutes(futureNode, null, parentOutletMap);
    }, ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {
      var config = parentLoadedConfig(future.snapshot),
          cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;outlet.activateWith(future, cmpFactoryResolver, outletMap);
    }, ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {
      this.routeReuseStrategy.shouldDetach(route.value.snapshot) ? this.detachAndStoreRouteSubtree(route, parentOutletMap) : this.deactiveRouteAndOutlet(route, parentOutletMap);
    }, ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentOutletMap) {
      var outlet = getOutlet(parentOutletMap, route.value),
          componentRef = outlet.detach();this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route });
    }, ActivateRoutes.prototype.deactiveRouteAndOutlet = function (route, parentOutletMap) {
      var _this = this,
          prevChildren = nodeChildrenAsMap(route),
          outlet = null;try {
        outlet = getOutlet(parentOutletMap, route.value);
      } catch (e) {
        return;
      }var childOutletMap = outlet.outletMap;forEach(prevChildren, function (v, k) {
        route.value.component ? _this.deactiveRouteAndItsChildren(v, childOutletMap) : _this.deactiveRouteAndItsChildren(v, parentOutletMap);
      }), outlet && outlet.isActivated && outlet.deactivate();
    }, ActivateRoutes;
  }(),
      RouterLink = function () {
    function RouterLink(router, route, tabIndex, renderer, el) {
      this.router = router, this.route = route, this.commands = [], null == tabIndex && renderer.setElementAttribute(el.nativeElement, "tabindex", "0");
    }return Object.defineProperty(RouterLink.prototype, "routerLink", { set: function (commands) {
        null != commands ? this.commands = Array.isArray(commands) ? commands : [commands] : this.commands = [];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(RouterLink.prototype, "preserveQueryParams", { set: function (value) {
        _angular_core.isDevMode() && console && console.warn && console.warn("preserveQueryParams is deprecated!, use queryParamsHandling instead."), this.preserve = value;
      }, enumerable: !0, configurable: !0 }), RouterLink.prototype.onClick = function () {
      var extras = { skipLocationChange: attrBoolValue(this.skipLocationChange), replaceUrl: attrBoolValue(this.replaceUrl) };return this.router.navigateByUrl(this.urlTree, extras), !0;
    }, Object.defineProperty(RouterLink.prototype, "urlTree", { get: function () {
        return this.router.createUrlTree(this.commands, { relativeTo: this.route, queryParams: this.queryParams, fragment: this.fragment, preserveQueryParams: attrBoolValue(this.preserve), queryParamsHandling: this.queryParamsHandling, preserveFragment: attrBoolValue(this.preserveFragment) });
      }, enumerable: !0, configurable: !0 }), RouterLink;
  }();RouterLink.decorators = [{ type: _angular_core.Directive, args: [{ selector: ":not(a)[routerLink]" }] }], RouterLink.ctorParameters = function () {
    return [{ type: Router }, { type: ActivatedRoute }, { type: void 0, decorators: [{ type: _angular_core.Attribute, args: ["tabindex"] }] }, { type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
  }, RouterLink.propDecorators = { queryParams: [{ type: _angular_core.Input }], fragment: [{ type: _angular_core.Input }], queryParamsHandling: [{ type: _angular_core.Input }], preserveFragment: [{ type: _angular_core.Input }], skipLocationChange: [{ type: _angular_core.Input }], replaceUrl: [{ type: _angular_core.Input }], routerLink: [{ type: _angular_core.Input }], preserveQueryParams: [{ type: _angular_core.Input }], onClick: [{ type: _angular_core.HostListener, args: ["click"] }] };var RouterLinkWithHref = function () {
    function RouterLinkWithHref(router, route, locationStrategy) {
      var _this = this;this.router = router, this.route = route, this.locationStrategy = locationStrategy, this.commands = [], this.subscription = router.events.subscribe(function (s) {
        s instanceof NavigationEnd && _this.updateTargetUrlAndHref();
      });
    }return Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", { set: function (commands) {
        null != commands ? this.commands = Array.isArray(commands) ? commands : [commands] : this.commands = [];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(RouterLinkWithHref.prototype, "preserveQueryParams", { set: function (value) {
        _angular_core.isDevMode() && console && console.warn && console.warn("preserveQueryParams is deprecated, use queryParamsHandling instead."), this.preserve = value;
      }, enumerable: !0, configurable: !0 }), RouterLinkWithHref.prototype.ngOnChanges = function (changes) {
      this.updateTargetUrlAndHref();
    }, RouterLinkWithHref.prototype.ngOnDestroy = function () {
      this.subscription.unsubscribe();
    }, RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {
      if (0 !== button || ctrlKey || metaKey) return !0;if ("string" == typeof this.target && "_self" != this.target) return !0;var extras = { skipLocationChange: attrBoolValue(this.skipLocationChange), replaceUrl: attrBoolValue(this.replaceUrl) };return this.router.navigateByUrl(this.urlTree, extras), !1;
    }, RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
      this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    }, Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", { get: function () {
        return this.router.createUrlTree(this.commands, { relativeTo: this.route, queryParams: this.queryParams, fragment: this.fragment, preserveQueryParams: attrBoolValue(this.preserve), queryParamsHandling: this.queryParamsHandling, preserveFragment: attrBoolValue(this.preserveFragment) });
      }, enumerable: !0, configurable: !0 }), RouterLinkWithHref;
  }();RouterLinkWithHref.decorators = [{ type: _angular_core.Directive, args: [{ selector: "a[routerLink]" }] }], RouterLinkWithHref.ctorParameters = function () {
    return [{ type: Router }, { type: ActivatedRoute }, { type: _angular_common.LocationStrategy }];
  }, RouterLinkWithHref.propDecorators = { target: [{ type: _angular_core.HostBinding, args: ["attr.target"] }, { type: _angular_core.Input }], queryParams: [{ type: _angular_core.Input }], fragment: [{ type: _angular_core.Input }], queryParamsHandling: [{ type: _angular_core.Input }], preserveFragment: [{ type: _angular_core.Input }], skipLocationChange: [{ type: _angular_core.Input }], replaceUrl: [{ type: _angular_core.Input }], href: [{ type: _angular_core.HostBinding }], routerLink: [{ type: _angular_core.Input }], preserveQueryParams: [{ type: _angular_core.Input }], onClick: [{ type: _angular_core.HostListener, args: ["click", ["$event.button", "$event.ctrlKey", "$event.metaKey"]] }] }; /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @license
opyright Google Inc. All Rights Reserved.

se of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */
  var RouterLinkActive = function () {
    function RouterLinkActive(router, element, renderer, cdr) {
      var _this = this;this.router = router, this.element = element, this.renderer = renderer, this.cdr = cdr, this.classes = [], this.active = !1, this.routerLinkActiveOptions = { exact: !1 }, this.subscription = router.events.subscribe(function (s) {
        s instanceof NavigationEnd && _this.update();
      });
    }return Object.defineProperty(RouterLinkActive.prototype, "isActive", { get: function () {
        return this.active;
      }, enumerable: !0, configurable: !0 }), RouterLinkActive.prototype.ngAfterContentInit = function () {
      var _this = this;this.links.changes.subscribe(function (_) {
        return _this.update();
      }), this.linksWithHrefs.changes.subscribe(function (_) {
        return _this.update();
      }), this.update();
    }, Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", { set: function (data) {
        var classes = Array.isArray(data) ? data : data.split(" ");this.classes = classes.filter(function (c) {
          return !!c;
        });
      }, enumerable: !0, configurable: !0 }), RouterLinkActive.prototype.ngOnChanges = function (changes) {
      this.update();
    }, RouterLinkActive.prototype.ngOnDestroy = function () {
      this.subscription.unsubscribe();
    }, RouterLinkActive.prototype.update = function () {
      var _this = this;if (this.links && this.linksWithHrefs && this.router.navigated) {
        var hasActiveLinks = this.hasActiveLinks();this.active !== hasActiveLinks && (this.classes.forEach(function (c) {
          return _this.renderer.setElementClass(_this.element.nativeElement, c, hasActiveLinks);
        }), Promise.resolve(hasActiveLinks).then(function (active) {
          return _this.active = active;
        }));
      }
    }, RouterLinkActive.prototype.isLinkActive = function (router) {
      var _this = this;return function (link) {
        return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
      };
    }, RouterLinkActive.prototype.hasActiveLinks = function () {
      return this.links.some(this.isLinkActive(this.router)) || this.linksWithHrefs.some(this.isLinkActive(this.router));
    }, RouterLinkActive;
  }();RouterLinkActive.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[routerLinkActive]", exportAs: "routerLinkActive" }] }], RouterLinkActive.ctorParameters = function () {
    return [{ type: Router }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }, { type: _angular_core.ChangeDetectorRef }];
  }, RouterLinkActive.propDecorators = { links: [{ type: _angular_core.ContentChildren, args: [RouterLink, { descendants: !0 }] }], linksWithHrefs: [{ type: _angular_core.ContentChildren, args: [RouterLinkWithHref, { descendants: !0 }] }], routerLinkActiveOptions: [{ type: _angular_core.Input }], routerLinkActive: [{ type: _angular_core.Input }] }; /**
                                                                                                                                                                                                                                                                                                                                                               * @license
                                                                                                                                                                                                                                                                                                                                                               * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                               * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                                                                                                                                                                               * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                                                                                                                                                                               */
  var RouterOutlet = function () {
    function RouterOutlet(parentOutletMap, location, resolver, name) {
      this.parentOutletMap = parentOutletMap, this.location = location, this.resolver = resolver, this.name = name, this.activateEvents = new _angular_core.EventEmitter(), this.deactivateEvents = new _angular_core.EventEmitter(), parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
    }return RouterOutlet.prototype.ngOnDestroy = function () {
      this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET);
    }, Object.defineProperty(RouterOutlet.prototype, "locationInjector", { get: function () {
        return this.location.injector;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", { get: function () {
        return this.resolver;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(RouterOutlet.prototype, "isActivated", { get: function () {
        return !!this.activated;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(RouterOutlet.prototype, "component", { get: function () {
        if (!this.activated) throw new Error("Outlet is not activated");return this.activated.instance;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(RouterOutlet.prototype, "activatedRoute", { get: function () {
        if (!this.activated) throw new Error("Outlet is not activated");return this._activatedRoute;
      }, enumerable: !0, configurable: !0 }), RouterOutlet.prototype.detach = function () {
      if (!this.activated) throw new Error("Outlet is not activated");this.location.detach();var r = this.activated;return this.activated = null, this._activatedRoute = null, r;
    }, RouterOutlet.prototype.attach = function (ref, activatedRoute) {
      this.activated = ref, this._activatedRoute = activatedRoute, this.location.insert(ref.hostView);
    }, RouterOutlet.prototype.deactivate = function () {
      if (this.activated) {
        var c = this.component;this.activated.destroy(), this.activated = null, this._activatedRoute = null, this.deactivateEvents.emit(c);
      }
    }, RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {
      if (this.isActivated) throw new Error("Cannot activate an already activated outlet");this.outletMap = outletMap, this._activatedRoute = activatedRoute;var snapshot = activatedRoute._futureSnapshot,
          component = snapshot._routeConfig.component,
          factory = resolver.resolveComponentFactory(component),
          inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);this.activated = this.location.createComponent(factory, this.location.length, inj, []), this.activated.changeDetectorRef.detectChanges(), this.activateEvents.emit(this.activated.instance);
    }, RouterOutlet.prototype.activateWith = function (activatedRoute, resolver, outletMap) {
      if (this.isActivated) throw new Error("Cannot activate an already activated outlet");this.outletMap = outletMap, this._activatedRoute = activatedRoute;var snapshot = activatedRoute._futureSnapshot,
          component = snapshot._routeConfig.component;resolver = resolver || this.resolver;var factory = resolver.resolveComponentFactory(component),
          injector = new OutletInjector(activatedRoute, outletMap, this.location.injector);this.activated = this.location.createComponent(factory, this.location.length, injector, []), this.activated.changeDetectorRef.detectChanges(), this.activateEvents.emit(this.activated.instance);
    }, RouterOutlet;
  }();RouterOutlet.decorators = [{ type: _angular_core.Directive, args: [{ selector: "router-outlet" }] }], RouterOutlet.ctorParameters = function () {
    return [{ type: RouterOutletMap }, { type: _angular_core.ViewContainerRef }, { type: _angular_core.ComponentFactoryResolver }, { type: void 0, decorators: [{ type: _angular_core.Attribute, args: ["name"] }] }];
  }, RouterOutlet.propDecorators = { activateEvents: [{ type: _angular_core.Output, args: ["activate"] }], deactivateEvents: [{ type: _angular_core.Output, args: ["deactivate"] }] };var OutletInjector = function () {
    function OutletInjector(route, map$$1, parent) {
      this.route = route, this.map = map$$1, this.parent = parent;
    }return OutletInjector.prototype.get = function (token, notFoundValue) {
      return token === ActivatedRoute ? this.route : token === RouterOutletMap ? this.map : this.parent.get(token, notFoundValue);
    }, OutletInjector;
  }(),
      RouteReuseStrategy = function () {
    function RouteReuseStrategy() {}return RouteReuseStrategy.prototype.shouldDetach = function (route) {}, RouteReuseStrategy.prototype.store = function (route, handle) {}, RouteReuseStrategy.prototype.shouldAttach = function (route) {}, RouteReuseStrategy.prototype.retrieve = function (route) {}, RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {}, RouteReuseStrategy;
  }(),
      PreloadingStrategy = function () {
    function PreloadingStrategy() {}return PreloadingStrategy.prototype.preload = function (route, fn) {}, PreloadingStrategy;
  }(),
      PreloadAllModules = function () {
    function PreloadAllModules() {}return PreloadAllModules.prototype.preload = function (route, fn) {
      return rxjs_operator_catch._catch.call(fn(), function () {
        return rxjs_observable_of.of(null);
      });
    }, PreloadAllModules;
  }(),
      NoPreloading = function () {
    function NoPreloading() {}return NoPreloading.prototype.preload = function (route, fn) {
      return rxjs_observable_of.of(null);
    }, NoPreloading;
  }(),
      RouterPreloader = function () {
    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
      this.router = router, this.injector = injector, this.preloadingStrategy = preloadingStrategy;var onStartLoad = function (r) {
        return router.triggerEvent(new RouteConfigLoadStart(r));
      },
          onEndLoad = function (r) {
        return router.triggerEvent(new RouteConfigLoadEnd(r));
      };this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
    }return RouterPreloader.prototype.setUpPreloading = function () {
      var _this = this,
          navigations$ = rxjs_operator_filter.filter.call(this.router.events, function (e) {
        return e instanceof NavigationEnd;
      });this.subscription = rxjs_operator_concatMap.concatMap.call(navigations$, function () {
        return _this.preload();
      }).subscribe(function () {});
    }, RouterPreloader.prototype.preload = function () {
      var ngModule = this.injector.get(_angular_core.NgModuleRef);return this.processRoutes(ngModule, this.router.config);
    }, RouterPreloader.prototype.ngOnDestroy = function () {
      this.subscription.unsubscribe();
    }, RouterPreloader.prototype.processRoutes = function (ngModule, routes) {
      for (var res = [], _i = 0, routes_5 = routes; _i < routes_5.length; _i++) {
        var route = routes_5[_i];if (route.loadChildren && !route.canLoad && route._loadedConfig) {
          var childConfig = route._loadedConfig;res.push(this.processRoutes(childConfig.module, childConfig.routes));
        } else route.loadChildren && !route.canLoad ? res.push(this.preloadConfig(ngModule, route)) : route.children && res.push(this.processRoutes(ngModule, route.children));
      }return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));
    }, RouterPreloader.prototype.preloadConfig = function (ngModule, route) {
      var _this = this;return this.preloadingStrategy.preload(route, function () {
        var loaded$ = _this.loader.load(ngModule.injector, route);return rxjs_operator_mergeMap.mergeMap.call(loaded$, function (config) {
          return route._loadedConfig = config, _this.processRoutes(config.module, config.routes);
        });
      });
    }, RouterPreloader;
  }();RouterPreloader.decorators = [{ type: _angular_core.Injectable }], RouterPreloader.ctorParameters = function () {
    return [{ type: Router }, { type: _angular_core.NgModuleFactoryLoader }, { type: _angular_core.Compiler }, { type: _angular_core.Injector }, { type: PreloadingStrategy }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive],
      ROUTER_CONFIGURATION = new _angular_core.InjectionToken("ROUTER_CONFIGURATION"),
      ROUTER_FORROOT_GUARD = new _angular_core.InjectionToken("ROUTER_FORROOT_GUARD"),
      ROUTER_PROVIDERS = [_angular_common.Location, { provide: UrlSerializer, useClass: DefaultUrlSerializer }, { provide: Router, useFactory: setupRouter, deps: [_angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader, _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core.Optional()], [RouteReuseStrategy, new _angular_core.Optional()]] }, RouterOutletMap, { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] }, { provide: _angular_core.NgModuleFactoryLoader, useClass: _angular_core.SystemJsNgModuleLoader }, RouterPreloader, NoPreloading, PreloadAllModules, { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: !1 } }],
      RouterModule = function () {
    function RouterModule(guard, router) {}return RouterModule.forRoot = function (routes, config) {
      return { ngModule: RouterModule, providers: [ROUTER_PROVIDERS, provideRoutes(routes), { provide: ROUTER_FORROOT_GUARD, useFactory: provideForRootGuard, deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]] }, { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} }, { provide: _angular_common.LocationStrategy, useFactory: provideLocationStrategy, deps: [_angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION] }, { provide: PreloadingStrategy, useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading }, { provide: _angular_core.NgProbeToken, multi: !0, useFactory: routerNgProbeToken }, provideRouterInitializer()] };
    }, RouterModule.forChild = function (routes) {
      return { ngModule: RouterModule, providers: [provideRoutes(routes)] };
    }, RouterModule;
  }();RouterModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES }] }], RouterModule.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ROUTER_FORROOT_GUARD] }] }, { type: Router, decorators: [{ type: _angular_core.Optional }] }];
  };var RouterInitializer = function () {
    function RouterInitializer(injector) {
      this.injector = injector, this.initNavigation = !1, this.resultOfPreactivationDone = new rxjs_Subject.Subject();
    }return RouterInitializer.prototype.appInitializer = function () {
      var _this = this,
          p = this.injector.get(_angular_common.LOCATION_INITIALIZED, Promise.resolve(null));return p.then(function () {
        var resolve = null,
            res = new Promise(function (r) {
          return resolve = r;
        }),
            router = _this.injector.get(Router),
            opts = _this.injector.get(ROUTER_CONFIGURATION);if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) resolve(!0);else if ("disabled" === opts.initialNavigation) router.setUpLocationChangeListener(), resolve(!0);else {
          if ("enabled" !== opts.initialNavigation) throw new Error("Invalid initialNavigation options: '" + opts.initialNavigation + "'");router.hooks.afterPreactivation = function () {
            return _this.initNavigation ? rxjs_observable_of.of(null) : (_this.initNavigation = !0, resolve(!0), _this.resultOfPreactivationDone);
          }, router.initialNavigation();
        }return res;
      });
    }, RouterInitializer.prototype.bootstrapListener = function (bootstrappedComponentRef) {
      var opts = this.injector.get(ROUTER_CONFIGURATION),
          preloader = this.injector.get(RouterPreloader),
          router = this.injector.get(Router),
          ref = this.injector.get(_angular_core.ApplicationRef);bootstrappedComponentRef === ref.components[0] && (this.isLegacyEnabled(opts) ? router.initialNavigation() : this.isLegacyDisabled(opts) && router.setUpLocationChangeListener(), preloader.setUpPreloading(), router.resetRootComponentType(ref.componentTypes[0]), this.resultOfPreactivationDone.next(null), this.resultOfPreactivationDone.complete());
    }, RouterInitializer.prototype.isLegacyEnabled = function (opts) {
      return "legacy_enabled" === opts.initialNavigation || opts.initialNavigation === !0 || void 0 === opts.initialNavigation;
    }, RouterInitializer.prototype.isLegacyDisabled = function (opts) {
      return "legacy_disabled" === opts.initialNavigation || opts.initialNavigation === !1;
    }, RouterInitializer;
  }();RouterInitializer.decorators = [{ type: _angular_core.Injectable }], RouterInitializer.ctorParameters = function () {
    return [{ type: _angular_core.Injector }];
  };var ROUTER_INITIALIZER = new _angular_core.InjectionToken("Router Initializer"),
      VERSION = new _angular_core.Version("4.1.3");exports.RouterLink = RouterLink, exports.RouterLinkWithHref = RouterLinkWithHref, exports.RouterLinkActive = RouterLinkActive, exports.RouterOutlet = RouterOutlet, exports.NavigationCancel = NavigationCancel, exports.NavigationEnd = NavigationEnd, exports.NavigationError = NavigationError, exports.NavigationStart = NavigationStart, exports.RouteConfigLoadEnd = RouteConfigLoadEnd, exports.RouteConfigLoadStart = RouteConfigLoadStart, exports.RoutesRecognized = RoutesRecognized, exports.RouteReuseStrategy = RouteReuseStrategy, exports.Router = Router, exports.ROUTES = ROUTES, exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION, exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER, exports.RouterModule = RouterModule, exports.provideRoutes = provideRoutes, exports.RouterOutletMap = RouterOutletMap, exports.NoPreloading = NoPreloading, exports.PreloadAllModules = PreloadAllModules, exports.PreloadingStrategy = PreloadingStrategy, exports.RouterPreloader = RouterPreloader, exports.ActivatedRoute = ActivatedRoute, exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot, exports.RouterState = RouterState, exports.RouterStateSnapshot = RouterStateSnapshot, exports.PRIMARY_OUTLET = PRIMARY_OUTLET, exports.convertToParamMap = convertToParamMap, exports.UrlHandlingStrategy = UrlHandlingStrategy, exports.DefaultUrlSerializer = DefaultUrlSerializer, exports.UrlSegment = UrlSegment, exports.UrlSegmentGroup = UrlSegmentGroup, exports.UrlSerializer = UrlSerializer, exports.UrlTree = UrlTree, exports.VERSION = VERSION, exports.ɵROUTER_PROVIDERS = ROUTER_PROVIDERS, exports.ɵflatten = flatten, exports.ɵa = ROUTER_FORROOT_GUARD, exports.ɵg = RouterInitializer, exports.ɵh = getAppInitializer, exports.ɵi = getBootstrapListener, exports.ɵd = provideForRootGuard, exports.ɵc = provideLocationStrategy, exports.ɵj = provideRouterInitializer, exports.ɵf = rootRoute, exports.ɵb = routerNgProbeToken, exports.ɵe = setupRouter, exports.ɵk = Tree, exports.ɵl = TreeNode, Object.defineProperty(exports, "__esModule", { value: !0 });
});

$__System.registerDynamic("3c", ["34", "3d"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var router_1 = $__require("34");
    var index_1 = $__require("3d");
    exports.routes = router_1.RouterModule.forRoot([
    // {
    //   path: '',
    //   redirectTo: '/orders',
    //   pathMatch: 'full'
    // },
    {
        path: '',
        component: index_1.Orders
    }, {
        path: 'products',
        component: index_1.Products
    }, {
        path: 'customers',
        component: index_1.Customers
    }]);

});
$__System.registerDynamic("3e", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var KeysPipe = function () {
        function KeysPipe() {}
        KeysPipe.prototype.transform = function (obj, keysToFilter) {
            var keys = Object.keys(obj);
            if (keysToFilter) {
                return keys.filter(function (i) {
                    return keysToFilter.indexOf(i) < 0;
                });
            } else {
                return keys;
            }
        };
        return KeysPipe;
    }();
    KeysPipe = __decorate([core_1.Pipe({ name: 'keys' })], KeysPipe);
    exports.KeysPipe = KeysPipe;
    var SearchPipe = function () {
        function SearchPipe() {}
        SearchPipe.prototype.transform = function (items, searchQuery) {
            function _ifValueConsistQuery(value) {
                // Return true if given value isn't empty and matches search text
                if (value) {
                    value += '';
                    return value.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1;
                }
            }
            function _deepSearch(item) {
                for (var key in item) {
                    if (item.hasOwnProperty(key)) {
                        // At first checks in values of given object, e.g. 'firstName/totalSum'
                        // if no, then goes recursivly and checks in nested object/arrays, e.g. 'orderItemTos'
                        if (_ifValueConsistQuery(item[key]) || typeof item[key] === 'object' && _deepSearch(item[key])) {
                            return true;
                        }
                    }
                }
            }
            return items.length && searchQuery ? items.filter(_deepSearch) : items;
        };
        return SearchPipe;
    }();
    SearchPipe = __decorate([core_1.Pipe({ name: 'search' })], SearchPipe);
    exports.SearchPipe = SearchPipe;

});
$__System.registerDynamic("3f", ["e", "40", "41", "13", "3c", "3e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var services = $__require("40");
    var store_1 = $__require("41");
    var app_1 = $__require("13");
    exports.App = app_1.App;
    var routes_1 = $__require("3c");
    exports.routes = routes_1.routes;
    var pipes_1 = $__require("3e");
    exports.KeysPipe = pipes_1.KeysPipe;
    exports.SearchPipe = pipes_1.SearchPipe;
    var mapValuesToArray = function (obj) {
        return Object.keys(obj).map(function (key) {
            return obj[key];
        });
    };
    exports.providers = [{ provide: core_1.LOCALE_ID, useValue: "ru-RU" }, store_1.Store].concat(mapValuesToArray(services));

});
$__System.registerDynamic("3b", ["1f"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("1f");
    /* tslint:enable:max-line-length */
    /**
     * Filter items emitted by the source Observable by only emitting those that
     * satisfy a specified predicate.
     *
     * <span class="informal">Like
     * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
     * it only emits a value from the source if it passes a criterion function.</span>
     *
     * <img src="./img/filter.png" width="100%">
     *
     * Similar to the well-known `Array.prototype.filter` method, this operator
     * takes values from the source Observable, passes them through a `predicate`
     * function and only emits those values that yielded `true`.
     *
     * @example <caption>Emit only click events whose target was a DIV element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
     * clicksOnDivs.subscribe(x => console.log(x));
     *
     * @see {@link distinct}
     * @see {@link distinctUntilChanged}
     * @see {@link distinctUntilKeyChanged}
     * @see {@link ignoreElements}
     * @see {@link partition}
     * @see {@link skip}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates each value emitted by the source Observable. If it returns `true`,
     * the value is emitted, if `false` the value is not passed to the output
     * Observable. The `index` parameter is the number `i` for the i-th source
     * emission that has happened since the subscription, starting from the number
     * `0`.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {Observable} An Observable of values from the source that were
     * allowed by the `predicate` function.
     * @method filter
     * @owner Observable
     */
    function filter(predicate, thisArg) {
        return this.lift(new FilterOperator(predicate, thisArg));
    }
    exports.filter = filter;
    var FilterOperator = function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FilterSubscriber = function (_super) {
        __extends(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.count = 0;
            this.predicate = predicate;
        }
        // the try catch block below is left specifically for
        // optimization and perf reasons. a tryCatcher is not necessary here.
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber_1.Subscriber);

});
$__System.registerDynamic('42', ['19', '3b'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var filter_1 = $__require('3b');
  Observable_1.Observable.prototype.filter = filter_1.filter;

});
$__System.registerDynamic("43", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    function isDate(value) {
        return value instanceof Date && !isNaN(+value);
    }
    exports.isDate = isDate;

});
$__System.registerDynamic('20', ['19'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('19');
    /**
     * Represents a push-based event or value that an {@link Observable} can emit.
     * This class is particularly useful for operators that manage notifications,
     * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
     * others. Besides wrapping the actual delivered value, it also annotates it
     * with metadata of, for instance, what type of push message it is (`next`,
     * `error`, or `complete`).
     *
     * @see {@link materialize}
     * @see {@link dematerialize}
     * @see {@link observeOn}
     *
     * @class Notification<T>
     */
    var Notification = function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        /**
         * Delivers to the given `observer` the value wrapped by this Notification.
         * @param {Observer} observer
         * @return
         */
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        /**
         * Given some {@link Observer} callbacks, deliver the value represented by the
         * current Notification to the correctly corresponding callback.
         * @param {function(value: T): void} next An Observer `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        /**
         * Takes an Observer or its individual callback functions, and calls `observe`
         * or `do` methods accordingly.
         * @param {Observer|function(value: T): void} nextOrObserver An Observer or
         * the `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            } else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        /**
         * Returns a simple Observable that just delivers the notification represented
         * by this Notification instance.
         * @return {any}
         */
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1.Observable.of(this.value);
                case 'E':
                    return Observable_1.Observable.throw(this.error);
                case 'C':
                    return Observable_1.Observable.empty();
            }
            throw new Error('unexpected notification kind value');
        };
        /**
         * A shortcut to create a Notification instance of the type `next` from a
         * given value.
         * @param {T} value The `next` value.
         * @return {Notification<T>} The "next" Notification representing the
         * argument.
         */
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return this.undefinedValueNotification;
        };
        /**
         * A shortcut to create a Notification instance of the type `error` from a
         * given error.
         * @param {any} [err] The `error` error.
         * @return {Notification<T>} The "error" Notification representing the
         * argument.
         */
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        /**
         * A shortcut to create a Notification instance of the type `complete`.
         * @return {Notification<any>} The valueless "complete" Notification.
         */
        Notification.createComplete = function () {
            return this.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }();
    exports.Notification = Notification;

});
$__System.registerDynamic('44', ['45', '43', '1f', '20'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var async_1 = $__require('45');
    var isDate_1 = $__require('43');
    var Subscriber_1 = $__require('1f');
    var Notification_1 = $__require('20');
    /**
     * Delays the emission of items from the source Observable by a given timeout or
     * until a given Date.
     *
     * <span class="informal">Time shifts each item by some specified amount of
     * milliseconds.</span>
     *
     * <img src="./img/delay.png" width="100%">
     *
     * If the delay argument is a Number, this operator time shifts the source
     * Observable by that amount of time expressed in milliseconds. The relative
     * time intervals between the values are preserved.
     *
     * If the delay argument is a Date, this operator time shifts the start of the
     * Observable execution until the given date occurs.
     *
     * @example <caption>Delay each click by one second</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
     * delayedClicks.subscribe(x => console.log(x));
     *
     * @example <caption>Delay all clicks until a future date happens</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var date = new Date('March 15, 2050 12:00:00'); // in the future
     * var delayedClicks = clicks.delay(date); // click emitted only after that date
     * delayedClicks.subscribe(x => console.log(x));
     *
     * @see {@link debounceTime}
     * @see {@link delayWhen}
     *
     * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
     * a `Date` until which the emission of the source items is delayed.
     * @param {Scheduler} [scheduler=async] The IScheduler to use for
     * managing the timers that handle the time-shift for each item.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by the specified timeout or Date.
     * @method delay
     * @owner Observable
     */
    function delay(delay, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        var absoluteDelay = isDate_1.isDate(delay);
        var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
        return this.lift(new DelayOperator(delayFor, scheduler));
    }
    exports.delay = delay;
    var DelayOperator = function () {
        function DelayOperator(delay, scheduler) {
            this.delay = delay;
            this.scheduler = scheduler;
        }
        DelayOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
        };
        return DelayOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DelaySubscriber = function (_super) {
        __extends(DelaySubscriber, _super);
        function DelaySubscriber(destination, delay, scheduler) {
            _super.call(this, destination);
            this.delay = delay;
            this.scheduler = scheduler;
            this.queue = [];
            this.active = false;
            this.errored = false;
        }
        DelaySubscriber.dispatch = function (state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;
            while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
                queue.shift().notification.observe(destination);
            }
            if (queue.length > 0) {
                var delay_1 = Math.max(0, queue[0].time - scheduler.now());
                this.schedule(state, delay_1);
            } else {
                source.active = false;
            }
        };
        DelaySubscriber.prototype._schedule = function (scheduler) {
            this.active = true;
            this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
                source: this, destination: this.destination, scheduler: scheduler
            }));
        };
        DelaySubscriber.prototype.scheduleNotification = function (notification) {
            if (this.errored === true) {
                return;
            }
            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);
            if (this.active === false) {
                this._schedule(scheduler);
            }
        };
        DelaySubscriber.prototype._next = function (value) {
            this.scheduleNotification(Notification_1.Notification.createNext(value));
        };
        DelaySubscriber.prototype._error = function (err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
        };
        DelaySubscriber.prototype._complete = function () {
            this.scheduleNotification(Notification_1.Notification.createComplete());
        };
        return DelaySubscriber;
    }(Subscriber_1.Subscriber);
    var DelayMessage = function () {
        function DelayMessage(time, notification) {
            this.time = time;
            this.notification = notification;
        }
        return DelayMessage;
    }();

});
$__System.registerDynamic('46', ['19', '44'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var delay_1 = $__require('44');
  Observable_1.Observable.prototype.delay = delay_1.delay;

});
$__System.registerDynamic("15", ["e", "46", "47"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    $__require("46");
    var index_1 = $__require("47");
    var PopupService = function () {
        function PopupService(compiler) {
            this.compiler = compiler;
            this.popupComponent = undefined;
        }
        PopupService.prototype.renderPopup = function (header, data) {
            var _this = this;
            var popupFactory = this.compiler.resolveComponentFactory(index_1.PopupComponent);
            this.popupComponent = this.viewContainerRef.createComponent(popupFactory);
            this.popupComponent.instance.destroyedStream.subscribe(function () {
                _this.popupComponent.destroy();
            });
            this.popupComponent.instance.header = header;
            if (data) {
                this.popupComponent.instance.provideWithData(data);
            }
            return this.popupComponent.instance.submittedStream;
        };
        PopupService.prototype.onProvideWithFormData = function (data) {
            this.popupComponent.instance.provideWithFormData(data);
        };
        return PopupService;
    }();
    PopupService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [core_1.ComponentFactoryResolver])], PopupService);
    exports.PopupService = PopupService;

});
$__System.registerDynamic("48", ["e", "49", "36", "4a", "4b", "4c", "4d", "4e", "4f", "42", "50", "15", "16", "41", "51", "52"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var forms_1 = $__require("49");
    var Subject_1 = $__require("36");
    $__require("4a");
    $__require("4b");
    $__require("4c");
    $__require("4d");
    $__require("4e");
    $__require("4f");
    $__require("42");
    var orders_1 = $__require("50");
    var popup_1 = $__require("15");
    var noty_1 = $__require("16");
    var store_1 = $__require("41");
    var models_1 = $__require("51");
    var animations_1 = $__require("52");
    var Orders = function () {
        function Orders(store, orderService, popupService, notyService, viewRef) {
            this.store = store;
            this.orderService = orderService;
            this.popupService = popupService;
            this.notyService = notyService;
            this.viewRef = viewRef;
            this.searchStream = new forms_1.FormControl();
            this.searchQuery = '';
            this.searchInputState = 'collapsed';
            this.totalOrders = 0;
            this.preloadedOrders = 0;
            this.page = 1;
            this.pageLength = 10;
            this.pageStream = new Subject_1.Subject();
            this.subs = [];
            this.infoBlocks = models_1.StaticDATA.infoBlocks;
        }
        Orders.prototype.ngOnInit = function () {
            var _this = this;
            this.onGetOrders();
            var storeSource = this.store.changes.map(function (store) {
                _this.preloadedOrders = store.order.length;
                return { search: _this.searchQuery, page: _this.page, length: _this.pageLength };
            });
            var searchSource = this.searchStream.valueChanges.debounceTime(100).distinctUntilChanged().map(function (searchQuery) {
                return { search: searchQuery, page: _this.page, length: _this.pageLength };
            });
            var pageSource = this.pageStream.map(function (params) {
                _this.page = params.page;
                _this.pageLength = params.length;
                if (params.apiGet !== false) {
                    _this.onGetOrders();
                }
                return { search: _this.searchQuery, page: params.page, length: params.length };
            });
            var source = storeSource.merge(searchSource, pageSource).startWith({ search: this.searchQuery, page: this.page, length: this.pageLength }).switchMap(function (_a) {
                var search = _a.search,
                    page = _a.page,
                    length = _a.length;
                return _this.orderService.list(search, page, length);
            }).share();
            this.orders$ = source.pluck('orders');
            this.filteredOrders$ = source.pluck('filtered');
            this.popupService.viewContainerRef = this.viewRef;
        };
        Orders.prototype.ngOnDestroy = function () {
            this.subs.forEach(function (sub) {
                return sub.unsubscribe();
            });
            this.orderService.purgeStore();
        };
        // Manage orders
        Orders.prototype.onGetOrders = function () {
            var _this = this;
            this.subs[this.subs.length] = this.orderService.getOrders(this.page - 1, this.pageLength).subscribe(function (resp) {
                _this.totalOrders = resp.totalElements;
            });
        };
        Orders.prototype.onAddOrder = function () {
            var _this = this;
            this.orderService.addOrder().subscribe(function (_a) {
                var orderId = _a.orderId,
                    orderItemId = _a.orderItemId;
                _this.notyService.renderNoty("Order \u2116 " + orderId + " has been added");
            });
            var apiGet = this.page === 1 ? false : true; // Tracing if it's needed to send http GET request for orders
            this.paginationChanged({ page: 1, length: this.pageLength, apiGet: apiGet });
        };
        Orders.prototype.onDeleteOrder = function (orderId) {
            var _this = this;
            if (confirm('Действительно удалить этот заказ?')) {
                this.orderService.deleteOrder(orderId).subscribe(function () {
                    _this.notyService.renderNoty("Order \u2116 " + orderId + " has been deleted");
                });
            }
        };
        // Pagination
        Orders.prototype.paginationChanged = function (_a) {
            var page = _a.page,
                length = _a.length,
                apiGet = _a.apiGet;
            this.pageStream.next({ page: page, length: length, apiGet: apiGet });
        };
        // Manage order info
        Orders.prototype.onUpdateInfoField = function (orderId, fieldName, _a) {
            var _this = this;
            var newValue = _a.newValue,
                oldValue = _a.oldValue;
            this.orderService.updateInfoField(orderId, fieldName, newValue).subscribe(function () {
                _this.notyService.renderNoty("\"" + oldValue + "\" has been changed to \"" + newValue + "\"");
            });
        };
        Orders.prototype.onUpdateInfoInput = function (orderId, fieldName, e) {
            console.log(e);
            this.orderService.updateInfoInput(orderId, fieldName, e.target.value).subscribe();
        };
        Orders.prototype.onAutocompleteInfo = function (orderId, data) {
            this.orderService.autocompleteInfo(orderId, data);
        };
        // Manage order products
        Orders.prototype.onAddProduct = function (orderId) {
            this.orderService.addProduct(orderId);
        };
        Orders.prototype.onUpdateProductField = function (orderId, productId, fieldName, _a) {
            var _this = this;
            var newValue = _a.newValue,
                oldValue = _a.oldValue;
            this.orderService.updateProductField(orderId, productId, fieldName, newValue).subscribe(function () {
                _this.notyService.renderNoty("\"" + oldValue + "\" has been changed to \"" + newValue + "\"");
            });
        };
        Orders.prototype.onUpdateProductInput = function (orderId, productId, fieldName, value) {
            this.orderService.updateProductInput(orderId, productId, fieldName, value);
        };
        Orders.prototype.onAutocompleteProduct = function (orderId, productId, data) {
            this.orderService.autocompleteProduct(orderId, productId, data);
        };
        Orders.prototype.onDeleteProduct = function (id, productId) {
            if (confirm('Действительно удалить эту позицию?')) {
                this.orderService.deleteProduct(id, productId).subscribe();
            }
        };
        // Manage customers
        Orders.prototype.onEditCustomer = function (customerId) {
            var _this = this;
            this.popupService.renderPopup('Update customer').subscribe(function (customer) {
                _this.orderService.saveCustomer(customerId, customer).subscribe();
            });
            this.orderService.getCustomer(customerId).subscribe(function (customer) {
                _this.popupService.onProvideWithFormData(customer);
            });
        };
        Orders.prototype.onPersistCustomer = function (orderId) {
            this.orderService.persistCustomer(orderId);
        };
        // @TODO remove this
        Orders.prototype.onGetAllOrders = function () {
            this.orderService.getAllOrders().subscribe(function (resp) {
                return console.log(resp.data);
            });
        };
        Orders.prototype.onGetStore = function () {
            this.orderService.getStore();
        };
        Orders.prototype.console = function () {
            console.log(this.searchStream);
        };
        Orders.prototype.hasInput = function (key) {
            return key === 'status' || key === 'paymentType' || key === 'quantity' ? true : false;
        };
        Orders.prototype.trackById = function (index, value) {
            return value.id;
        };
        Orders.prototype.onMoveFocus = function (el, fromInfoBlock) {
            var parentNextSibling = el.parentNode.nextElementSibling;
            if (parentNextSibling) {
                if (fromInfoBlock) {
                    el.parentNode.nextElementSibling.children[0].children[0].focus();
                } else {
                    var index = Array.from(el.parentNode.children).indexOf(el);
                    parentNextSibling.children[index].focus();
                }
            }
        };
        Orders.prototype.toggleAnimState = function () {
            this.searchInputState = this.searchInputState === 'collapsed' ? 'expanded' : 'collapsed';
        };
        return Orders;
    }();
    Orders = __decorate([core_1.Component({
        template: "           \n    <div style=\"display: none;\">\n      <div class=\"get-orders\" style=\"display: inline-block;\" (click)=\"onGetAllOrders()\">Get All Orders</div>\n    \n      <div class=\"consolestore\" style=\"display: inline-block;\" (click)=\"onGetStore()\">Console current state</div>\n      \n      <div class=\"consoleorders\"  style=\"display: inline-block;\" (click)=\"console()\">Console</div>\n    </div>\n      \n    <div class=\"wrapper order-page\">\n    \n      <div class=\"service-block\">\n        <div\n          class=\"btn btn-orders-add\"\n          (click)=\"onAddOrder()\"\n        >Add New Order</div>\n        \n        <div\n          class=\"search-input-container\"\n          [class.expanded]=\"searchInputState === 'expanded'\"\n        >  \n          <input type=\"text\" name=\"searchStream\" id=\"\"\n            placeholder=\"Search in orders...\"\n            class=\"input search-input\"\n            [@changeWidth]=\"searchInputState\"\n            #searchControl\n            [formControl]=\"searchStream\"\n            [(ngModel)]=\"searchQuery\"\n            (focusin)=\"toggleAnimState()\"\n            (focusout)=\"toggleAnimState()\"\n          >\n        </div>\n         \n      </div>\n      \n      <div class=\"orders\">\n        <div\n          class=\"order order--{{ order.status }}\"\n          [@appear]\n          *ngFor=\"let order of orders$ | async\"\n         >\n        \n          <div class=\"order-info\">\n          \n            <div class=\"order-info__block order-info__block--id\">\n              {{ order.id }}\n            </div>\n            \n            <ng-container \n              *ngFor=\"let key of order | keys:['id', 'customerId', 'orderItemDtos']\"\n            >\n              \n              <ng-container *ngIf=\"!hasInput(key)\">\n            \n                <ng-template [ngIf]=\"key !== 'date'\">\n                  <div \n                    class=\"order-info__block order-info__block--{{ key }}\"\n                    contenteditable                \n                    [autocomplete]=\"['info', key]\"\n                    [(contenteditableModel)]=\"order[key]\"\n                    (selectedAutocomplete)=\"onAutocompleteInfo(order.id, $event)\"\n                    (contentChanged)=\"onUpdateInfoField(order.id, key, $event)\"\n                  ></div>  \n                </ng-template>\n              \n                <ng-template [ngIf]=\"key === 'date'\">\n                  <div class=\"order-info__block order-info__block--date\">\n                    {{ order[key] | date:'dd MMM HH:mm' }}\n                  </div>  \n                </ng-template>\n                \n              </ng-container>\n            \n              <ng-template [ngIf]=\"hasInput(key)\">\n                <div class=\"order-info__block order-info__block--{{ key }}\">\n                  <select\n                    name=\"{{ key }}\"\n                    (change)=\"onUpdateInfoInput(order.id, key, $event)\"\n                  >\n                    <option\n                     *ngFor=\"let value of infoBlocks[key]\"\n                     [value]=\"value\"\n                     [attr.selected]=\"value === order[key] ? '' : null\"\n                    >\n                      {{ value }}\n                    </option>\n                  </select>\n                </div>  \n              </ng-template>\n            \n            </ng-container>\n          </div>\n         \n         \n         \n          <div class=\"order-manage\">\n            <div title=\"Add product\" class=\"order-manage__block order-manage__block--add\" (click)=\"onAddProduct(order.id)\">\n              <i class=\"material-icons\">add_box</i>\n              <div class=\"order-manage__text\">Add product</div>\n            </div>\n            <div title=\"Save customer\" class=\"order-manage__block order-manage__block--save\"\n              *ngIf=\"order.customerId === 0\"\n              (click)=\"onPersistCustomer(order.id)\"\n            >\n              <i class=\"material-icons\">save</i>\n              <div class=\"order-manage__text\">Save customer</div>\n            </div>\n            <div title=\"Edit customer\" class=\"order-manage__block order-manage__block--edit\"\n              *ngIf=\"order.customerId !== 0\"\n              (click)=\"onEditCustomer(order.customerId)\"\n            >\n              <i class=\"material-icons\">mode_edit</i>\n              <div class=\"order-manage__text\">Edit customer</div>\n            </div>\n            <div title=\"Delete order\" class=\"order-manage__block order-manage__block--delete\" (click)=\"onDeleteOrder(order.id)\">\n              <i class=\"material-icons\">delete_forever</i>\n              <div class=\"order-manage__text\">Delete order</div>\n            </div>\n          </div>\n          \n          \n          <div class=\"order-products\">\n            <div\n              *ngFor=\"let product of order.orderItemDtos; let odd = odd, let even = even;\"\n              [ngClass]=\"{'order-product': true, odd: odd, even: even}\"\n            >\n            \n              <ng-container\n                *ngFor=\"let key of product | keys:[\n                  'id', 'productId', 'productVariationId', 'categories', 'supplier'\n                ];\"\n              >\n              \n                <ng-template [ngIf]=\"!hasInput(key)\">\n                  <div\n                    class=\"order-product__block order-product__block--{{ key }}\"\n                    contenteditable\n                    #productBlock\n                    [autocomplete]=\"['product', key]\"\n                    [(contenteditableModel)]=\"product[key]\"\n                    (selectedAutocomplete)=\"onAutocompleteProduct(order.id, product.id, $event)\"\n                    (contentChanged)=\"onUpdateProductField(order.id, product.id, key, $event)\"\n                  ></div>  \n                </ng-template>\n            \n                <ng-template [ngIf]=\"hasInput(key)\">\n                  <div class=\"order-product__block order-product__block--{{ key }}\">\n                    <input\n                      type=\"number\"\n                      value=\"{{ product[key] }}\"\n                      hotkeys\n                      (blur)=\"onUpdateProductInput(order.id, product.id, key, $event.target.value)\"\n                    >\n                  </div>  \n                </ng-template>\n                  \n              </ng-container>\n  \n              <div class=\"order-product__block order-product__block--delete\" (click)=\"onDeleteProduct(order.id, product.id)\">\n                <i class=\"material-icons\">delete</i>            \n              </div>\n              \n            </div>\n          </div>\n          \n        </div>\n      </div>\n      \n      \n      <pagination\n        [total]=\"totalOrders\"\n        [length]=\"pageLength\"\n        [current]=\"page\"\n        (dataChanged)=\"paginationChanged($event)\"\n      >\n      </pagination>\n      \n    </div>\n  ",
        animations: [animations_1.slideToLeft(), animations_1.appear(), animations_1.changeWidth()],
        host: { '[@slideToLeft]': '' },
        providers: [popup_1.PopupService]
    }), __metadata("design:paramtypes", [store_1.Store, orders_1.OrderService, popup_1.PopupService, noty_1.NotyService, core_1.ViewContainerRef])], Orders);
    exports.Orders = Orders;

});
$__System.registerDynamic("53", ["e", "49", "36", "4a", "4b", "4c", "4d", "4e", "4f", "41", "40", "52"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var forms_1 = $__require("49");
    var Subject_1 = $__require("36");
    $__require("4a");
    $__require("4b");
    $__require("4c");
    $__require("4d");
    $__require("4e");
    $__require("4f");
    var store_1 = $__require("41");
    var index_1 = $__require("40");
    var animations_1 = $__require("52");
    var Products = function () {
        function Products(productService, notyService, store) {
            this.productService = productService;
            this.notyService = notyService;
            this.store = store;
            this.searchStream = new forms_1.FormControl();
            this.searchQuery = '';
            this.pageStream = new Subject_1.Subject();
            this.page = 1;
            this.pageLength = 10;
            this.filterStream = new Subject_1.Subject();
            this.filterData = { supplier: '', categories: '' };
            this.subs = [];
            this.categories = [''];
            this.suppliers = [''];
            this.searchExpanded = 'collapsed';
        }
        Products.prototype.ngOnInit = function () {
            var _this = this;
            this.subs[this.subs.length] = this.productService.getAllProducts().subscribe(function (_a) {
                var totalElements = _a.totalElements,
                    elements = _a.elements;
                _this.totalProducts = totalElements;
                _this.getFiltersList(elements);
            });
            var storeSource = this.store.changes.map(function (store) {
                return { search: _this.searchQuery, page: _this.page, length: _this.pageLength, filterData: _this.filterData };
            });
            var searchSource = this.searchStream.valueChanges.debounceTime(100).distinctUntilChanged().map(function (searchQuery) {
                _this.page = 1;
                return { search: searchQuery, page: _this.page, length: _this.pageLength, filterData: _this.filterData };
            });
            var pageSource = this.pageStream.map(function (params) {
                _this.page = params.page;
                _this.pageLength = params.length;
                return { search: _this.searchQuery, page: params.page, length: params.length, filterData: _this.filterData };
            });
            var filterSource = this.filterStream.map(function (filterData) {
                _this.filterData = filterData;
                return { search: _this.searchQuery, page: 1, length: _this.pageLength, filterData: filterData };
            });
            var source = storeSource.merge(searchSource, pageSource, filterSource).startWith({ search: this.searchQuery, page: this.page, length: this.pageLength, filterData: this.filterData }).switchMap(function (params) {
                return _this.productService.list(params.search, params.page, params.length, params.filterData);
            }).share();
            this.products$ = source.pluck('products');
            this.filteredProducts$ = source.pluck('filtered');
        };
        Products.prototype.ngOnDestroy = function () {
            this.subs.forEach(function (sub) {
                return sub.unsubscribe();
            });
            this.productService.purgeStore();
        };
        /* Pagination */
        Products.prototype.paginationChanged = function (_a) {
            var page = _a.page,
                length = _a.length;
            this.pageStream.next({ page: page, length: length });
            this.page = page;
            this.pageLength = length;
        };
        Products.prototype.getFiltersList = function (products) {
            var _categories = [];
            var _suppliers = [];
            products.forEach(function (product) {
                if (product.categories) {
                    _categories = _categories.concat(product.categories);
                }
                if (product.supplier) {
                    _suppliers.push(product.supplier);
                }
            });
            this.categories = Array.from(new Set(_categories));
            this.suppliers = Array.from(new Set(_suppliers));
        };
        Products.prototype.onFilterChange = function (e) {
            this.filterStream.next(e);
        };
        Products.prototype.onUpdateProductField = function (productId, productVarId, fieldName, _a) {
            var _this = this;
            var newValue = _a.newValue,
                oldValue = _a.oldValue;
            this.productService.updateProductField(productId, productVarId, (_b = {}, _b[fieldName] = newValue, _b)).subscribe(function () {
                _this.notyService.renderNoty("\"" + oldValue + "\" has been changed to \"" + newValue + "\"");
            });
            var _b;
        };
        Products.prototype.isEditable = function (key) {
            return key === 'price' || key === 'quantity' ? true : false;
        };
        Products.prototype.isCategory = function (key) {
            return key === 'categories' ? true : false;
        };
        Products.prototype.toggleAnimState = function () {
            this.searchExpanded = this.searchExpanded === 'collapsed' ? 'expanded' : 'collapsed';
        };
        return Products;
    }();
    Products = __decorate([core_1.Component({
        template: "\n\n    <div class=\"wrapper products-page\">\n    \n      <div class=\"service-block\">\n      \n        <filter\n          [filters]=\"{\n            categories: categories,\n            supplier: suppliers\n          }\"\n          (filtered)=\"onFilterChange($event)\"\n        ></filter>\n      \n        <input type=\"text\" name=\"searchStream\" id=\"\"\n          class=\"input search-input\"\n          placeholder=\"Search in products...\"\n          [@changeWidth]=\"searchExpanded\"\n          #searchControl\n          [formControl]=\"searchStream\"\n          [(ngModel)]=\"searchQuery\"\n          (focusin)=\"toggleAnimState()\"\n          (focusout)=\"toggleAnimState()\"\n        >\n      \n      </div>\n      \n        \n      <div class=\"table-container\">\n        <table class=\"table table-products\">\n          <thead>\n            <th class=\"product-cell--id numeric\">ID</th>\n            <th class=\"product-cell--varId numeric\">Variation ID</th>\n            <th class=\"product-cell--name\">Name</th>\n            <th class=\"product-cell--categories\">Category</th>\n            <th class=\"product-cell--price numeric\">Price</th>\n            <th class=\"product-cell--quantity numeric\">Quantity</th>\n            <th class=\"product-cell--supplier\">Supplier</th>\n          </thead>\n          <tbody>\n            <tr\n              *ngFor=\"let product of products$ | async; let odd = odd; let even = even;\"\n              [ngClass]=\"{'product': true, 'odd': odd, 'even': even}\"\n            >\n              <ng-container\n                *ngFor=\"let key of product | keys:['unlimited']\"\n              >\n                \n                <ng-template [ngIf]=\"isEditable(key)\">\n                  <td\n                    class=\"product-cell--{{ key }} editable\"\n                    contenteditable\n                    [(contenteditableModel)]=\"product[key]\"\n                    (contentChanged)=\"onUpdateProductField(product.id, product.variationId, key, $event)\"\n                  ></td>\n                </ng-template>\n                \n                \n                <ng-template [ngIf]=\"!isEditable(key)\">\n                  <td class=\"product-cell--{{ key }}\">\n                    {{ product[key] }}\n                  </td>\n                </ng-template>\n                \n              </ng-container>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      \n      <pagination\n        [total]=\"filteredProducts$ | async\"\n        [length]=\"pageLength\"\n        [current]=\"page\"\n        (dataChanged)=\"paginationChanged($event)\"\n      >\n      </pagination>\n    </div>\n  ",
        animations: [animations_1.slideToLeft(), animations_1.changeWidth()],
        host: { '[@slideToLeft]': '' }
    }), __metadata("design:paramtypes", [index_1.ProductService, index_1.NotyService, store_1.Store])], Products);
    exports.Products = Products;

});
$__System.registerDynamic("54", ["55"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("55");
    /**
     * A unit of work to be executed in a {@link Scheduler}. An action is typically
     * created from within a Scheduler and an RxJS user does not need to concern
     * themselves about creating and manipulating an Action.
     *
     * ```ts
     * class Action<T> extends Subscription {
     *   new (scheduler: Scheduler, work: (state?: T) => void);
     *   schedule(state?: T, delay: number = 0): Subscription;
     * }
     * ```
     *
     * @class Action<T>
     */
    var Action = function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            _super.call(this);
        }
        /**
         * Schedules this action on its parent Scheduler for execution. May be passed
         * some context object, `state`. May happen at some point in the future,
         * according to the `delay` parameter, if specified.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler.
         * @return {void}
         */
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return this;
        };
        return Action;
    }(Subscription_1.Subscription);
    exports.Action = Action;

});
$__System.registerDynamic('56', ['18', '54'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('18');
    var Action_1 = $__require('54');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AsyncAction = function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
            this.pending = false;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.closed) {
                return this;
            }
            // Always replace the current state with the new state.
            this.state = state;
            // Set the pending flag indicating that this action has been scheduled, or
            // has recursively rescheduled itself.
            this.pending = true;
            var id = this.id;
            var scheduler = this.scheduler;
            //
            // Important implementation note:
            //
            // Actions only execute once by default, unless rescheduled from within the
            // scheduled callback. This allows us to implement single and repeat
            // actions via the same code path, without adding API surface area, as well
            // as mimic traditional recursion but across asynchronous boundaries.
            //
            // However, JS runtimes and timers distinguish between intervals achieved by
            // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
            // serial `setTimeout` calls can be individually delayed, which delays
            // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
            // guarantee the interval callback will be invoked more precisely to the
            // interval period, regardless of load.
            //
            // Therefore, we use `setInterval` to schedule single and repeat actions.
            // If the action reschedules itself with the same delay, the interval is not
            // canceled. If the action doesn't reschedule, or reschedules with a
            // different delay, the interval will be canceled after scheduled callback
            // execution.
            //
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.delay = delay;
            // If this action has already an async Id, don't request a new one.
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If this action is rescheduled with the same delay time, don't clear the interval id.
            if (delay !== null && this.delay === delay && this.pending === false) {
                return id;
            }
            // Otherwise, if the action's delay time is different from the current delay,
            // or the action has been rescheduled before it's executed, clear the interval id
            return root_1.root.clearInterval(id) && undefined || undefined;
        };
        /**
         * Immediately executes this action and the `work` it contains.
         * @return {any}
         */
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            } else if (this.pending === false && this.id != null) {
                // Dequeue if the action didn't reschedule itself. Don't call
                // unsubscribe(), because the action could reschedule later.
                // For example:
                // ```
                // scheduler.schedule(function doWork(counter) {
                //   /* ... I'm a busy worker bee ... */
                //   var originalAction = this;
                //   /* wait 100ms before rescheduling the action */
                //   setTimeout(function () {
                //     originalAction.schedule(counter + 1);
                //   }, 100);
                // }, 1000);
                // ```
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            } catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.delay = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
        };
        return AsyncAction;
    }(Action_1.Action);
    exports.AsyncAction = AsyncAction;

});
$__System.registerDynamic("57", [], true, function ($__require, exports, module) {
    "use strict";
    /**
     * An execution context and a data structure to order tasks and schedule their
     * execution. Provides a notion of (potentially virtual) time, through the
     * `now()` getter method.
     *
     * Each unit of work in a Scheduler is called an {@link Action}.
     *
     * ```ts
     * class Scheduler {
     *   now(): number;
     *   schedule(work, delay?, state?): Subscription;
     * }
     * ```
     *
     * @class Scheduler
     */

    var global = this || self,
        GLOBAL = global;
    var Scheduler = function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        /**
         * Schedules a function, `work`, for execution. May happen at some point in
         * the future, according to the `delay` parameter, if specified. May be passed
         * some context object, `state`, which will be passed to the `work` function.
         *
         * The given arguments will be processed an stored as an Action object in a
         * queue of actions.
         *
         * @param {function(state: ?T): ?Subscription} work A function representing a
         * task, or some unit of work to be executed by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler itself.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @return {Subscription} A subscription in order to be able to unsubscribe
         * the scheduled work.
         */
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = Date.now ? Date.now : function () {
            return +new Date();
        };
        return Scheduler;
    }();
    exports.Scheduler = Scheduler;

});
$__System.registerDynamic("58", ["57"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Scheduler_1 = $__require("57");
    var AsyncScheduler = function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler() {
            _super.apply(this, arguments);
            this.actions = [];
            /**
             * A flag to indicate whether the Scheduler is currently executing a batch of
             * queued actions.
             * @type {boolean}
             */
            this.active = false;
            /**
             * An internal ID used to track the latest asynchronous task such as those
             * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
             * others.
             * @type {any}
             */
            this.scheduled = undefined;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift()); // exhaust the scheduler queue
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler_1.Scheduler);
    exports.AsyncScheduler = AsyncScheduler;

});
$__System.registerDynamic('45', ['56', '58'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var AsyncAction_1 = $__require('56');
  var AsyncScheduler_1 = $__require('58');
  /**
   *
   * Async Scheduler
   *
   * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
   *
   * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
   * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
   * in intervals.
   *
   * If you just want to "defer" task, that is to perform it right after currently
   * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
   * better choice will be the {@link asap} scheduler.
   *
   * @example <caption>Use async scheduler to delay task</caption>
   * const task = () => console.log('it works!');
   *
   * Rx.Scheduler.async.schedule(task, 2000);
   *
   * // After 2 seconds logs:
   * // "it works!"
   *
   *
   * @example <caption>Use async scheduler to repeat task in intervals</caption>
   * function task(state) {
   *   console.log(state);
   *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
   *                                   // which we reschedule with new state and delay
   * }
   *
   * Rx.Scheduler.async.schedule(task, 3000, 0);
   *
   * // Logs:
   * // 0 after 3s
   * // 1 after 4s
   * // 2 after 5s
   * // 3 after 6s
   *
   * @static true
   * @name async
   * @owner Scheduler
   */
  exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);

});
$__System.registerDynamic('59', ['1f', '45'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('1f');
    var async_1 = $__require('45');
    /**
     * Emits a value from the source Observable only after a particular time span
     * has passed without another source emission.
     *
     * <span class="informal">It's like {@link delay}, but passes only the most
     * recent value from each burst of emissions.</span>
     *
     * <img src="./img/debounceTime.png" width="100%">
     *
     * `debounceTime` delays values emitted by the source Observable, but drops
     * previous pending delayed emissions if a new value arrives on the source
     * Observable. This operator keeps track of the most recent value from the
     * source Observable, and emits that only when `dueTime` enough time has passed
     * without any other value appearing on the source Observable. If a new value
     * appears before `dueTime` silence occurs, the previous value will be dropped
     * and will not be emitted on the output Observable.
     *
     * This is a rate-limiting operator, because it is impossible for more than one
     * value to be emitted in any time window of duration `dueTime`, but it is also
     * a delay-like operator since output emissions do not occur at the same time as
     * they did on the source Observable. Optionally takes a {@link IScheduler} for
     * managing timers.
     *
     * @example <caption>Emit the most recent click after a burst of clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.debounceTime(1000);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link auditTime}
     * @see {@link debounce}
     * @see {@link delay}
     * @see {@link sampleTime}
     * @see {@link throttleTime}
     *
     * @param {number} dueTime The timeout duration in milliseconds (or the time
     * unit determined internally by the optional `scheduler`) for the window of
     * time required to wait for emission silence before emitting the most recent
     * source value.
     * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
     * managing the timers that handle the timeout for each value.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by the specified `dueTime`, and may drop some values if they occur
     * too frequently.
     * @method debounceTime
     * @owner Observable
     */
    function debounceTime(dueTime, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new DebounceTimeOperator(dueTime, scheduler));
    }
    exports.debounceTime = debounceTime;
    var DebounceTimeOperator = function () {
        function DebounceTimeOperator(dueTime, scheduler) {
            this.dueTime = dueTime;
            this.scheduler = scheduler;
        }
        DebounceTimeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
        };
        return DebounceTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DebounceTimeSubscriber = function (_super) {
        __extends(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            _super.call(this, destination);
            this.dueTime = dueTime;
            this.scheduler = scheduler;
            this.debouncedSubscription = null;
            this.lastValue = null;
            this.hasValue = false;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                this.destination.next(this.lastValue);
                this.lastValue = null;
                this.hasValue = false;
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchNext(subscriber) {
        subscriber.debouncedNext();
    }

});
$__System.registerDynamic('4a', ['19', '59'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var debounceTime_1 = $__require('59');
  Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;

});
$__System.registerDynamic('4b', ['19', '5a'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var merge_1 = $__require('5a');
  Observable_1.Observable.prototype.merge = merge_1.merge;

});
$__System.registerDynamic('5b', ['19', '5c', '26', '32'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('19');
    var isScheduler_1 = $__require('5c');
    var ArrayObservable_1 = $__require('26');
    var mergeAll_1 = $__require('32');
    /* tslint:enable:max-line-length */
    /**
     * Creates an output Observable which sequentially emits all values from every
     * given input Observable after the current Observable.
     *
     * <span class="informal">Concatenates multiple Observables together by
     * sequentially emitting their values, one Observable after the other.</span>
     *
     * <img src="./img/concat.png" width="100%">
     *
     * Joins this Observable with multiple other Observables by subscribing to them
     * one at a time, starting with the source, and merging their results into the
     * output Observable. Will wait for each Observable to complete before moving
     * on to the next.
     *
     * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
     * var timer = Rx.Observable.interval(1000).take(4);
     * var sequence = Rx.Observable.range(1, 10);
     * var result = timer.concat(sequence);
     * result.subscribe(x => console.log(x));
     *
     * // results in:
     * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
     *
     * @example <caption>Concatenate 3 Observables</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var result = timer1.concat(timer2, timer3);
     * result.subscribe(x => console.log(x));
     *
     * // results in the following:
     * // (Prints to console sequentially)
     * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
     * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
     * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
     *
     * @see {@link concatAll}
     * @see {@link concatMap}
     * @see {@link concatMapTo}
     *
     * @param {ObservableInput} other An input Observable to concatenate after the source
     * Observable. More than one input Observables may be given as argument.
     * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
     * Observable subscription on.
     * @return {Observable} All values of each passed Observable merged into a
     * single Observable, in order, in serial fashion.
     * @method concat
     * @owner Observable
     */
    function concat() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        return this.lift.call(concatStatic.apply(void 0, [this].concat(observables)));
    }
    exports.concat = concat;
    /* tslint:enable:max-line-length */
    /**
     * Creates an output Observable which sequentially emits all values from given
     * Observable and then moves on to the next.
     *
     * <span class="informal">Concatenates multiple Observables together by
     * sequentially emitting their values, one Observable after the other.</span>
     *
     * <img src="./img/concat.png" width="100%">
     *
     * `concat` joins multiple Observables together, by subscribing to them one at a time and
     * merging their results into the output Observable. You can pass either an array of
     * Observables, or put them directly as arguments. Passing an empty array will result
     * in Observable that completes immediately.
     *
     * `concat` will subscribe to first input Observable and emit all its values, without
     * changing or affecting them in any way. When that Observable completes, it will
     * subscribe to then next Observable passed and, again, emit its values. This will be
     * repeated, until the operator runs out of Observables. When last input Observable completes,
     * `concat` will complete as well. At any given moment only one Observable passed to operator
     * emits values. If you would like to emit values from passed Observables concurrently, check out
     * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
     * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
     *
     * Note that if some input Observable never completes, `concat` will also never complete
     * and Observables following the one that did not complete will never be subscribed. On the other
     * hand, if some Observable simply completes immediately after it is subscribed, it will be
     * invisible for `concat`, which will just move on to the next Observable.
     *
     * If any Observable in chain errors, instead of passing control to the next Observable,
     * `concat` will error immediately as well. Observables that would be subscribed after
     * the one that emitted error, never will.
     *
     * If you pass to `concat` the same Observable many times, its stream of values
     * will be "replayed" on every subscription, which means you can repeat given Observable
     * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
     * you can always use {@link repeat}.
     *
     * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
     * var timer = Rx.Observable.interval(1000).take(4);
     * var sequence = Rx.Observable.range(1, 10);
     * var result = Rx.Observable.concat(timer, sequence);
     * result.subscribe(x => console.log(x));
     *
     * // results in:
     * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
     *
     *
     * @example <caption>Concatenate an array of 3 Observables</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
     * result.subscribe(x => console.log(x));
     *
     * // results in the following:
     * // (Prints to console sequentially)
     * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
     * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
     * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
     *
     *
     * @example <caption>Concatenate the same Observable to repeat it</caption>
     * const timer = Rx.Observable.interval(1000).take(2);
     *
     * Rx.Observable.concat(timer, timer) // concating the same Observable!
     * .subscribe(
     *   value => console.log(value),
     *   err => {},
     *   () => console.log('...and it is done!')
     * );
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // 0 after 3s
     * // 1 after 4s
     * // "...and it is done!" also after 4s
     *
     * @see {@link concatAll}
     * @see {@link concatMap}
     * @see {@link concatMapTo}
     *
     * @param {ObservableInput} input1 An input Observable to concatenate with others.
     * @param {ObservableInput} input2 An input Observable to concatenate with others.
     * More than one input Observables may be given as argument.
     * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
     * Observable subscription on.
     * @return {Observable} All values of each passed Observable merged into a
     * single Observable, in order, in serial fashion.
     * @static true
     * @name concat
     * @owner Observable
     */
    function concatStatic() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var scheduler = null;
        var args = observables;
        if (isScheduler_1.isScheduler(args[observables.length - 1])) {
            scheduler = args.pop();
        }
        if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
            return observables[0];
        }
        return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
    }
    exports.concatStatic = concatStatic;

});
$__System.registerDynamic('5d', ['26', '1c', '1d', '5b', '5c'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var ArrayObservable_1 = $__require('26');
    var ScalarObservable_1 = $__require('1c');
    var EmptyObservable_1 = $__require('1d');
    var concat_1 = $__require('5b');
    var isScheduler_1 = $__require('5c');
    /* tslint:enable:max-line-length */
    /**
     * Returns an Observable that emits the items you specify as arguments before it begins to emit
     * items emitted by the source Observable.
     *
     * <img src="./img/startWith.png" width="100%">
     *
     * @param {...T} values - Items you want the modified Observable to emit first.
     * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
     * emitted by the source Observable.
     * @method startWith
     * @owner Observable
     */
    function startWith() {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        } else {
            scheduler = null;
        }
        var len = array.length;
        if (len === 1) {
            return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
        } else if (len > 1) {
            return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
        } else {
            return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
        }
    }
    exports.startWith = startWith;

});
$__System.registerDynamic('4c', ['19', '5d'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var startWith_1 = $__require('5d');
  Observable_1.Observable.prototype.startWith = startWith_1.startWith;

});
$__System.registerDynamic('5e', ['2f', '2e'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('2f');
    var subscribeToResult_1 = $__require('2e');
    /* tslint:enable:max-line-length */
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable, emitting values only from the most recently projected Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link switch}.</span>
     *
     * <img src="./img/switchMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an (so-called "inner") Observable. Each time it observes one of these
     * inner Observables, the output Observable begins emitting the items emitted by
     * that inner Observable. When a new inner Observable is emitted, `switchMap`
     * stops emitting items from the earlier-emitted inner Observable and begins
     * emitting items from the new one. It continues to behave like this for
     * subsequent inner Observables.
     *
     * @example <caption>Rerun an interval Observable on every click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link mergeMap}
     * @see {@link switch}
     * @see {@link switchMapTo}
     *
     * @param {function(value: T, ?index: number): ObservableInput} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and taking only the values from the most recently
     * projected inner Observable.
     * @method switchMap
     * @owner Observable
     */
    function switchMap(project, resultSelector) {
        return this.lift(new SwitchMapOperator(project, resultSelector));
    }
    exports.switchMap = switchMap;
    var SwitchMapOperator = function () {
        function SwitchMapOperator(project, resultSelector) {
            this.project = project;
            this.resultSelector = resultSelector;
        }
        SwitchMapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
        };
        return SwitchMapOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SwitchMapSubscriber = function (_super) {
        __extends(SwitchMapSubscriber, _super);
        function SwitchMapSubscriber(destination, project, resultSelector) {
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.index = 0;
        }
        SwitchMapSubscriber.prototype._next = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (error) {
                this.destination.error(error);
                return;
            }
            this._innerSub(result, value, index);
        };
        SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
        };
        SwitchMapSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return SwitchMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);

});
$__System.registerDynamic('4d', ['19', '5e'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var switchMap_1 = $__require('5e');
  Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;

});
$__System.registerDynamic('4e', ['19', '5f'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var share_1 = $__require('5f');
  Observable_1.Observable.prototype.share = share_1.share;

});
$__System.registerDynamic('60', ['38'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var map_1 = $__require('38');
    /**
     * Maps each source value (an object) to its specified nested property.
     *
     * <span class="informal">Like {@link map}, but meant only for picking one of
     * the nested properties of every emitted object.</span>
     *
     * <img src="./img/pluck.png" width="100%">
     *
     * Given a list of strings describing a path to an object property, retrieves
     * the value of a specified nested property from all values in the source
     * Observable. If a property can't be resolved, it will return `undefined` for
     * that value.
     *
     * @example <caption>Map every every click to the tagName of the clicked target element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var tagNames = clicks.pluck('target', 'tagName');
     * tagNames.subscribe(x => console.log(x));
     *
     * @see {@link map}
     *
     * @param {...string} properties The nested properties to pluck from each source
     * value (an object).
     * @return {Observable} A new Observable of property values from the source values.
     * @method pluck
     * @owner Observable
     */
    function pluck() {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i - 0] = arguments[_i];
        }
        var length = properties.length;
        if (length === 0) {
            throw new Error('list of properties cannot be empty.');
        }
        return map_1.map.call(this, plucker(properties, length));
    }
    exports.pluck = pluck;
    function plucker(props, length) {
        var mapper = function (x) {
            var currentProp = x;
            for (var i = 0; i < length; i++) {
                var p = currentProp[props[i]];
                if (typeof p !== 'undefined') {
                    currentProp = p;
                } else {
                    return undefined;
                }
            }
            return currentProp;
        };
        return mapper;
    }

});
$__System.registerDynamic('4f', ['19', '60'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var pluck_1 = $__require('60');
  Observable_1.Observable.prototype.pluck = pluck_1.pluck;

});
$__System.registerDynamic("61", ["e", "49", "36", "4a", "4b", "4c", "4d", "4e", "4f", "62", "41", "40", "52"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var forms_1 = $__require("49");
    var Subject_1 = $__require("36");
    $__require("4a");
    $__require("4b");
    $__require("4c");
    $__require("4d");
    $__require("4e");
    $__require("4f");
    $__require("62");
    var store_1 = $__require("41");
    var index_1 = $__require("40");
    var animations_1 = $__require("52");
    var Customers = function () {
        function Customers(customerService, store) {
            this.customerService = customerService;
            this.store = store;
            this.searchStream = new forms_1.FormControl();
            this.searchQuery = '';
            this.pageStream = new Subject_1.Subject();
            this.page = 1;
            this.pageLength = 10;
            this.subs = [];
            this.searchExpanded = 'collapsed';
        }
        Customers.prototype.ngOnInit = function () {
            var _this = this;
            this.subs[this.subs.length] = this.customerService.getAllCustomers().subscribe();
            var storeSource = this.store.changes.map(function (store) {
                return { search: _this.searchQuery, page: _this.page, length: _this.pageLength };
            });
            var searchSource = this.searchStream.valueChanges.debounceTime(100).distinctUntilChanged().map(function (searchQuery) {
                _this.page = 1;
                return { search: searchQuery, page: _this.page, length: _this.pageLength };
            });
            var pageSource = this.pageStream.map(function (params) {
                _this.page = params.page;
                _this.pageLength = params.length;
                return { search: _this.searchQuery, page: params.page, length: params.length };
            });
            var source = storeSource.merge(searchSource, pageSource).startWith({ search: this.searchQuery, page: this.page, length: this.pageLength }).switchMap(function (params) {
                return _this.customerService.list(params.search, params.page, params.length);
            }).share();
            this.customers$ = source.pluck('customers');
            this.filteredCustomers$ = source.pluck('filtered');
        };
        Customers.prototype.ngOnDestroy = function () {
            this.subs.forEach(function (sub) {
                return sub.unsubscribe();
            });
            this.customerService.purgeStore();
        };
        /* Pagination */
        Customers.prototype.paginationChanged = function (_a) {
            var page = _a.page,
                length = _a.length;
            this.pageStream.next({ page: page, length: length });
            this.page = page;
            this.pageLength = length;
        };
        Customers.prototype.toggleAnimState = function () {
            this.searchExpanded = this.searchExpanded === 'collapsed' ? 'expanded' : 'collapsed';
        };
        return Customers;
    }();
    Customers = __decorate([core_1.Component({
        template: "\n\n    <div class=\"wrapper customers-page\">\n    \n      <div class=\"service-block\">\n        <input type=\"text\" name=\"searchStream\" id=\"\"\n          class=\"input customers-search pull-right\"\n          placeholder=\"Search in customers...\"\n          [@changeWidth]=\"searchExpanded\"\n          [formControl]=\"searchStream\"\n          [(ngModel)]=\"searchQuery\"\n          (focusin)=\"toggleAnimState()\"\n          (focusout)=\"toggleAnimState()\"\n        >\n      </div>\n        \n      <div class=\"table-container\">\n        <table class=\"table table-customers\">\n          <thead>\n            <th class=\"headcell headcell--id\">ID</th>\n            <th class=\"headcell headcell--name\">Name</th>\n            <th class=\"headcell headcell--lastName\">Last name</th>\n            <th class=\"headcell headcell--phone\">Phone</th>\n            <th class=\"headcell headcell--city\">City</th>\n            <th class=\"headcell headcell--post\">Post</th>\n            <th class=\"headcell headcell--email\">Email</th>\n            <th class=\"headcell headcell--comment\">Comment</th>\n          </thead>\n          <tbody>\n            <tr\n              *ngFor=\"let customer of customers$ | async\"\n            >\n              <td\n                *ngFor=\"let key of customer | keys\"\n              >\n                {{ customer[key] }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      \n      <pagination\n        [total]=\"filteredCustomers$ | async\"\n        [length]=\"pageLength\"\n        [current]=\"page\"\n        (dataChanged)=\"paginationChanged($event)\"\n      >\n      </pagination>\n    </div>\n  ",
        animations: [animations_1.slideToLeft(), animations_1.changeWidth()],
        host: { '[@slideToLeft]': '' }
    }), __metadata("design:paramtypes", [index_1.CustomerService, store_1.Store])], Customers);
    exports.Customers = Customers;

});
$__System.registerDynamic("3d", ["48", "53", "61"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  Object.defineProperty(exports, "__esModule", { value: true });
  var orders_1 = $__require("48");
  exports.Orders = orders_1.Orders;
  var products_1 = $__require("53");
  exports.Products = products_1.Products;
  var customers_1 = $__require("61");
  exports.Customers = customers_1.Customers;

});
$__System.registerDynamic("63", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var ContenteditableModel = function () {
        function ContenteditableModel(el) {
            this.el = el;
            this.update = new core_1.EventEmitter();
            this.changed = new core_1.EventEmitter();
        }
        ContenteditableModel.prototype.ngOnChanges = function (changes) {
            if (changes['model'] && changes['model'].currentValue !== this.lastViewModel) {
                this.lastViewModel = this.model;
                this.refreshView();
            }
        };
        ContenteditableModel.prototype.onKeydown = function (e) {
            if (e.code === 'Enter' || e.code === 'Escape' || e.code === 'NumpadEnter') {
                this.el.nativeElement.blur();
                return false;
            }
        };
        /** This should probably be debounced. */
        ContenteditableModel.prototype.onBlur = function () {
            var value = this.el.nativeElement.innerText;
            if (this.lastViewModel != value) {
                // debugger
                this.changed.emit({ newValue: value, oldValue: this.lastViewModel });
                this.lastViewModel = value;
            }
            this.update.emit(value);
        };
        ContenteditableModel.prototype.refreshView = function () {
            this.el.nativeElement.innerText = this.model;
        };
        return ContenteditableModel;
    }();
    __decorate([core_1.Input('contenteditableModel'), __metadata("design:type", String)], ContenteditableModel.prototype, "model", void 0);
    __decorate([core_1.Output('contenteditableModelChange'), __metadata("design:type", Object)], ContenteditableModel.prototype, "update", void 0);
    __decorate([core_1.Output('contentChanged'), __metadata("design:type", Object)], ContenteditableModel.prototype, "changed", void 0);
    ContenteditableModel = __decorate([core_1.Directive({
        selector: '[contenteditableModel]',
        host: {
            '(blur)': 'onBlur()',
            '(keypress)': 'onKeydown($event)'
        }
    }), __metadata("design:paramtypes", [core_1.ElementRef])], ContenteditableModel);
    exports.ContenteditableModel = ContenteditableModel;

});
$__System.registerDynamic("64", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var HotkeysDirective = function () {
        function HotkeysDirective(el) {
            this.el = el;
            this.addProduct = new core_1.EventEmitter();
            this.moveFocus = new core_1.EventEmitter();
        }
        HotkeysDirective.prototype.onKey = function (e) {
            // if (e.ctrlKey && e.code === 'Enter') {
            //   this.addProduct.emit();
            //   return false;
            // } else if (e.shiftKey && e.code === 'Enter') {
            //   this.moveFocus.emit();
            //   return false;
            // } else
            if (e.code === 'Enter' || e.code === 'Escape' || e.code === 'NumpadEnter') {
                this.el.nativeElement.blur();
                return false;
            }
        };
        return HotkeysDirective;
    }();
    __decorate([core_1.Output('addProduct'), __metadata("design:type", Object)], HotkeysDirective.prototype, "addProduct", void 0);
    __decorate([core_1.Output('moveFocus'), __metadata("design:type", Object)], HotkeysDirective.prototype, "moveFocus", void 0);
    HotkeysDirective = __decorate([core_1.Directive({
        selector: '[hotkeys]',
        host: {
            '(keypress)': 'onKey($event)'
        }
    }), __metadata("design:paramtypes", [core_1.ElementRef])], HotkeysDirective);
    exports.HotkeysDirective = HotkeysDirective;

});
/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core"), require("rxjs/Observable"), require("@angular/platform-browser")) : "function" == "function" && true ? $__System.registerDynamic("65", ["e", "19", "f"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("e"), $__require("19"), $__require("f"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser);
}(this, function (exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
  "use strict"; /**
                * @license
                * Copyright Google Inc. All Rights Reserved.
                *
                * Use of this source code is governed by an MIT-style license that can be
                * found in the LICENSE file at https://angular.io/license
                */

  function normalizeMethodName(method) {
    if ("string" != typeof method) return method;switch (method.toUpperCase()) {case "GET":
        return RequestMethod.Get;case "POST":
        return RequestMethod.Post;case "PUT":
        return RequestMethod.Put;case "DELETE":
        return RequestMethod.Delete;case "OPTIONS":
        return RequestMethod.Options;case "HEAD":
        return RequestMethod.Head;case "PATCH":
        return RequestMethod.Patch;}throw new Error('Invalid request method. The method "' + method + '" is not supported.');
  }function getResponseURL(xhr) {
    return "responseURL" in xhr ? xhr.responseURL : /^X-Request-URL:/m.test(xhr.getAllResponseHeaders()) ? xhr.getResponseHeader("X-Request-URL") : null;
  }function stringToArrayBuffer(input) {
    for (var view = new Uint16Array(input.length), i = 0, strLen = input.length; i < strLen; i++) view[i] = input.charCodeAt(i);return view.buffer;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    * @param {?=} rawParams
    * @return {?}
    */
  function paramParser(rawParams) {
    void 0 === rawParams && (rawParams = "");var map = new Map();if (rawParams.length > 0) {
      var params = rawParams.split("&");params.forEach(function (param) {
        var eqIdx = param.indexOf("="),
            _a = eqIdx == -1 ? [param, ""] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],
            key = _a[0],
            val = _a[1],
            list = map.get(key) || [];list.push(val), map.set(key, list);
      });
    }return map;
  }function standardEncoding(v) {
    return encodeURIComponent(v).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/gi, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%2B/gi, "+").replace(/%3D/gi, "=").replace(/%3F/gi, "?").replace(/%2F/gi, "/");
  }function _getJsonpConnections() {
    var w = "object" == typeof window ? window : {};return null === _jsonpConnections && (_jsonpConnections = w[JSONP_HOME] = {}), _jsonpConnections;
  }function urlEncodeParams(params) {
    var searchParams = new URLSearchParams();return Object.keys(params).forEach(function (key) {
      var value = params[key];value && Array.isArray(value) ? value.forEach(function (element) {
        return searchParams.append(key, element.toString());
      }) : searchParams.append(key, value.toString());
    }), searchParams;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function httpRequest(backend, request) {
    return backend.createConnection(request).response;
  }function mergeOptions(defaultOpts, providedOpts, method, url) {
    var newOptions = defaultOpts;return providedOpts ? newOptions.merge(new RequestOptions({ method: providedOpts.method || method, url: providedOpts.url || url, search: providedOpts.search, params: providedOpts.params, headers: providedOpts.headers, body: providedOpts.body, withCredentials: providedOpts.withCredentials, responseType: providedOpts.responseType })) : newOptions.merge(new RequestOptions({ method: method, url: url }));
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
  }function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
  }function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
  }var __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      BrowserXhr = function () {
    function BrowserXhr() {}return BrowserXhr.prototype.build = function () {
      return new XMLHttpRequest();
    }, BrowserXhr;
  }();BrowserXhr.decorators = [{ type: _angular_core.Injectable }], BrowserXhr.ctorParameters = function () {
    return [];
  };var RequestMethod = {};RequestMethod.Get = 0, RequestMethod.Post = 1, RequestMethod.Put = 2, RequestMethod.Delete = 3, RequestMethod.Options = 4, RequestMethod.Head = 5, RequestMethod.Patch = 6, RequestMethod[RequestMethod.Get] = "Get", RequestMethod[RequestMethod.Post] = "Post", RequestMethod[RequestMethod.Put] = "Put", RequestMethod[RequestMethod.Delete] = "Delete", RequestMethod[RequestMethod.Options] = "Options", RequestMethod[RequestMethod.Head] = "Head", RequestMethod[RequestMethod.Patch] = "Patch";var ReadyState = {};ReadyState.Unsent = 0, ReadyState.Open = 1, ReadyState.HeadersReceived = 2, ReadyState.Loading = 3, ReadyState.Done = 4, ReadyState.Cancelled = 5, ReadyState[ReadyState.Unsent] = "Unsent", ReadyState[ReadyState.Open] = "Open", ReadyState[ReadyState.HeadersReceived] = "HeadersReceived", ReadyState[ReadyState.Loading] = "Loading", ReadyState[ReadyState.Done] = "Done", ReadyState[ReadyState.Cancelled] = "Cancelled";var ResponseType = {};ResponseType.Basic = 0, ResponseType.Cors = 1, ResponseType.Default = 2, ResponseType.Error = 3, ResponseType.Opaque = 4, ResponseType[ResponseType.Basic] = "Basic", ResponseType[ResponseType.Cors] = "Cors", ResponseType[ResponseType.Default] = "Default", ResponseType[ResponseType.Error] = "Error", ResponseType[ResponseType.Opaque] = "Opaque";var ContentType = {};ContentType.NONE = 0, ContentType.JSON = 1, ContentType.FORM = 2, ContentType.FORM_DATA = 3, ContentType.TEXT = 4, ContentType.BLOB = 5, ContentType.ARRAY_BUFFER = 6, ContentType[ContentType.NONE] = "NONE", ContentType[ContentType.JSON] = "JSON", ContentType[ContentType.FORM] = "FORM", ContentType[ContentType.FORM_DATA] = "FORM_DATA", ContentType[ContentType.TEXT] = "TEXT", ContentType[ContentType.BLOB] = "BLOB", ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";var ResponseContentType = {};ResponseContentType.Text = 0, ResponseContentType.Json = 1, ResponseContentType.ArrayBuffer = 2, ResponseContentType.Blob = 3, ResponseContentType[ResponseContentType.Text] = "Text", ResponseContentType[ResponseContentType.Json] = "Json", ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer", ResponseContentType[ResponseContentType.Blob] = "Blob";var Headers = function () {
    function Headers(headers) {
      var _this = this;if (this._headers = new Map(), this._normalizedNames = new Map(), headers) return headers instanceof Headers ? void headers.forEach(function (values, name) {
        values.forEach(function (value) {
          return _this.append(name, value);
        });
      }) : void Object.keys(headers).forEach(function (name) {
        var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];_this.delete(name), values.forEach(function (value) {
          return _this.append(name, value);
        });
      });
    }return Headers.fromResponseHeaderString = function (headersString) {
      var headers = new Headers();return headersString.split("\n").forEach(function (line) {
        var index = line.indexOf(":");if (index > 0) {
          var name = line.slice(0, index),
              value = line.slice(index + 1).trim();headers.set(name, value);
        }
      }), headers;
    }, Headers.prototype.append = function (name, value) {
      var values = this.getAll(name);null === values ? this.set(name, value) : values.push(value);
    }, Headers.prototype.delete = function (name) {
      var lcName = name.toLowerCase();this._normalizedNames.delete(lcName), this._headers.delete(lcName);
    }, Headers.prototype.forEach = function (fn) {
      var _this = this;this._headers.forEach(function (values, lcName) {
        return fn(values, _this._normalizedNames.get(lcName), _this._headers);
      });
    }, Headers.prototype.get = function (name) {
      var values = this.getAll(name);return null === values ? null : values.length > 0 ? values[0] : null;
    }, Headers.prototype.has = function (name) {
      return this._headers.has(name.toLowerCase());
    }, Headers.prototype.keys = function () {
      return Array.from(this._normalizedNames.values());
    }, Headers.prototype.set = function (name, value) {
      Array.isArray(value) ? value.length && this._headers.set(name.toLowerCase(), [value.join(",")]) : this._headers.set(name.toLowerCase(), [value]), this.mayBeSetNormalizedName(name);
    }, Headers.prototype.values = function () {
      return Array.from(this._headers.values());
    }, Headers.prototype.toJSON = function () {
      var _this = this,
          serialized = {};return this._headers.forEach(function (values, name) {
        var split = [];values.forEach(function (v) {
          return split.push.apply(split, v.split(","));
        }), serialized[_this._normalizedNames.get(name)] = split;
      }), serialized;
    }, Headers.prototype.getAll = function (name) {
      return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;
    }, Headers.prototype.entries = function () {
      throw new Error('"entries" method is not implemented on Headers class');
    }, Headers.prototype.mayBeSetNormalizedName = function (name) {
      var lcName = name.toLowerCase();this._normalizedNames.has(lcName) || this._normalizedNames.set(lcName, name);
    }, Headers;
  }(),
      ResponseOptions = function () {
    function ResponseOptions(_a) {
      var _b = void 0 === _a ? {} : _a,
          body = _b.body,
          status = _b.status,
          headers = _b.headers,
          statusText = _b.statusText,
          type = _b.type,
          url = _b.url;this.body = null != body ? body : null, this.status = null != status ? status : null, this.headers = null != headers ? headers : null, this.statusText = null != statusText ? statusText : null, this.type = null != type ? type : null, this.url = null != url ? url : null;
    }return ResponseOptions.prototype.merge = function (options) {
      return new ResponseOptions({ body: options && null != options.body ? options.body : this.body, status: options && null != options.status ? options.status : this.status, headers: options && null != options.headers ? options.headers : this.headers, statusText: options && null != options.statusText ? options.statusText : this.statusText, type: options && null != options.type ? options.type : this.type, url: options && null != options.url ? options.url : this.url });
    }, ResponseOptions;
  }(),
      BaseResponseOptions = function (_super) {
    function BaseResponseOptions() {
      return _super.call(this, { status: 200, statusText: "Ok", type: ResponseType.Default, headers: new Headers() }) || this;
    }return __extends(BaseResponseOptions, _super), BaseResponseOptions;
  }(ResponseOptions);BaseResponseOptions.decorators = [{ type: _angular_core.Injectable }], BaseResponseOptions.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var ConnectionBackend = function () {
    function ConnectionBackend() {}return ConnectionBackend.prototype.createConnection = function (request) {}, ConnectionBackend;
  }(),
      Connection = function () {
    function Connection() {}return Connection;
  }(),
      XSRFStrategy = function () {
    function XSRFStrategy() {}return XSRFStrategy.prototype.configureRequest = function (req) {}, XSRFStrategy;
  }(),
      isSuccess = function (status) {
    return status >= 200 && status < 300;
  },
      QueryEncoder = function () {
    function QueryEncoder() {}return QueryEncoder.prototype.encodeKey = function (k) {
      return standardEncoding(k);
    }, QueryEncoder.prototype.encodeValue = function (v) {
      return standardEncoding(v);
    }, QueryEncoder;
  }(),
      URLSearchParams = function () {
    function URLSearchParams(rawParams, queryEncoder) {
      void 0 === rawParams && (rawParams = ""), void 0 === queryEncoder && (queryEncoder = new QueryEncoder()), this.rawParams = rawParams, this.queryEncoder = queryEncoder, this.paramsMap = paramParser(rawParams);
    }return URLSearchParams.prototype.clone = function () {
      var clone = new URLSearchParams("", this.queryEncoder);return clone.appendAll(this), clone;
    }, URLSearchParams.prototype.has = function (param) {
      return this.paramsMap.has(param);
    }, URLSearchParams.prototype.get = function (param) {
      var storedParam = this.paramsMap.get(param);return Array.isArray(storedParam) ? storedParam[0] : null;
    }, URLSearchParams.prototype.getAll = function (param) {
      return this.paramsMap.get(param) || [];
    }, URLSearchParams.prototype.set = function (param, val) {
      if (void 0 === val || null === val) return void this.delete(param);var list = this.paramsMap.get(param) || [];list.length = 0, list.push(val), this.paramsMap.set(param, list);
    }, URLSearchParams.prototype.setAll = function (searchParams) {
      var _this = this;searchParams.paramsMap.forEach(function (value, param) {
        var list = _this.paramsMap.get(param) || [];list.length = 0, list.push(value[0]), _this.paramsMap.set(param, list);
      });
    }, URLSearchParams.prototype.append = function (param, val) {
      if (void 0 !== val && null !== val) {
        var list = this.paramsMap.get(param) || [];list.push(val), this.paramsMap.set(param, list);
      }
    }, URLSearchParams.prototype.appendAll = function (searchParams) {
      var _this = this;searchParams.paramsMap.forEach(function (value, param) {
        for (var list = _this.paramsMap.get(param) || [], i = 0; i < value.length; ++i) list.push(value[i]);_this.paramsMap.set(param, list);
      });
    }, URLSearchParams.prototype.replaceAll = function (searchParams) {
      var _this = this;searchParams.paramsMap.forEach(function (value, param) {
        var list = _this.paramsMap.get(param) || [];list.length = 0;for (var i = 0; i < value.length; ++i) list.push(value[i]);_this.paramsMap.set(param, list);
      });
    }, URLSearchParams.prototype.toString = function () {
      var _this = this,
          paramsList = [];return this.paramsMap.forEach(function (values, k) {
        values.forEach(function (v) {
          return paramsList.push(_this.queryEncoder.encodeKey(k) + "=" + _this.queryEncoder.encodeValue(v));
        });
      }), paramsList.join("&");
    }, URLSearchParams.prototype.delete = function (param) {
      this.paramsMap.delete(param);
    }, URLSearchParams;
  }(),
      Body = function () {
    function Body() {}return Body.prototype.json = function () {
      return "string" == typeof this._body ? JSON.parse(this._body) : this._body instanceof ArrayBuffer ? JSON.parse(this.text()) : this._body;
    }, Body.prototype.text = function (encodingHint) {
      if (void 0 === encodingHint && (encodingHint = "legacy"), this._body instanceof URLSearchParams) return this._body.toString();if (this._body instanceof ArrayBuffer) switch (encodingHint) {case "legacy":
          return String.fromCharCode.apply(null, new Uint16Array(this._body));case "iso-8859":
          return String.fromCharCode.apply(null, new Uint8Array(this._body));default:
          throw new Error("Invalid value for encodingHint: " + encodingHint);}return null == this._body ? "" : "object" == typeof this._body ? JSON.stringify(this._body, null, 2) : this._body.toString();
    }, Body.prototype.arrayBuffer = function () {
      return this._body instanceof ArrayBuffer ? this._body : stringToArrayBuffer(this.text());
    }, Body.prototype.blob = function () {
      if (this._body instanceof Blob) return this._body;if (this._body instanceof ArrayBuffer) return new Blob([this._body]);throw new Error("The request body isn't either a blob or an array buffer");
    }, Body;
  }(),
      Response = function (_super) {
    function Response(responseOptions) {
      var _this = _super.call(this) || this;return _this._body = responseOptions.body, _this.status = responseOptions.status, _this.ok = _this.status >= 200 && _this.status <= 299, _this.statusText = responseOptions.statusText, _this.headers = responseOptions.headers, _this.type = responseOptions.type, _this.url = responseOptions.url, _this;
    }return __extends(Response, _super), Response.prototype.toString = function () {
      return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
    }, Response;
  }(Body),
      _nextRequestId = 0,
      JSONP_HOME = "__ng_jsonp__",
      _jsonpConnections = null,
      BrowserJsonp = function () {
    function BrowserJsonp() {}return BrowserJsonp.prototype.build = function (url) {
      var node = document.createElement("script");return node.src = url, node;
    }, BrowserJsonp.prototype.nextRequestID = function () {
      return "__req" + _nextRequestId++;
    }, BrowserJsonp.prototype.requestCallback = function (id) {
      return JSONP_HOME + "." + id + ".finished";
    }, BrowserJsonp.prototype.exposeConnection = function (id, connection) {
      var connections = _getJsonpConnections();connections[id] = connection;
    }, BrowserJsonp.prototype.removeConnection = function (id) {
      var connections = _getJsonpConnections();connections[id] = null;
    }, BrowserJsonp.prototype.send = function (node) {
      document.body.appendChild(node);
    }, BrowserJsonp.prototype.cleanup = function (node) {
      node.parentNode && node.parentNode.removeChild(node);
    }, BrowserJsonp;
  }();BrowserJsonp.decorators = [{ type: _angular_core.Injectable }], BrowserJsonp.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var JSONP_ERR_NO_CALLBACK = "JSONP injected script did not invoke callback.",
      JSONP_ERR_WRONG_METHOD = "JSONP requests must use GET request method.",
      JSONPConnection = function () {
    function JSONPConnection() {}return JSONPConnection.prototype.finished = function (data) {}, JSONPConnection;
  }(),
      JSONPConnection_ = function (_super) {
    function JSONPConnection_(req, _dom, baseResponseOptions) {
      var _this = _super.call(this) || this;if (_this._dom = _dom, _this.baseResponseOptions = baseResponseOptions, _this._finished = !1, req.method !== RequestMethod.Get) throw new TypeError(JSONP_ERR_WRONG_METHOD);return _this.request = req, _this.response = new rxjs_Observable.Observable(function (responseObserver) {
        _this.readyState = ReadyState.Loading;var id = _this._id = _dom.nextRequestID();_dom.exposeConnection(id, _this);var callback = _dom.requestCallback(_this._id),
            url = req.url;url.indexOf("=JSONP_CALLBACK&") > -1 ? url = url.replace("=JSONP_CALLBACK&", "=" + callback + "&") : url.lastIndexOf("=JSONP_CALLBACK") === url.length - "=JSONP_CALLBACK".length && (url = url.substring(0, url.length - "=JSONP_CALLBACK".length) + ("=" + callback));var script = _this._script = _dom.build(url),
            onLoad = function (event) {
          if (_this.readyState !== ReadyState.Cancelled) {
            if (_this.readyState = ReadyState.Done, _dom.cleanup(script), !_this._finished) {
              var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });return baseResponseOptions && (responseOptions_1 = baseResponseOptions.merge(responseOptions_1)), void responseObserver.error(new Response(responseOptions_1));
            }var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });_this.baseResponseOptions && (responseOptions = _this.baseResponseOptions.merge(responseOptions)), responseObserver.next(new Response(responseOptions)), responseObserver.complete();
          }
        },
            onError = function (error) {
          if (_this.readyState !== ReadyState.Cancelled) {
            _this.readyState = ReadyState.Done, _dom.cleanup(script);var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });baseResponseOptions && (responseOptions = baseResponseOptions.merge(responseOptions)), responseObserver.error(new Response(responseOptions));
          }
        };return script.addEventListener("load", onLoad), script.addEventListener("error", onError), _dom.send(script), function () {
          _this.readyState = ReadyState.Cancelled, script.removeEventListener("load", onLoad), script.removeEventListener("error", onError), _this._dom.cleanup(script);
        };
      }), _this;
    }return __extends(JSONPConnection_, _super), JSONPConnection_.prototype.finished = function (data) {
      this._finished = !0, this._dom.removeConnection(this._id), this.readyState !== ReadyState.Cancelled && (this._responseData = data);
    }, JSONPConnection_;
  }(JSONPConnection),
      JSONPBackend = function (_super) {
    function JSONPBackend() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(JSONPBackend, _super), JSONPBackend;
  }(ConnectionBackend),
      JSONPBackend_ = function (_super) {
    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
      var _this = _super.call(this) || this;return _this._browserJSONP = _browserJSONP, _this._baseResponseOptions = _baseResponseOptions, _this;
    }return __extends(JSONPBackend_, _super), JSONPBackend_.prototype.createConnection = function (request) {
      return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
    }, JSONPBackend_;
  }(JSONPBackend);JSONPBackend_.decorators = [{ type: _angular_core.Injectable }], JSONPBackend_.ctorParameters = function () {
    return [{ type: BrowserJsonp }, { type: ResponseOptions }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var XSSI_PREFIX = /^\)\]\}',?\n/,
      XHRConnection = function () {
    function XHRConnection(req, browserXHR, baseResponseOptions) {
      var _this = this;this.request = req, this.response = new rxjs_Observable.Observable(function (responseObserver) {
        var _xhr = browserXHR.build();_xhr.open(RequestMethod[req.method].toUpperCase(), req.url), null != req.withCredentials && (_xhr.withCredentials = req.withCredentials);var onLoad = function () {
          var status = 1223 === _xhr.status ? 204 : _xhr.status,
              body = null;204 !== status && (body = "undefined" == typeof _xhr.response ? _xhr.responseText : _xhr.response, "string" == typeof body && (body = body.replace(XSSI_PREFIX, ""))), 0 === status && (status = body ? 200 : 0);var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders()),
              url = getResponseURL(_xhr) || req.url,
              statusText = _xhr.statusText || "OK",
              responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });null != baseResponseOptions && (responseOptions = baseResponseOptions.merge(responseOptions));var response = new Response(responseOptions);return response.ok = isSuccess(status), response.ok ? (responseObserver.next(response), void responseObserver.complete()) : void responseObserver.error(response);
        },
            onError = function (err) {
          var responseOptions = new ResponseOptions({ body: err, type: ResponseType.Error, status: _xhr.status, statusText: _xhr.statusText });null != baseResponseOptions && (responseOptions = baseResponseOptions.merge(responseOptions)), responseObserver.error(new Response(responseOptions));
        };if (_this.setDetectedContentType(req, _xhr), null == req.headers && (req.headers = new Headers()), req.headers.has("Accept") || req.headers.append("Accept", "application/json, text/plain, */*"), req.headers.forEach(function (values, name) {
          return _xhr.setRequestHeader(name, values.join(","));
        }), null != req.responseType && null != _xhr.responseType) switch (req.responseType) {case ResponseContentType.ArrayBuffer:
            _xhr.responseType = "arraybuffer";break;case ResponseContentType.Json:
            _xhr.responseType = "json";break;case ResponseContentType.Text:
            _xhr.responseType = "text";break;case ResponseContentType.Blob:
            _xhr.responseType = "blob";break;default:
            throw new Error("The selected responseType is not supported");}return _xhr.addEventListener("load", onLoad), _xhr.addEventListener("error", onError), _xhr.send(_this.request.getBody()), function () {
          _xhr.removeEventListener("load", onLoad), _xhr.removeEventListener("error", onError), _xhr.abort();
        };
      });
    }return XHRConnection.prototype.setDetectedContentType = function (req, _xhr) {
      if (null == req.headers || null == req.headers.get("Content-Type")) switch (req.contentType) {case ContentType.NONE:
          break;case ContentType.JSON:
          _xhr.setRequestHeader("content-type", "application/json");break;case ContentType.FORM:
          _xhr.setRequestHeader("content-type", "application/x-www-form-urlencoded;charset=UTF-8");break;case ContentType.TEXT:
          _xhr.setRequestHeader("content-type", "text/plain");break;case ContentType.BLOB:
          var blob = req.blob();blob.type && _xhr.setRequestHeader("content-type", blob.type);}
    }, XHRConnection;
  }(),
      CookieXSRFStrategy = function () {
    function CookieXSRFStrategy(_cookieName, _headerName) {
      void 0 === _cookieName && (_cookieName = "XSRF-TOKEN"), void 0 === _headerName && (_headerName = "X-XSRF-TOKEN"), this._cookieName = _cookieName, this._headerName = _headerName;
    }return CookieXSRFStrategy.prototype.configureRequest = function (req) {
      var xsrfToken = _angular_platformBrowser.ɵgetDOM().getCookie(this._cookieName);xsrfToken && req.headers.set(this._headerName, xsrfToken);
    }, CookieXSRFStrategy;
  }(),
      XHRBackend = function () {
    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
      this._browserXHR = _browserXHR, this._baseResponseOptions = _baseResponseOptions, this._xsrfStrategy = _xsrfStrategy;
    }return XHRBackend.prototype.createConnection = function (request) {
      return this._xsrfStrategy.configureRequest(request), new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
    }, XHRBackend;
  }();XHRBackend.decorators = [{ type: _angular_core.Injectable }], XHRBackend.ctorParameters = function () {
    return [{ type: BrowserXhr }, { type: ResponseOptions }, { type: XSRFStrategy }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var RequestOptions = function () {
    function RequestOptions(_a) {
      var _b = void 0 === _a ? {} : _a,
          method = _b.method,
          headers = _b.headers,
          body = _b.body,
          url = _b.url,
          search = _b.search,
          params = _b.params,
          withCredentials = _b.withCredentials,
          responseType = _b.responseType;this.method = null != method ? normalizeMethodName(method) : null, this.headers = null != headers ? headers : null, this.body = null != body ? body : null, this.url = null != url ? url : null, this.params = this._mergeSearchParams(params || search), this.withCredentials = null != withCredentials ? withCredentials : null, this.responseType = null != responseType ? responseType : null;
    }return Object.defineProperty(RequestOptions.prototype, "search", { get: function () {
        return this.params;
      }, set: function (params) {
        this.params = params;
      }, enumerable: !0, configurable: !0 }), RequestOptions.prototype.merge = function (options) {
      return new RequestOptions({ method: options && null != options.method ? options.method : this.method, headers: options && null != options.headers ? options.headers : new Headers(this.headers), body: options && null != options.body ? options.body : this.body, url: options && null != options.url ? options.url : this.url, params: options && this._mergeSearchParams(options.params || options.search), withCredentials: options && null != options.withCredentials ? options.withCredentials : this.withCredentials, responseType: options && null != options.responseType ? options.responseType : this.responseType });
    }, RequestOptions.prototype._mergeSearchParams = function (params) {
      return params ? params instanceof URLSearchParams ? params.clone() : "string" == typeof params ? new URLSearchParams(params) : this._parseParams(params) : this.params;
    }, RequestOptions.prototype._parseParams = function (objParams) {
      var _this = this;void 0 === objParams && (objParams = {});var params = new URLSearchParams();return Object.keys(objParams).forEach(function (key) {
        var value = objParams[key];Array.isArray(value) ? value.forEach(function (item) {
          return _this._appendParam(key, item, params);
        }) : _this._appendParam(key, value, params);
      }), params;
    }, RequestOptions.prototype._appendParam = function (key, value, params) {
      "string" != typeof value && (value = JSON.stringify(value)), params.append(key, value);
    }, RequestOptions;
  }(),
      BaseRequestOptions = function (_super) {
    function BaseRequestOptions() {
      return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;
    }return __extends(BaseRequestOptions, _super), BaseRequestOptions;
  }(RequestOptions);BaseRequestOptions.decorators = [{ type: _angular_core.Injectable }], BaseRequestOptions.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var Request = function (_super) {
    function Request(requestOptions) {
      var _this = _super.call(this) || this,
          url = requestOptions.url;_this.url = requestOptions.url;var paramsArg = requestOptions.params || requestOptions.search;if (paramsArg) {
        var params = void 0;if (params = "object" != typeof paramsArg || paramsArg instanceof URLSearchParams ? paramsArg.toString() : urlEncodeParams(paramsArg).toString(), params.length > 0) {
          var prefix = "?";_this.url.indexOf("?") != -1 && (prefix = "&" == _this.url[_this.url.length - 1] ? "" : "&"), _this.url = url + prefix + params;
        }
      }return _this._body = requestOptions.body, _this.method = normalizeMethodName(requestOptions.method), _this.headers = new Headers(requestOptions.headers), _this.contentType = _this.detectContentType(), _this.withCredentials = requestOptions.withCredentials, _this.responseType = requestOptions.responseType, _this;
    }return __extends(Request, _super), Request.prototype.detectContentType = function () {
      switch (this.headers.get("content-type")) {case "application/json":
          return ContentType.JSON;case "application/x-www-form-urlencoded":
          return ContentType.FORM;case "multipart/form-data":
          return ContentType.FORM_DATA;case "text/plain":case "text/html":
          return ContentType.TEXT;case "application/octet-stream":
          return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;default:
          return this.detectContentTypeFromBody();}
    }, Request.prototype.detectContentTypeFromBody = function () {
      return null == this._body ? ContentType.NONE : this._body instanceof URLSearchParams ? ContentType.FORM : this._body instanceof FormData ? ContentType.FORM_DATA : this._body instanceof Blob$1 ? ContentType.BLOB : this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : this._body && "object" == typeof this._body ? ContentType.JSON : ContentType.TEXT;
    }, Request.prototype.getBody = function () {
      switch (this.contentType) {case ContentType.JSON:
          return this.text();case ContentType.FORM:
          return this.text();case ContentType.FORM_DATA:
          return this._body;case ContentType.TEXT:
          return this.text();case ContentType.BLOB:
          return this.blob();case ContentType.ARRAY_BUFFER:
          return this.arrayBuffer();default:
          return null;}
    }, Request;
  }(Body),
      noop = function () {},
      w = "object" == typeof window ? window : noop,
      FormData = w.FormData || noop,
      Blob$1 = w.Blob || noop,
      ArrayBuffer$1 = w.ArrayBuffer || noop,
      Http = function () {
    function Http(_backend, _defaultOptions) {
      this._backend = _backend, this._defaultOptions = _defaultOptions;
    }return Http.prototype.request = function (url, options) {
      var responseObservable;if ("string" == typeof url) responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));else {
        if (!(url instanceof Request)) throw new Error("First argument must be a url string or Request instance.");responseObservable = httpRequest(this._backend, url);
      }return responseObservable;
    }, Http.prototype.get = function (url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
    }, Http.prototype.post = function (url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));
    }, Http.prototype.put = function (url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));
    }, Http.prototype.delete = function (url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
    }, Http.prototype.patch = function (url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));
    }, Http.prototype.head = function (url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
    }, Http.prototype.options = function (url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
    }, Http;
  }();Http.decorators = [{ type: _angular_core.Injectable }], Http.ctorParameters = function () {
    return [{ type: ConnectionBackend }, { type: RequestOptions }];
  };var Jsonp = function (_super) {
    function Jsonp(backend, defaultOptions) {
      return _super.call(this, backend, defaultOptions) || this;
    }return __extends(Jsonp, _super), Jsonp.prototype.request = function (url, options) {
      var responseObservable;if ("string" == typeof url && (url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url))), !(url instanceof Request)) throw new Error("First argument must be a url string or Request instance.");if (url.method !== RequestMethod.Get) throw new Error("JSONP requests must use GET request method.");return responseObservable = httpRequest(this._backend, url);
    }, Jsonp;
  }(Http);Jsonp.decorators = [{ type: _angular_core.Injectable }], Jsonp.ctorParameters = function () {
    return [{ type: ConnectionBackend }, { type: RequestOptions }];
  };var HttpModule = function () {
    function HttpModule() {}return HttpModule;
  }();HttpModule.decorators = [{ type: _angular_core.NgModule, args: [{ providers: [{ provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] }, BrowserXhr, { provide: RequestOptions, useClass: BaseRequestOptions }, { provide: ResponseOptions, useClass: BaseResponseOptions }, XHRBackend, { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy }] }] }], HttpModule.ctorParameters = function () {
    return [];
  };var JsonpModule = function () {
    function JsonpModule() {}return JsonpModule;
  }();JsonpModule.decorators = [{ type: _angular_core.NgModule, args: [{ providers: [{ provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] }, BrowserJsonp, { provide: RequestOptions, useClass: BaseRequestOptions }, { provide: ResponseOptions, useClass: BaseResponseOptions }, { provide: JSONPBackend, useClass: JSONPBackend_ }] }] }], JsonpModule.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var VERSION = new _angular_core.Version("4.1.3");exports.BrowserXhr = BrowserXhr, exports.JSONPBackend = JSONPBackend, exports.JSONPConnection = JSONPConnection, exports.CookieXSRFStrategy = CookieXSRFStrategy, exports.XHRBackend = XHRBackend, exports.XHRConnection = XHRConnection, exports.BaseRequestOptions = BaseRequestOptions, exports.RequestOptions = RequestOptions, exports.BaseResponseOptions = BaseResponseOptions, exports.ResponseOptions = ResponseOptions, exports.ReadyState = ReadyState, exports.RequestMethod = RequestMethod, exports.ResponseContentType = ResponseContentType, exports.ResponseType = ResponseType, exports.Headers = Headers, exports.Http = Http, exports.Jsonp = Jsonp, exports.HttpModule = HttpModule, exports.JsonpModule = JsonpModule, exports.Connection = Connection, exports.ConnectionBackend = ConnectionBackend, exports.XSRFStrategy = XSRFStrategy, exports.Request = Request, exports.Response = Response, exports.QueryEncoder = QueryEncoder, exports.URLSearchParams = URLSearchParams, exports.VERSION = VERSION, exports.ɵg = BrowserJsonp, exports.ɵa = JSONPBackend_, exports.ɵf = Body, exports.ɵb = _createDefaultCookieXSRFStrategy, exports.ɵc = httpFactory, exports.ɵd = jsonpFactory, Object.defineProperty(exports, "__esModule", { value: !0 });
});

$__System.registerDynamic('39', ['2f', '2e'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('2f');
    var subscribeToResult_1 = $__require('2e');
    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     *
     * <img src="./img/catch.png" width="100%">
     *
     * @example <caption>Continues with a different Observable when there's an error</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     * 	   if (n == 4) {
     * 	     throw 'four!';
     *     }
     *	   return n;
     *   })
     *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
     *   .subscribe(x => console.log(x));
     *   // 1, 2, 3, I, II, III, IV, V
     *
     * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     * 	   if (n === 4) {
     * 	     throw 'four!';
     *     }
     * 	   return n;
     *   })
     *   .catch((err, caught) => caught)
     *   .take(30)
     *   .subscribe(x => console.log(x));
     *   // 1, 2, 3, 1, 2, 3, ...
     *
     * @example <caption>Throws a new error when the source Observable throws an error</caption>
     *
     * Observable.of(1, 2, 3, 4, 5)
     *   .map(n => {
     *     if (n == 4) {
     *       throw 'four!';
     *     }
     *     return n;
     *   })
     *   .catch(err => {
     *     throw 'error in source. Details: ' + err;
     *   })
     *   .subscribe(
     *     x => console.log(x),
     *     err => console.log(err)
     *   );
     *   // 1, 2, 3, error in source. Details: four!
     *
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} An observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @method catch
     * @name catch
     * @owner Observable
     */
    function _catch(selector) {
        var operator = new CatchOperator(selector);
        var caught = this.lift(operator);
        return operator.caught = caught;
    }
    exports._catch = _catch;
    var CatchOperator = function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CatchSubscriber = function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        // NOTE: overriding `error` instead of `_error` because we don't want
        // to have this flag this subscriber as `isStopped`. We can mimic the
        // behavior of the RetrySubscriber (from the `retry` operator), where
        // we unsubscribe from our source chain, reset our Subscriber flags,
        // then subscribe to the selector result.
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                } catch (err2) {
                    _super.prototype.error.call(this, err2);
                    return;
                }
                this._unsubscribeAndRecycle();
                this.add(subscribeToResult_1.subscribeToResult(this, result));
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);

});
$__System.registerDynamic('66', ['19', '39'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var catch_1 = $__require('39');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  Observable_1.Observable.prototype._catch = catch_1._catch;

});
$__System.registerDynamic("67", ["1f"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("1f");
    /* tslint:enable:max-line-length */
    /**
     * Perform a side effect for every emission on the source Observable, but return
     * an Observable that is identical to the source.
     *
     * <span class="informal">Intercepts each emission on the source and runs a
     * function, but returns an output which is identical to the source as long as errors don't occur.</span>
     *
     * <img src="./img/do.png" width="100%">
     *
     * Returns a mirrored Observable of the source Observable, but modified so that
     * the provided Observer is called to perform a side effect for every value,
     * error, and completion emitted by the source. Any errors that are thrown in
     * the aforementioned Observer or handlers are safely sent down the error path
     * of the output Observable.
     *
     * This operator is useful for debugging your Observables for the correct values
     * or performing other side effects.
     *
     * Note: this is different to a `subscribe` on the Observable. If the Observable
     * returned by `do` is not subscribed, the side effects specified by the
     * Observer will never happen. `do` therefore simply spies on existing
     * execution, it does not trigger an execution to happen like `subscribe` does.
     *
     * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks
     *   .do(ev => console.log(ev))
     *   .map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link map}
     * @see {@link subscribe}
     *
     * @param {Observer|function} [nextOrObserver] A normal Observer object or a
     * callback for `next`.
     * @param {function} [error] Callback for errors in the source.
     * @param {function} [complete] Callback for the completion of the source.
     * @return {Observable} An Observable identical to the source, but runs the
     * specified Observer or callback(s) for each item.
     * @method do
     * @name do
     * @owner Observable
     */
    function _do(nextOrObserver, error, complete) {
        return this.lift(new DoOperator(nextOrObserver, error, complete));
    }
    exports._do = _do;
    var DoOperator = function () {
        function DoOperator(nextOrObserver, error, complete) {
            this.nextOrObserver = nextOrObserver;
            this.error = error;
            this.complete = complete;
        }
        DoOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
        };
        return DoOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DoSubscriber = function (_super) {
        __extends(DoSubscriber, _super);
        function DoSubscriber(destination, nextOrObserver, error, complete) {
            _super.call(this, destination);
            var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
            safeSubscriber.syncErrorThrowable = true;
            this.add(safeSubscriber);
            this.safeSubscriber = safeSubscriber;
        }
        DoSubscriber.prototype._next = function (value) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.next(value);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.next(value);
            }
        };
        DoSubscriber.prototype._error = function (err) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.error(err);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.error(err);
            }
        };
        DoSubscriber.prototype._complete = function () {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.complete();
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            } else {
                this.destination.complete();
            }
        };
        return DoSubscriber;
    }(Subscriber_1.Subscriber);

});
$__System.registerDynamic('68', ['19', '67'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var do_1 = $__require('67');
  Observable_1.Observable.prototype.do = do_1._do;
  Observable_1.Observable.prototype._do = do_1._do;

});
$__System.registerDynamic("69", ["19"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("19");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ErrorObservable = function (_super) {
        __extends(ErrorObservable, _super);
        function ErrorObservable(error, scheduler) {
            _super.call(this);
            this.error = error;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits an error notification.
         *
         * <span class="informal">Just emits 'error', and nothing else.
         * </span>
         *
         * <img src="./img/throw.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the error notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then emit an error.</caption>
         * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x === 13 ?
         *     Rx.Observable.throw('Thirteens are bad') :
         *     Rx.Observable.of('a', 'b', 'c')
         * );
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link of}
         *
         * @param {any} error The particular Error to pass to the error notification.
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emission of the error notification.
         * @return {Observable} An error Observable: emits only the error notification
         * using the given error argument.
         * @static true
         * @name throw
         * @owner Observable
         */
        ErrorObservable.create = function (error, scheduler) {
            return new ErrorObservable(error, scheduler);
        };
        ErrorObservable.dispatch = function (arg) {
            var error = arg.error,
                subscriber = arg.subscriber;
            subscriber.error(error);
        };
        ErrorObservable.prototype._subscribe = function (subscriber) {
            var error = this.error;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ErrorObservable.dispatch, 0, {
                    error: error, subscriber: subscriber
                });
            } else {
                subscriber.error(error);
            }
        };
        return ErrorObservable;
    }(Observable_1.Observable);
    exports.ErrorObservable = ErrorObservable;

});
$__System.registerDynamic("6a", ["69"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var ErrorObservable_1 = $__require("69");
  exports._throw = ErrorObservable_1.ErrorObservable.create;

});
$__System.registerDynamic('6b', ['19', '6a'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var throw_1 = $__require('6a');
  Observable_1.Observable.throw = throw_1._throw;

});
$__System.registerDynamic("14", ["e", "65", "19", "36", "62", "66", "68", "6b", "51"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var http_1 = $__require("65");
    var Observable_1 = $__require("19");
    var Subject_1 = $__require("36");
    $__require("62");
    $__require("66");
    $__require("68");
    $__require("6b");
    var models_1 = $__require("51");
    var sessionTimeout;
    exports.sessionTimeoutStream = new Subject_1.Subject();
    var ApiService = function () {
        function ApiService(http) {
            this.http = http;
            this.headersForm = new http_1.Headers({
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json'
            });
            this.headersJson = new http_1.Headers({
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            });
        }
        ApiService.prototype.get = function (path) {
            return this.http.get(path, { headers: this.headersForm }).map(this.checkForError).catch(function (err) {
                return Observable_1.Observable.throw(err);
            }).map(this.getJson).do(this.updateSession);
        };
        ApiService.prototype.post = function (path) {
            return this.http.post(path, { headers: this.headersForm }).map(this.checkForError).catch(function (err) {
                return Observable_1.Observable.throw(err);
            }).map(this.getJson).do(this.updateSession);
        };
        ApiService.prototype.put = function (path, body, json) {
            if (json === void 0) {
                json = false;
            }
            var headers = json ? this.headersJson : this.headersForm;
            return this.http.put(path, body, { headers: headers }).map(this.checkForError).catch(function (err) {
                return Observable_1.Observable.throw(err);
            }).map(this.getJson).do(this.updateSession);
        };
        ApiService.prototype.apiDelete = function (path) {
            return this.http.delete(path, { headers: this.headersForm }).map(this.checkForError).catch(function (err) {
                return Observable_1.Observable.throw(err);
            }).do(this.updateSession);
        };
        ApiService.prototype.getJson = function (resp) {
            try {
                return resp.json();
            } catch (err) {
                return;
            }
        };
        ApiService.prototype.checkForError = function (resp) {
            if (resp.url.indexOf('login') !== -1) {
                return window.location.pathname = '/login';
            }
            if (resp.status >= 200 && resp.status < 400) {
                return resp;
            } else {
                var error = new Error(resp.statusText);
                error['response'] = resp;
                console.error(error);
                throw error;
            }
        };
        ApiService.prototype.updateSession = function () {
            clearTimeout(sessionTimeout);
            sessionTimeout = setTimeout(function () {
                exports.sessionTimeoutStream.next();
            }, models_1.StaticDATA.sessionTime);
        };
        return ApiService;
    }();
    ApiService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [http_1.Http])], ApiService);
    exports.ApiService = ApiService;

});
$__System.registerDynamic("50", ["e", "19", "68", "6c", "14", "6d", "6e", "51"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var Observable_1 = $__require("19");
    $__require("68");
    $__require("6c");
    var api_1 = $__require("14");
    var store_helper_1 = $__require("6d");
    var search_1 = $__require("6e");
    var models_1 = $__require("51");
    var OrderService = function () {
        function OrderService(api, storeHelper, searchService) {
            this.api = api;
            this.storeHelper = storeHelper;
            this.searchService = searchService;
            this.ordersPath = 'order';
            this.productsPath = 'orderItemDtos';
        }
        OrderService.prototype.purgeStore = function () {
            this.storeHelper.update(this.ordersPath, []);
        };
        OrderService.prototype.getOrders = function (start, length) {
            var _this = this;
            return this.api.get("/" + this.ordersPath + "?pageNumber=" + start + "&pageCapacity=" + length).do(function (resp) {
                _this.storeHelper.update('order', resp.elements);
            });
        };
        OrderService.prototype.addOrder = function () {
            var _this = this;
            var newOrder = new models_1.Order();
            var newOrderId = newOrder.id;
            var newOrderItemId = newOrder[this.productsPath][0].id;
            this.storeHelper.add(this.ordersPath, newOrder);
            return this.api.post(this.ordersPath).do(function (resp) {
                _this.storeHelper.findAndUpdate(_this.ordersPath, newOrderId, 'id', resp.orderId);
                _this.storeHelper.findDeepAndUpdate(_this.ordersPath, resp.orderId, _this.productsPath, newOrderItemId, 'id', resp.orderItemId);
            });
        };
        OrderService.prototype.deleteOrder = function (orderId) {
            this.storeHelper.findAndDelete(this.ordersPath, orderId);
            return this.api.apiDelete(this.ordersPath + "/" + orderId);
        };
        OrderService.prototype.updateInfoField = function (orderId, fieldName, value) {
            // Changing order info common field (e.g., firstName, phoneNumber)
            return this.api.put(this.ordersPath + "/" + orderId + "/" + this.camelCaseToDash(fieldName), fieldName + "=" + value);
        };
        OrderService.prototype.updateInfoInput = function (orderId, fieldName, value) {
            // Changing order info INPUT (e.g., Status, Payment type)
            this.storeHelper.findAndUpdate(this.ordersPath, orderId, fieldName, value);
            return this.api.put(this.ordersPath + "/" + orderId + "/" + this.camelCaseToDash(fieldName), fieldName + "=" + value);
        };
        OrderService.prototype.autocompleteInfo = function (orderId, object) {
            this.storeHelper.findAndUpdateWithObject(this.ordersPath, orderId, object);
            this.api.put(this.ordersPath + "/" + orderId + "/set-customer", "customerId=" + object.customerId).subscribe();
        };
        OrderService.prototype.addProduct = function (orderId) {
            var _this = this;
            var newProduct = new models_1.Product();
            var newProductId = newProduct.id;
            this.storeHelper.findDeepAndAdd(this.ordersPath, orderId, this.productsPath, newProduct);
            this.api.post("order-item/create-empty-for/" + orderId).subscribe(function (productId) {
                _this.storeHelper.findDeepAndUpdate(_this.ordersPath, orderId, _this.productsPath, newProductId, 'id', productId);
            });
        };
        OrderService.prototype.updateProductField = function (orderId, productId, fieldName, value) {
            // Changing order item editable field (e.g., name, price)
            var _this = this;
            return this.api.put("order-item/" + productId + "/" + this.camelCaseToDash(fieldName), fieldName + "=" + value).do(function (data) {
                if (data) {
                    _this.storeHelper.findAndUpdate(_this.ordersPath, orderId, 'totalSum', data);
                }
            });
        };
        OrderService.prototype.updateProductInput = function (orderId, productId, fieldName, value) {
            // Changing order item INPUT (quantity)
            var _this = this;
            this.storeHelper.findDeepAndUpdate(this.ordersPath, orderId, this.productsPath, productId, fieldName, value);
            this.api.put("order-item/" + productId + "/" + this.camelCaseToDash(fieldName), fieldName + "=" + value).subscribe(function (data) {
                if (data) {
                    _this.storeHelper.findAndUpdate(_this.ordersPath, orderId, 'totalSum', data);
                }
            });
        };
        OrderService.prototype.autocompleteProduct = function (orderId, productId, data) {
            data['quantity'] = 1;
            this.storeHelper.findDeepAndUpdateWithObject(this.ordersPath, orderId, this.productsPath, productId, data);
            if (data.productVariationId) {
                this.api.put("order-item/" + productId, "productVariationId=" + data.productVariationId).subscribe();
            } else {
                this.api.put("order-item/" + productId, "productId=" + data.productId).subscribe();
            }
        };
        OrderService.prototype.deleteProduct = function (orderId, productId) {
            this.storeHelper.findDeepAndDelete(this.ordersPath, orderId, this.productsPath, productId);
            return this.api.apiDelete("order-item/" + productId);
        };
        OrderService.prototype.getCustomer = function (customerId) {
            return this.api.get("customer/" + customerId);
        };
        OrderService.prototype.saveCustomer = function (customerId, customerInfo) {
            return this.api.put("customer/" + customerId, customerInfo, true);
        };
        OrderService.prototype.persistCustomer = function (orderId) {
            var _this = this;
            this.api.post("customer/persist-customer-from-order/" + orderId).subscribe(function (customerId) {
                _this.storeHelper.findAndUpdate(_this.ordersPath, orderId, 'customerId', customerId);
            });
        };
        OrderService.prototype.list = function (searchQuery, page, length) {
            if (searchQuery === void 0) {
                searchQuery = '';
            }
            if (page === void 0) {
                page = 1;
            }
            if (length === void 0) {
                length = 10;
            }
            var orderResult = this.searchService.search(this.storeHelper.get(this.ordersPath), searchQuery);
            var orderResultPage = orderResult.slice(0, length);
            return Observable_1.Observable.of({
                orders: orderResultPage,
                filtered: orderResult.length
            });
        };
        OrderService.prototype.autocomplete = function (types, term) {
            if (types[1] === 'lastName' || types[1] === 'firstName') {
                return this.api.get("customer/autocomplete-by-last-name-mask/" + term);
            } else if (types[1] === 'phoneNumber') {
                return this.api.get("customer/autocomplete-by-phone-number-mask/" + term);
            } else if (types[1] === 'city') {
                return this.api.get("customer/autocomplete-by-city-mask/" + term);
            } else if (types[0] === 'product') {
                return this.api.get("order-item/autocomplete-by-product-name/" + term);
            }
        };
        OrderService.prototype.camelCaseToDash = function (str) {
            return str.replace(/([A-Z])/g, function (g) {
                return "-" + g[0].toLowerCase();
            });
        };
        // @TODO remove this
        OrderService.prototype.getStore = function () {
            this.storeHelper.onGetState();
        };
        OrderService.prototype.getAllOrders = function () {
            return this.api.get(this.ordersPath + "?start=0&length=10000");
        };
        return OrderService;
    }();
    OrderService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [api_1.ApiService, store_helper_1.StoreHelper, search_1.SearchService])], OrderService);
    exports.OrderService = OrderService;

});
$__System.registerDynamic('6f', ['1f', '70', '71'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('1f');
    var tryCatch_1 = $__require('70');
    var errorObject_1 = $__require('71');
    /* tslint:enable:max-line-length */
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
     *
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     *
     * If a comparator function is not provided, an equality check is used by default.
     *
     * @example <caption>A simple example with numbers</caption>
     * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
     *   .distinctUntilChanged()
     *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4
     *
     * @example <caption>An example using a compare function</caption>
     * interface Person {
     *    age: number,
     *    name: string
     * }
     *
     * Observable.of<Person>(
     *     { age: 4, name: 'Foo'},
     *     { age: 7, name: 'Bar'},
     *     { age: 5, name: 'Foo'})
     *     { age: 6, name: 'Foo'})
     *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
     *     .subscribe(x => console.log(x));
     *
     * // displays:
     * // { age: 4, name: 'Foo' }
     * // { age: 7, name: 'Bar' }
     * // { age: 5, name: 'Foo' }
     *
     * @see {@link distinct}
     * @see {@link distinctUntilKeyChanged}
     *
     * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
     * @return {Observable} An Observable that emits items from the source Observable with distinct values.
     * @method distinctUntilChanged
     * @owner Observable
     */
    function distinctUntilChanged(compare, keySelector) {
        return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
    }
    exports.distinctUntilChanged = distinctUntilChanged;
    var DistinctUntilChangedOperator = function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
            this.compare = compare;
            this.keySelector = keySelector;
        }
        DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
        };
        return DistinctUntilChangedOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctUntilChangedSubscriber = function (_super) {
        __extends(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.hasKey = false;
            if (typeof compare === 'function') {
                this.compare = compare;
            }
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch_1.tryCatch(this.keySelector)(value);
                if (key === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch_1.tryCatch(this.compare)(this.key, key);
                if (result === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            } else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber_1.Subscriber);

});
$__System.registerDynamic('72', ['19', '6f'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var distinctUntilChanged_1 = $__require('6f');
  Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;

});
$__System.registerDynamic("41", ["35", "e", "72"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var BehaviorSubject_1 = $__require("35");
    var core_1 = $__require("e");
    $__require("72");
    var defaultState = {
        order: [],
        product: [],
        customer: []
    };
    var _store = new BehaviorSubject_1.BehaviorSubject(defaultState);
    var Store = function () {
        function Store() {
            this.store = _store;
            this.changes = this.store.asObservable().distinctUntilChanged();
        }
        Store.prototype.setState = function (state) {
            this.store.next(state);
        };
        Store.prototype.getState = function () {
            return this.store.value;
        };
        Store.prototype.purge = function () {
            this.store.next(defaultState);
        };
        return Store;
    }();
    Store = __decorate([core_1.Injectable()], Store);
    exports.Store = Store;

});
$__System.registerDynamic("6d", ["e", "41"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var store_1 = $__require("41");
    var StoreHelper = function () {
        function StoreHelper(store) {
            this.store = store;
        }
        StoreHelper.prototype.get = function (prop) {
            var currentState = this.store.getState();
            return currentState[prop];
        };
        StoreHelper.prototype.add = function (prop, state) {
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = [state].concat(collection), _a)));
            var _a;
        };
        StoreHelper.prototype.addArrayLast = function (prop, state) {
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.concat(state), _a)));
            var _a;
        };
        StoreHelper.prototype.update = function (prop, state) {
            var currentState = this.store.getState();
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = state, _a)));
            var _a;
        };
        StoreHelper.prototype.findAndUpdate = function (prop, id, fieldName, value) {
            var updated = false;
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.map(function (item) {
                if (item.id === id && item[fieldName] !== value) {
                    item[fieldName] = value;
                    updated = true;
                }
                return item;
            }), _a)));
            return updated;
            var _a;
        };
        StoreHelper.prototype.findAndUpdateWithObject = function (prop, id, sourceObj) {
            var updated = false;
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.map(function (item) {
                if (item.id === id) {
                    item = Object.assign(item, sourceObj);
                    updated = true;
                }
                return item;
            }), _a)));
            return updated;
            var _a;
        };
        StoreHelper.prototype.findAndDelete = function (prop, id) {
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.filter(function (item) {
                return item.id !== id;
            }), _a)));
            var _a;
        };
        StoreHelper.prototype.findDeepAndAdd = function (prop, id, deepProp, state) {
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.map(function (item) {
                if (item.id === id) {
                    item[deepProp].push(state);
                }
                return item;
            }), _a)));
            var _a;
        };
        StoreHelper.prototype.findDeepAndUpdate = function (prop, id, deepPropKey, deepId, fieldName, value) {
            var updated = false;
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.map(function (item) {
                if (item.id === id) {
                    item[deepPropKey].map(function (deepItem) {
                        if (deepItem.id === deepId && deepItem[fieldName] !== value) {
                            deepItem[fieldName] = value;
                            updated = true;
                        }
                        return deepItem;
                    });
                }
                return item;
            }), _a)));
            return updated;
            var _a;
        };
        StoreHelper.prototype.findDeepAndUpdateWithObject = function (prop, id, deepPropKey, deepId, sourceObj) {
            var updated = false;
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.map(function (item) {
                if (item.id === id) {
                    item[deepPropKey].map(function (deepItem) {
                        if (deepItem.id === deepId) {
                            deepItem = Object.assign(deepItem, sourceObj);
                            updated = true;
                        }
                        return deepItem;
                    });
                }
                return item;
            }), _a)));
            return updated;
            var _a;
        };
        StoreHelper.prototype.findDeepAndDelete = function (prop, id, deepPropKey, deepId) {
            var currentState = this.store.getState();
            var collection = currentState[prop];
            this.store.setState(Object.assign({}, currentState, (_a = {}, _a[prop] = collection.map(function (item) {
                if (item.id === id) {
                    item[deepPropKey] = item[deepPropKey].filter(function (deepItem) {
                        return deepItem.id !== deepId;
                    });
                }
                return item;
            }), _a)));
            var _a;
        };
        // @TODO remove this
        StoreHelper.prototype.onGetState = function () {
            console.log(this.store.getState());
        };
        return StoreHelper;
    }();
    StoreHelper = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [store_1.Store])], StoreHelper);
    exports.StoreHelper = StoreHelper;

});
$__System.registerDynamic("6e", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var SearchService = function () {
        function SearchService() {}
        SearchService.prototype.search = function (items, searchQuery) {
            function _ifValueConsistQuery(value) {
                // Return true if given value isn't empty and matches search text
                if (value) {
                    value += '';
                    return value.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1;
                }
            }
            function _deepSearch(item) {
                for (var key in item) {
                    if (item.hasOwnProperty(key)) {
                        // At first checks in values of given object, e.g. 'firstName/phoneNumber'
                        // if no, then goes recursivly and checks in nested object/arrays, e.g. 'orderItemTos'.
                        if (_ifValueConsistQuery(item[key]) || typeof item[key] === 'object' && _deepSearch(item[key])) {
                            return true;
                        }
                    }
                }
            }
            function _search(item) {
                for (var key in item) {
                    if (item.hasOwnProperty(key)) {
                        // Checks in values of given object, e.g. 'firstName/phoneNumber'
                        if (_ifValueConsistQuery(item[key])) {
                            return true;
                        }
                    }
                }
            }
            // To implement deep search, change "_search" to "_deepSearch" in following line
            return items.length && searchQuery ? items.filter(_search) : items;
        };
        return SearchService;
    }();
    SearchService = __decorate([core_1.Injectable()], SearchService);
    exports.SearchService = SearchService;

});
$__System.registerDynamic("73", ["e", "19", "40"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var Observable_1 = $__require("19");
    var index_1 = $__require("40");
    var ProductService = function () {
        function ProductService(api, storeHelper, searchService) {
            this.api = api;
            this.storeHelper = storeHelper;
            this.searchService = searchService;
            this.productsPath = 'product';
        }
        ProductService.prototype.getAllProducts = function () {
            var _this = this;
            return this.api.get(this.productsPath + "?pageNumber=0&pageCapacity=10000").do(function (_a) {
                var totalElements = _a.totalElements,
                    elements = _a.elements;
                elements.sort(function (a, b) {
                    return a.id - b.id;
                });
                elements = elements.map(function (el) {
                    el.categories = el.categories.join('; ');
                    return el;
                });
                _this.storeHelper.update(_this.productsPath, elements);
            });
        };
        ProductService.prototype.list = function (searchQuery, page, length, filterData) {
            var searchResult = this.searchService.search(this.storeHelper.get(this.productsPath), searchQuery);
            var filterResult = searchResult.filter(function (product) {
                var flag = 0;
                for (var prop in filterData) {
                    if (filterData.hasOwnProperty(prop)) {
                        if (product[prop]) {
                            if (product[prop].indexOf(filterData[prop]) > -1) {
                                flag++;
                            } else {
                                return false;
                            }
                        } else {
                            flag++;
                        }
                    }
                }
                return flag === Object.keys(filterData).length ? true : false;
            });
            var productResultPage = filterResult.slice((page - 1) * length, page * length);
            return Observable_1.Observable.of({
                products: productResultPage,
                filtered: filterResult.length
            });
        };
        ProductService.prototype.updateProductField = function (productId, productVarId, body) {
            if (productVarId !== 0) {
                body['variationId'] = productVarId;
            }
            return this.api.put(this.productsPath + "/" + productId, body, true);
        };
        ProductService.prototype.purgeStore = function () {
            this.storeHelper.update(this.productsPath, []);
        };
        return ProductService;
    }();
    ProductService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [index_1.ApiService, index_1.StoreHelper, index_1.SearchService])], ProductService);
    exports.ProductService = ProductService;

});
$__System.registerDynamic("74", ["e", "19", "40"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var Observable_1 = $__require("19");
    var index_1 = $__require("40");
    var CustomerService = function () {
        function CustomerService(api, storeHelper, searchService) {
            this.api = api;
            this.storeHelper = storeHelper;
            this.searchService = searchService;
            this.customersPath = 'customer';
        }
        CustomerService.prototype.getAllCustomers = function () {
            var _this = this;
            return this.api.get(this.customersPath + "?pageNumber=0&pageCapacity=10000").do(function (_a) {
                var totalElements = _a.totalElements,
                    elements = _a.elements;
                elements.sort(function (a, b) {
                    return a.id - b.id;
                });
                _this.storeHelper.update(_this.customersPath, elements);
            });
        };
        CustomerService.prototype.list = function (searchQuery, page, length) {
            if (searchQuery === void 0) {
                searchQuery = '';
            }
            if (page === void 0) {
                page = 1;
            }
            if (length === void 0) {
                length = 10;
            }
            var customerResult = this.searchService.search(this.storeHelper.get(this.customersPath), searchQuery);
            var customerResultPage = customerResult.slice((page - 1) * length, page * length);
            return Observable_1.Observable.of({
                customers: customerResultPage,
                filtered: customerResult.length
            });
        };
        CustomerService.prototype.purgeStore = function () {
            this.storeHelper.update(this.customersPath, []);
        };
        return CustomerService;
    }();
    CustomerService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [index_1.ApiService, index_1.StoreHelper, index_1.SearchService])], CustomerService);
    exports.CustomerService = CustomerService;

});
$__System.registerDynamic("16", ["e", "47"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var index_1 = $__require("47");
    var NotyService = function () {
        function NotyService(compiler) {
            this.compiler = compiler;
        }
        NotyService.prototype.renderNoty = function (msg, data) {
            var notyFactory = this.compiler.resolveComponentFactory(index_1.NotyComponent);
            var notyComponent = this.viewContainerRef.createComponent(notyFactory);
            notyComponent.instance.destroyedStream.subscribe(function () {
                notyComponent.destroy();
            });
            notyComponent.instance.message = msg;
        };
        return NotyService;
    }();
    NotyService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [core_1.ComponentFactoryResolver])], NotyService);
    exports.NotyService = NotyService;

});
$__System.registerDynamic("40", ["14", "50", "6d", "6e", "73", "74", "16"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  Object.defineProperty(exports, "__esModule", { value: true });
  var api_1 = $__require("14");
  exports.ApiService = api_1.ApiService;
  var orders_1 = $__require("50");
  exports.OrderService = orders_1.OrderService;
  var store_helper_1 = $__require("6d");
  exports.StoreHelper = store_helper_1.StoreHelper;
  var search_1 = $__require("6e");
  exports.SearchService = search_1.SearchService;
  var products_1 = $__require("73");
  exports.ProductService = products_1.ProductService;
  var customers_1 = $__require("74");
  exports.CustomerService = customers_1.CustomerService;
  var noty_1 = $__require("16");
  exports.NotyService = noty_1.NotyService;

});
$__System.registerDynamic("75", ["e", "c"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var animations_1 = $__require("c");
    var Header = function () {
        function Header() {
            this.menuState = 'collapsed';
        }
        Header.prototype.toggleMenuState = function () {
            this.menuState = this.menuState === 'collapsed' ? 'expanded' : 'collapsed';
        };
        return Header;
    }();
    Header = __decorate([core_1.Component({
        selector: 'nav-header',
        templateUrl: '/assets/templates/ui/header.html',
        styleUrls: ['assets/css/ui/header.css'],
        animations: [animations_1.trigger('fadeInOut', [animations_1.state('collapsed', animations_1.style({ display: 'none', opacity: 0 })), animations_1.state('expanded', animations_1.style({ display: 'block', opacity: 1 })), animations_1.transition('collapsed <=> expanded', animations_1.animate('.3s ease'))])]
    }), __metadata("design:paramtypes", [])], Header);
    exports.Header = Header;

});
$__System.registerDynamic("76", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var Order = function () {
        function Order() {
            this.order = {};
        }
        return Order;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object)], Order.prototype, "order", void 0);
    Order = __decorate([core_1.Component({
        selector: 'order-block',
        template: "\n    <div class=\"order\">\n        <div class=\"order__lastname\">\n        </div>\n        <div class=\"order__firstname\">\n        </div>\n        <div class=\"order__phone\">\n        </div>\n    </div>\n    <div class=\"order-items\">\n      \n    </div>\n  "
    })], Order);
    exports.Order = Order;

});
$__System.registerDynamic('62', ['19', '38'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var map_1 = $__require('38');
  Observable_1.Observable.prototype.map = map_1.map;

});
$__System.registerDynamic("37", ["26"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var ArrayObservable_1 = $__require("26");
  exports.of = ArrayObservable_1.ArrayObservable.of;

});
$__System.registerDynamic('6c', ['19', '37'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('19');
  var of_1 = $__require('37');
  Observable_1.Observable.of = of_1.of;

});
$__System.registerDynamic("77", ["e", "36", "19", "62", "6c"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var Subject_1 = $__require("36");
    var Observable_1 = $__require("19");
    $__require("62");
    $__require("6c");
    var AutocompleteList = function () {
        function AutocompleteList(viewRef) {
            var _this = this;
            this.viewRef = viewRef;
            this.list = [];
            this.focusMoved = new Subject_1.Subject();
            this.selectedStream = new Subject_1.Subject();
            this.selectedIndex = 0;
            this.selectedSource = this.selectedStream.map(function () {
                return Observable_1.Observable.of(_this.list[_this.selectedIndex]);
            });
        }
        AutocompleteList.prototype.ngOnInit = function () {
            var _this = this;
            this.focusMoved.subscribe(function (direction) {
                if (direction === 'next' && _this.selectedIndex < _this.list.length - 1) {
                    _this.selectedIndex++;
                } else if (direction === 'prev' && _this.selectedIndex > 0) {
                    _this.selectedIndex--;
                }
                _this.resolveScroll();
            });
        };
        AutocompleteList.prototype.onClick = function () {
            console.log(this.selectedIndex);
            console.log(this.list[this.selectedIndex]);
            this.selectedStream.next();
        };
        AutocompleteList.prototype.setSelected = function (index) {
            this.selectedIndex = index;
        };
        AutocompleteList.prototype.resolveScroll = function () {
            var activeEl = this.viewRef.element.nativeElement.querySelector('.active');
            activeEl.scrollIntoViewIfNeeded();
        };
        return AutocompleteList;
    }();
    AutocompleteList = __decorate([core_1.Component({
        template: "\n    <ul class=\"autocomplete\"\n      [style.top]=\"styleTop + 'px'\"\n      [style.left]=\"styleLeft + 'px'\"\n      (click)=\"onClick()\"\n    >\n      \n      <li \n        *ngFor=\"let item of list; let i = index;\"\n        (mouseenter)=\"setSelected(i)\"\n        [class.active]=\"i === selectedIndex\"\n      >\n        {{ item.label }}\n      </li>\n    \n    </ul>\n  "
    }), __metadata("design:paramtypes", [core_1.ViewContainerRef])], AutocompleteList);
    exports.AutocompleteList = AutocompleteList;

});
$__System.registerDynamic('35', ['36', '78'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('36');
    var ObjectUnsubscribedError_1 = $__require('78');
    /**
     * @class BehaviorSubject<T>
     */
    var BehaviorSubject = function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            } else if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;

});
$__System.registerDynamic("79", ["e", "35"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var BehaviorSubject_1 = $__require("35");
    var Pagination = function () {
        function Pagination() {
            this.totalItems = 0;
            this.pageLength = 10;
            this.currentParentPage = 1;
            this.currentPageStream = new BehaviorSubject_1.BehaviorSubject(1);
            this.pagesToDisplay = 3;
            this.dataChanged = new core_1.EventEmitter();
            this.lengthChanged = new core_1.EventEmitter();
        }
        Pagination.prototype.ngOnInit = function () {
            var _this = this;
            this.currentPageStream.subscribe(function (page) {
                _this.currentPageNumber = page;
                _this.setPages();
            });
        };
        Pagination.prototype.ngOnChanges = function () {
            this.lastPage = Math.ceil(this.totalItems / this.pageLength);
            this.setPages();
            this.currentPageStream.next(this.currentParentPage);
        };
        Pagination.prototype.selectPage = function (page) {
            if (page > 0) {
                this.currentPageStream.next(page);
                this.dataChanged.emit({ page: page, length: this.pageLength });
            }
        };
        Pagination.prototype.changeLength = function (length) {
            this.dataChanged.emit({ page: 1, length: +length });
        };
        Pagination.prototype.getPrevPage = function () {
            if (this.currentPageNumber > 1) {
                return --this.currentPageNumber;
            }
        };
        Pagination.prototype.getNextPage = function () {
            if (this.currentPageNumber < this.lastPage) {
                return ++this.currentPageNumber;
            }
        };
        Pagination.prototype.getLastPage = function () {
            return this.lastPage;
        };
        Pagination.prototype.setPages = function () {
            var start = 2;
            var current = this.currentPageNumber;
            var ptd = this.pagesToDisplay;
            var end = ptd;
            if (current <= ptd + 1) {
                end = 4;
            }
            if (current > ptd + 1) {
                start = current - 1;
                if (current >= this.lastPage - ptd) {
                    start = this.lastPage - ptd - 1;
                    end = 4;
                }
            }
            if (this.lastPage <= ptd + 4) {
                start = 2;
                end = ptd + 2;
                if (this.lastPage <= ptd + 2) {
                    end = this.lastPage - 2;
                }
            }
            this.pages = Array.from(new Array(Math.max(0, end)), function (v, i) {
                return i + start;
            });
        };
        Pagination.prototype.isPrevSpreadShown = function () {
            return this.lastPage > this.pagesToDisplay + 4 && this.currentPageNumber > this.pagesToDisplay + 1;
        };
        Pagination.prototype.isNextSpreadShown = function () {
            return this.lastPage > this.pagesToDisplay + 4 && this.currentPageNumber < this.lastPage - this.pagesToDisplay;
        };
        return Pagination;
    }();
    __decorate([core_1.Input('total'), __metadata("design:type", Number)], Pagination.prototype, "totalItems", void 0);
    __decorate([core_1.Input('length'), __metadata("design:type", Number)], Pagination.prototype, "pageLength", void 0);
    __decorate([core_1.Input('current'), __metadata("design:type", Number)], Pagination.prototype, "currentParentPage", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], Pagination.prototype, "dataChanged", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], Pagination.prototype, "lengthChanged", void 0);
    Pagination = __decorate([core_1.Component({
        selector: 'pagination',
        template: "\n    <div class=\"pagination\">\n    \n      <div class=\"pagination__info\">\n        Displaying {{ (currentPageNumber - 1) * pageLength + 1}} \u2013 {{ currentPageNumber * pageLength }} of {{ totalItems }} items\n      </div>\n      \n      <div class=\"pagination__right\">\n        <select name=\"\" id=\"\" class=\"pagination__length input\"\n          (change)=\"changeLength($event.target.value)\"\n        >\n          <option\n            *ngFor=\"let value of [10, 20, 50, 100, 200]\"\n            value=\"{{ value }}\"\n            [attr.selected]=\"value === pageLength ? '' : null\"\n          >\n            {{ value }}\n          </option>\n        </select>\n  \n        <ul class=\"pagination__selector\"\n          *ngIf=\"totalItems > pageLength\"\n        >\n          <li\n            (click)=\"selectPage(getPrevPage())\"\n            [class.disabled]=\"currentPageNumber === 1\"\n          >Prev</li>\n          <li\n            (click)=\"selectPage(1)\"\n            [class.active]=\"currentPageNumber === 1\"\n          >1</li>        \n          <li class=\"spread\" *ngIf=\"isPrevSpreadShown()\">...</li>\n          \n          <li \n            *ngFor=\"let page of pages\"\n            [class.active]=\"page === currentPageNumber\"\n            (click)=\"selectPage(page)\"\n          >\n            {{ page }}\n          </li>\n          \n          <li class=\"spread\" *ngIf=\"isNextSpreadShown()\">...</li>\n          <li\n            (click)=\"selectPage(lastPage)\"\n            [class.active]=\"currentPageNumber === lastPage\"\n          >\n            {{ lastPage }}\n          </li>\n          <li\n            (click)=\"selectPage(getNextPage())\"\n            [class.disabled]=\"currentPageNumber === lastPage\"\n          >Next</li>\n        </ul>\n        \n      </div>\n    </div>\n  ",
        styles: ["\n    .pagination {\n      display: flex;\n      justify-content: space-between;\n      align-items: flex-end;\n      margin: 20px 0;\n      font-size: 15px;\n    }\n    .pagination__right {\n      text-align: right;\n    }\n    .pagination__length {\n      margin: 0 0 10px;\n      font-size: 15px;\n    }\n    .pagination__selector {\n      display: flex;\n      list-style: none;\n    }    \n    li {\n      padding: 5px 10px;\n      user-select: none;\n      cursor: pointer;\n    }\n    li:hover,\n    li.active {\n      background: #00bcd4;\n      color: #fff;\n    }\n    li.disabled,\n    li.disabled:hover,\n    li.spread,\n    li.spread:hover {\n        background: transparent;\n        color: #999;\n        cursor: default;\n    }\n    @media only screen and (max-width: 500px) {\n      .pagination {\n          flex-wrap: wrap;\n      }\n      \n      .pagination__info {\n          display: none;\n      }\n      \n      .pagination__right {\n          margin-left: auto;\n      }\n      \n      li.spread {\n          padding-left: 2px;\n          padding-right: 2px;\n      }    \n    }\n  "]
    })], Pagination);
    exports.Pagination = Pagination;

});
$__System.registerDynamic("7a", ["e", "49", "c", "36"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var forms_1 = $__require("49");
    var animations_1 = $__require("c");
    var Subject_1 = $__require("36");
    var PopupComponent = function () {
        function PopupComponent(formBuilder) {
            this.formBuilder = formBuilder;
            this.data = {};
            this.hasData = false;
            this.hasFormData = false;
            this.animationState = 'idle';
            this.header = 'Popup header';
            this.destroyedStream = new Subject_1.Subject();
            this.submittedStream = new Subject_1.Subject();
        }
        PopupComponent.prototype.provideWithData = function (data) {
            this.data = data;
            this.hasData = true;
        };
        PopupComponent.prototype.provideWithFormData = function (data) {
            this.data = data;
            this.hasFormData = true;
            this.form = this.formBuilder.group(data);
        };
        PopupComponent.prototype.onSubmit = function () {
            this.submittedStream.next(this.form.value);
            this.close();
        };
        PopupComponent.prototype.close = function () {
            this.animationState = 'destroyed';
        };
        PopupComponent.prototype.reset = function () {
            this.form.reset(this.data);
        };
        PopupComponent.prototype.onAnimationDone = function (e) {
            if (e.toState === 'destroyed') {
                this.destroyedStream.next();
            }
        };
        return PopupComponent;
    }();
    PopupComponent = __decorate([core_1.Component({
        template: "\n    <div class=\"popup-wrapper\">\n      <div class=\"popup-overlay\" (click)=\"close()\" [@fadeInOut]=\"animationState\"></div>\n      <div class=\"popup\"\n        [@expandHeight]=\"hasData || hasFormData\"\n        [@flyInOut]=\"animationState\"\n        (@flyInOut.done)=\"onAnimationDone($event)\"\n      >\n        <div class=\"popup__head\">\n          {{ header }}\n          \n          <div class=\"popup__close\" (click)=\"close()\">\n            <i class=\"material-icons\">close</i>\n          </div>\n        </div>\n        \n        <div class=\"popup__loading\" *ngIf=\"!this.hasData && !this.hasFormData\">\n          <div class=\"popup__loading-text\">Loading...</div>\n          <img src=\"/assets/images/loading.svg\" alt=\"\" class=\"popup__loading-image\">\n        </div>\n        \n        <div class=\"popup__content\" *ngIf=\"hasData\">\n          <div class=\"popup__content-text\">{{ this.data }}</div>\n        </div>\n        \n        <form\n          *ngIf=\"hasFormData\"\n          [formGroup]=\"form\"\n          (ngSubmit)=\"onSubmit()\"\n        >\n        \n          <div class=\"popup__content\">\n            <div class=\"popup__formgroup\">\n              <label class=\"popup__label\">ID</label>\n              <div class=\"popup__input\">{{ data.id }}</div>\n            </div>\n          \n            <div class=\"popup__formgroup\" *ngFor=\"let key of data | keys:['id']\">\n              <label class=\"popup__label\" for=\"{{ key }}\">{{ key }}</label>\n              <input class=\"input popup__input\" id=\"{{ key }}\" type=\"text\" formControlName=\"{{ key }}\">\n            </div>\n          </div>\n          \n          <div class=\"popup__btns\">\n            <button class=\"btn btn--warning popup__btn popup__btn--reset\" type=\"button\" (click)=\"reset()\">\n              <i class=\"material-icons\">restore</i> Reset\n            </button>\n            <button class=\"btn popup__btn popup__btn--submit\" type=\"submit\">\n              <i class=\"material-icons\">save</i> Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  ",
        styles: ["\n    .popup-wrapper,\n    .popup-overlay {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        overflow-y: auto;\n    }\n    \n    .popup-overlay {\n        background: rgba(0,0,0,.3);\n    }\n    \n    .popup {\n        position: absolute;\n        top: 12%;\n        left: 50%;\n        transform: translateX(-50%);\n        min-width: 550px;\n        max-width: 100%;\n        min-height: 195px;\n        display: flex;\n        flex-wrap: wrap;\n        align-items: flex-start;\n        align-content: stretch;\n        justify-content: center;\n        background: #fff;\n        border: 1px solid #b9b9b9;\n        border-radius: 4px;\n        box-shadow: 0 0 8px 1px rgba(0, 0, 0, 0.42);\n        overflow: hidden;\n    }\n    \n    .popup__head {\n        position: relative;\n        padding: 8px 16px;\n        width: 100%;\n        background: #f4f4f4;\n        border-bottom: 1px solid #ccc;\n        border-top-right-radius: 4px;\n        border-top-left-radius: 4px;\n        font-size: 22px;\n    }\n    \n    .popup__close {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        cursor: pointer;\n    }\n    \n    .popup__close .material-icons {\n        font-size: 19px;\n    }\n    \n    .popup__close:hover {\n        color: #555;\n    }\n    \n    .popup__content {\n        width: 100%;\n        padding: 8px 16px;\n        font-size: 15px;\n    }\n    \n    .popup__content-text {\n        max-width: 220px;\n        margin: 0 auto;\n        text-align: center;\n    }\n    \n    .popup__formgroup {\n        margin: 13px 0;\n    }\n    \n    .popup__label {\n        display: inline-block;\n        vertical-align: middle;\n        width: 36%;\n    }\n    \n    .popup__input {\n        display: inline-block;\n        vertical-align: middle;\n        width: 58%;\n        margin: 0 0 0 4%;\n        font-size: 15px;\n    }\n    \n    .popup__btns {\n        padding: 3px 16px 16px;\n        display: flex;\n        justify-content: space-between;\n    }\n    \n    .popup__btn .material-icons {\n        font-size: 17px;\n        display: inline-block;\n        vertical-align: sub;\n        margin: 0 5px 0 0;\n    }\n    .popup__loading {\n        display: flex;\n        justify-content: center;\n        align-content: center;\n        flex-wrap: wrap;\n        padding: 20px 0;\n    }\n    \n    .popup__loading-text {\n        width: 100%;\n        font-size: 16px;\n        text-align: center;\n    }\n    \n    .popup__loading-image {\n        max-width: 70px;\n        max-height: 70px;\n        margin: 15px 0 0;\n    }\n    \n    form {\n        width: 100%;\n    }\n    \n    @media only screen and (max-width: 600px) {\n      .popup {\n          min-width: initial;\n          width: 300px;\n          top: 0;\n          margin: 30px 0 50px;\n      }\n      \n      .popup__label {\n          display: block;\n          width: 100%;\n          font-size: 13px;\n          color: #999;\n      }\n      \n      .popup__input {\n          display: block;\n          width: 100%;\n          margin: 0;\n      }    \n    }\n  "],
        animations: [animations_1.trigger('fadeInOut', [animations_1.state('destroyed', animations_1.style({ opacity: 0 })), animations_1.transition(':enter', [animations_1.style({ opacity: 0 }), animations_1.animate('0.2s ease', animations_1.style({ opacity: 1 }))]), animations_1.transition('* => destroyed', [animations_1.animate('0.2s ease')])]), animations_1.trigger('flyInOut', [animations_1.state('destroyed', animations_1.style({ opacity: 0, transform: 'translateX(-10%)' })), animations_1.transition(':enter', [animations_1.style({ opacity: 0, transform: 'translateX(-90%)' }), animations_1.animate('0.2s ease', animations_1.style({ opacity: 1, transform: 'translateX(-50%)' }))]), animations_1.transition('* => destroyed', [animations_1.animate('0.2s ease')])]), animations_1.trigger('expandHeight', [animations_1.state('0', animations_1.style({ height: '150px' })), animations_1.state('1', animations_1.style({ height: '*' })), animations_1.transition('0 => 1', animations_1.animate('0.2s ease'))])]
    }), __metadata("design:paramtypes", [forms_1.FormBuilder])], PopupComponent);
    exports.PopupComponent = PopupComponent;

});
$__System.registerDynamic('7b', ['19', '1d', '22', '2e', '2f'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('19');
    var EmptyObservable_1 = $__require('1d');
    var isArray_1 = $__require('22');
    var subscribeToResult_1 = $__require('2e');
    var OuterSubscriber_1 = $__require('2f');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ForkJoinObservable = function (_super) {
        __extends(ForkJoinObservable, _super);
        function ForkJoinObservable(sources, resultSelector) {
            _super.call(this);
            this.sources = sources;
            this.resultSelector = resultSelector;
        }
        /* tslint:enable:max-line-length */
        /**
         * @param sources
         * @return {any}
         * @static true
         * @name forkJoin
         * @owner Observable
         */
        ForkJoinObservable.create = function () {
            var sources = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                sources[_i - 0] = arguments[_i];
            }
            if (sources === null || arguments.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            var resultSelector = null;
            if (typeof sources[sources.length - 1] === 'function') {
                resultSelector = sources.pop();
            }
            // if the first and only other argument besides the resultSelector is an array
            // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
            if (sources.length === 1 && isArray_1.isArray(sources[0])) {
                sources = sources[0];
            }
            if (sources.length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            }
            return new ForkJoinObservable(sources, resultSelector);
        };
        ForkJoinObservable.prototype._subscribe = function (subscriber) {
            return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
        };
        return ForkJoinObservable;
    }(Observable_1.Observable);
    exports.ForkJoinObservable = ForkJoinObservable;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ForkJoinSubscriber = function (_super) {
        __extends(ForkJoinSubscriber, _super);
        function ForkJoinSubscriber(destination, sources, resultSelector) {
            _super.call(this, destination);
            this.sources = sources;
            this.resultSelector = resultSelector;
            this.completed = 0;
            this.haveValues = 0;
            var len = sources.length;
            this.total = len;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                var source = sources[i];
                var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
                if (innerSubscription) {
                    innerSubscription.outerIndex = i;
                    this.add(innerSubscription);
                }
            }
        }
        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            if (!innerSub._hasValue) {
                innerSub._hasValue = true;
                this.haveValues++;
            }
        };
        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            var _a = this,
                haveValues = _a.haveValues,
                resultSelector = _a.resultSelector,
                values = _a.values;
            var len = values.length;
            if (!innerSub._hasValue) {
                destination.complete();
                return;
            }
            this.completed++;
            if (this.completed !== len) {
                return;
            }
            if (haveValues === len) {
                var value = resultSelector ? resultSelector.apply(this, values) : values;
                destination.next(value);
            }
            destination.complete();
        };
        return ForkJoinSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);

});
$__System.registerDynamic("7c", ["7b"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var ForkJoinObservable_1 = $__require("7b");
  exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;

});
$__System.registerDynamic('25', ['18', '19'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('18');
    var Observable_1 = $__require('19');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PromiseObservable = function (_super) {
        __extends(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        /**
         * Converts a Promise to an Observable.
         *
         * <span class="informal">Returns an Observable that just emits the Promise's
         * resolved value, then completes.</span>
         *
         * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
         * Observable. If the Promise resolves with a value, the output Observable
         * emits that resolved value as a `next`, and then completes. If the Promise
         * is rejected, then the output Observable emits the corresponding Error.
         *
         * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
         * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindCallback}
         * @see {@link from}
         *
         * @param {PromiseLike<T>} promise The promise to be converted.
         * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
         * the delivery of the resolved value (or the rejection).
         * @return {Observable<T>} An Observable which wraps the Promise.
         * @static true
         * @name fromPromise
         * @owner Observable
         */
        PromiseObservable.create = function (promise, scheduler) {
            return new PromiseObservable(promise, scheduler);
        };
        PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.error(err);
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            } else {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1.Observable);
    exports.PromiseObservable = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.error(err);
        }
    }

});
$__System.registerDynamic("3a", ["25"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var PromiseObservable_1 = $__require("25");
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;

});
$__System.registerDynamic('38', ['1f'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('1f');
    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map(project, thisArg) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return this.lift(new MapOperator(project, thisArg));
    }
    exports.map = map;
    var MapOperator = function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }();
    exports.MapOperator = MapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapSubscriber = function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        // NOTE: This looks unoptimized, but it's actually purposefully NOT
        // using try/catch optimizations.
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1.Subscriber);

});
/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core")) : "function" == "function" && true ? $__System.registerDynamic("12", ["e"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("e"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core);
}(this, function (exports, _angular_core) {
  "use strict";
  function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
  }function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, "");
  }function getPluralCategory(value, cases, ngLocalization) {
    var key = "=" + value;if (cases.indexOf(key) > -1) return key;if (key = ngLocalization.getPluralCategory(value), cases.indexOf(key) > -1) return key;if (cases.indexOf("other") > -1) return "other";throw new Error('No plural message found for value "' + value + '"');
  }function getPluralCase(locale, nLike) {
    "string" == typeof nLike && (nLike = parseInt(nLike, 10));var n = nLike,
        nDecimal = n.toString().replace(/^[^.]*\.?/, ""),
        i = Math.floor(Math.abs(n)),
        v = nDecimal.length,
        f = parseInt(nDecimal, 10),
        t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ""), 10) || 0,
        lang = locale.split("-")[0].toLowerCase();switch (lang) {case "af":case "asa":case "az":case "bem":case "bez":case "bg":case "brx":case "ce":case "cgg":case "chr":case "ckb":case "ee":case "el":case "eo":case "es":case "eu":case "fo":case "fur":case "gsw":case "ha":case "haw":case "hu":case "jgo":case "jmc":case "ka":case "kk":case "kkj":case "kl":case "ks":case "ksb":case "ky":case "lb":case "lg":case "mas":case "mgo":case "ml":case "mn":case "nb":case "nd":case "ne":case "nn":case "nnh":case "nyn":case "om":case "or":case "os":case "ps":case "rm":case "rof":case "rwk":case "saq":case "seh":case "sn":case "so":case "sq":case "ta":case "te":case "teo":case "tk":case "tr":case "ug":case "uz":case "vo":case "vun":case "wae":case "xog":
        return 1 === n ? Plural.One : Plural.Other;case "agq":case "bas":case "cu":case "dav":case "dje":case "dua":case "dyo":case "ebu":case "ewo":case "guz":case "kam":case "khq":case "ki":case "kln":case "kok":case "ksf":case "lrc":case "lu":case "luo":case "luy":case "mer":case "mfe":case "mgh":case "mua":case "mzn":case "nmg":case "nus":case "qu":case "rn":case "rw":case "sbp":case "twq":case "vai":case "yav":case "yue":case "zgh":case "ak":case "ln":case "mg":case "pa":case "ti":
        return n === Math.floor(n) && n >= 0 && n <= 1 ? Plural.One : Plural.Other;case "am":case "as":case "bn":case "fa":case "gu":case "hi":case "kn":case "mr":case "zu":
        return 0 === i || 1 === n ? Plural.One : Plural.Other;case "ar":
        return 0 === n ? Plural.Zero : 1 === n ? Plural.One : 2 === n ? Plural.Two : n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10 ? Plural.Few : n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99 ? Plural.Many : Plural.Other;case "ast":case "ca":case "de":case "en":case "et":case "fi":case "fy":case "gl":case "it":case "nl":case "sv":case "sw":case "ur":case "yi":
        return 1 === i && 0 === v ? Plural.One : Plural.Other;case "be":
        return n % 10 === 1 && n % 100 !== 11 ? Plural.One : n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14) ? Plural.Few : n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14 ? Plural.Many : Plural.Other;case "br":
        return n % 10 === 1 && n % 100 !== 11 && n % 100 !== 71 && n % 100 !== 91 ? Plural.One : n % 10 === 2 && n % 100 !== 12 && n % 100 !== 72 && n % 100 !== 92 ? Plural.Two : n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99) ? Plural.Few : 0 !== n && n % 1e6 === 0 ? Plural.Many : Plural.Other;case "bs":case "hr":case "sr":
        return 0 === v && i % 10 === 1 && i % 100 !== 11 || f % 10 === 1 && f % 100 !== 11 ? Plural.One : 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14) ? Plural.Few : Plural.Other;case "cs":case "sk":
        return 1 === i && 0 === v ? Plural.One : i === Math.floor(i) && i >= 2 && i <= 4 && 0 === v ? Plural.Few : 0 !== v ? Plural.Many : Plural.Other;case "cy":
        return 0 === n ? Plural.Zero : 1 === n ? Plural.One : 2 === n ? Plural.Two : 3 === n ? Plural.Few : 6 === n ? Plural.Many : Plural.Other;case "da":
        return 1 === n || 0 !== t && (0 === i || 1 === i) ? Plural.One : Plural.Other;case "dsb":case "hsb":
        return 0 === v && i % 100 === 1 || f % 100 === 1 ? Plural.One : 0 === v && i % 100 === 2 || f % 100 === 2 ? Plural.Two : 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4 ? Plural.Few : Plural.Other;case "ff":case "fr":case "hy":case "kab":
        return 0 === i || 1 === i ? Plural.One : Plural.Other;case "fil":
        return 0 === v && (1 === i || 2 === i || 3 === i) || 0 === v && i % 10 !== 4 && i % 10 !== 6 && i % 10 !== 9 || 0 !== v && f % 10 !== 4 && f % 10 !== 6 && f % 10 !== 9 ? Plural.One : Plural.Other;case "ga":
        return 1 === n ? Plural.One : 2 === n ? Plural.Two : n === Math.floor(n) && n >= 3 && n <= 6 ? Plural.Few : n === Math.floor(n) && n >= 7 && n <= 10 ? Plural.Many : Plural.Other;case "gd":
        return 1 === n || 11 === n ? Plural.One : 2 === n || 12 === n ? Plural.Two : n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19) ? Plural.Few : Plural.Other;case "gv":
        return 0 === v && i % 10 === 1 ? Plural.One : 0 === v && i % 10 === 2 ? Plural.Two : 0 !== v || i % 100 !== 0 && i % 100 !== 20 && i % 100 !== 40 && i % 100 !== 60 && i % 100 !== 80 ? 0 !== v ? Plural.Many : Plural.Other : Plural.Few;case "he":
        return 1 === i && 0 === v ? Plural.One : 2 === i && 0 === v ? Plural.Two : 0 !== v || n >= 0 && n <= 10 || n % 10 !== 0 ? Plural.Other : Plural.Many;case "is":
        return 0 === t && i % 10 === 1 && i % 100 !== 11 || 0 !== t ? Plural.One : Plural.Other;case "ksh":
        return 0 === n ? Plural.Zero : 1 === n ? Plural.One : Plural.Other;case "kw":case "naq":case "se":case "smn":
        return 1 === n ? Plural.One : 2 === n ? Plural.Two : Plural.Other;case "lag":
        return 0 === n ? Plural.Zero : 0 !== i && 1 !== i || 0 === n ? Plural.Other : Plural.One;case "lt":
        return n % 10 !== 1 || n % 100 >= 11 && n % 100 <= 19 ? n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19) ? Plural.Few : 0 !== f ? Plural.Many : Plural.Other : Plural.One;case "lv":case "prg":
        return n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || 2 === v && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19 ? Plural.Zero : n % 10 === 1 && n % 100 !== 11 || 2 === v && f % 10 === 1 && f % 100 !== 11 || 2 !== v && f % 10 === 1 ? Plural.One : Plural.Other;case "mk":
        return 0 === v && i % 10 === 1 || f % 10 === 1 ? Plural.One : Plural.Other;case "mt":
        return 1 === n ? Plural.One : 0 === n || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10 ? Plural.Few : n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ? Plural.Many : Plural.Other;case "pl":
        return 1 === i && 0 === v ? Plural.One : 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) ? Plural.Few : 0 === v && 1 !== i && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14 ? Plural.Many : Plural.Other;case "pt":
        return n === Math.floor(n) && n >= 0 && n <= 2 && 2 !== n ? Plural.One : Plural.Other;case "ro":
        return 1 === i && 0 === v ? Plural.One : 0 !== v || 0 === n || 1 !== n && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19 ? Plural.Few : Plural.Other;case "ru":case "uk":
        return 0 === v && i % 10 === 1 && i % 100 !== 11 ? Plural.One : 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) ? Plural.Few : 0 === v && i % 10 === 0 || 0 === v && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14 ? Plural.Many : Plural.Other;case "shi":
        return 0 === i || 1 === n ? Plural.One : n === Math.floor(n) && n >= 2 && n <= 10 ? Plural.Few : Plural.Other;case "si":
        return 0 === n || 1 === n || 0 === i && 1 === f ? Plural.One : Plural.Other;case "sl":
        return 0 === v && i % 100 === 1 ? Plural.One : 0 === v && i % 100 === 2 ? Plural.Two : 0 === v && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || 0 !== v ? Plural.Few : Plural.Other;case "tzm":
        return n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99 ? Plural.One : Plural.Other;default:
        return Plural.Other;}
  }function getTypeNameForDebugging(type) {
    return type.name || typeof type;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function invalidPipeArgumentError(type, value) {
    return Error("InvalidPipeArgument: '" + value + "' for pipe '" + _angular_core.ɵstringify(type) + "'");
  }function titleCaseWord(word) {
    return word ? word[0].toUpperCase() + word.substr(1).toLowerCase() : word;
  }function digitModifier(inner) {
    return function (date, locale) {
      var result = inner(date, locale);return 1 == result.length ? "0" + result : result;
    };
  }function hourClockExtractor(inner) {
    return function (date, locale) {
      return inner(date, locale).split(" ")[1];
    };
  }function hourExtractor(inner) {
    return function (date, locale) {
      return inner(date, locale).split(" ")[0];
    };
  }function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, "");
  }function timeZoneGetter(timezone) {
    var options = { hour: "2-digit", hour12: !1, timeZoneName: timezone };return function (date, locale) {
      var result = intlDateFormat(date, locale, options);return result ? result.substring(3) : "";
    };
  }function hour12Modify(options, value) {
    return options.hour12 = value, options;
  }function digitCondition(prop, len) {
    var result = {};return result[prop] = 2 === len ? "2-digit" : "numeric", result;
  }function nameCondition(prop, len) {
    var result = {};return len < 4 ? result[prop] = len > 1 ? "short" : "narrow" : result[prop] = "long", result;
  }function combine(options) {
    return Object.assign.apply(Object, [{}].concat(options));
  }function datePartGetterFactory(ret) {
    return function (date, locale) {
      return intlDateFormat(date, locale, ret);
    };
  }function dateFormatter(format, date, locale) {
    var fn = PATTERN_ALIASES[format];if (fn) return fn(date, locale);var cacheKey = format,
        parts = DATE_FORMATTER_CACHE.get(cacheKey);if (!parts) {
      parts = [];var match = void 0;DATE_FORMATS_SPLIT.exec(format);for (var _format = format; _format;) match = DATE_FORMATS_SPLIT.exec(_format), match ? (parts = parts.concat(match.slice(1)), _format = parts.pop()) : (parts.push(_format), _format = null);DATE_FORMATTER_CACHE.set(cacheKey, parts);
    }return parts.reduce(function (text, part) {
      var fn = DATE_FORMATS[part];return text + (fn ? fn(date, locale) : partToTime(part));
    }, "");
  }function partToTime(part) {
    return "''" === part ? "'" : part.replace(/(^'|'$)/g, "").replace(/''/g, "'");
  }function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (void 0 === currency && (currency = null), void 0 === currencyAsSymbol && (currencyAsSymbol = !1), null == value) return null;if (value = "string" == typeof value && isNumeric(value) ? +value : value, "number" != typeof value) throw invalidPipeArgumentError(pipe, value);var minInt = void 0,
        minFraction = void 0,
        maxFraction = void 0;if (style !== NumberFormatStyle.Currency && (minInt = 1, minFraction = 0, maxFraction = 3), digits) {
      var parts = digits.match(_NUMBER_FORMAT_REGEXP);if (null === parts) throw new Error(digits + " is not a valid digit info for number pipes");null != parts[1] && (minInt = parseIntAutoRadix(parts[1])), null != parts[3] && (minFraction = parseIntAutoRadix(parts[3])), null != parts[5] && (maxFraction = parseIntAutoRadix(parts[5]));
    }return NumberFormatter.format(value, locale, style, { minimumIntegerDigits: minInt, minimumFractionDigits: minFraction, maximumFractionDigits: maxFraction, currency: currency, currencyAsSymbol: currencyAsSymbol });
  }function parseIntAutoRadix(text) {
    var result = parseInt(text);if (isNaN(result)) throw new Error("Invalid integer literal when parsing " + text);return result;
  }function isNumeric(value) {
    return !isNaN(value - parseFloat(value));
  }function isBlank(obj) {
    return null == obj || "" === obj;
  }function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }function isoStringToDate(match) {
    var date = new Date(0),
        tzHour = 0,
        tzMin = 0,
        dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
        timeSetter = match[8] ? date.setUTCHours : date.setHours;match[9] && (tzHour = toInt(match[9] + match[10]), tzMin = toInt(match[9] + match[11])), dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));var h = toInt(match[4] || "0") - tzHour,
        m = toInt(match[5] || "0") - tzMin,
        s = toInt(match[6] || "0"),
        ms = Math.round(1e3 * parseFloat("0." + (match[7] || 0)));return timeSetter.call(date, h, m, s, ms), date;
  }function toInt(str) {
    return parseInt(str, 10);
  }function isPlatformBrowser(platformId) {
    return platformId === PLATFORM_BROWSER_ID;
  }function isPlatformServer(platformId) {
    return platformId === PLATFORM_SERVER_ID;
  }function isPlatformWorkerApp(platformId) {
    return platformId === PLATFORM_WORKER_APP_ID;
  }function isPlatformWorkerUi(platformId) {
    return platformId === PLATFORM_WORKER_UI_ID;
  }var __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      PlatformLocation = function () {
    function PlatformLocation() {}return PlatformLocation.prototype.getBaseHrefFromDOM = function () {}, PlatformLocation.prototype.onPopState = function (fn) {}, PlatformLocation.prototype.onHashChange = function (fn) {}, PlatformLocation.prototype.pathname = function () {}, PlatformLocation.prototype.search = function () {}, PlatformLocation.prototype.hash = function () {}, PlatformLocation.prototype.replaceState = function (state, title, url) {}, PlatformLocation.prototype.pushState = function (state, title, url) {}, PlatformLocation.prototype.forward = function () {}, PlatformLocation.prototype.back = function () {}, PlatformLocation;
  }(),
      LOCATION_INITIALIZED = new _angular_core.InjectionToken("Location Initialized"),
      LocationStrategy = function () {
    function LocationStrategy() {}return LocationStrategy.prototype.path = function (includeHash) {}, LocationStrategy.prototype.prepareExternalUrl = function (internal) {}, LocationStrategy.prototype.pushState = function (state, title, url, queryParams) {}, LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {}, LocationStrategy.prototype.forward = function () {}, LocationStrategy.prototype.back = function () {}, LocationStrategy.prototype.onPopState = function (fn) {}, LocationStrategy.prototype.getBaseHref = function () {}, LocationStrategy;
  }(),
      APP_BASE_HREF = new _angular_core.InjectionToken("appBaseHref"),
      Location = function () {
    function Location(platformStrategy) {
      var _this = this;this._subject = new _angular_core.EventEmitter(), this._platformStrategy = platformStrategy;var browserBaseHref = this._platformStrategy.getBaseHref();this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref)), this._platformStrategy.onPopState(function (ev) {
        _this._subject.emit({ url: _this.path(!0), pop: !0, type: ev.type });
      });
    }return Location.prototype.path = function (includeHash) {
      return void 0 === includeHash && (includeHash = !1), this.normalize(this._platformStrategy.path(includeHash));
    }, Location.prototype.isCurrentPathEqualTo = function (path, query) {
      return void 0 === query && (query = ""), this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    }, Location.prototype.normalize = function (url) {
      return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    }, Location.prototype.prepareExternalUrl = function (url) {
      return url && "/" !== url[0] && (url = "/" + url), this._platformStrategy.prepareExternalUrl(url);
    }, Location.prototype.go = function (path, query) {
      void 0 === query && (query = ""), this._platformStrategy.pushState(null, "", path, query);
    }, Location.prototype.replaceState = function (path, query) {
      void 0 === query && (query = ""), this._platformStrategy.replaceState(null, "", path, query);
    }, Location.prototype.forward = function () {
      this._platformStrategy.forward();
    }, Location.prototype.back = function () {
      this._platformStrategy.back();
    }, Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
      return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
    }, Location.normalizeQueryParams = function (params) {
      return params && "?" !== params[0] ? "?" + params : params;
    }, Location.joinWithSlash = function (start, end) {
      if (0 == start.length) return end;if (0 == end.length) return start;var slashes = 0;return start.endsWith("/") && slashes++, end.startsWith("/") && slashes++, 2 == slashes ? start + end.substring(1) : 1 == slashes ? start + end : start + "/" + end;
    }, Location.stripTrailingSlash = function (url) {
      return url.replace(/\/$/, "");
    }, Location;
  }();Location.decorators = [{ type: _angular_core.Injectable }], Location.ctorParameters = function () {
    return [{ type: LocationStrategy }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var HashLocationStrategy = function (_super) {
    function HashLocationStrategy(_platformLocation, _baseHref) {
      var _this = _super.call(this) || this;return _this._platformLocation = _platformLocation, _this._baseHref = "", null != _baseHref && (_this._baseHref = _baseHref), _this;
    }return __extends(HashLocationStrategy, _super), HashLocationStrategy.prototype.onPopState = function (fn) {
      this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn);
    }, HashLocationStrategy.prototype.getBaseHref = function () {
      return this._baseHref;
    }, HashLocationStrategy.prototype.path = function (includeHash) {
      void 0 === includeHash && (includeHash = !1);var path = this._platformLocation.hash;return null == path && (path = "#"), path.length > 0 ? path.substring(1) : path;
    }, HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
      var url = Location.joinWithSlash(this._baseHref, internal);return url.length > 0 ? "#" + url : url;
    }, HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.pushState(state, title, url);
    }, HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.replaceState(state, title, url);
    }, HashLocationStrategy.prototype.forward = function () {
      this._platformLocation.forward();
    }, HashLocationStrategy.prototype.back = function () {
      this._platformLocation.back();
    }, HashLocationStrategy;
  }(LocationStrategy);HashLocationStrategy.decorators = [{ type: _angular_core.Injectable }], HashLocationStrategy.ctorParameters = function () {
    return [{ type: PlatformLocation }, { type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var PathLocationStrategy = function (_super) {
    function PathLocationStrategy(_platformLocation, href) {
      var _this = _super.call(this) || this;if (_this._platformLocation = _platformLocation, null == href && (href = _this._platformLocation.getBaseHrefFromDOM()), null == href) throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");return _this._baseHref = href, _this;
    }return __extends(PathLocationStrategy, _super), PathLocationStrategy.prototype.onPopState = function (fn) {
      this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn);
    }, PathLocationStrategy.prototype.getBaseHref = function () {
      return this._baseHref;
    }, PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
      return Location.joinWithSlash(this._baseHref, internal);
    }, PathLocationStrategy.prototype.path = function (includeHash) {
      void 0 === includeHash && (includeHash = !1);var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search),
          hash = this._platformLocation.hash;return hash && includeHash ? "" + pathname + hash : pathname;
    }, PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));this._platformLocation.pushState(state, title, externalUrl);
    }, PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));this._platformLocation.replaceState(state, title, externalUrl);
    }, PathLocationStrategy.prototype.forward = function () {
      this._platformLocation.forward();
    }, PathLocationStrategy.prototype.back = function () {
      this._platformLocation.back();
    }, PathLocationStrategy;
  }(LocationStrategy);PathLocationStrategy.decorators = [{ type: _angular_core.Injectable }], PathLocationStrategy.ctorParameters = function () {
    return [{ type: PlatformLocation }, { type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var NgLocalization = function () {
    function NgLocalization() {}return NgLocalization.prototype.getPluralCategory = function (value) {}, NgLocalization;
  }(),
      NgLocaleLocalization = function (_super) {
    function NgLocaleLocalization(locale) {
      var _this = _super.call(this) || this;return _this.locale = locale, _this;
    }return __extends(NgLocaleLocalization, _super), NgLocaleLocalization.prototype.getPluralCategory = function (value) {
      var plural = getPluralCase(this.locale, value);switch (plural) {case Plural.Zero:
          return "zero";case Plural.One:
          return "one";case Plural.Two:
          return "two";case Plural.Few:
          return "few";case Plural.Many:
          return "many";default:
          return "other";}
    }, NgLocaleLocalization;
  }(NgLocalization);NgLocaleLocalization.decorators = [{ type: _angular_core.Injectable }], NgLocaleLocalization.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
  };var Plural = {};Plural.Zero = 0, Plural.One = 1, Plural.Two = 2, Plural.Few = 3, Plural.Many = 4, Plural.Other = 5, Plural[Plural.Zero] = "Zero", Plural[Plural.One] = "One", Plural[Plural.Two] = "Two", Plural[Plural.Few] = "Few", Plural[Plural.Many] = "Many", Plural[Plural.Other] = "Other"; /**
                                                                                                                                                                                                                                                                                                        * @license
                                                                                                                                                                                                                                                                                                        * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                                                                                                                        *
                                                                                                                                                                                                                                                                                                        * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                                                                                                                        * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                                                                                                                        */
  var NgClass = function () {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
      this._iterableDiffers = _iterableDiffers, this._keyValueDiffers = _keyValueDiffers, this._ngEl = _ngEl, this._renderer = _renderer, this._initialClasses = [];
    }return Object.defineProperty(NgClass.prototype, "klass", { set: function (v) {
        this._applyInitialClasses(!0), this._initialClasses = "string" == typeof v ? v.split(/\s+/) : [], this._applyInitialClasses(!1), this._applyClasses(this._rawClass, !1);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgClass.prototype, "ngClass", { set: function (v) {
        this._cleanupClasses(this._rawClass), this._iterableDiffer = null, this._keyValueDiffer = null, this._rawClass = "string" == typeof v ? v.split(/\s+/) : v, this._rawClass && (_angular_core.ɵisListLikeIterable(this._rawClass) ? this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create() : this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create());
      }, enumerable: !0, configurable: !0 }), NgClass.prototype.ngDoCheck = function () {
      if (this._iterableDiffer) {
        var iterableChanges = this._iterableDiffer.diff(this._rawClass);iterableChanges && this._applyIterableChanges(iterableChanges);
      } else if (this._keyValueDiffer) {
        var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);keyValueChanges && this._applyKeyValueChanges(keyValueChanges);
      }
    }, NgClass.prototype._cleanupClasses = function (rawClassVal) {
      this._applyClasses(rawClassVal, !0), this._applyInitialClasses(!1);
    }, NgClass.prototype._applyKeyValueChanges = function (changes) {
      var _this = this;changes.forEachAddedItem(function (record) {
        return _this._toggleClass(record.key, record.currentValue);
      }), changes.forEachChangedItem(function (record) {
        return _this._toggleClass(record.key, record.currentValue);
      }), changes.forEachRemovedItem(function (record) {
        record.previousValue && _this._toggleClass(record.key, !1);
      });
    }, NgClass.prototype._applyIterableChanges = function (changes) {
      var _this = this;changes.forEachAddedItem(function (record) {
        if ("string" != typeof record.item) throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + _angular_core.ɵstringify(record.item));_this._toggleClass(record.item, !0);
      }), changes.forEachRemovedItem(function (record) {
        return _this._toggleClass(record.item, !1);
      });
    }, NgClass.prototype._applyInitialClasses = function (isCleanup) {
      var _this = this;this._initialClasses.forEach(function (klass) {
        return _this._toggleClass(klass, !isCleanup);
      });
    }, NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
      var _this = this;rawClassVal && (Array.isArray(rawClassVal) || rawClassVal instanceof Set ? rawClassVal.forEach(function (klass) {
        return _this._toggleClass(klass, !isCleanup);
      }) : Object.keys(rawClassVal).forEach(function (klass) {
        null != rawClassVal[klass] && _this._toggleClass(klass, !isCleanup);
      }));
    }, NgClass.prototype._toggleClass = function (klass, enabled) {
      var _this = this;klass = klass.trim(), klass && klass.split(/\s+/g).forEach(function (klass) {
        _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled);
      });
    }, NgClass;
  }();NgClass.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngClass]" }] }], NgClass.ctorParameters = function () {
    return [{ type: _angular_core.IterableDiffers }, { type: _angular_core.KeyValueDiffers }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }];
  }, NgClass.propDecorators = { klass: [{ type: _angular_core.Input, args: ["class"] }], ngClass: [{ type: _angular_core.Input }] }; /**
                                                                                                                                     * @license
                                                                                                                                     * Copyright Google Inc. All Rights Reserved.
                                                                                                                                     *
                                                                                                                                     * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                     * found in the LICENSE file at https://angular.io/license
                                                                                                                                     */
  var NgComponentOutlet = function () {
    function NgComponentOutlet(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef, this._componentRef = null, this._moduleRef = null;
    }return NgComponentOutlet.prototype.ngOnChanges = function (changes) {
      if (this._viewContainerRef.clear(), this._componentRef = null, this.ngComponentOutlet) {
        var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;if (changes.ngComponentOutletNgModuleFactory) if (this._moduleRef && this._moduleRef.destroy(), this.ngComponentOutletNgModuleFactory) {
          var parentModule = elInjector.get(_angular_core.NgModuleRef);this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
        } else this._moduleRef = null;var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(_angular_core.ComponentFactoryResolver),
            componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
      }
    }, NgComponentOutlet.prototype.ngOnDestroy = function () {
      this._moduleRef && this._moduleRef.destroy();
    }, NgComponentOutlet;
  }();NgComponentOutlet.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngComponentOutlet]" }] }], NgComponentOutlet.ctorParameters = function () {
    return [{ type: _angular_core.ViewContainerRef }];
  }, NgComponentOutlet.propDecorators = { ngComponentOutlet: [{ type: _angular_core.Input }], ngComponentOutletInjector: [{ type: _angular_core.Input }], ngComponentOutletContent: [{ type: _angular_core.Input }], ngComponentOutletNgModuleFactory: [{ type: _angular_core.Input }] }; /**
                                                                                                                                                                                                                                                                                          * @license
                                                                                                                                                                                                                                                                                          * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                                                                                                          *
                                                                                                                                                                                                                                                                                          * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                                                                                                          * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                                                                                                          */
  var NgForOfContext = function () {
    function NgForOfContext($implicit, ngForOf, index, count) {
      this.$implicit = $implicit, this.ngForOf = ngForOf, this.index = index, this.count = count;
    }return Object.defineProperty(NgForOfContext.prototype, "first", { get: function () {
        return 0 === this.index;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForOfContext.prototype, "last", { get: function () {
        return this.index === this.count - 1;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForOfContext.prototype, "even", { get: function () {
        return this.index % 2 === 0;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForOfContext.prototype, "odd", { get: function () {
        return !this.even;
      }, enumerable: !0, configurable: !0 }), NgForOfContext;
  }(),
      NgForOf = function () {
    function NgForOf(_viewContainer, _template, _differs) {
      this._viewContainer = _viewContainer, this._template = _template, this._differs = _differs, this._differ = null;
    }return Object.defineProperty(NgForOf.prototype, "ngForTrackBy", { get: function () {
        return this._trackByFn;
      }, set: function (fn) {
        _angular_core.isDevMode() && null != fn && "function" != typeof fn && console && console.warn && console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information."), this._trackByFn = fn;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForOf.prototype, "ngForTemplate", { set: function (value) {
        value && (this._template = value);
      }, enumerable: !0, configurable: !0 }), NgForOf.prototype.ngOnChanges = function (changes) {
      if ("ngForOf" in changes) {
        var value = changes.ngForOf.currentValue;if (!this._differ && value) try {
          this._differ = this._differs.find(value).create(this.ngForTrackBy);
        } catch (e) {
          throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
        }
      }
    }, NgForOf.prototype.ngDoCheck = function () {
      if (this._differ) {
        var changes = this._differ.diff(this.ngForOf);changes && this._applyChanges(changes);
      }
    }, NgForOf.prototype._applyChanges = function (changes) {
      var _this = this,
          insertTuples = [];changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
        if (null == item.previousIndex) {
          var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(null, _this.ngForOf, -1, -1), currentIndex),
              tuple = new RecordViewTuple(item, view);insertTuples.push(tuple);
        } else if (null == currentIndex) _this._viewContainer.remove(adjustedPreviousIndex);else {
          var view = _this._viewContainer.get(adjustedPreviousIndex);_this._viewContainer.move(view, currentIndex);var tuple = new RecordViewTuple(item, view);insertTuples.push(tuple);
        }
      });for (var i = 0; i < insertTuples.length; i++) this._perViewChange(insertTuples[i].view, insertTuples[i].record);for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
        var viewRef = this._viewContainer.get(i);viewRef.context.index = i, viewRef.context.count = ilen;
      }changes.forEachIdentityChange(function (record) {
        var viewRef = _this._viewContainer.get(record.currentIndex);viewRef.context.$implicit = record.item;
      });
    }, NgForOf.prototype._perViewChange = function (view, record) {
      view.context.$implicit = record.item;
    }, NgForOf;
  }();NgForOf.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngFor][ngForOf]" }] }], NgForOf.ctorParameters = function () {
    return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: _angular_core.IterableDiffers }];
  }, NgForOf.propDecorators = { ngForOf: [{ type: _angular_core.Input }], ngForTrackBy: [{ type: _angular_core.Input }], ngForTemplate: [{ type: _angular_core.Input }] };var RecordViewTuple = function () {
    function RecordViewTuple(record, view) {
      this.record = record, this.view = view;
    }return RecordViewTuple;
  }(),
      NgFor = NgForOf,
      NgIf = function () {
    function NgIf(_viewContainer, templateRef) {
      this._viewContainer = _viewContainer, this._context = new NgIfContext(), this._thenTemplateRef = null, this._elseTemplateRef = null, this._thenViewRef = null, this._elseViewRef = null, this._thenTemplateRef = templateRef;
    }return Object.defineProperty(NgIf.prototype, "ngIf", { set: function (condition) {
        this._context.$implicit = this._context.ngIf = condition, this._updateView();
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgIf.prototype, "ngIfThen", { set: function (templateRef) {
        this._thenTemplateRef = templateRef, this._thenViewRef = null, this._updateView();
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgIf.prototype, "ngIfElse", { set: function (templateRef) {
        this._elseTemplateRef = templateRef, this._elseViewRef = null, this._updateView();
      }, enumerable: !0, configurable: !0 }), NgIf.prototype._updateView = function () {
      this._context.$implicit ? this._thenViewRef || (this._viewContainer.clear(), this._elseViewRef = null, this._thenTemplateRef && (this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context))) : this._elseViewRef || (this._viewContainer.clear(), this._thenViewRef = null, this._elseTemplateRef && (this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context)));
    }, NgIf;
  }();NgIf.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngIf]" }] }], NgIf.ctorParameters = function () {
    return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }];
  }, NgIf.propDecorators = { ngIf: [{ type: _angular_core.Input }], ngIfThen: [{ type: _angular_core.Input }], ngIfElse: [{ type: _angular_core.Input }] };var NgIfContext = function () {
    function NgIfContext() {
      this.$implicit = null, this.ngIf = null;
    }return NgIfContext;
  }(),
      SwitchView = function () {
    function SwitchView(_viewContainerRef, _templateRef) {
      this._viewContainerRef = _viewContainerRef, this._templateRef = _templateRef, this._created = !1;
    }return SwitchView.prototype.create = function () {
      this._created = !0, this._viewContainerRef.createEmbeddedView(this._templateRef);
    }, SwitchView.prototype.destroy = function () {
      this._created = !1, this._viewContainerRef.clear();
    }, SwitchView.prototype.enforceState = function (created) {
      created && !this._created ? this.create() : !created && this._created && this.destroy();
    }, SwitchView;
  }(),
      NgSwitch = function () {
    function NgSwitch() {
      this._defaultUsed = !1, this._caseCount = 0, this._lastCaseCheckIndex = 0, this._lastCasesMatched = !1;
    }return Object.defineProperty(NgSwitch.prototype, "ngSwitch", { set: function (newValue) {
        this._ngSwitch = newValue, 0 === this._caseCount && this._updateDefaultCases(!0);
      }, enumerable: !0, configurable: !0 }), NgSwitch.prototype._addCase = function () {
      return this._caseCount++;
    }, NgSwitch.prototype._addDefault = function (view) {
      this._defaultViews || (this._defaultViews = []), this._defaultViews.push(view);
    }, NgSwitch.prototype._matchCase = function (value) {
      var matched = value == this._ngSwitch;return this._lastCasesMatched = this._lastCasesMatched || matched, this._lastCaseCheckIndex++, this._lastCaseCheckIndex === this._caseCount && (this._updateDefaultCases(!this._lastCasesMatched), this._lastCaseCheckIndex = 0, this._lastCasesMatched = !1), matched;
    }, NgSwitch.prototype._updateDefaultCases = function (useDefault) {
      if (this._defaultViews && useDefault !== this._defaultUsed) {
        this._defaultUsed = useDefault;for (var i = 0; i < this._defaultViews.length; i++) {
          var defaultView = this._defaultViews[i];defaultView.enforceState(useDefault);
        }
      }
    }, NgSwitch;
  }();NgSwitch.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngSwitch]" }] }], NgSwitch.ctorParameters = function () {
    return [];
  }, NgSwitch.propDecorators = { ngSwitch: [{ type: _angular_core.Input }] };var NgSwitchCase = function () {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
      this.ngSwitch = ngSwitch, ngSwitch._addCase(), this._view = new SwitchView(viewContainer, templateRef);
    }return NgSwitchCase.prototype.ngDoCheck = function () {
      this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
    }, NgSwitchCase;
  }();NgSwitchCase.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngSwitchCase]" }] }], NgSwitchCase.ctorParameters = function () {
    return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _angular_core.Host }] }];
  }, NgSwitchCase.propDecorators = { ngSwitchCase: [{ type: _angular_core.Input }] };var NgSwitchDefault = function () {
    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
      ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }return NgSwitchDefault;
  }();NgSwitchDefault.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngSwitchDefault]" }] }], NgSwitchDefault.ctorParameters = function () {
    return [{ type: _angular_core.ViewContainerRef }, { type: _angular_core.TemplateRef }, { type: NgSwitch, decorators: [{ type: _angular_core.Host }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var NgPlural = function () {
    function NgPlural(_localization) {
      this._localization = _localization, this._caseViews = {};
    }return Object.defineProperty(NgPlural.prototype, "ngPlural", { set: function (value) {
        this._switchValue = value, this._updateView();
      }, enumerable: !0, configurable: !0 }), NgPlural.prototype.addCase = function (value, switchView) {
      this._caseViews[value] = switchView;
    }, NgPlural.prototype._updateView = function () {
      this._clearViews();var cases = Object.keys(this._caseViews),
          key = getPluralCategory(this._switchValue, cases, this._localization);this._activateView(this._caseViews[key]);
    }, NgPlural.prototype._clearViews = function () {
      this._activeView && this._activeView.destroy();
    }, NgPlural.prototype._activateView = function (view) {
      view && (this._activeView = view, this._activeView.create());
    }, NgPlural;
  }();NgPlural.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngPlural]" }] }], NgPlural.ctorParameters = function () {
    return [{ type: NgLocalization }];
  }, NgPlural.propDecorators = { ngPlural: [{ type: _angular_core.Input }] };var NgPluralCase = function () {
    function NgPluralCase(value, template, viewContainer, ngPlural) {
      this.value = value;var isANumber = !isNaN(Number(value));ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
    }return NgPluralCase;
  }();NgPluralCase.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngPluralCase]" }] }], NgPluralCase.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Attribute, args: ["ngPluralCase"] }] }, { type: _angular_core.TemplateRef }, { type: _angular_core.ViewContainerRef }, { type: NgPlural, decorators: [{ type: _angular_core.Host }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var NgStyle = function () {
    function NgStyle(_differs, _ngEl, _renderer) {
      this._differs = _differs, this._ngEl = _ngEl, this._renderer = _renderer;
    }return Object.defineProperty(NgStyle.prototype, "ngStyle", { set: function (v) {
        this._ngStyle = v, !this._differ && v && (this._differ = this._differs.find(v).create());
      }, enumerable: !0, configurable: !0 }), NgStyle.prototype.ngDoCheck = function () {
      if (this._differ) {
        var changes = this._differ.diff(this._ngStyle);changes && this._applyChanges(changes);
      }
    }, NgStyle.prototype._applyChanges = function (changes) {
      var _this = this;changes.forEachRemovedItem(function (record) {
        return _this._setStyle(record.key, null);
      }), changes.forEachAddedItem(function (record) {
        return _this._setStyle(record.key, record.currentValue);
      }), changes.forEachChangedItem(function (record) {
        return _this._setStyle(record.key, record.currentValue);
      });
    }, NgStyle.prototype._setStyle = function (nameAndUnit, value) {
      var _a = nameAndUnit.split("."),
          name = _a[0],
          unit = _a[1];value = null != value && unit ? "" + value + unit : value, this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
    }, NgStyle;
  }();NgStyle.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngStyle]" }] }], NgStyle.ctorParameters = function () {
    return [{ type: _angular_core.KeyValueDiffers }, { type: _angular_core.ElementRef }, { type: _angular_core.Renderer }];
  }, NgStyle.propDecorators = { ngStyle: [{ type: _angular_core.Input }] }; /**
                                                                            * @license
                                                                            * Copyright Google Inc. All Rights Reserved.
                                                                            *
                                                                            * Use of this source code is governed by an MIT-style license that can be
                                                                            * found in the LICENSE file at https://angular.io/license
                                                                            */
  var NgTemplateOutlet = function () {
    function NgTemplateOutlet(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
    }return Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", { set: function (context) {
        this.ngTemplateOutletContext = context;
      }, enumerable: !0, configurable: !0 }), NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
      this._viewRef && this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef)), this.ngTemplateOutlet && (this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext));
    }, NgTemplateOutlet;
  }();NgTemplateOutlet.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngTemplateOutlet]" }] }], NgTemplateOutlet.ctorParameters = function () {
    return [{ type: _angular_core.ViewContainerRef }];
  }, NgTemplateOutlet.propDecorators = { ngTemplateOutletContext: [{ type: _angular_core.Input }], ngTemplateOutlet: [{ type: _angular_core.Input }], ngOutletContext: [{ type: _angular_core.Input }] }; /**
                                                                                                                                                                                                          * @license
                                                                                                                                                                                                          * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                          *
                                                                                                                                                                                                          * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                          * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                          */
  var COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase],
      ObservableStrategy = function () {
    function ObservableStrategy() {}return ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
      return async.subscribe({ next: updateLatestValue, error: function (e) {
          throw e;
        } });
    }, ObservableStrategy.prototype.dispose = function (subscription) {
      subscription.unsubscribe();
    }, ObservableStrategy.prototype.onDestroy = function (subscription) {
      subscription.unsubscribe();
    }, ObservableStrategy;
  }(),
      PromiseStrategy = function () {
    function PromiseStrategy() {}return PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
      return async.then(updateLatestValue, function (e) {
        throw e;
      });
    }, PromiseStrategy.prototype.dispose = function (subscription) {}, PromiseStrategy.prototype.onDestroy = function (subscription) {}, PromiseStrategy;
  }(),
      _promiseStrategy = new PromiseStrategy(),
      _observableStrategy = new ObservableStrategy(),
      AsyncPipe = function () {
    function AsyncPipe(_ref) {
      this._ref = _ref, this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null, this._strategy = null;
    }return AsyncPipe.prototype.ngOnDestroy = function () {
      this._subscription && this._dispose();
    }, AsyncPipe.prototype.transform = function (obj) {
      return this._obj ? obj !== this._obj ? (this._dispose(), this.transform(obj)) : this._latestValue === this._latestReturnedValue ? this._latestReturnedValue : (this._latestReturnedValue = this._latestValue, _angular_core.WrappedValue.wrap(this._latestValue)) : (obj && this._subscribe(obj), this._latestReturnedValue = this._latestValue, this._latestValue);
    }, AsyncPipe.prototype._subscribe = function (obj) {
      var _this = this;this._obj = obj, this._strategy = this._selectStrategy(obj), this._subscription = this._strategy.createSubscription(obj, function (value) {
        return _this._updateLatestValue(obj, value);
      });
    }, AsyncPipe.prototype._selectStrategy = function (obj) {
      if (_angular_core.ɵisPromise(obj)) return _promiseStrategy;if (_angular_core.ɵisObservable(obj)) return _observableStrategy;throw invalidPipeArgumentError(AsyncPipe, obj);
    }, AsyncPipe.prototype._dispose = function () {
      this._strategy.dispose(this._subscription), this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null;
    }, AsyncPipe.prototype._updateLatestValue = function (async, value) {
      async === this._obj && (this._latestValue = value, this._ref.markForCheck());
    }, AsyncPipe;
  }();AsyncPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "async", pure: !1 }] }], AsyncPipe.ctorParameters = function () {
    return [{ type: _angular_core.ChangeDetectorRef }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var LowerCasePipe = function () {
    function LowerCasePipe() {}return LowerCasePipe.prototype.transform = function (value) {
      if (!value) return value;if ("string" != typeof value) throw invalidPipeArgumentError(LowerCasePipe, value);return value.toLowerCase();
    }, LowerCasePipe;
  }();LowerCasePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "lowercase" }] }], LowerCasePipe.ctorParameters = function () {
    return [];
  };var TitleCasePipe = function () {
    function TitleCasePipe() {}return TitleCasePipe.prototype.transform = function (value) {
      if (!value) return value;if ("string" != typeof value) throw invalidPipeArgumentError(TitleCasePipe, value);return value.split(/\b/g).map(function (word) {
        return titleCaseWord(word);
      }).join("");
    }, TitleCasePipe;
  }();TitleCasePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "titlecase" }] }], TitleCasePipe.ctorParameters = function () {
    return [];
  };var UpperCasePipe = function () {
    function UpperCasePipe() {}return UpperCasePipe.prototype.transform = function (value) {
      if (!value) return value;if ("string" != typeof value) throw invalidPipeArgumentError(UpperCasePipe, value);return value.toUpperCase();
    }, UpperCasePipe;
  }();UpperCasePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "uppercase" }] }], UpperCasePipe.ctorParameters = function () {
    return [];
  };var NumberFormatStyle = {};NumberFormatStyle.Decimal = 0, NumberFormatStyle.Percent = 1, NumberFormatStyle.Currency = 2, NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal", NumberFormatStyle[NumberFormatStyle.Percent] = "Percent", NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";var NumberFormatter = function () {
    function NumberFormatter() {}return NumberFormatter.format = function (num, locale, style, _a) {
      var _b = void 0 === _a ? {} : _a,
          minimumIntegerDigits = _b.minimumIntegerDigits,
          minimumFractionDigits = _b.minimumFractionDigits,
          maximumFractionDigits = _b.maximumFractionDigits,
          currency = _b.currency,
          _c = _b.currencyAsSymbol,
          currencyAsSymbol = void 0 !== _c && _c,
          options = { minimumIntegerDigits: minimumIntegerDigits, minimumFractionDigits: minimumFractionDigits, maximumFractionDigits: maximumFractionDigits, style: NumberFormatStyle[style].toLowerCase() };return style == NumberFormatStyle.Currency && (options.currency = "string" == typeof currency ? currency : void 0, options.currencyDisplay = currencyAsSymbol ? "symbol" : "code"), new Intl.NumberFormat(locale, options).format(num);
    }, NumberFormatter;
  }(),
      DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/,
      PATTERN_ALIASES = { yMMMdjms: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1), digitCondition("second", 1)])), yMdjm: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1)])), yMMMMEEEEd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), nameCondition("weekday", 4), digitCondition("day", 1)])), yMMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), digitCondition("day", 1)])), yMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1)])), yMd: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1)])), jms: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("second", 1), digitCondition("minute", 1)])), jm: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("minute", 1)])) },
      DATE_FORMATS = { yyyy: datePartGetterFactory(digitCondition("year", 4)), yy: datePartGetterFactory(digitCondition("year", 2)), y: datePartGetterFactory(digitCondition("year", 1)), MMMM: datePartGetterFactory(nameCondition("month", 4)), MMM: datePartGetterFactory(nameCondition("month", 3)), MM: datePartGetterFactory(digitCondition("month", 2)), M: datePartGetterFactory(digitCondition("month", 1)), LLLL: datePartGetterFactory(nameCondition("month", 4)), L: datePartGetterFactory(nameCondition("month", 1)), dd: datePartGetterFactory(digitCondition("day", 2)), d: datePartGetterFactory(digitCondition("day", 1)), HH: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !1)))), H: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !1))), hh: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !0)))), h: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))), jj: datePartGetterFactory(digitCondition("hour", 2)), j: datePartGetterFactory(digitCondition("hour", 1)), mm: digitModifier(datePartGetterFactory(digitCondition("minute", 2))), m: datePartGetterFactory(digitCondition("minute", 1)), ss: digitModifier(datePartGetterFactory(digitCondition("second", 2))), s: datePartGetterFactory(digitCondition("second", 1)), sss: datePartGetterFactory(digitCondition("second", 3)), EEEE: datePartGetterFactory(nameCondition("weekday", 4)), EEE: datePartGetterFactory(nameCondition("weekday", 3)), EE: datePartGetterFactory(nameCondition("weekday", 2)), E: datePartGetterFactory(nameCondition("weekday", 1)), a: hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))), Z: timeZoneGetter("short"), z: timeZoneGetter("long"), ww: datePartGetterFactory({}), w: datePartGetterFactory({}), G: datePartGetterFactory(nameCondition("era", 1)), GG: datePartGetterFactory(nameCondition("era", 2)), GGG: datePartGetterFactory(nameCondition("era", 3)), GGGG: datePartGetterFactory(nameCondition("era", 4)) },
      DATE_FORMATTER_CACHE = new Map(),
      DateFormatter = function () {
    function DateFormatter() {}return DateFormatter.format = function (date, locale, pattern) {
      return dateFormatter(pattern, date, locale);
    }, DateFormatter;
  }(),
      _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/,
      DecimalPipe = function () {
    function DecimalPipe(_locale) {
      this._locale = _locale;
    }return DecimalPipe.prototype.transform = function (value, digits) {
      return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    }, DecimalPipe;
  }();DecimalPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "number" }] }], DecimalPipe.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
  };var PercentPipe = function () {
    function PercentPipe(_locale) {
      this._locale = _locale;
    }return PercentPipe.prototype.transform = function (value, digits) {
      return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    }, PercentPipe;
  }();PercentPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "percent" }] }], PercentPipe.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
  };var CurrencyPipe = function () {
    function CurrencyPipe(_locale) {
      this._locale = _locale;
    }return CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
      return void 0 === currencyCode && (currencyCode = "USD"), void 0 === symbolDisplay && (symbolDisplay = !1), formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    }, CurrencyPipe;
  }();CurrencyPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "currency" }] }], CurrencyPipe.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/,
      DatePipe = function () {
    function DatePipe(_locale) {
      this._locale = _locale;
    }return DatePipe.prototype.transform = function (value, pattern) {
      void 0 === pattern && (pattern = "mediumDate");var date;if (isBlank(value) || value !== value) return null;if ("string" == typeof value && (value = value.trim()), isDate(value)) date = value;else if (isNumeric(value)) date = new Date(parseFloat(value));else if ("string" == typeof value && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
        var _a = value.split("-").map(function (val) {
          return parseInt(val, 10);
        }),
            y = _a[0],
            m = _a[1],
            d = _a[2];date = new Date(y, m - 1, d);
      } else date = new Date(value);if (!isDate(date)) {
        var match = void 0;if ("string" != typeof value || !(match = value.match(ISO8601_DATE_REGEX))) throw invalidPipeArgumentError(DatePipe, value);date = isoStringToDate(match);
      }return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
    }, DatePipe;
  }();DatePipe._ALIASES = { medium: "yMMMdjms", short: "yMdjm", fullDate: "yMMMMEEEEd", longDate: "yMMMMd", mediumDate: "yMMMd", shortDate: "yMd", mediumTime: "jms", shortTime: "jm" }, DatePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "date", pure: !0 }] }], DatePipe.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var _INTERPOLATION_REGEXP = /#/g,
      I18nPluralPipe = function () {
    function I18nPluralPipe(_localization) {
      this._localization = _localization;
    }return I18nPluralPipe.prototype.transform = function (value, pluralMap) {
      if (null == value) return "";if ("object" != typeof pluralMap || null === pluralMap) throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    }, I18nPluralPipe;
  }();I18nPluralPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "i18nPlural", pure: !0 }] }], I18nPluralPipe.ctorParameters = function () {
    return [{ type: NgLocalization }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var I18nSelectPipe = function () {
    function I18nSelectPipe() {}return I18nSelectPipe.prototype.transform = function (value, mapping) {
      if (null == value) return "";if ("object" != typeof mapping || "string" != typeof value) throw invalidPipeArgumentError(I18nSelectPipe, mapping);return mapping.hasOwnProperty(value) ? mapping[value] : mapping.hasOwnProperty("other") ? mapping.other : "";
    }, I18nSelectPipe;
  }();I18nSelectPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "i18nSelect", pure: !0 }] }], I18nSelectPipe.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var JsonPipe = function () {
    function JsonPipe() {}return JsonPipe.prototype.transform = function (value) {
      return JSON.stringify(value, null, 2);
    }, JsonPipe;
  }();JsonPipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "json", pure: !1 }] }], JsonPipe.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var SlicePipe = function () {
    function SlicePipe() {}return SlicePipe.prototype.transform = function (value, start, end) {
      if (null == value) return value;if (!this.supports(value)) throw invalidPipeArgumentError(SlicePipe, value);return value.slice(start, end);
    }, SlicePipe.prototype.supports = function (obj) {
      return "string" == typeof obj || Array.isArray(obj);
    }, SlicePipe;
  }();SlicePipe.decorators = [{ type: _angular_core.Pipe, args: [{ name: "slice", pure: !1 }] }], SlicePipe.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe],
      CommonModule = function () {
    function CommonModule() {}return CommonModule;
  }();CommonModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: [COMMON_DIRECTIVES, COMMON_PIPES], exports: [COMMON_DIRECTIVES, COMMON_PIPES], providers: [{ provide: NgLocalization, useClass: NgLocaleLocalization }] }] }], CommonModule.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var PLATFORM_BROWSER_ID = "browser",
      PLATFORM_SERVER_ID = "server",
      PLATFORM_WORKER_APP_ID = "browserWorkerApp",
      PLATFORM_WORKER_UI_ID = "browserWorkerUi",
      VERSION = new _angular_core.Version("4.1.3");exports.NgLocaleLocalization = NgLocaleLocalization, exports.NgLocalization = NgLocalization, exports.CommonModule = CommonModule, exports.NgClass = NgClass, exports.NgFor = NgFor, exports.NgForOf = NgForOf, exports.NgForOfContext = NgForOfContext, exports.NgIf = NgIf, exports.NgIfContext = NgIfContext, exports.NgPlural = NgPlural, exports.NgPluralCase = NgPluralCase, exports.NgStyle = NgStyle, exports.NgSwitch = NgSwitch, exports.NgSwitchCase = NgSwitchCase, exports.NgSwitchDefault = NgSwitchDefault, exports.NgTemplateOutlet = NgTemplateOutlet, exports.NgComponentOutlet = NgComponentOutlet, exports.AsyncPipe = AsyncPipe, exports.DatePipe = DatePipe, exports.I18nPluralPipe = I18nPluralPipe, exports.I18nSelectPipe = I18nSelectPipe, exports.JsonPipe = JsonPipe, exports.LowerCasePipe = LowerCasePipe, exports.CurrencyPipe = CurrencyPipe, exports.DecimalPipe = DecimalPipe, exports.PercentPipe = PercentPipe, exports.SlicePipe = SlicePipe, exports.UpperCasePipe = UpperCasePipe, exports.TitleCasePipe = TitleCasePipe, exports.ɵPLATFORM_BROWSER_ID = PLATFORM_BROWSER_ID, exports.ɵPLATFORM_SERVER_ID = PLATFORM_SERVER_ID, exports.ɵPLATFORM_WORKER_APP_ID = PLATFORM_WORKER_APP_ID, exports.ɵPLATFORM_WORKER_UI_ID = PLATFORM_WORKER_UI_ID, exports.isPlatformBrowser = isPlatformBrowser, exports.isPlatformServer = isPlatformServer, exports.isPlatformWorkerApp = isPlatformWorkerApp, exports.isPlatformWorkerUi = isPlatformWorkerUi, exports.VERSION = VERSION, exports.PlatformLocation = PlatformLocation, exports.LOCATION_INITIALIZED = LOCATION_INITIALIZED, exports.LocationStrategy = LocationStrategy, exports.APP_BASE_HREF = APP_BASE_HREF, exports.HashLocationStrategy = HashLocationStrategy, exports.PathLocationStrategy = PathLocationStrategy, exports.Location = Location, exports.ɵa = COMMON_DIRECTIVES, exports.ɵb = COMMON_PIPES, Object.defineProperty(exports, "__esModule", { value: !0 });
});

/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/common"), require("@angular/core")) : "function" == "function" && true ? $__System.registerDynamic("f", ["12", "e"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("12"), $__require("e"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core);
}(this, function (exports, _angular_common, _angular_core) {
  "use strict";
  function getDOM() {
    return _DOM;
  }function setRootDomAdapter(adapter) {
    _DOM || (_DOM = adapter);
  }function getBaseElementHref() {
    return baseElement || (baseElement = document.querySelector("base")) ? baseElement.getAttribute("href") : null;
  }function relativePath(url) {
    return urlParsingNode || (urlParsingNode = document.createElement("a")), urlParsingNode.setAttribute("href", url), "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname;
  }function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);for (var _i = 0, _a = cookieStr.split(";"); _i < _a.length; _i++) {
      var cookie = _a[_i],
          eqIndex = cookie.indexOf("="),
          _b = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          cookieName = _b[0],
          cookieValue = _b[1];if (cookieName.trim() === name) return decodeURIComponent(cookieValue);
    }return null;
  }function setValueOnPath(global, path, value) {
    for (var parts = path.split("."), obj = global; parts.length > 1;) {
      var name = parts.shift();obj = obj.hasOwnProperty(name) && null != obj[name] ? obj[name] : obj[name] = {};
    }void 0 !== obj && null !== obj || (obj = {}), obj[parts.shift()] = value;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    * @return {?}
    */
  function supportsState() {
    return !!window.history.pushState;
  }function appInitializerFactory(transitionId, document, injector) {
    return function () {
      injector.get(_angular_core.ApplicationInitStatus).donePromise.then(function () {
        var dom = getDOM(),
            styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));styles.filter(function (el) {
          return dom.getAttribute(el, "ng-transition") === transitionId;
        }).forEach(function (el) {
          return dom.remove(el);
        });
      });
    };
  }function inspectNativeElement(element) {
    return _angular_core.getDebugNode(element);
  }function _createNgProbe(extraTokens, coreTokens) {
    var tokens = (extraTokens || []).concat(coreTokens || []);return getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement), getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, __assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || []))), function () {
      return inspectNativeElement;
    };
  }function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function (prev, t) {
      return prev[t.name] = t.token, prev;
    }, {});
  }function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }function flattenStyles(compId, styles, target) {
    for (var i = 0; i < styles.length; i++) {
      var style = styles[i];Array.isArray(style) ? flattenStyles(compId, style, target) : (style = style.replace(COMPONENT_REGEX, compId), target.push(style));
    }return target;
  }function decoratePreventDefault(eventHandler) {
    return function (event) {
      var allowDefaultBehavior = eventHandler(event);allowDefaultBehavior === !1 && (event.preventDefault(), event.returnValue = !1);
    };
  }function checkNoSyntheticProp(name, nameKind) {
    if (name.charCodeAt(0) === AT_CHARCODE) throw new Error("Found the synthetic " + nameKind + " " + name + '. Please include either "BrowserAnimationsModule" or "NoopAnimationsModule" in your application.');
  }function sanitizeUrl(url) {
    return url = String(url), url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN) ? url : (_angular_core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)"), "unsafe:" + url);
  }function sanitizeSrcset(srcset) {
    return srcset = String(srcset), srcset.split(",").map(function (srcset) {
      return sanitizeUrl(srcset.trim());
    }).join(", ");
  }function getInertElement() {
    if (inertElement) return inertElement;DOM = getDOM();var templateEl = DOM.createElement("template");if ("content" in templateEl) return templateEl;var doc = DOM.createHtmlDocument();if (inertElement = DOM.querySelector(doc, "body"), null == inertElement) {
      var html = DOM.createElement("html", doc);inertElement = DOM.createElement("body", doc), DOM.appendChild(html, inertElement), DOM.appendChild(doc, html);
    }return inertElement;
  }function tagSet(tags) {
    for (var res = {}, _i = 0, _a = tags.split(","); _i < _a.length; _i++) {
      var t = _a[_i];res[t] = !0;
    }return res;
  }function merge() {
    for (var sets = [], _i = 0; _i < arguments.length; _i++) sets[_i] = arguments[_i];for (var res = {}, _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
      var s = sets_1[_a];for (var v in s) s.hasOwnProperty(v) && (res[v] = !0);
    }return res;
  }function checkClobberedElement(node, nextNode) {
    if (nextNode && DOM.contains(node, nextNode)) throw new Error("Failed to sanitize html because the element is clobbered: " + DOM.getOuterHTML(node));return nextNode;
  }function encodeEntities(value) {
    return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function (match) {
      var hi = match.charCodeAt(0),
          low = match.charCodeAt(1);return "&#" + (1024 * (hi - 55296) + (low - 56320) + 65536) + ";";
    }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
      return "&#" + match.charCodeAt(0) + ";";
    }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function (_, attrName) {
      "xmlns:ns1" !== attrName && 0 !== attrName.indexOf("ns1:") || DOM.removeAttribute(el, attrName);
    });for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
      var n = _a[_i];DOM.isElementNode(n) && stripCustomNsAttrs(n);
    }
  }function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
    try {
      var containerEl = getInertElement(),
          unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "",
          mXSSAttempts = 5,
          parsedHtml = unsafeHtml;do {
        if (0 === mXSSAttempts) throw new Error("Failed to sanitize html because the input is unstable");mXSSAttempts--, unsafeHtml = parsedHtml, DOM.setInnerHTML(containerEl, unsafeHtml), defaultDoc.documentMode && stripCustomNsAttrs(containerEl), parsedHtml = DOM.getInnerHTML(containerEl);
      } while (unsafeHtml !== parsedHtml);for (var sanitizer = new SanitizingHtmlSerializer(), safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl), parent = DOM.getTemplateContent(containerEl) || containerEl, _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
        var child = _a[_i];DOM.removeChild(parent, child);
      }return _angular_core.isDevMode() && sanitizer.sanitizedSomething && DOM.log("WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss)."), safeHtml;
    } catch (e) {
      throw inertElement = null, e;
    }
  }function hasBalancedQuotes(value) {
    for (var outsideSingle = !0, outsideDouble = !0, i = 0; i < value.length; i++) {
      var c = value.charAt(i);"'" === c && outsideDouble ? outsideSingle = !outsideSingle : '"' === c && outsideSingle && (outsideDouble = !outsideDouble);
    }return outsideSingle && outsideDouble;
  }function sanitizeStyle(value) {
    if (value = String(value).trim(), !value) return "";var urlMatch = value.match(URL_RE);return urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value) ? value : (_angular_core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss)."), "unsafe");
  }function initDomAdapter() {
    BrowserDomAdapter.makeCurrent(), BrowserGetTestability.init();
  }function errorHandler() {
    return new _angular_core.ErrorHandler();
  }function _document() {
    return document;
  }function enableDebugTools(ref) {
    return getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref)), ref;
  }function disableDebugTools() {
    getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, null);
  }var nodeContains,
      __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      _DOM = null,
      DomAdapter = function () {
    function DomAdapter() {
      this.resourceLoaderType = null;
    }return DomAdapter.prototype.hasProperty = function (element, name) {}, DomAdapter.prototype.setProperty = function (el, name, value) {}, DomAdapter.prototype.getProperty = function (el, name) {}, DomAdapter.prototype.invoke = function (el, methodName, args) {}, DomAdapter.prototype.logError = function (error) {}, DomAdapter.prototype.log = function (error) {}, DomAdapter.prototype.logGroup = function (error) {}, DomAdapter.prototype.logGroupEnd = function () {}, Object.defineProperty(DomAdapter.prototype, "attrToPropMap", { get: function () {
        return this._attrToPropMap;
      }, set: function (value) {
        this._attrToPropMap = value;
      }, enumerable: !0, configurable: !0 }), DomAdapter.prototype.contains = function (nodeA, nodeB) {}, DomAdapter.prototype.parse = function (templateHtml) {}, DomAdapter.prototype.querySelector = function (el, selector) {}, DomAdapter.prototype.querySelectorAll = function (el, selector) {}, DomAdapter.prototype.on = function (el, evt, listener) {}, DomAdapter.prototype.onAndCancel = function (el, evt, listener) {}, DomAdapter.prototype.dispatchEvent = function (el, evt) {}, DomAdapter.prototype.createMouseEvent = function (eventType) {}, DomAdapter.prototype.createEvent = function (eventType) {}, DomAdapter.prototype.preventDefault = function (evt) {}, DomAdapter.prototype.isPrevented = function (evt) {}, DomAdapter.prototype.getInnerHTML = function (el) {}, DomAdapter.prototype.getTemplateContent = function (el) {}, DomAdapter.prototype.getOuterHTML = function (el) {}, DomAdapter.prototype.nodeName = function (node) {}, DomAdapter.prototype.nodeValue = function (node) {}, DomAdapter.prototype.type = function (node) {}, DomAdapter.prototype.content = function (node) {}, DomAdapter.prototype.firstChild = function (el) {}, DomAdapter.prototype.nextSibling = function (el) {}, DomAdapter.prototype.parentElement = function (el) {}, DomAdapter.prototype.childNodes = function (el) {}, DomAdapter.prototype.childNodesAsList = function (el) {}, DomAdapter.prototype.clearNodes = function (el) {}, DomAdapter.prototype.appendChild = function (el, node) {}, DomAdapter.prototype.removeChild = function (el, node) {}, DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) {}, DomAdapter.prototype.remove = function (el) {}, DomAdapter.prototype.insertBefore = function (parent, ref, node) {}, DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {}, DomAdapter.prototype.insertAfter = function (parent, el, node) {}, DomAdapter.prototype.setInnerHTML = function (el, value) {}, DomAdapter.prototype.getText = function (el) {}, DomAdapter.prototype.setText = function (el, value) {}, DomAdapter.prototype.getValue = function (el) {}, DomAdapter.prototype.setValue = function (el, value) {}, DomAdapter.prototype.getChecked = function (el) {}, DomAdapter.prototype.setChecked = function (el, value) {}, DomAdapter.prototype.createComment = function (text) {}, DomAdapter.prototype.createTemplate = function (html) {}, DomAdapter.prototype.createElement = function (tagName, doc) {}, DomAdapter.prototype.createElementNS = function (ns, tagName, doc) {}, DomAdapter.prototype.createTextNode = function (text, doc) {}, DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {}, DomAdapter.prototype.createStyleElement = function (css, doc) {}, DomAdapter.prototype.createShadowRoot = function (el) {}, DomAdapter.prototype.getShadowRoot = function (el) {}, DomAdapter.prototype.getHost = function (el) {}, DomAdapter.prototype.getDistributedNodes = function (el) {}, DomAdapter.prototype.clone = function (node) {}, DomAdapter.prototype.getElementsByClassName = function (element, name) {}, DomAdapter.prototype.getElementsByTagName = function (element, name) {}, DomAdapter.prototype.classList = function (element) {}, DomAdapter.prototype.addClass = function (element, className) {}, DomAdapter.prototype.removeClass = function (element, className) {}, DomAdapter.prototype.hasClass = function (element, className) {}, DomAdapter.prototype.setStyle = function (element, styleName, styleValue) {}, DomAdapter.prototype.removeStyle = function (element, styleName) {}, DomAdapter.prototype.getStyle = function (element, styleName) {}, DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {}, DomAdapter.prototype.tagName = function (element) {}, DomAdapter.prototype.attributeMap = function (element) {}, DomAdapter.prototype.hasAttribute = function (element, attribute) {}, DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {}, DomAdapter.prototype.getAttribute = function (element, attribute) {}, DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) {}, DomAdapter.prototype.setAttribute = function (element, name, value) {}, DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {}, DomAdapter.prototype.removeAttribute = function (element, attribute) {}, DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) {}, DomAdapter.prototype.templateAwareRoot = function (el) {}, DomAdapter.prototype.createHtmlDocument = function () {}, DomAdapter.prototype.getBoundingClientRect = function (el) {}, DomAdapter.prototype.getTitle = function (doc) {}, DomAdapter.prototype.setTitle = function (doc, newTitle) {}, DomAdapter.prototype.elementMatches = function (n, selector) {}, DomAdapter.prototype.isTemplateElement = function (el) {}, DomAdapter.prototype.isTextNode = function (node) {}, DomAdapter.prototype.isCommentNode = function (node) {}, DomAdapter.prototype.isElementNode = function (node) {}, DomAdapter.prototype.hasShadowRoot = function (node) {}, DomAdapter.prototype.isShadowRoot = function (node) {}, DomAdapter.prototype.importIntoDoc = function (node) {}, DomAdapter.prototype.adoptNode = function (node) {}, DomAdapter.prototype.getHref = function (element) {}, DomAdapter.prototype.getEventKey = function (event) {}, DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) {}, DomAdapter.prototype.supportsDOMEvents = function () {}, DomAdapter.prototype.supportsNativeShadowDOM = function () {}, DomAdapter.prototype.getGlobalEventTarget = function (doc, target) {}, DomAdapter.prototype.getHistory = function () {}, DomAdapter.prototype.getLocation = function () {}, DomAdapter.prototype.getBaseHref = function (doc) {}, DomAdapter.prototype.resetBaseElement = function () {}, DomAdapter.prototype.getUserAgent = function () {}, DomAdapter.prototype.setData = function (element, name, value) {}, DomAdapter.prototype.getComputedStyle = function (element) {}, DomAdapter.prototype.getData = function (element, name) {}, DomAdapter.prototype.setGlobalVar = function (name, value) {}, DomAdapter.prototype.supportsWebAnimation = function () {}, DomAdapter.prototype.performanceNow = function () {}, DomAdapter.prototype.getAnimationPrefix = function () {}, DomAdapter.prototype.getTransitionEnd = function () {}, DomAdapter.prototype.supportsAnimation = function () {}, DomAdapter.prototype.supportsCookies = function () {}, DomAdapter.prototype.getCookie = function (name) {}, DomAdapter.prototype.setCookie = function (name, value) {}, DomAdapter;
  }(),
      GenericBrowserDomAdapter = function (_super) {
    function GenericBrowserDomAdapter() {
      var _this = _super.call(this) || this;_this._animationPrefix = null, _this._transitionEnd = null;try {
        var element_1 = _this.createElement("div", document);if (null != _this.getStyle(element_1, "animationName")) _this._animationPrefix = "";else for (var domPrefixes = ["Webkit", "Moz", "O", "ms"], i = 0; i < domPrefixes.length; i++) if (null != _this.getStyle(element_1, domPrefixes[i] + "AnimationName")) {
          _this._animationPrefix = "-" + domPrefixes[i].toLowerCase() + "-";break;
        }var transEndEventNames_1 = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" };Object.keys(transEndEventNames_1).forEach(function (key) {
          null != _this.getStyle(element_1, key) && (_this._transitionEnd = transEndEventNames_1[key]);
        });
      } catch (e) {
        _this._animationPrefix = null, _this._transitionEnd = null;
      }return _this;
    }return __extends(GenericBrowserDomAdapter, _super), GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) {
      return el.getDistributedNodes();
    }, GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
      el.href = null == href ? baseUrl : baseUrl + "/../" + href;
    }, GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () {
      return !0;
    }, GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
      return "function" == typeof document.body.createShadowRoot;
    }, GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
      return this._animationPrefix ? this._animationPrefix : "";
    }, GenericBrowserDomAdapter.prototype.getTransitionEnd = function () {
      return this._transitionEnd ? this._transitionEnd : "";
    }, GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
      return null != this._animationPrefix && null != this._transitionEnd;
    }, GenericBrowserDomAdapter;
  }(DomAdapter),
      _attrToPropMap = { class: "className", innerHtml: "innerHTML", readonly: "readOnly", tabindex: "tabIndex" },
      DOM_KEY_LOCATION_NUMPAD = 3,
      _keyMap = { "\b": "Backspace", "\t": "Tab", "": "Delete", "": "Escape", Del: "Delete", Esc: "Escape", Left: "ArrowLeft", Right: "ArrowRight", Up: "ArrowUp", Down: "ArrowDown", Menu: "ContextMenu", Scroll: "ScrollLock", Win: "OS" },
      _chromeNumKeyPadMap = { A: "1", B: "2", C: "3", D: "4", E: "5", F: "6", G: "7", H: "8", I: "9", J: "*", K: "+", M: "-", N: ".", O: "/", "`": "0", "": "NumLock" };_angular_core.ɵglobal.Node && (nodeContains = _angular_core.ɵglobal.Node.prototype.contains || function (node) {
    return !!(16 & this.compareDocumentPosition(node));
  });var urlParsingNode,
      BrowserDomAdapter = function (_super) {
    function BrowserDomAdapter() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(BrowserDomAdapter, _super), BrowserDomAdapter.prototype.parse = function (templateHtml) {
      throw new Error("parse not implemented");
    }, BrowserDomAdapter.makeCurrent = function () {
      setRootDomAdapter(new BrowserDomAdapter());
    }, BrowserDomAdapter.prototype.hasProperty = function (element, name) {
      return name in element;
    }, BrowserDomAdapter.prototype.setProperty = function (el, name, value) {
      el[name] = value;
    }, BrowserDomAdapter.prototype.getProperty = function (el, name) {
      return el[name];
    }, BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
      el[methodName].apply(el, args);
    }, BrowserDomAdapter.prototype.logError = function (error) {
      window.console && (console.error ? console.error(error) : console.log(error));
    }, BrowserDomAdapter.prototype.log = function (error) {
      window.console && window.console.log && window.console.log(error);
    }, BrowserDomAdapter.prototype.logGroup = function (error) {
      window.console && window.console.group && window.console.group(error);
    }, BrowserDomAdapter.prototype.logGroupEnd = function () {
      window.console && window.console.groupEnd && window.console.groupEnd();
    }, Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", { get: function () {
        return _attrToPropMap;
      }, enumerable: !0, configurable: !0 }), BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) {
      return nodeContains.call(nodeA, nodeB);
    }, BrowserDomAdapter.prototype.querySelector = function (el, selector) {
      return el.querySelector(selector);
    }, BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) {
      return el.querySelectorAll(selector);
    }, BrowserDomAdapter.prototype.on = function (el, evt, listener) {
      el.addEventListener(evt, listener, !1);
    }, BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
      return el.addEventListener(evt, listener, !1), function () {
        el.removeEventListener(evt, listener, !1);
      };
    }, BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) {
      el.dispatchEvent(evt);
    }, BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
      var evt = document.createEvent("MouseEvent");return evt.initEvent(eventType, !0, !0), evt;
    }, BrowserDomAdapter.prototype.createEvent = function (eventType) {
      var evt = document.createEvent("Event");return evt.initEvent(eventType, !0, !0), evt;
    }, BrowserDomAdapter.prototype.preventDefault = function (evt) {
      evt.preventDefault(), evt.returnValue = !1;
    }, BrowserDomAdapter.prototype.isPrevented = function (evt) {
      return evt.defaultPrevented || null != evt.returnValue && !evt.returnValue;
    }, BrowserDomAdapter.prototype.getInnerHTML = function (el) {
      return el.innerHTML;
    }, BrowserDomAdapter.prototype.getTemplateContent = function (el) {
      return "content" in el && el instanceof HTMLTemplateElement ? el.content : null;
    }, BrowserDomAdapter.prototype.getOuterHTML = function (el) {
      return el.outerHTML;
    }, BrowserDomAdapter.prototype.nodeName = function (node) {
      return node.nodeName;
    }, BrowserDomAdapter.prototype.nodeValue = function (node) {
      return node.nodeValue;
    }, BrowserDomAdapter.prototype.type = function (node) {
      return node.type;
    }, BrowserDomAdapter.prototype.content = function (node) {
      return this.hasProperty(node, "content") ? node.content : node;
    }, BrowserDomAdapter.prototype.firstChild = function (el) {
      return el.firstChild;
    }, BrowserDomAdapter.prototype.nextSibling = function (el) {
      return el.nextSibling;
    }, BrowserDomAdapter.prototype.parentElement = function (el) {
      return el.parentNode;
    }, BrowserDomAdapter.prototype.childNodes = function (el) {
      return el.childNodes;
    }, BrowserDomAdapter.prototype.childNodesAsList = function (el) {
      for (var childNodes = el.childNodes, res = new Array(childNodes.length), i = 0; i < childNodes.length; i++) res[i] = childNodes[i];return res;
    }, BrowserDomAdapter.prototype.clearNodes = function (el) {
      for (; el.firstChild;) el.removeChild(el.firstChild);
    }, BrowserDomAdapter.prototype.appendChild = function (el, node) {
      el.appendChild(node);
    }, BrowserDomAdapter.prototype.removeChild = function (el, node) {
      el.removeChild(node);
    }, BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) {
      el.replaceChild(newChild, oldChild);
    }, BrowserDomAdapter.prototype.remove = function (node) {
      return node.parentNode && node.parentNode.removeChild(node), node;
    }, BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) {
      parent.insertBefore(node, ref);
    }, BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {
      nodes.forEach(function (n) {
        return parent.insertBefore(n, ref);
      });
    }, BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) {
      parent.insertBefore(node, ref.nextSibling);
    }, BrowserDomAdapter.prototype.setInnerHTML = function (el, value) {
      el.innerHTML = value;
    }, BrowserDomAdapter.prototype.getText = function (el) {
      return el.textContent;
    }, BrowserDomAdapter.prototype.setText = function (el, value) {
      el.textContent = value;
    }, BrowserDomAdapter.prototype.getValue = function (el) {
      return el.value;
    }, BrowserDomAdapter.prototype.setValue = function (el, value) {
      el.value = value;
    }, BrowserDomAdapter.prototype.getChecked = function (el) {
      return el.checked;
    }, BrowserDomAdapter.prototype.setChecked = function (el, value) {
      el.checked = value;
    }, BrowserDomAdapter.prototype.createComment = function (text) {
      return document.createComment(text);
    }, BrowserDomAdapter.prototype.createTemplate = function (html) {
      var t = document.createElement("template");return t.innerHTML = html, t;
    }, BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
      return void 0 === doc && (doc = document), doc.createElement(tagName);
    }, BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
      return void 0 === doc && (doc = document), doc.createElementNS(ns, tagName);
    }, BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
      return void 0 === doc && (doc = document), doc.createTextNode(text);
    }, BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
      void 0 === doc && (doc = document);var el = doc.createElement("SCRIPT");return el.setAttribute(attrName, attrValue), el;
    }, BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
      void 0 === doc && (doc = document);var style = doc.createElement("style");return this.appendChild(style, this.createTextNode(css)), style;
    }, BrowserDomAdapter.prototype.createShadowRoot = function (el) {
      return el.createShadowRoot();
    }, BrowserDomAdapter.prototype.getShadowRoot = function (el) {
      return el.shadowRoot;
    }, BrowserDomAdapter.prototype.getHost = function (el) {
      return el.host;
    }, BrowserDomAdapter.prototype.clone = function (node) {
      return node.cloneNode(!0);
    }, BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
      return element.getElementsByClassName(name);
    }, BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
      return element.getElementsByTagName(name);
    }, BrowserDomAdapter.prototype.classList = function (element) {
      return Array.prototype.slice.call(element.classList, 0);
    }, BrowserDomAdapter.prototype.addClass = function (element, className) {
      element.classList.add(className);
    }, BrowserDomAdapter.prototype.removeClass = function (element, className) {
      element.classList.remove(className);
    }, BrowserDomAdapter.prototype.hasClass = function (element, className) {
      return element.classList.contains(className);
    }, BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
      element.style[styleName] = styleValue;
    }, BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
      element.style[stylename] = "";
    }, BrowserDomAdapter.prototype.getStyle = function (element, stylename) {
      return element.style[stylename];
    }, BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
      var value = this.getStyle(element, styleName) || "";return styleValue ? value == styleValue : value.length > 0;
    }, BrowserDomAdapter.prototype.tagName = function (element) {
      return element.tagName;
    }, BrowserDomAdapter.prototype.attributeMap = function (element) {
      for (var res = new Map(), elAttrs = element.attributes, i = 0; i < elAttrs.length; i++) {
        var attrib = elAttrs[i];res.set(attrib.name, attrib.value);
      }return res;
    }, BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
      return element.hasAttribute(attribute);
    }, BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
      return element.hasAttributeNS(ns, attribute);
    }, BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
      return element.getAttribute(attribute);
    }, BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
      return element.getAttributeNS(ns, name);
    }, BrowserDomAdapter.prototype.setAttribute = function (element, name, value) {
      element.setAttribute(name, value);
    }, BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
      element.setAttributeNS(ns, name, value);
    }, BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) {
      element.removeAttribute(attribute);
    }, BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
      element.removeAttributeNS(ns, name);
    }, BrowserDomAdapter.prototype.templateAwareRoot = function (el) {
      return this.isTemplateElement(el) ? this.content(el) : el;
    }, BrowserDomAdapter.prototype.createHtmlDocument = function () {
      return document.implementation.createHTMLDocument("fakeTitle");
    }, BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
      try {
        return el.getBoundingClientRect();
      } catch (e) {
        return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
      }
    }, BrowserDomAdapter.prototype.getTitle = function (doc) {
      return document.title;
    }, BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) {
      document.title = newTitle || "";
    }, BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
      return n instanceof HTMLElement && (n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector));
    }, BrowserDomAdapter.prototype.isTemplateElement = function (el) {
      return el instanceof HTMLElement && "TEMPLATE" == el.nodeName;
    }, BrowserDomAdapter.prototype.isTextNode = function (node) {
      return node.nodeType === Node.TEXT_NODE;
    }, BrowserDomAdapter.prototype.isCommentNode = function (node) {
      return node.nodeType === Node.COMMENT_NODE;
    }, BrowserDomAdapter.prototype.isElementNode = function (node) {
      return node.nodeType === Node.ELEMENT_NODE;
    }, BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
      return null != node.shadowRoot && node instanceof HTMLElement;
    }, BrowserDomAdapter.prototype.isShadowRoot = function (node) {
      return node instanceof DocumentFragment;
    }, BrowserDomAdapter.prototype.importIntoDoc = function (node) {
      return document.importNode(this.templateAwareRoot(node), !0);
    }, BrowserDomAdapter.prototype.adoptNode = function (node) {
      return document.adoptNode(node);
    }, BrowserDomAdapter.prototype.getHref = function (el) {
      return el.href;
    }, BrowserDomAdapter.prototype.getEventKey = function (event) {
      var key = event.key;if (null == key) {
        if (key = event.keyIdentifier, null == key) return "Unidentified";key.startsWith("U+") && (key = String.fromCharCode(parseInt(key.substring(2), 16)), event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key) && (key = _chromeNumKeyPadMap[key]));
      }return _keyMap[key] || key;
    }, BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
      return "window" === target ? window : "document" === target ? document : "body" === target ? document.body : null;
    }, BrowserDomAdapter.prototype.getHistory = function () {
      return window.history;
    }, BrowserDomAdapter.prototype.getLocation = function () {
      return window.location;
    }, BrowserDomAdapter.prototype.getBaseHref = function (doc) {
      var href = getBaseElementHref();return null == href ? null : relativePath(href);
    }, BrowserDomAdapter.prototype.resetBaseElement = function () {
      baseElement = null;
    }, BrowserDomAdapter.prototype.getUserAgent = function () {
      return window.navigator.userAgent;
    }, BrowserDomAdapter.prototype.setData = function (element, name, value) {
      this.setAttribute(element, "data-" + name, value);
    }, BrowserDomAdapter.prototype.getData = function (element, name) {
      return this.getAttribute(element, "data-" + name);
    }, BrowserDomAdapter.prototype.getComputedStyle = function (element) {
      return getComputedStyle(element);
    }, BrowserDomAdapter.prototype.setGlobalVar = function (path, value) {
      setValueOnPath(_angular_core.ɵglobal, path, value);
    }, BrowserDomAdapter.prototype.supportsWebAnimation = function () {
      return "function" == typeof Element.prototype.animate;
    }, BrowserDomAdapter.prototype.performanceNow = function () {
      return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
    }, BrowserDomAdapter.prototype.supportsCookies = function () {
      return !0;
    }, BrowserDomAdapter.prototype.getCookie = function (name) {
      return parseCookieValue(document.cookie, name);
    }, BrowserDomAdapter.prototype.setCookie = function (name, value) {
      document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
    }, BrowserDomAdapter;
  }(GenericBrowserDomAdapter),
      baseElement = null,
      DOCUMENT = new _angular_core.InjectionToken("DocumentToken"),
      BrowserPlatformLocation = function (_super) {
    function BrowserPlatformLocation(_doc) {
      var _this = _super.call(this) || this;return _this._doc = _doc, _this._init(), _this;
    }return __extends(BrowserPlatformLocation, _super), BrowserPlatformLocation.prototype._init = function () {
      this._location = getDOM().getLocation(), this._history = getDOM().getHistory();
    }, Object.defineProperty(BrowserPlatformLocation.prototype, "location", { get: function () {
        return this._location;
      }, enumerable: !0, configurable: !0 }), BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () {
      return getDOM().getBaseHref(this._doc);
    }, BrowserPlatformLocation.prototype.onPopState = function (fn) {
      getDOM().getGlobalEventTarget(this._doc, "window").addEventListener("popstate", fn, !1);
    }, BrowserPlatformLocation.prototype.onHashChange = function (fn) {
      getDOM().getGlobalEventTarget(this._doc, "window").addEventListener("hashchange", fn, !1);
    }, Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", { get: function () {
        return this._location.pathname;
      }, set: function (newPath) {
        this._location.pathname = newPath;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(BrowserPlatformLocation.prototype, "search", { get: function () {
        return this._location.search;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(BrowserPlatformLocation.prototype, "hash", { get: function () {
        return this._location.hash;
      }, enumerable: !0, configurable: !0 }), BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
      supportsState() ? this._history.pushState(state, title, url) : this._location.hash = url;
    }, BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
      supportsState() ? this._history.replaceState(state, title, url) : this._location.hash = url;
    }, BrowserPlatformLocation.prototype.forward = function () {
      this._history.forward();
    }, BrowserPlatformLocation.prototype.back = function () {
      this._history.back();
    }, BrowserPlatformLocation;
  }(_angular_common.PlatformLocation);BrowserPlatformLocation.decorators = [{ type: _angular_core.Injectable }], BrowserPlatformLocation.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var Meta = function () {
    function Meta(_doc) {
      this._doc = _doc, this._dom = getDOM();
    }return Meta.prototype.addTag = function (tag, forceCreation) {
      return void 0 === forceCreation && (forceCreation = !1), tag ? this._getOrCreateElement(tag, forceCreation) : null;
    }, Meta.prototype.addTags = function (tags, forceCreation) {
      var _this = this;return void 0 === forceCreation && (forceCreation = !1), tags ? tags.reduce(function (result, tag) {
        return tag && result.push(_this._getOrCreateElement(tag, forceCreation)), result;
      }, []) : [];
    }, Meta.prototype.getTag = function (attrSelector) {
      return attrSelector ? this._dom.querySelector(this._doc, "meta[" + attrSelector + "]") : null;
    }, Meta.prototype.getTags = function (attrSelector) {
      if (!attrSelector) return [];var list = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");return list ? [].slice.call(list) : [];
    }, Meta.prototype.updateTag = function (tag, selector) {
      if (!tag) return null;selector = selector || this._parseSelector(tag);var meta = this.getTag(selector);return meta ? this._setMetaElementAttributes(tag, meta) : this._getOrCreateElement(tag, !0);
    }, Meta.prototype.removeTag = function (attrSelector) {
      this.removeTagElement(this.getTag(attrSelector));
    }, Meta.prototype.removeTagElement = function (meta) {
      meta && this._dom.remove(meta);
    }, Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
      if (void 0 === forceCreation && (forceCreation = !1), !forceCreation) {
        var selector = this._parseSelector(meta),
            elem = this.getTag(selector);if (elem && this._containsAttributes(meta, elem)) return elem;
      }var element = this._dom.createElement("meta");this._setMetaElementAttributes(meta, element);var head = this._dom.getElementsByTagName(this._doc, "head")[0];return this._dom.appendChild(head, element), element;
    }, Meta.prototype._setMetaElementAttributes = function (tag, el) {
      var _this = this;return Object.keys(tag).forEach(function (prop) {
        return _this._dom.setAttribute(el, prop, tag[prop]);
      }), el;
    }, Meta.prototype._parseSelector = function (tag) {
      var attr = tag.name ? "name" : "property";return attr + '="' + tag[attr] + '"';
    }, Meta.prototype._containsAttributes = function (tag, elem) {
      var _this = this;return Object.keys(tag).every(function (key) {
        return _this._dom.getAttribute(elem, key) === tag[key];
      });
    }, Meta;
  }();Meta.decorators = [{ type: _angular_core.Injectable }], Meta.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var TRANSITION_ID = new _angular_core.InjectionToken("TRANSITION_ID"),
      SERVER_TRANSITION_PROVIDERS = [{ provide: _angular_core.APP_INITIALIZER, useFactory: appInitializerFactory, deps: [TRANSITION_ID, DOCUMENT, _angular_core.Injector], multi: !0 }],
      BrowserGetTestability = function () {
    function BrowserGetTestability() {}return BrowserGetTestability.init = function () {
      _angular_core.setTestabilityGetter(new BrowserGetTestability());
    }, BrowserGetTestability.prototype.addToWindow = function (registry) {
      _angular_core.ɵglobal.getAngularTestability = function (elem, findInAncestors) {
        void 0 === findInAncestors && (findInAncestors = !0);var testability = registry.findTestabilityInTree(elem, findInAncestors);if (null == testability) throw new Error("Could not find testability for element.");return testability;
      }, _angular_core.ɵglobal.getAllAngularTestabilities = function () {
        return registry.getAllTestabilities();
      }, _angular_core.ɵglobal.getAllAngularRootElements = function () {
        return registry.getAllRootElements();
      };var whenAllStable = function (callback) {
        var testabilities = _angular_core.ɵglobal.getAllAngularTestabilities(),
            count = testabilities.length,
            didWork = !1,
            decrement = function (didWork_) {
          didWork = didWork || didWork_, count--, 0 == count && callback(didWork);
        };testabilities.forEach(function (testability) {
          testability.whenStable(decrement);
        });
      };_angular_core.ɵglobal.frameworkStabilizers || (_angular_core.ɵglobal.frameworkStabilizers = []), _angular_core.ɵglobal.frameworkStabilizers.push(whenAllStable);
    }, BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
      if (null == elem) return null;var t = registry.getTestability(elem);return null != t ? t : findInAncestors ? getDOM().isShadowRoot(elem) ? this.findTestabilityInTree(registry, getDOM().getHost(elem), !0) : this.findTestabilityInTree(registry, getDOM().parentElement(elem), !0) : null;
    }, BrowserGetTestability;
  }(),
      Title = function () {
    function Title(_doc) {
      this._doc = _doc;
    }return Title.prototype.getTitle = function () {
      return getDOM().getTitle(this._doc);
    }, Title.prototype.setTitle = function (newTitle) {
      getDOM().setTitle(this._doc, newTitle);
    }, Title;
  }();Title.decorators = [{ type: _angular_core.Injectable }], Title.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }return t;
  },
      CORE_TOKENS = { ApplicationRef: _angular_core.ApplicationRef, NgZone: _angular_core.NgZone },
      INSPECT_GLOBAL_NAME = "ng.probe",
      CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens",
      NgProbeToken$1 = function () {
    function NgProbeToken$1(name, token) {
      this.name = name, this.token = token;
    }return NgProbeToken$1;
  }(),
      ELEMENT_PROBE_PROVIDERS = [{ provide: _angular_core.APP_INITIALIZER, useFactory: _createNgProbe, deps: [[NgProbeToken$1, new _angular_core.Optional()], [_angular_core.NgProbeToken, new _angular_core.Optional()]], multi: !0 }],
      EVENT_MANAGER_PLUGINS = new _angular_core.InjectionToken("EventManagerPlugins"),
      EventManager = function () {
    function EventManager(plugins, _zone) {
      var _this = this;this._zone = _zone, this._eventNameToPlugin = new Map(), plugins.forEach(function (p) {
        return p.manager = _this;
      }), this._plugins = plugins.slice().reverse();
    }return EventManager.prototype.addEventListener = function (element, eventName, handler) {
      var plugin = this._findPluginFor(eventName);return plugin.addEventListener(element, eventName, handler);
    }, EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
      var plugin = this._findPluginFor(eventName);return plugin.addGlobalEventListener(target, eventName, handler);
    }, EventManager.prototype.getZone = function () {
      return this._zone;
    }, EventManager.prototype._findPluginFor = function (eventName) {
      var plugin = this._eventNameToPlugin.get(eventName);if (plugin) return plugin;for (var plugins = this._plugins, i = 0; i < plugins.length; i++) {
        var plugin_1 = plugins[i];if (plugin_1.supports(eventName)) return this._eventNameToPlugin.set(eventName, plugin_1), plugin_1;
      }throw new Error("No event manager plugin found for event " + eventName);
    }, EventManager;
  }();EventManager.decorators = [{ type: _angular_core.Injectable }], EventManager.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: _angular_core.Inject, args: [EVENT_MANAGER_PLUGINS] }] }, { type: _angular_core.NgZone }];
  };var EventManagerPlugin = function () {
    function EventManagerPlugin(_doc) {
      this._doc = _doc;
    }return EventManagerPlugin.prototype.supports = function (eventName) {}, EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {}, EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
      var target = getDOM().getGlobalEventTarget(this._doc, element);if (!target) throw new Error("Unsupported event target " + target + " for event " + eventName);return this.addEventListener(target, eventName, handler);
    }, EventManagerPlugin;
  }(),
      SharedStylesHost = function () {
    function SharedStylesHost() {
      this._stylesSet = new Set();
    }return SharedStylesHost.prototype.addStyles = function (styles) {
      var _this = this,
          additions = new Set();styles.forEach(function (style) {
        _this._stylesSet.has(style) || (_this._stylesSet.add(style), additions.add(style));
      }), this.onStylesAdded(additions);
    }, SharedStylesHost.prototype.onStylesAdded = function (additions) {}, SharedStylesHost.prototype.getAllStyles = function () {
      return Array.from(this._stylesSet);
    }, SharedStylesHost;
  }();SharedStylesHost.decorators = [{ type: _angular_core.Injectable }], SharedStylesHost.ctorParameters = function () {
    return [];
  };var DomSharedStylesHost = function (_super) {
    function DomSharedStylesHost(_doc) {
      var _this = _super.call(this) || this;return _this._doc = _doc, _this._hostNodes = new Set(), _this._styleNodes = new Set(), _this._hostNodes.add(_doc.head), _this;
    }return __extends(DomSharedStylesHost, _super), DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
      var _this = this;styles.forEach(function (style) {
        var styleEl = _this._doc.createElement("style");styleEl.textContent = style, _this._styleNodes.add(host.appendChild(styleEl));
      });
    }, DomSharedStylesHost.prototype.addHost = function (hostNode) {
      this._addStylesToHost(this._stylesSet, hostNode), this._hostNodes.add(hostNode);
    }, DomSharedStylesHost.prototype.removeHost = function (hostNode) {
      this._hostNodes.delete(hostNode);
    }, DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
      var _this = this;this._hostNodes.forEach(function (hostNode) {
        return _this._addStylesToHost(additions, hostNode);
      });
    }, DomSharedStylesHost.prototype.ngOnDestroy = function () {
      this._styleNodes.forEach(function (styleNode) {
        return getDOM().remove(styleNode);
      });
    }, DomSharedStylesHost;
  }(SharedStylesHost);DomSharedStylesHost.decorators = [{ type: _angular_core.Injectable }], DomSharedStylesHost.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var NAMESPACE_URIS = { svg: "http://www.w3.org/2000/svg", xhtml: "http://www.w3.org/1999/xhtml", xlink: "http://www.w3.org/1999/xlink", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/" },
      COMPONENT_REGEX = /%COMP%/g,
      COMPONENT_VARIABLE = "%COMP%",
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE,
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE,
      DomRendererFactory2 = function () {
    function DomRendererFactory2(eventManager, sharedStylesHost) {
      this.eventManager = eventManager, this.sharedStylesHost = sharedStylesHost, this.rendererByCompId = new Map(), this.defaultRenderer = new DefaultDomRenderer2(eventManager);
    }return DomRendererFactory2.prototype.createRenderer = function (element, type) {
      if (!element || !type) return this.defaultRenderer;switch (type.encapsulation) {case _angular_core.ViewEncapsulation.Emulated:
          var renderer = this.rendererByCompId.get(type.id);return renderer || (renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type), this.rendererByCompId.set(type.id, renderer)), renderer.applyToHost(element), renderer;case _angular_core.ViewEncapsulation.Native:
          return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);default:
          if (!this.rendererByCompId.has(type.id)) {
            var styles = flattenStyles(type.id, type.styles, []);this.sharedStylesHost.addStyles(styles), this.rendererByCompId.set(type.id, this.defaultRenderer);
          }return this.defaultRenderer;}
    }, DomRendererFactory2;
  }();DomRendererFactory2.decorators = [{ type: _angular_core.Injectable }], DomRendererFactory2.ctorParameters = function () {
    return [{ type: EventManager }, { type: DomSharedStylesHost }];
  };var DefaultDomRenderer2 = function () {
    function DefaultDomRenderer2(eventManager) {
      this.eventManager = eventManager, this.data = Object.create(null);
    }return DefaultDomRenderer2.prototype.destroy = function () {}, DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
      return namespace ? document.createElementNS(NAMESPACE_URIS[namespace], name) : document.createElement(name);
    }, DefaultDomRenderer2.prototype.createComment = function (value) {
      return document.createComment(value);
    }, DefaultDomRenderer2.prototype.createText = function (value) {
      return document.createTextNode(value);
    }, DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) {
      parent.appendChild(newChild);
    }, DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
      parent && parent.insertBefore(newChild, refChild);
    }, DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
      parent && parent.removeChild(oldChild);
    }, DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {
      var el = "string" == typeof selectorOrNode ? document.querySelector(selectorOrNode) : selectorOrNode;if (!el) throw new Error('The selector "' + selectorOrNode + '" did not match any elements');return el.textContent = "", el;
    }, DefaultDomRenderer2.prototype.parentNode = function (node) {
      return node.parentNode;
    }, DefaultDomRenderer2.prototype.nextSibling = function (node) {
      return node.nextSibling;
    }, DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
      if (namespace) {
        name = namespace + ":" + name;var namespaceUri = NAMESPACE_URIS[namespace];namespaceUri ? el.setAttributeNS(namespaceUri, name, value) : el.setAttribute(name, value);
      } else el.setAttribute(name, value);
    }, DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
      if (namespace) {
        var namespaceUri = NAMESPACE_URIS[namespace];namespaceUri ? el.removeAttributeNS(namespaceUri, name) : el.removeAttribute(namespace + ":" + name);
      } else el.removeAttribute(name);
    }, DefaultDomRenderer2.prototype.addClass = function (el, name) {
      el.classList.add(name);
    }, DefaultDomRenderer2.prototype.removeClass = function (el, name) {
      el.classList.remove(name);
    }, DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
      flags & _angular_core.RendererStyleFlags2.DashCase ? el.style.setProperty(style, value, flags & _angular_core.RendererStyleFlags2.Important ? "important" : "") : el.style[style] = value;
    }, DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
      flags & _angular_core.RendererStyleFlags2.DashCase ? el.style.removeProperty(style) : el.style[style] = "";
    }, DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
      checkNoSyntheticProp(name, "property"), el[name] = value;
    }, DefaultDomRenderer2.prototype.setValue = function (node, value) {
      node.nodeValue = value;
    }, DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
      return checkNoSyntheticProp(event, "listener"), "string" == typeof target ? this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)) : this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
    }, DefaultDomRenderer2;
  }(),
      AT_CHARCODE = "@".charCodeAt(0),
      EmulatedEncapsulationDomRenderer2 = function (_super) {
    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
      var _this = _super.call(this, eventManager) || this;_this.component = component;var styles = flattenStyles(component.id, component.styles, []);return sharedStylesHost.addStyles(styles), _this.contentAttr = shimContentAttribute(component.id), _this.hostAttr = shimHostAttribute(component.id), _this;
    }return __extends(EmulatedEncapsulationDomRenderer2, _super), EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) {
      _super.prototype.setAttribute.call(this, element, this.hostAttr, "");
    }, EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
      var el = _super.prototype.createElement.call(this, parent, name);return _super.prototype.setAttribute.call(this, el, this.contentAttr, ""), el;
    }, EmulatedEncapsulationDomRenderer2;
  }(DefaultDomRenderer2),
      ShadowDomRenderer = function (_super) {
    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
      var _this = _super.call(this, eventManager) || this;_this.sharedStylesHost = sharedStylesHost, _this.hostEl = hostEl, _this.component = component, _this.shadowRoot = hostEl.createShadowRoot(), _this.sharedStylesHost.addHost(_this.shadowRoot);for (var styles = flattenStyles(component.id, component.styles, []), i = 0; i < styles.length; i++) {
        var styleEl = document.createElement("style");styleEl.textContent = styles[i], _this.shadowRoot.appendChild(styleEl);
      }return _this;
    }return __extends(ShadowDomRenderer, _super), ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) {
      return node === this.hostEl ? this.shadowRoot : node;
    }, ShadowDomRenderer.prototype.destroy = function () {
      this.sharedStylesHost.removeHost(this.shadowRoot);
    }, ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
      return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
    }, ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
      return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
    }, ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
      return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
    }, ShadowDomRenderer.prototype.parentNode = function (node) {
      return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
    }, ShadowDomRenderer;
  }(DefaultDomRenderer2),
      DomEventsPlugin = function (_super) {
    function DomEventsPlugin(doc) {
      return _super.call(this, doc) || this;
    }return __extends(DomEventsPlugin, _super), DomEventsPlugin.prototype.supports = function (eventName) {
      return !0;
    }, DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
      return element.addEventListener(eventName, handler, !1), function () {
        return element.removeEventListener(eventName, handler, !1);
      };
    }, DomEventsPlugin;
  }(EventManagerPlugin);DomEventsPlugin.decorators = [{ type: _angular_core.Injectable }], DomEventsPlugin.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var EVENT_NAMES = { pan: !0, panstart: !0, panmove: !0, panend: !0, pancancel: !0, panleft: !0, panright: !0, panup: !0, pandown: !0, pinch: !0, pinchstart: !0, pinchmove: !0, pinchend: !0, pinchcancel: !0, pinchin: !0, pinchout: !0, press: !0, pressup: !0, rotate: !0, rotatestart: !0, rotatemove: !0, rotateend: !0, rotatecancel: !0, swipe: !0, swipeleft: !0, swiperight: !0, swipeup: !0, swipedown: !0, tap: !0 },
      HAMMER_GESTURE_CONFIG = new _angular_core.InjectionToken("HammerGestureConfig"),
      HammerGestureConfig = function () {
    function HammerGestureConfig() {
      this.events = [], this.overrides = {};
    }return HammerGestureConfig.prototype.buildHammer = function (element) {
      var mc = new Hammer(element);mc.get("pinch").set({ enable: !0 }), mc.get("rotate").set({ enable: !0 });for (var eventName in this.overrides) mc.get(eventName).set(this.overrides[eventName]);return mc;
    }, HammerGestureConfig;
  }();HammerGestureConfig.decorators = [{ type: _angular_core.Injectable }], HammerGestureConfig.ctorParameters = function () {
    return [];
  };var HammerGesturesPlugin = function (_super) {
    function HammerGesturesPlugin(doc, _config) {
      var _this = _super.call(this, doc) || this;return _this._config = _config, _this;
    }return __extends(HammerGesturesPlugin, _super), HammerGesturesPlugin.prototype.supports = function (eventName) {
      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) return !1;if (!window.Hammer) throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");return !0;
    }, HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
      var _this = this,
          zone = this.manager.getZone();return eventName = eventName.toLowerCase(), zone.runOutsideAngular(function () {
        var mc = _this._config.buildHammer(element),
            callback = function (eventObj) {
          zone.runGuarded(function () {
            handler(eventObj);
          });
        };return mc.on(eventName, callback), function () {
          return mc.off(eventName, callback);
        };
      });
    }, HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) {
      return this._config.events.indexOf(eventName) > -1;
    }, HammerGesturesPlugin;
  }(EventManagerPlugin);HammerGesturesPlugin.decorators = [{ type: _angular_core.Injectable }], HammerGesturesPlugin.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }, { type: HammerGestureConfig, decorators: [{ type: _angular_core.Inject, args: [HAMMER_GESTURE_CONFIG] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var MODIFIER_KEYS = ["alt", "control", "meta", "shift"],
      MODIFIER_KEY_GETTERS = { alt: function (event) {
      return event.altKey;
    }, control: function (event) {
      return event.ctrlKey;
    }, meta: function (event) {
      return event.metaKey;
    }, shift: function (event) {
      return event.shiftKey;
    } },
      KeyEventsPlugin = function (_super) {
    function KeyEventsPlugin(doc) {
      return _super.call(this, doc) || this;
    }return __extends(KeyEventsPlugin, _super), KeyEventsPlugin.prototype.supports = function (eventName) {
      return null != KeyEventsPlugin.parseEventName(eventName);
    }, KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
      var parsedEvent = KeyEventsPlugin.parseEventName(eventName),
          outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent.fullKey, handler, this.manager.getZone());return this.manager.getZone().runOutsideAngular(function () {
        return getDOM().onAndCancel(element, parsedEvent.domEventName, outsideHandler);
      });
    }, KeyEventsPlugin.parseEventName = function (eventName) {
      var parts = eventName.toLowerCase().split("."),
          domEventName = parts.shift();if (0 === parts.length || "keydown" !== domEventName && "keyup" !== domEventName) return null;var key = KeyEventsPlugin._normalizeKey(parts.pop()),
          fullKey = "";if (MODIFIER_KEYS.forEach(function (modifierName) {
        var index = parts.indexOf(modifierName);index > -1 && (parts.splice(index, 1), fullKey += modifierName + ".");
      }), fullKey += key, 0 != parts.length || 0 === key.length) return null;var result = {};return result.domEventName = domEventName, result.fullKey = fullKey, result;
    }, KeyEventsPlugin.getEventFullKey = function (event) {
      var fullKey = "",
          key = getDOM().getEventKey(event);return key = key.toLowerCase(), " " === key ? key = "space" : "." === key && (key = "dot"), MODIFIER_KEYS.forEach(function (modifierName) {
        if (modifierName != key) {
          var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];modifierGetter(event) && (fullKey += modifierName + ".");
        }
      }), fullKey += key;
    }, KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
      return function (event) {
        KeyEventsPlugin.getEventFullKey(event) === fullKey && zone.runGuarded(function () {
          return handler(event);
        });
      };
    }, KeyEventsPlugin._normalizeKey = function (keyName) {
      switch (keyName) {case "esc":
          return "escape";default:
          return keyName;}
    }, KeyEventsPlugin;
  }(EventManagerPlugin);KeyEventsPlugin.decorators = [{ type: _angular_core.Injectable }], KeyEventsPlugin.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi,
      DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i,
      inertElement = null,
      DOM = null,
      VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr"),
      OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
      OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt"),
      OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS),
      BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),
      INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),
      VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS),
      URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),
      SRCSET_ATTRS = tagSet("srcset"),
      HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),
      VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS),
      SanitizingHtmlSerializer = function () {
    function SanitizingHtmlSerializer() {
      this.sanitizedSomething = !1, this.buf = [];
    }return SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
      for (var current = el.firstChild; current;) if (DOM.isElementNode(current) ? this.startElement(current) : DOM.isTextNode(current) ? this.chars(DOM.nodeValue(current)) : this.sanitizedSomething = !0, DOM.firstChild(current)) current = DOM.firstChild(current);else for (; current;) {
        DOM.isElementNode(current) && this.endElement(current);var next = checkClobberedElement(current, DOM.nextSibling(current));if (next) {
          current = next;break;
        }current = checkClobberedElement(current, DOM.parentElement(current));
      }return this.buf.join("");
    }, SanitizingHtmlSerializer.prototype.startElement = function (element) {
      var _this = this,
          tagName = DOM.nodeName(element).toLowerCase();return VALID_ELEMENTS.hasOwnProperty(tagName) ? (this.buf.push("<"), this.buf.push(tagName), DOM.attributeMap(element).forEach(function (value, attrName) {
        var lower = attrName.toLowerCase();return VALID_ATTRS.hasOwnProperty(lower) ? (URI_ATTRS[lower] && (value = sanitizeUrl(value)), SRCSET_ATTRS[lower] && (value = sanitizeSrcset(value)), _this.buf.push(" "), _this.buf.push(attrName), _this.buf.push('="'), _this.buf.push(encodeEntities(value)), void _this.buf.push('"')) : void (_this.sanitizedSomething = !0);
      }), void this.buf.push(">")) : void (this.sanitizedSomething = !0);
    }, SanitizingHtmlSerializer.prototype.endElement = function (current) {
      var tagName = DOM.nodeName(current).toLowerCase();VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName) && (this.buf.push("</"), this.buf.push(tagName), this.buf.push(">"));
    }, SanitizingHtmlSerializer.prototype.chars = function (chars) {
      this.buf.push(encodeEntities(chars));
    }, SanitizingHtmlSerializer;
  }(),
      SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
      NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g,
      VALUES = "[-,.\"'%_!# a-zA-Z0-9]+",
      TRANSFORMATION_FNS = "(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?",
      COLOR_FNS = "(?:rgb|hsl)a?",
      GRADIENTS = "(?:repeating-)?(?:linear|radial)-gradient",
      CSS3_FNS = "(?:calc|attr)",
      FN_ARGS = "\\([-0-9.%, #a-zA-Z]+\\)",
      SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" + ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") + (FN_ARGS + ")$"), "g"),
      URL_RE = /^url\(([^)]+)\)$/,
      DomSanitizer = function () {
    function DomSanitizer() {}return DomSanitizer.prototype.sanitize = function (context, value) {}, DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) {}, DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) {}, DomSanitizer.prototype.bypassSecurityTrustScript = function (value) {}, DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) {}, DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) {}, DomSanitizer;
  }(),
      DomSanitizerImpl = function (_super) {
    function DomSanitizerImpl(_doc) {
      var _this = _super.call(this) || this;return _this._doc = _doc, _this;
    }return __extends(DomSanitizerImpl, _super), DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
      if (null == value) return null;switch (ctx) {case _angular_core.SecurityContext.NONE:
          return value;case _angular_core.SecurityContext.HTML:
          return value instanceof SafeHtmlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "HTML"), sanitizeHtml(this._doc, String(value)));case _angular_core.SecurityContext.STYLE:
          return value instanceof SafeStyleImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "Style"), sanitizeStyle(value));case _angular_core.SecurityContext.SCRIPT:
          if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;throw this.checkNotSafeValue(value, "Script"), new Error("unsafe value used in a script context");case _angular_core.SecurityContext.URL:
          return value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "URL"), sanitizeUrl(String(value)));case _angular_core.SecurityContext.RESOURCE_URL:
          if (value instanceof SafeResourceUrlImpl) return value.changingThisBreaksApplicationSecurity;throw this.checkNotSafeValue(value, "ResourceURL"), new Error("unsafe value used in a resource URL context (see http://g.co/ng/security#xss)");default:
          throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");}
    }, DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
      if (value instanceof SafeValueImpl) throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " (see http://g.co/ng/security#xss)");
    }, DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) {
      return new SafeHtmlImpl(value);
    }, DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) {
      return new SafeStyleImpl(value);
    }, DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) {
      return new SafeScriptImpl(value);
    }, DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) {
      return new SafeUrlImpl(value);
    }, DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
      return new SafeResourceUrlImpl(value);
    }, DomSanitizerImpl;
  }(DomSanitizer);DomSanitizerImpl.decorators = [{ type: _angular_core.Injectable }], DomSanitizerImpl.ctorParameters = function () {
    return [{ type: void 0, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT] }] }];
  };var SafeValueImpl = function () {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
      this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }return SafeValueImpl.prototype.getTypeName = function () {}, SafeValueImpl.prototype.toString = function () {
      return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)";
    }, SafeValueImpl;
  }(),
      SafeHtmlImpl = function (_super) {
    function SafeHtmlImpl() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(SafeHtmlImpl, _super), SafeHtmlImpl.prototype.getTypeName = function () {
      return "HTML";
    }, SafeHtmlImpl;
  }(SafeValueImpl),
      SafeStyleImpl = function (_super) {
    function SafeStyleImpl() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(SafeStyleImpl, _super), SafeStyleImpl.prototype.getTypeName = function () {
      return "Style";
    }, SafeStyleImpl;
  }(SafeValueImpl),
      SafeScriptImpl = function (_super) {
    function SafeScriptImpl() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(SafeScriptImpl, _super), SafeScriptImpl.prototype.getTypeName = function () {
      return "Script";
    }, SafeScriptImpl;
  }(SafeValueImpl),
      SafeUrlImpl = function (_super) {
    function SafeUrlImpl() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(SafeUrlImpl, _super), SafeUrlImpl.prototype.getTypeName = function () {
      return "URL";
    }, SafeUrlImpl;
  }(SafeValueImpl),
      SafeResourceUrlImpl = function (_super) {
    function SafeResourceUrlImpl() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(SafeResourceUrlImpl, _super), SafeResourceUrlImpl.prototype.getTypeName = function () {
      return "ResourceURL";
    }, SafeResourceUrlImpl;
  }(SafeValueImpl),
      INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{ provide: _angular_core.PLATFORM_ID, useValue: _angular_common.ɵPLATFORM_BROWSER_ID }, { provide: _angular_core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: !0 }, { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }, { provide: DOCUMENT, useFactory: _document, deps: [] }],
      BROWSER_SANITIZATION_PROVIDERS = [{ provide: _angular_core.Sanitizer, useExisting: DomSanitizer }, { provide: DomSanitizer, useClass: DomSanitizerImpl }],
      platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS),
      BrowserModule = function () {
    function BrowserModule(parentModule) {
      if (parentModule) throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
    }return BrowserModule.withServerTransition = function (params) {
      return { ngModule: BrowserModule, providers: [{ provide: _angular_core.APP_ID, useValue: params.appId }, { provide: TRANSITION_ID, useExisting: _angular_core.APP_ID }, SERVER_TRANSITION_PROVIDERS] };
    }, BrowserModule;
  }();BrowserModule.decorators = [{ type: _angular_core.NgModule, args: [{ providers: [BROWSER_SANITIZATION_PROVIDERS, { provide: _angular_core.ErrorHandler, useFactory: errorHandler, deps: [] }, { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: !0 }, { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: !0 }, { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: !0 }, { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig }, DomRendererFactory2, { provide: _angular_core.RendererFactory2, useExisting: DomRendererFactory2 }, { provide: SharedStylesHost, useExisting: DomSharedStylesHost }, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Meta, Title], exports: [_angular_common.CommonModule, _angular_core.ApplicationModule] }] }], BrowserModule.ctorParameters = function () {
    return [{ type: BrowserModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var win = "undefined" != typeof window && window || {},
      ChangeDetectionPerfRecord = function () {
    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
      this.msPerTick = msPerTick, this.numTicks = numTicks;
    }return ChangeDetectionPerfRecord;
  }(),
      AngularProfiler = function () {
    function AngularProfiler(ref) {
      this.appRef = ref.injector.get(_angular_core.ApplicationRef);
    }return AngularProfiler.prototype.timeChangeDetection = function (config) {
      var record = config && config.record,
          profileName = "Change Detection",
          isProfilerAvailable = null != win.console.profile;record && isProfilerAvailable && win.console.profile(profileName);for (var start = getDOM().performanceNow(), numTicks = 0; numTicks < 5 || getDOM().performanceNow() - start < 500;) this.appRef.tick(), numTicks++;var end = getDOM().performanceNow();record && isProfilerAvailable && win.console.profileEnd(profileName);var msPerTick = (end - start) / numTicks;return win.console.log("ran " + numTicks + " change detection cycles"), win.console.log(msPerTick.toFixed(2) + " ms per check"), new ChangeDetectionPerfRecord(msPerTick, numTicks);
    }, AngularProfiler;
  }(),
      PROFILER_GLOBAL_NAME = "ng.profiler",
      By = function () {
    function By() {}return By.all = function () {
      return function (debugElement) {
        return !0;
      };
    }, By.css = function (selector) {
      return function (debugElement) {
        return null != debugElement.nativeElement && getDOM().elementMatches(debugElement.nativeElement, selector);
      };
    }, By.directive = function (type) {
      return function (debugElement) {
        return debugElement.providerTokens.indexOf(type) !== -1;
      };
    }, By;
  }(),
      VERSION = new _angular_core.Version("4.1.3");exports.BrowserModule = BrowserModule, exports.platformBrowser = platformBrowser, exports.Meta = Meta, exports.Title = Title, exports.disableDebugTools = disableDebugTools, exports.enableDebugTools = enableDebugTools, exports.By = By, exports.NgProbeToken = NgProbeToken$1, exports.DOCUMENT = DOCUMENT, exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS, exports.EventManager = EventManager, exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG, exports.HammerGestureConfig = HammerGestureConfig, exports.DomSanitizer = DomSanitizer, exports.VERSION = VERSION, exports.ɵBROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS, exports.ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS = INTERNAL_BROWSER_PLATFORM_PROVIDERS, exports.ɵinitDomAdapter = initDomAdapter, exports.ɵBrowserDomAdapter = BrowserDomAdapter, exports.ɵsetValueOnPath = setValueOnPath, exports.ɵBrowserPlatformLocation = BrowserPlatformLocation, exports.ɵTRANSITION_ID = TRANSITION_ID, exports.ɵBrowserGetTestability = BrowserGetTestability, exports.ɵELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS, exports.ɵDomAdapter = DomAdapter, exports.ɵgetDOM = getDOM, exports.ɵsetRootDomAdapter = setRootDomAdapter, exports.ɵDomRendererFactory2 = DomRendererFactory2, exports.ɵNAMESPACE_URIS = NAMESPACE_URIS, exports.ɵflattenStyles = flattenStyles, exports.ɵshimContentAttribute = shimContentAttribute, exports.ɵshimHostAttribute = shimHostAttribute, exports.ɵDomEventsPlugin = DomEventsPlugin, exports.ɵHammerGesturesPlugin = HammerGesturesPlugin, exports.ɵKeyEventsPlugin = KeyEventsPlugin, exports.ɵDomSharedStylesHost = DomSharedStylesHost, exports.ɵSharedStylesHost = SharedStylesHost, exports.ɵb = _document, exports.ɵa = errorHandler, exports.ɵh = GenericBrowserDomAdapter, exports.ɵg = SERVER_TRANSITION_PROVIDERS, exports.ɵf = appInitializerFactory, exports.ɵc = _createNgProbe, exports.ɵd = EventManagerPlugin, exports.ɵe = DomSanitizerImpl, Object.defineProperty(exports, "__esModule", { value: !0 });
});

/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core"), require("rxjs/observable/forkJoin"), require("rxjs/observable/fromPromise"), require("rxjs/operator/map"), require("@angular/platform-browser")) : "function" == "function" && true ? $__System.registerDynamic("49", ["e", "7c", "3a", "38", "f"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("e"), $__require("7c"), $__require("3a"), $__require("38"), $__require("f"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.ng.platformBrowser);
}(this, function (exports, _angular_core, rxjs_observable_forkJoin, rxjs_observable_fromPromise, rxjs_operator_map, _angular_platformBrowser) {
  "use strict";
  function isEmptyInputValue(value) {
    return null == value || 0 === value.length;
  }function isPresent(o) {
    return null != o;
  }function toObservable(r) {
    var obs = _angular_core.ɵisPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;if (!_angular_core.ɵisObservable(obs)) throw new Error("Expected validator to return Promise or Observable.");return obs;
  }function _executeValidators(control, validators) {
    return validators.map(function (v) {
      return v(control);
    });
  }function _executeAsyncValidators(control, validators) {
    return validators.map(function (v) {
      return v(control);
    });
  }function _mergeErrors(arrayOfErrors) {
    var res = arrayOfErrors.reduce(function (res, errors) {
      return null != errors ? __assign({}, res, errors) : res;
    }, {});return 0 === Object.keys(res).length ? null : res;
  }function _isAndroid() {
    var userAgent = _angular_platformBrowser.ɵgetDOM() ? _angular_platformBrowser.ɵgetDOM().getUserAgent() : "";return (/android (\d+)/.test(userAgent.toLowerCase())
    );
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function normalizeValidator(validator) {
    return validator.validate ? function (c) {
      return validator.validate(c);
    } : validator;
  }function normalizeAsyncValidator(validator) {
    return validator.validate ? function (c) {
      return validator.validate(c);
    } : validator;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function unimplemented() {
    throw new Error("unimplemented");
  }function _buildValueString(id, value) {
    return null == id ? "" + value : (value && "object" == typeof value && (value = "Object"), (id + ": " + value).slice(0, 50));
  }function _extractId(valueString) {
    return valueString.split(":")[0];
  }function _buildValueString$1(id, value) {
    return null == id ? "" + value : ("string" == typeof value && (value = "'" + value + "'"), value && "object" == typeof value && (value = "Object"), (id + ": " + value).slice(0, 50));
  }function _extractId$1(valueString) {
    return valueString.split(":")[0];
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function controlPath(name, parent) {
    return parent.path.concat([name]);
  }function setUpControl(control, dir) {
    control || _throwError(dir, "Cannot find control with"), dir.valueAccessor || _throwError(dir, "No value accessor for form control with"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]), dir.valueAccessor.writeValue(control.value), dir.valueAccessor.registerOnChange(function (newValue) {
      dir.viewToModelUpdate(newValue), control.markAsDirty(), control.setValue(newValue, { emitModelToViewChange: !1 });
    }), dir.valueAccessor.registerOnTouched(function () {
      return control.markAsTouched();
    }), control.registerOnChange(function (newValue, emitModelEvent) {
      dir.valueAccessor.writeValue(newValue), emitModelEvent && dir.viewToModelUpdate(newValue);
    }), dir.valueAccessor.setDisabledState && control.registerOnDisabledChange(function (isDisabled) {
      dir.valueAccessor.setDisabledState(isDisabled);
    }), dir._rawValidators.forEach(function (validator) {
      validator.registerOnValidatorChange && validator.registerOnValidatorChange(function () {
        return control.updateValueAndValidity();
      });
    }), dir._rawAsyncValidators.forEach(function (validator) {
      validator.registerOnValidatorChange && validator.registerOnValidatorChange(function () {
        return control.updateValueAndValidity();
      });
    });
  }function cleanUpControl(control, dir) {
    dir.valueAccessor.registerOnChange(function () {
      return _noControlError(dir);
    }), dir.valueAccessor.registerOnTouched(function () {
      return _noControlError(dir);
    }), dir._rawValidators.forEach(function (validator) {
      validator.registerOnValidatorChange && validator.registerOnValidatorChange(null);
    }), dir._rawAsyncValidators.forEach(function (validator) {
      validator.registerOnValidatorChange && validator.registerOnValidatorChange(null);
    }), control && control._clearChangeFns();
  }function setUpFormContainer(control, dir) {
    null == control && _throwError(dir, "Cannot find control with"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
  }function _noControlError(dir) {
    return _throwError(dir, "There is no FormControl instance attached to form control element with");
  }function _throwError(dir, message) {
    var messageEnd;throw messageEnd = dir.path.length > 1 ? "path: '" + dir.path.join(" -> ") + "'" : dir.path[0] ? "name: '" + dir.path + "'" : "unspecified name attribute", new Error(message + " " + messageEnd);
  }function composeValidators(validators) {
    return null != validators ? Validators.compose(validators.map(normalizeValidator)) : null;
  }function composeAsyncValidators(validators) {
    return null != validators ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
  }function isPropertyUpdated(changes, viewModel) {
    if (!changes.hasOwnProperty("model")) return !1;var change = changes.model;return !!change.isFirstChange() || !_angular_core.ɵlooseIdentical(viewModel, change.currentValue);
  }function isBuiltInAccessor(valueAccessor) {
    return BUILTIN_ACCESSORS.some(function (a) {
      return valueAccessor.constructor === a;
    });
  }function selectValueAccessor(dir, valueAccessors) {
    if (!valueAccessors) return null;var defaultAccessor = void 0,
        builtinAccessor = void 0,
        customAccessor = void 0;return valueAccessors.forEach(function (v) {
      v.constructor === DefaultValueAccessor ? defaultAccessor = v : isBuiltInAccessor(v) ? (builtinAccessor && _throwError(dir, "More than one built-in value accessor matches form control with"), builtinAccessor = v) : (customAccessor && _throwError(dir, "More than one custom value accessor matches form control with"), customAccessor = v);
    }), customAccessor ? customAccessor : builtinAccessor ? builtinAccessor : defaultAccessor ? defaultAccessor : (_throwError(dir, "No valid value accessor for form control with"), null);
  }function _find(control, path, delimiter) {
    return null == path ? null : (path instanceof Array || (path = path.split(delimiter)), path instanceof Array && 0 === path.length ? null : path.reduce(function (v, name) {
      return v instanceof FormGroup ? v.controls[name] || null : v instanceof FormArray ? v.at(name) || null : null;
    }, control));
  }function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator || null;
  }function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
  }function remove(list, el) {
    var index = list.indexOf(el);index > -1 && list.splice(index, 1);
  }function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName || parent instanceof FormGroupDirective || parent instanceof FormArrayName);
  }var __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      AbstractControlDirective = function () {
    function AbstractControlDirective() {}return AbstractControlDirective.prototype.control = function () {}, Object.defineProperty(AbstractControlDirective.prototype, "value", { get: function () {
        return this.control ? this.control.value : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "valid", { get: function () {
        return this.control ? this.control.valid : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "invalid", { get: function () {
        return this.control ? this.control.invalid : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "pending", { get: function () {
        return this.control ? this.control.pending : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "errors", { get: function () {
        return this.control ? this.control.errors : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "pristine", { get: function () {
        return this.control ? this.control.pristine : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "dirty", { get: function () {
        return this.control ? this.control.dirty : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "touched", { get: function () {
        return this.control ? this.control.touched : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "untouched", { get: function () {
        return this.control ? this.control.untouched : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "disabled", { get: function () {
        return this.control ? this.control.disabled : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "enabled", { get: function () {
        return this.control ? this.control.enabled : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", { get: function () {
        return this.control ? this.control.statusChanges : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", { get: function () {
        return this.control ? this.control.valueChanges : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlDirective.prototype, "path", { get: function () {
        return null;
      }, enumerable: !0, configurable: !0 }), AbstractControlDirective.prototype.reset = function (value) {
      void 0 === value && (value = void 0), this.control && this.control.reset(value);
    }, AbstractControlDirective.prototype.hasError = function (errorCode, path) {
      return !!this.control && this.control.hasError(errorCode, path);
    }, AbstractControlDirective.prototype.getError = function (errorCode, path) {
      return this.control ? this.control.getError(errorCode, path) : null;
    }, AbstractControlDirective;
  }(),
      ControlContainer = function (_super) {
    function ControlContainer() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(ControlContainer, _super), Object.defineProperty(ControlContainer.prototype, "formDirective", { get: function () {
        return null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ControlContainer.prototype, "path", { get: function () {
        return null;
      }, enumerable: !0, configurable: !0 }), ControlContainer;
  }(AbstractControlDirective),
      __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    }return t;
  },
      NG_VALIDATORS = new _angular_core.InjectionToken("NgValidators"),
      NG_ASYNC_VALIDATORS = new _angular_core.InjectionToken("NgAsyncValidators"),
      EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,
      Validators = function () {
    function Validators() {}return Validators.required = function (control) {
      return isEmptyInputValue(control.value) ? { required: !0 } : null;
    }, Validators.requiredTrue = function (control) {
      return control.value === !0 ? null : { required: !0 };
    }, Validators.email = function (control) {
      return EMAIL_REGEXP.test(control.value) ? null : { email: !0 };
    }, Validators.minLength = function (minLength) {
      return function (control) {
        if (isEmptyInputValue(control.value)) return null;var length = control.value ? control.value.length : 0;return length < minLength ? { minlength: { requiredLength: minLength, actualLength: length } } : null;
      };
    }, Validators.maxLength = function (maxLength) {
      return function (control) {
        var length = control.value ? control.value.length : 0;return length > maxLength ? { maxlength: { requiredLength: maxLength, actualLength: length } } : null;
      };
    }, Validators.pattern = function (pattern) {
      if (!pattern) return Validators.nullValidator;var regex, regexStr;return "string" == typeof pattern ? (regexStr = "^" + pattern + "$", regex = new RegExp(regexStr)) : (regexStr = pattern.toString(), regex = pattern), function (control) {
        if (isEmptyInputValue(control.value)) return null;var value = control.value;return regex.test(value) ? null : { pattern: { requiredPattern: regexStr, actualValue: value } };
      };
    }, Validators.nullValidator = function (c) {
      return null;
    }, Validators.compose = function (validators) {
      if (!validators) return null;var presentValidators = validators.filter(isPresent);return 0 == presentValidators.length ? null : function (control) {
        return _mergeErrors(_executeValidators(control, presentValidators));
      };
    }, Validators.composeAsync = function (validators) {
      if (!validators) return null;var presentValidators = validators.filter(isPresent);return 0 == presentValidators.length ? null : function (control) {
        var observables = _executeAsyncValidators(control, presentValidators).map(toObservable);return rxjs_operator_map.map.call(rxjs_observable_forkJoin.forkJoin(observables), _mergeErrors);
      };
    }, Validators;
  }(),
      NG_VALUE_ACCESSOR = new _angular_core.InjectionToken("NgValueAccessor"),
      CHECKBOX_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () {
      return CheckboxControlValueAccessor;
    }), multi: !0 },
      CheckboxControlValueAccessor = function () {
    function CheckboxControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function (_) {}, this.onTouched = function () {};
    }return CheckboxControlValueAccessor.prototype.writeValue = function (value) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value);
    }, CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) {
      this.onChange = fn;
    }, CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) {
      this.onTouched = fn;
    }, CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
    }, CheckboxControlValueAccessor;
  }();CheckboxControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]", host: { "(change)": "onChange($event.target.checked)", "(blur)": "onTouched()" }, providers: [CHECKBOX_VALUE_ACCESSOR] }] }], CheckboxControlValueAccessor.ctorParameters = function () {
    return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var DEFAULT_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () {
      return DefaultValueAccessor;
    }), multi: !0 },
      COMPOSITION_BUFFER_MODE = new _angular_core.InjectionToken("CompositionEventMode"),
      DefaultValueAccessor = function () {
    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
      this._renderer = _renderer, this._elementRef = _elementRef, this._compositionMode = _compositionMode, this.onChange = function (_) {}, this.onTouched = function () {}, this._composing = !1, null == this._compositionMode && (this._compositionMode = !_isAndroid());
    }return DefaultValueAccessor.prototype.writeValue = function (value) {
      var normalizedValue = null == value ? "" : value;this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
    }, DefaultValueAccessor.prototype.registerOnChange = function (fn) {
      this.onChange = fn;
    }, DefaultValueAccessor.prototype.registerOnTouched = function (fn) {
      this.onTouched = fn;
    }, DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
    }, DefaultValueAccessor.prototype._handleInput = function (value) {
      (!this._compositionMode || this._compositionMode && !this._composing) && this.onChange(value);
    }, DefaultValueAccessor.prototype._compositionStart = function () {
      this._composing = !0;
    }, DefaultValueAccessor.prototype._compositionEnd = function (value) {
      this._composing = !1, this._compositionMode && this.onChange(value);
    }, DefaultValueAccessor;
  }();DefaultValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]", host: { "(input)": "_handleInput($event.target.value)", "(blur)": "onTouched()", "(compositionstart)": "_compositionStart()", "(compositionend)": "_compositionEnd($event.target.value)" }, providers: [DEFAULT_VALUE_ACCESSOR] }] }], DefaultValueAccessor.ctorParameters = function () {
    return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }, { type: void 0, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [COMPOSITION_BUFFER_MODE] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var NUMBER_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () {
      return NumberValueAccessor;
    }), multi: !0 },
      NumberValueAccessor = function () {
    function NumberValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function (_) {}, this.onTouched = function () {};
    }return NumberValueAccessor.prototype.writeValue = function (value) {
      var normalizedValue = null == value ? "" : value;this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
    }, NumberValueAccessor.prototype.registerOnChange = function (fn) {
      this.onChange = function (value) {
        fn("" == value ? null : parseFloat(value));
      };
    }, NumberValueAccessor.prototype.registerOnTouched = function (fn) {
      this.onTouched = fn;
    }, NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
    }, NumberValueAccessor;
  }();NumberValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]", host: { "(change)": "onChange($event.target.value)", "(input)": "onChange($event.target.value)", "(blur)": "onTouched()" }, providers: [NUMBER_VALUE_ACCESSOR] }] }], NumberValueAccessor.ctorParameters = function () {
    return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
  };var NgControl = function (_super) {
    function NgControl() {
      var _this = _super.apply(this, arguments) || this;return _this._parent = null, _this.name = null, _this.valueAccessor = null, _this._rawValidators = [], _this._rawAsyncValidators = [], _this;
    }return __extends(NgControl, _super), Object.defineProperty(NgControl.prototype, "validator", { get: function () {
        return unimplemented();
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgControl.prototype, "asyncValidator", { get: function () {
        return unimplemented();
      }, enumerable: !0, configurable: !0 }), NgControl.prototype.viewToModelUpdate = function (newValue) {}, NgControl;
  }(AbstractControlDirective),
      RADIO_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () {
      return RadioControlValueAccessor;
    }), multi: !0 },
      RadioControlRegistry = function () {
    function RadioControlRegistry() {
      this._accessors = [];
    }return RadioControlRegistry.prototype.add = function (control, accessor) {
      this._accessors.push([control, accessor]);
    }, RadioControlRegistry.prototype.remove = function (accessor) {
      for (var i = this._accessors.length - 1; i >= 0; --i) if (this._accessors[i][1] === accessor) return void this._accessors.splice(i, 1);
    }, RadioControlRegistry.prototype.select = function (accessor) {
      var _this = this;this._accessors.forEach(function (c) {
        _this._isSameGroup(c, accessor) && c[1] !== accessor && c[1].fireUncheck(accessor.value);
      });
    }, RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
      return !!controlPair[0].control && controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
    }, RadioControlRegistry;
  }();RadioControlRegistry.decorators = [{ type: _angular_core.Injectable }], RadioControlRegistry.ctorParameters = function () {
    return [];
  };var RadioControlValueAccessor = function () {
    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
      this._renderer = _renderer, this._elementRef = _elementRef, this._registry = _registry, this._injector = _injector, this.onChange = function () {}, this.onTouched = function () {};
    }return RadioControlValueAccessor.prototype.ngOnInit = function () {
      this._control = this._injector.get(NgControl), this._checkName(), this._registry.add(this._control, this);
    }, RadioControlValueAccessor.prototype.ngOnDestroy = function () {
      this._registry.remove(this);
    }, RadioControlValueAccessor.prototype.writeValue = function (value) {
      this._state = value === this.value, this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", this._state);
    }, RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
      var _this = this;this._fn = fn, this.onChange = function () {
        fn(_this.value), _this._registry.select(_this);
      };
    }, RadioControlValueAccessor.prototype.fireUncheck = function (value) {
      this.writeValue(value);
    }, RadioControlValueAccessor.prototype.registerOnTouched = function (fn) {
      this.onTouched = fn;
    }, RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
    }, RadioControlValueAccessor.prototype._checkName = function () {
      this.name && this.formControlName && this.name !== this.formControlName && this._throwNameError(), !this.name && this.formControlName && (this.name = this.formControlName);
    }, RadioControlValueAccessor.prototype._throwNameError = function () {
      throw new Error('\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type="radio" formControlName="food" name="food">\n    ');
    }, RadioControlValueAccessor;
  }();RadioControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", host: { "(change)": "onChange()", "(blur)": "onTouched()" }, providers: [RADIO_VALUE_ACCESSOR] }] }], RadioControlValueAccessor.ctorParameters = function () {
    return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }, { type: RadioControlRegistry }, { type: _angular_core.Injector }];
  }, RadioControlValueAccessor.propDecorators = { name: [{ type: _angular_core.Input }], formControlName: [{ type: _angular_core.Input }], value: [{ type: _angular_core.Input }] }; /**
                                                                                                                                                                                     * @license
                                                                                                                                                                                     * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                     *
                                                                                                                                                                                     * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                     * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                     */
  var RANGE_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () {
      return RangeValueAccessor;
    }), multi: !0 },
      RangeValueAccessor = function () {
    function RangeValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function (_) {}, this.onTouched = function () {};
    }return RangeValueAccessor.prototype.writeValue = function (value) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "value", parseFloat(value));
    }, RangeValueAccessor.prototype.registerOnChange = function (fn) {
      this.onChange = function (value) {
        fn("" == value ? null : parseFloat(value));
      };
    }, RangeValueAccessor.prototype.registerOnTouched = function (fn) {
      this.onTouched = fn;
    }, RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
    }, RangeValueAccessor;
  }();RangeValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]", host: { "(change)": "onChange($event.target.value)", "(input)": "onChange($event.target.value)", "(blur)": "onTouched()" }, providers: [RANGE_VALUE_ACCESSOR] }] }], RangeValueAccessor.ctorParameters = function () {
    return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var SELECT_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () {
      return SelectControlValueAccessor;
    }), multi: !0 },
      SelectControlValueAccessor = function () {
    function SelectControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer, this._elementRef = _elementRef, this._optionMap = new Map(), this._idCounter = 0, this.onChange = function (_) {}, this.onTouched = function () {}, this._compareWith = _angular_core.ɵlooseIdentical;
    }return Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", { set: function (fn) {
        if ("function" != typeof fn) throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));this._compareWith = fn;
      }, enumerable: !0, configurable: !0 }), SelectControlValueAccessor.prototype.writeValue = function (value) {
      this.value = value;var id = this._getOptionId(value);null == id && this._renderer.setElementProperty(this._elementRef.nativeElement, "selectedIndex", -1);var valueString = _buildValueString(id, value);this._renderer.setElementProperty(this._elementRef.nativeElement, "value", valueString);
    }, SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
      var _this = this;this.onChange = function (valueString) {
        _this.value = valueString, fn(_this._getOptionValue(valueString));
      };
    }, SelectControlValueAccessor.prototype.registerOnTouched = function (fn) {
      this.onTouched = fn;
    }, SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
    }, SelectControlValueAccessor.prototype._registerOption = function () {
      return (this._idCounter++).toString();
    }, SelectControlValueAccessor.prototype._getOptionId = function (value) {
      for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
        var id = _a[_i];if (this._compareWith(this._optionMap.get(id), value)) return id;
      }return null;
    }, SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
      var id = _extractId(valueString);return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
    }, SelectControlValueAccessor;
  }();SelectControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", host: { "(change)": "onChange($event.target.value)", "(blur)": "onTouched()" }, providers: [SELECT_VALUE_ACCESSOR] }] }], SelectControlValueAccessor.ctorParameters = function () {
    return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
  }, SelectControlValueAccessor.propDecorators = { compareWith: [{ type: _angular_core.Input }] };var NgSelectOption = function () {
    function NgSelectOption(_element, _renderer, _select) {
      this._element = _element, this._renderer = _renderer, this._select = _select, this._select && (this.id = this._select._registerOption());
    }return Object.defineProperty(NgSelectOption.prototype, "ngValue", { set: function (value) {
        null != this._select && (this._select._optionMap.set(this.id, value), this._setElementValue(_buildValueString(this.id, value)), this._select.writeValue(this._select.value));
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgSelectOption.prototype, "value", { set: function (value) {
        this._setElementValue(value), this._select && this._select.writeValue(this._select.value);
      }, enumerable: !0, configurable: !0 }), NgSelectOption.prototype._setElementValue = function (value) {
      this._renderer.setElementProperty(this._element.nativeElement, "value", value);
    }, NgSelectOption.prototype.ngOnDestroy = function () {
      this._select && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value));
    }, NgSelectOption;
  }();NgSelectOption.decorators = [{ type: _angular_core.Directive, args: [{ selector: "option" }] }], NgSelectOption.ctorParameters = function () {
    return [{ type: _angular_core.ElementRef }, { type: _angular_core.Renderer }, { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }] }];
  }, NgSelectOption.propDecorators = { ngValue: [{ type: _angular_core.Input, args: ["ngValue"] }], value: [{ type: _angular_core.Input, args: ["value"] }] }; /**
                                                                                                                                                               * @license
                                                                                                                                                               * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                               *
                                                                                                                                                               * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                               * found in the LICENSE file at https://angular.io/license
                                                                                                                                                               */
  var SELECT_MULTIPLE_VALUE_ACCESSOR = { provide: NG_VALUE_ACCESSOR, useExisting: _angular_core.forwardRef(function () {
      return SelectMultipleControlValueAccessor;
    }), multi: !0 },
      SelectMultipleControlValueAccessor = function () {
    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer, this._elementRef = _elementRef, this._optionMap = new Map(), this._idCounter = 0, this.onChange = function (_) {}, this.onTouched = function () {}, this._compareWith = _angular_core.ɵlooseIdentical;
    }return Object.defineProperty(SelectMultipleControlValueAccessor.prototype, "compareWith", { set: function (fn) {
        if ("function" != typeof fn) throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));this._compareWith = fn;
      }, enumerable: !0, configurable: !0 }), SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
      var _this = this;this.value = value;var optionSelectedStateSetter;if (Array.isArray(value)) {
        var ids_1 = value.map(function (v) {
          return _this._getOptionId(v);
        });optionSelectedStateSetter = function (opt, o) {
          opt._setSelected(ids_1.indexOf(o.toString()) > -1);
        };
      } else optionSelectedStateSetter = function (opt, o) {
        opt._setSelected(!1);
      };this._optionMap.forEach(optionSelectedStateSetter);
    }, SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
      var _this = this;this.onChange = function (_) {
        var selected = [];if (_.hasOwnProperty("selectedOptions")) for (var options = _.selectedOptions, i = 0; i < options.length; i++) {
          var opt = options.item(i),
              val = _this._getOptionValue(opt.value);selected.push(val);
        } else for (var options = _.options, i = 0; i < options.length; i++) {
          var opt = options.item(i);if (opt.selected) {
            var val = _this._getOptionValue(opt.value);selected.push(val);
          }
        }_this.value = selected, fn(selected);
      };
    }, SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) {
      this.onTouched = fn;
    }, SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, "disabled", isDisabled);
    }, SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
      var id = (this._idCounter++).toString();return this._optionMap.set(id, value), id;
    }, SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
      for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
        var id = _a[_i];if (this._compareWith(this._optionMap.get(id)._value, value)) return id;
      }return null;
    }, SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
      var id = _extractId$1(valueString);return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
    }, SelectMultipleControlValueAccessor;
  }();SelectMultipleControlValueAccessor.decorators = [{ type: _angular_core.Directive, args: [{ selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]", host: { "(change)": "onChange($event.target)", "(blur)": "onTouched()" }, providers: [SELECT_MULTIPLE_VALUE_ACCESSOR] }] }], SelectMultipleControlValueAccessor.ctorParameters = function () {
    return [{ type: _angular_core.Renderer }, { type: _angular_core.ElementRef }];
  }, SelectMultipleControlValueAccessor.propDecorators = { compareWith: [{ type: _angular_core.Input }] };var NgSelectMultipleOption = function () {
    function NgSelectMultipleOption(_element, _renderer, _select) {
      this._element = _element, this._renderer = _renderer, this._select = _select, this._select && (this.id = this._select._registerOption(this));
    }return Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", { set: function (value) {
        null != this._select && (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value));
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgSelectMultipleOption.prototype, "value", { set: function (value) {
        this._select ? (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value)) : this._setElementValue(value);
      }, enumerable: !0, configurable: !0 }), NgSelectMultipleOption.prototype._setElementValue = function (value) {
      this._renderer.setElementProperty(this._element.nativeElement, "value", value);
    }, NgSelectMultipleOption.prototype._setSelected = function (selected) {
      this._renderer.setElementProperty(this._element.nativeElement, "selected", selected);
    }, NgSelectMultipleOption.prototype.ngOnDestroy = function () {
      this._select && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value));
    }, NgSelectMultipleOption;
  }();NgSelectMultipleOption.decorators = [{ type: _angular_core.Directive, args: [{ selector: "option" }] }], NgSelectMultipleOption.ctorParameters = function () {
    return [{ type: _angular_core.ElementRef }, { type: _angular_core.Renderer }, { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }] }];
  }, NgSelectMultipleOption.propDecorators = { ngValue: [{ type: _angular_core.Input, args: ["ngValue"] }], value: [{ type: _angular_core.Input, args: ["value"] }] };var BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor],
      AbstractFormGroupDirective = function (_super) {
    function AbstractFormGroupDirective() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(AbstractFormGroupDirective, _super), AbstractFormGroupDirective.prototype.ngOnInit = function () {
      this._checkParentType(), this.formDirective.addFormGroup(this);
    }, AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
      this.formDirective && this.formDirective.removeFormGroup(this);
    }, Object.defineProperty(AbstractFormGroupDirective.prototype, "control", { get: function () {
        return this.formDirective.getFormGroup(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "path", { get: function () {
        return controlPath(this.name, this._parent);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", { get: function () {
        return this._parent ? this._parent.formDirective : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", { get: function () {
        return composeValidators(this._validators);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", { get: function () {
        return composeAsyncValidators(this._asyncValidators);
      }, enumerable: !0, configurable: !0 }), AbstractFormGroupDirective.prototype._checkParentType = function () {}, AbstractFormGroupDirective;
  }(ControlContainer),
      AbstractControlStatus = function () {
    function AbstractControlStatus(cd) {
      this._cd = cd;
    }return Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", { get: function () {
        return !!this._cd.control && this._cd.control.untouched;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", { get: function () {
        return !!this._cd.control && this._cd.control.touched;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", { get: function () {
        return !!this._cd.control && this._cd.control.pristine;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", { get: function () {
        return !!this._cd.control && this._cd.control.dirty;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", { get: function () {
        return !!this._cd.control && this._cd.control.valid;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", { get: function () {
        return !!this._cd.control && this._cd.control.invalid;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", { get: function () {
        return !!this._cd.control && this._cd.control.pending;
      }, enumerable: !0, configurable: !0 }), AbstractControlStatus;
  }(),
      ngControlStatusHost = { "[class.ng-untouched]": "ngClassUntouched", "[class.ng-touched]": "ngClassTouched", "[class.ng-pristine]": "ngClassPristine", "[class.ng-dirty]": "ngClassDirty", "[class.ng-valid]": "ngClassValid", "[class.ng-invalid]": "ngClassInvalid", "[class.ng-pending]": "ngClassPending" },
      NgControlStatus = function (_super) {
    function NgControlStatus(cd) {
      return _super.call(this, cd) || this;
    }return __extends(NgControlStatus, _super), NgControlStatus;
  }(AbstractControlStatus);NgControlStatus.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formControlName],[ngModel],[formControl]", host: ngControlStatusHost }] }], NgControlStatus.ctorParameters = function () {
    return [{ type: NgControl, decorators: [{ type: _angular_core.Self }] }];
  };var NgControlStatusGroup = function (_super) {
    function NgControlStatusGroup(cd) {
      return _super.call(this, cd) || this;
    }return __extends(NgControlStatusGroup, _super), NgControlStatusGroup;
  }(AbstractControlStatus);NgControlStatusGroup.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]", host: ngControlStatusHost }] }], NgControlStatusGroup.ctorParameters = function () {
    return [{ type: ControlContainer, decorators: [{ type: _angular_core.Self }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var VALID = "VALID",
      INVALID = "INVALID",
      PENDING = "PENDING",
      DISABLED = "DISABLED",
      AbstractControl = function () {
    function AbstractControl(validator, asyncValidator) {
      this.validator = validator, this.asyncValidator = asyncValidator, this._onCollectionChange = function () {}, this._pristine = !0, this._touched = !1, this._onDisabledChange = [];
    }return Object.defineProperty(AbstractControl.prototype, "value", { get: function () {
        return this._value;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "parent", { get: function () {
        return this._parent;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "status", { get: function () {
        return this._status;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "valid", { get: function () {
        return this._status === VALID;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "invalid", { get: function () {
        return this._status === INVALID;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "pending", { get: function () {
        return this._status == PENDING;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "disabled", { get: function () {
        return this._status === DISABLED;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "enabled", { get: function () {
        return this._status !== DISABLED;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "errors", { get: function () {
        return this._errors;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "pristine", { get: function () {
        return this._pristine;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "dirty", { get: function () {
        return !this.pristine;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "touched", { get: function () {
        return this._touched;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "untouched", { get: function () {
        return !this._touched;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "valueChanges", { get: function () {
        return this._valueChanges;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(AbstractControl.prototype, "statusChanges", { get: function () {
        return this._statusChanges;
      }, enumerable: !0, configurable: !0 }), AbstractControl.prototype.setValidators = function (newValidator) {
      this.validator = coerceToValidator(newValidator);
    }, AbstractControl.prototype.setAsyncValidators = function (newValidator) {
      this.asyncValidator = coerceToAsyncValidator(newValidator);
    }, AbstractControl.prototype.clearValidators = function () {
      this.validator = null;
    }, AbstractControl.prototype.clearAsyncValidators = function () {
      this.asyncValidator = null;
    }, AbstractControl.prototype.markAsTouched = function (_a) {
      var onlySelf = (void 0 === _a ? {} : _a).onlySelf;this._touched = !0, this._parent && !onlySelf && this._parent.markAsTouched({ onlySelf: onlySelf });
    }, AbstractControl.prototype.markAsUntouched = function (_a) {
      var onlySelf = (void 0 === _a ? {} : _a).onlySelf;this._touched = !1, this._forEachChild(function (control) {
        control.markAsUntouched({ onlySelf: !0 });
      }), this._parent && !onlySelf && this._parent._updateTouched({ onlySelf: onlySelf });
    }, AbstractControl.prototype.markAsDirty = function (_a) {
      var onlySelf = (void 0 === _a ? {} : _a).onlySelf;this._pristine = !1, this._parent && !onlySelf && this._parent.markAsDirty({ onlySelf: onlySelf });
    }, AbstractControl.prototype.markAsPristine = function (_a) {
      var onlySelf = (void 0 === _a ? {} : _a).onlySelf;this._pristine = !0, this._forEachChild(function (control) {
        control.markAsPristine({ onlySelf: !0 });
      }), this._parent && !onlySelf && this._parent._updatePristine({ onlySelf: onlySelf });
    }, AbstractControl.prototype.markAsPending = function (_a) {
      var onlySelf = (void 0 === _a ? {} : _a).onlySelf;this._status = PENDING, this._parent && !onlySelf && this._parent.markAsPending({ onlySelf: onlySelf });
    }, AbstractControl.prototype.disable = function (_a) {
      var _b = void 0 === _a ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;this._status = DISABLED, this._errors = null, this._forEachChild(function (control) {
        control.disable({ onlySelf: !0 });
      }), this._updateValue(), emitEvent !== !1 && (this._valueChanges.emit(this._value), this._statusChanges.emit(this._status)), this._updateAncestors(!!onlySelf), this._onDisabledChange.forEach(function (changeFn) {
        return changeFn(!0);
      });
    }, AbstractControl.prototype.enable = function (_a) {
      var _b = void 0 === _a ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;this._status = VALID, this._forEachChild(function (control) {
        control.enable({ onlySelf: !0 });
      }), this.updateValueAndValidity({ onlySelf: !0, emitEvent: emitEvent }), this._updateAncestors(!!onlySelf), this._onDisabledChange.forEach(function (changeFn) {
        return changeFn(!1);
      });
    }, AbstractControl.prototype._updateAncestors = function (onlySelf) {
      this._parent && !onlySelf && (this._parent.updateValueAndValidity(), this._parent._updatePristine(), this._parent._updateTouched());
    }, AbstractControl.prototype.setParent = function (parent) {
      this._parent = parent;
    }, AbstractControl.prototype.setValue = function (value, options) {}, AbstractControl.prototype.patchValue = function (value, options) {}, AbstractControl.prototype.reset = function (value, options) {}, AbstractControl.prototype.updateValueAndValidity = function (_a) {
      var _b = void 0 === _a ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;this._setInitialStatus(), this._updateValue(), this.enabled && (this._cancelExistingSubscription(), this._errors = this._runValidator(), this._status = this._calculateStatus(), this._status !== VALID && this._status !== PENDING || this._runAsyncValidator(emitEvent)), emitEvent !== !1 && (this._valueChanges.emit(this._value), this._statusChanges.emit(this._status)), this._parent && !onlySelf && this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
    }, AbstractControl.prototype._updateTreeValidity = function (_a) {
      var emitEvent = (void 0 === _a ? { emitEvent: !0 } : _a).emitEvent;this._forEachChild(function (ctrl) {
        return ctrl._updateTreeValidity({ emitEvent: emitEvent });
      }), this.updateValueAndValidity({ onlySelf: !0, emitEvent: emitEvent });
    }, AbstractControl.prototype._setInitialStatus = function () {
      this._status = this._allControlsDisabled() ? DISABLED : VALID;
    }, AbstractControl.prototype._runValidator = function () {
      return this.validator ? this.validator(this) : null;
    }, AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
      var _this = this;if (this.asyncValidator) {
        this._status = PENDING;var obs = toObservable(this.asyncValidator(this));this._asyncValidationSubscription = obs.subscribe(function (errors) {
          return _this.setErrors(errors, { emitEvent: emitEvent });
        });
      }
    }, AbstractControl.prototype._cancelExistingSubscription = function () {
      this._asyncValidationSubscription && this._asyncValidationSubscription.unsubscribe();
    }, AbstractControl.prototype.setErrors = function (errors, _a) {
      var emitEvent = (void 0 === _a ? {} : _a).emitEvent;this._errors = errors, this._updateControlsErrors(emitEvent !== !1);
    }, AbstractControl.prototype.get = function (path) {
      return _find(this, path, ".");
    }, AbstractControl.prototype.getError = function (errorCode, path) {
      var control = path ? this.get(path) : this;return control && control._errors ? control._errors[errorCode] : null;
    }, AbstractControl.prototype.hasError = function (errorCode, path) {
      return !!this.getError(errorCode, path);
    }, Object.defineProperty(AbstractControl.prototype, "root", { get: function () {
        for (var x = this; x._parent;) x = x._parent;return x;
      }, enumerable: !0, configurable: !0 }), AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
      this._status = this._calculateStatus(), emitEvent && this._statusChanges.emit(this._status), this._parent && this._parent._updateControlsErrors(emitEvent);
    }, AbstractControl.prototype._initObservables = function () {
      this._valueChanges = new _angular_core.EventEmitter(), this._statusChanges = new _angular_core.EventEmitter();
    }, AbstractControl.prototype._calculateStatus = function () {
      return this._allControlsDisabled() ? DISABLED : this._errors ? INVALID : this._anyControlsHaveStatus(PENDING) ? PENDING : this._anyControlsHaveStatus(INVALID) ? INVALID : VALID;
    }, AbstractControl.prototype._updateValue = function () {}, AbstractControl.prototype._forEachChild = function (cb) {}, AbstractControl.prototype._anyControls = function (condition) {}, AbstractControl.prototype._allControlsDisabled = function () {}, AbstractControl.prototype._anyControlsHaveStatus = function (status) {
      return this._anyControls(function (control) {
        return control.status === status;
      });
    }, AbstractControl.prototype._anyControlsDirty = function () {
      return this._anyControls(function (control) {
        return control.dirty;
      });
    }, AbstractControl.prototype._anyControlsTouched = function () {
      return this._anyControls(function (control) {
        return control.touched;
      });
    }, AbstractControl.prototype._updatePristine = function (_a) {
      var onlySelf = (void 0 === _a ? {} : _a).onlySelf;this._pristine = !this._anyControlsDirty(), this._parent && !onlySelf && this._parent._updatePristine({ onlySelf: onlySelf });
    }, AbstractControl.prototype._updateTouched = function (_a) {
      var onlySelf = (void 0 === _a ? {} : _a).onlySelf;this._touched = this._anyControlsTouched(), this._parent && !onlySelf && this._parent._updateTouched({ onlySelf: onlySelf });
    }, AbstractControl.prototype._isBoxedValue = function (formState) {
      return "object" == typeof formState && null !== formState && 2 === Object.keys(formState).length && "value" in formState && "disabled" in formState;
    }, AbstractControl.prototype._registerOnCollectionChange = function (fn) {
      this._onCollectionChange = fn;
    }, AbstractControl;
  }(),
      FormControl = function (_super) {
    function FormControl(formState, validator, asyncValidator) {
      void 0 === formState && (formState = null);var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;return _this._onChange = [], _this._applyFormState(formState), _this.updateValueAndValidity({ onlySelf: !0, emitEvent: !1 }), _this._initObservables(), _this;
    }return __extends(FormControl, _super), FormControl.prototype.setValue = function (value, options) {
      var _this = this;void 0 === options && (options = {}), this._value = value, this._onChange.length && options.emitModelToViewChange !== !1 && this._onChange.forEach(function (changeFn) {
        return changeFn(_this._value, options.emitViewToModelChange !== !1);
      }), this.updateValueAndValidity(options);
    }, FormControl.prototype.patchValue = function (value, options) {
      void 0 === options && (options = {}), this.setValue(value, options);
    }, FormControl.prototype.reset = function (formState, options) {
      void 0 === formState && (formState = null), void 0 === options && (options = {}), this._applyFormState(formState), this.markAsPristine(options), this.markAsUntouched(options), this.setValue(this._value, options);
    }, FormControl.prototype._updateValue = function () {}, FormControl.prototype._anyControls = function (condition) {
      return !1;
    }, FormControl.prototype._allControlsDisabled = function () {
      return this.disabled;
    }, FormControl.prototype.registerOnChange = function (fn) {
      this._onChange.push(fn);
    }, FormControl.prototype._clearChangeFns = function () {
      this._onChange = [], this._onDisabledChange = [], this._onCollectionChange = function () {};
    }, FormControl.prototype.registerOnDisabledChange = function (fn) {
      this._onDisabledChange.push(fn);
    }, FormControl.prototype._forEachChild = function (cb) {}, FormControl.prototype._applyFormState = function (formState) {
      this._isBoxedValue(formState) ? (this._value = formState.value, formState.disabled ? this.disable({ onlySelf: !0, emitEvent: !1 }) : this.enable({ onlySelf: !0, emitEvent: !1 })) : this._value = formState;
    }, FormControl;
  }(AbstractControl),
      FormGroup = function (_super) {
    function FormGroup(controls, validator, asyncValidator) {
      var _this = _super.call(this, validator || null, asyncValidator || null) || this;return _this.controls = controls, _this._initObservables(), _this._setUpControls(), _this.updateValueAndValidity({ onlySelf: !0, emitEvent: !1 }), _this;
    }return __extends(FormGroup, _super), FormGroup.prototype.registerControl = function (name, control) {
      return this.controls[name] ? this.controls[name] : (this.controls[name] = control, control.setParent(this), control._registerOnCollectionChange(this._onCollectionChange), control);
    }, FormGroup.prototype.addControl = function (name, control) {
      this.registerControl(name, control), this.updateValueAndValidity(), this._onCollectionChange();
    }, FormGroup.prototype.removeControl = function (name) {
      this.controls[name] && this.controls[name]._registerOnCollectionChange(function () {}), delete this.controls[name], this.updateValueAndValidity(), this._onCollectionChange();
    }, FormGroup.prototype.setControl = function (name, control) {
      this.controls[name] && this.controls[name]._registerOnCollectionChange(function () {}), delete this.controls[name], control && this.registerControl(name, control), this.updateValueAndValidity(), this._onCollectionChange();
    }, FormGroup.prototype.contains = function (controlName) {
      return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
    }, FormGroup.prototype.setValue = function (value, options) {
      var _this = this;void 0 === options && (options = {}), this._checkAllValuesPresent(value), Object.keys(value).forEach(function (name) {
        _this._throwIfControlMissing(name), _this.controls[name].setValue(value[name], { onlySelf: !0, emitEvent: options.emitEvent });
      }), this.updateValueAndValidity(options);
    }, FormGroup.prototype.patchValue = function (value, options) {
      var _this = this;void 0 === options && (options = {}), Object.keys(value).forEach(function (name) {
        _this.controls[name] && _this.controls[name].patchValue(value[name], { onlySelf: !0, emitEvent: options.emitEvent });
      }), this.updateValueAndValidity(options);
    }, FormGroup.prototype.reset = function (value, options) {
      void 0 === value && (value = {}), void 0 === options && (options = {}), this._forEachChild(function (control, name) {
        control.reset(value[name], { onlySelf: !0, emitEvent: options.emitEvent });
      }), this.updateValueAndValidity(options), this._updatePristine(options), this._updateTouched(options);
    }, FormGroup.prototype.getRawValue = function () {
      return this._reduceChildren({}, function (acc, control, name) {
        return acc[name] = control instanceof FormControl ? control.value : control.getRawValue(), acc;
      });
    }, FormGroup.prototype._throwIfControlMissing = function (name) {
      if (!Object.keys(this.controls).length) throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");if (!this.controls[name]) throw new Error("Cannot find form control with name: " + name + ".");
    }, FormGroup.prototype._forEachChild = function (cb) {
      var _this = this;Object.keys(this.controls).forEach(function (k) {
        return cb(_this.controls[k], k);
      });
    }, FormGroup.prototype._setUpControls = function () {
      var _this = this;this._forEachChild(function (control) {
        control.setParent(_this), control._registerOnCollectionChange(_this._onCollectionChange);
      });
    }, FormGroup.prototype._updateValue = function () {
      this._value = this._reduceValue();
    }, FormGroup.prototype._anyControls = function (condition) {
      var _this = this,
          res = !1;return this._forEachChild(function (control, name) {
        res = res || _this.contains(name) && condition(control);
      }), res;
    }, FormGroup.prototype._reduceValue = function () {
      var _this = this;return this._reduceChildren({}, function (acc, control, name) {
        return (control.enabled || _this.disabled) && (acc[name] = control.value), acc;
      });
    }, FormGroup.prototype._reduceChildren = function (initValue, fn) {
      var res = initValue;return this._forEachChild(function (control, name) {
        res = fn(res, control, name);
      }), res;
    }, FormGroup.prototype._allControlsDisabled = function () {
      for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
        var controlName = _a[_i];if (this.controls[controlName].enabled) return !1;
      }return Object.keys(this.controls).length > 0 || this.disabled;
    }, FormGroup.prototype._checkAllValuesPresent = function (value) {
      this._forEachChild(function (control, name) {
        if (void 0 === value[name]) throw new Error("Must supply a value for form control with name: '" + name + "'.");
      });
    }, FormGroup;
  }(AbstractControl),
      FormArray = function (_super) {
    function FormArray(controls, validator, asyncValidator) {
      var _this = _super.call(this, validator || null, asyncValidator || null) || this;return _this.controls = controls, _this._initObservables(), _this._setUpControls(), _this.updateValueAndValidity({ onlySelf: !0, emitEvent: !1 }), _this;
    }return __extends(FormArray, _super), FormArray.prototype.at = function (index) {
      return this.controls[index];
    }, FormArray.prototype.push = function (control) {
      this.controls.push(control), this._registerControl(control), this.updateValueAndValidity(), this._onCollectionChange();
    }, FormArray.prototype.insert = function (index, control) {
      this.controls.splice(index, 0, control), this._registerControl(control), this.updateValueAndValidity(), this._onCollectionChange();
    }, FormArray.prototype.removeAt = function (index) {
      this.controls[index] && this.controls[index]._registerOnCollectionChange(function () {}), this.controls.splice(index, 1), this.updateValueAndValidity(), this._onCollectionChange();
    }, FormArray.prototype.setControl = function (index, control) {
      this.controls[index] && this.controls[index]._registerOnCollectionChange(function () {}), this.controls.splice(index, 1), control && (this.controls.splice(index, 0, control), this._registerControl(control)), this.updateValueAndValidity(), this._onCollectionChange();
    }, Object.defineProperty(FormArray.prototype, "length", { get: function () {
        return this.controls.length;
      }, enumerable: !0, configurable: !0 }), FormArray.prototype.setValue = function (value, options) {
      var _this = this;void 0 === options && (options = {}), this._checkAllValuesPresent(value), value.forEach(function (newValue, index) {
        _this._throwIfControlMissing(index), _this.at(index).setValue(newValue, { onlySelf: !0, emitEvent: options.emitEvent });
      }), this.updateValueAndValidity(options);
    }, FormArray.prototype.patchValue = function (value, options) {
      var _this = this;void 0 === options && (options = {}), value.forEach(function (newValue, index) {
        _this.at(index) && _this.at(index).patchValue(newValue, { onlySelf: !0, emitEvent: options.emitEvent });
      }), this.updateValueAndValidity(options);
    }, FormArray.prototype.reset = function (value, options) {
      void 0 === value && (value = []), void 0 === options && (options = {}), this._forEachChild(function (control, index) {
        control.reset(value[index], { onlySelf: !0, emitEvent: options.emitEvent });
      }), this.updateValueAndValidity(options), this._updatePristine(options), this._updateTouched(options);
    }, FormArray.prototype.getRawValue = function () {
      return this.controls.map(function (control) {
        return control instanceof FormControl ? control.value : control.getRawValue();
      });
    }, FormArray.prototype._throwIfControlMissing = function (index) {
      if (!this.controls.length) throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");if (!this.at(index)) throw new Error("Cannot find form control at index " + index);
    }, FormArray.prototype._forEachChild = function (cb) {
      this.controls.forEach(function (control, index) {
        cb(control, index);
      });
    }, FormArray.prototype._updateValue = function () {
      var _this = this;this._value = this.controls.filter(function (control) {
        return control.enabled || _this.disabled;
      }).map(function (control) {
        return control.value;
      });
    }, FormArray.prototype._anyControls = function (condition) {
      return this.controls.some(function (control) {
        return control.enabled && condition(control);
      });
    }, FormArray.prototype._setUpControls = function () {
      var _this = this;this._forEachChild(function (control) {
        return _this._registerControl(control);
      });
    }, FormArray.prototype._checkAllValuesPresent = function (value) {
      this._forEachChild(function (control, i) {
        if (void 0 === value[i]) throw new Error("Must supply a value for form control at index: " + i + ".");
      });
    }, FormArray.prototype._allControlsDisabled = function () {
      for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
        var control = _a[_i];if (control.enabled) return !1;
      }return this.controls.length > 0 || this.disabled;
    }, FormArray.prototype._registerControl = function (control) {
      control.setParent(this), control._registerOnCollectionChange(this._onCollectionChange);
    }, FormArray;
  }(AbstractControl),
      formDirectiveProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () {
      return NgForm;
    }) },
      resolvedPromise = Promise.resolve(null),
      NgForm = function (_super) {
    function NgForm(validators, asyncValidators) {
      var _this = _super.call(this) || this;return _this._submitted = !1, _this.ngSubmit = new _angular_core.EventEmitter(), _this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators)), _this;
    }return __extends(NgForm, _super), Object.defineProperty(NgForm.prototype, "submitted", { get: function () {
        return this._submitted;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "formDirective", { get: function () {
        return this;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "control", { get: function () {
        return this.form;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "path", { get: function () {
        return [];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgForm.prototype, "controls", { get: function () {
        return this.form.controls;
      }, enumerable: !0, configurable: !0 }), NgForm.prototype.addControl = function (dir) {
      var _this = this;resolvedPromise.then(function () {
        var container = _this._findContainer(dir.path);dir._control = container.registerControl(dir.name, dir.control), setUpControl(dir.control, dir), dir.control.updateValueAndValidity({ emitEvent: !1 });
      });
    }, NgForm.prototype.getControl = function (dir) {
      return this.form.get(dir.path);
    }, NgForm.prototype.removeControl = function (dir) {
      var _this = this;resolvedPromise.then(function () {
        var container = _this._findContainer(dir.path);container && container.removeControl(dir.name);
      });
    }, NgForm.prototype.addFormGroup = function (dir) {
      var _this = this;resolvedPromise.then(function () {
        var container = _this._findContainer(dir.path),
            group = new FormGroup({});setUpFormContainer(group, dir), container.registerControl(dir.name, group), group.updateValueAndValidity({ emitEvent: !1 });
      });
    }, NgForm.prototype.removeFormGroup = function (dir) {
      var _this = this;resolvedPromise.then(function () {
        var container = _this._findContainer(dir.path);container && container.removeControl(dir.name);
      });
    }, NgForm.prototype.getFormGroup = function (dir) {
      return this.form.get(dir.path);
    }, NgForm.prototype.updateModel = function (dir, value) {
      var _this = this;resolvedPromise.then(function () {
        var ctrl = _this.form.get(dir.path);ctrl.setValue(value);
      });
    }, NgForm.prototype.setValue = function (value) {
      this.control.setValue(value);
    }, NgForm.prototype.onSubmit = function ($event) {
      return this._submitted = !0, this.ngSubmit.emit($event), !1;
    }, NgForm.prototype.onReset = function () {
      this.resetForm();
    }, NgForm.prototype.resetForm = function (value) {
      void 0 === value && (value = void 0), this.form.reset(value), this._submitted = !1;
    }, NgForm.prototype._findContainer = function (path) {
      return path.pop(), path.length ? this.form.get(path) : this.form;
    }, NgForm;
  }(ControlContainer);NgForm.decorators = [{ type: _angular_core.Directive, args: [{ selector: "form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]", providers: [formDirectiveProvider], host: { "(submit)": "onSubmit($event)", "(reset)": "onReset()" }, outputs: ["ngSubmit"], exportAs: "ngForm" }] }], NgForm.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var FormErrorExamples = { formControlName: '\n    <div [formGroup]="myGroup">\n      <input formControlName="firstName">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });', formGroupName: '\n    <div [formGroup]="myGroup">\n       <div formGroupName="person">\n          <input formControlName="firstName">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });', formArrayName: '\n    <div [formGroup]="myGroup">\n      <div formArrayName="cities">\n        <div *ngFor="let city of cityArray.controls; index as i">\n          <input [formControlName]="i">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl(\'SF\')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });', ngModelGroup: '\n    <form>\n       <div ngModelGroup="person">\n          <input [(ngModel)]="person.name" name="firstName">\n       </div>\n    </form>', ngModelWithFormGroup: '\n    <div [formGroup]="myGroup">\n       <input formControlName="firstName">\n       <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">\n    </div>\n  ' },
      TemplateDrivenErrors = function () {
    function TemplateDrivenErrors() {}return TemplateDrivenErrors.modelParentException = function () {
      throw new Error('\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup\'s partner directive "formControlName" instead.  Example:\n\n      ' + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
    }, TemplateDrivenErrors.formGroupNameException = function () {
      throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
    }, TemplateDrivenErrors.missingNameException = function () {
      throw new Error('If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as \'standalone\' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]="person.firstName" name="first">\n      Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">');
    }, TemplateDrivenErrors.modelGroupParentException = function () {
      throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
    }, TemplateDrivenErrors;
  }(),
      modelGroupProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () {
      return NgModelGroup;
    }) },
      NgModelGroup = function (_super) {
    function NgModelGroup(parent, validators, asyncValidators) {
      var _this = _super.call(this) || this;return _this._parent = parent, _this._validators = validators, _this._asyncValidators = asyncValidators, _this;
    }return __extends(NgModelGroup, _super), NgModelGroup.prototype._checkParentType = function () {
      this._parent instanceof NgModelGroup || this._parent instanceof NgForm || TemplateDrivenErrors.modelGroupParentException();
    }, NgModelGroup;
  }(AbstractFormGroupDirective);NgModelGroup.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngModelGroup]", providers: [modelGroupProvider], exportAs: "ngModelGroup" }] }], NgModelGroup.ctorParameters = function () {
    return [{ type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }];
  }, NgModelGroup.propDecorators = { name: [{ type: _angular_core.Input, args: ["ngModelGroup"] }] }; /**
                                                                                                      * @license
                                                                                                      * Copyright Google Inc. All Rights Reserved.
                                                                                                      *
                                                                                                      * Use of this source code is governed by an MIT-style license that can be
                                                                                                      * found in the LICENSE file at https://angular.io/license
                                                                                                      */
  var formControlBinding = { provide: NgControl, useExisting: _angular_core.forwardRef(function () {
      return NgModel;
    }) },
      resolvedPromise$1 = Promise.resolve(null),
      NgModel = function (_super) {
    function NgModel(parent, validators, asyncValidators, valueAccessors) {
      var _this = _super.call(this) || this;return _this._control = new FormControl(), _this._registered = !1, _this.update = new _angular_core.EventEmitter(), _this._parent = parent, _this._rawValidators = validators || [], _this._rawAsyncValidators = asyncValidators || [], _this.valueAccessor = selectValueAccessor(_this, valueAccessors), _this;
    }return __extends(NgModel, _super), NgModel.prototype.ngOnChanges = function (changes) {
      this._checkForErrors(), this._registered || this._setUpControl(), "isDisabled" in changes && this._updateDisabled(changes), isPropertyUpdated(changes, this.viewModel) && (this._updateValue(this.model), this.viewModel = this.model);
    }, NgModel.prototype.ngOnDestroy = function () {
      this.formDirective && this.formDirective.removeControl(this);
    }, Object.defineProperty(NgModel.prototype, "control", { get: function () {
        return this._control;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "path", { get: function () {
        return this._parent ? controlPath(this.name, this._parent) : [this.name];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "formDirective", { get: function () {
        return this._parent ? this._parent.formDirective : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "validator", { get: function () {
        return composeValidators(this._rawValidators);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModel.prototype, "asyncValidator", { get: function () {
        return composeAsyncValidators(this._rawAsyncValidators);
      }, enumerable: !0, configurable: !0 }), NgModel.prototype.viewToModelUpdate = function (newValue) {
      this.viewModel = newValue, this.update.emit(newValue);
    }, NgModel.prototype._setUpControl = function () {
      this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this), this._registered = !0;
    }, NgModel.prototype._isStandalone = function () {
      return !this._parent || !(!this.options || !this.options.standalone);
    }, NgModel.prototype._setUpStandalone = function () {
      setUpControl(this._control, this), this._control.updateValueAndValidity({ emitEvent: !1 });
    }, NgModel.prototype._checkForErrors = function () {
      this._isStandalone() || this._checkParentType(), this._checkName();
    }, NgModel.prototype._checkParentType = function () {
      !(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective ? TemplateDrivenErrors.formGroupNameException() : this._parent instanceof NgModelGroup || this._parent instanceof NgForm || TemplateDrivenErrors.modelParentException();
    }, NgModel.prototype._checkName = function () {
      this.options && this.options.name && (this.name = this.options.name), this._isStandalone() || this.name || TemplateDrivenErrors.missingNameException();
    }, NgModel.prototype._updateValue = function (value) {
      var _this = this;resolvedPromise$1.then(function () {
        _this.control.setValue(value, { emitViewToModelChange: !1 });
      });
    }, NgModel.prototype._updateDisabled = function (changes) {
      var _this = this,
          disabledValue = changes.isDisabled.currentValue,
          isDisabled = "" === disabledValue || disabledValue && "false" !== disabledValue;resolvedPromise$1.then(function () {
        isDisabled && !_this.control.disabled ? _this.control.disable() : !isDisabled && _this.control.disabled && _this.control.enable();
      });
    }, NgModel;
  }(NgControl);NgModel.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[ngModel]:not([formControlName]):not([formControl])", providers: [formControlBinding], exportAs: "ngModel" }] }], NgModel.ctorParameters = function () {
    return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR] }] }];
  }, NgModel.propDecorators = { name: [{ type: _angular_core.Input }], isDisabled: [{ type: _angular_core.Input, args: ["disabled"] }], model: [{ type: _angular_core.Input, args: ["ngModel"] }], options: [{ type: _angular_core.Input, args: ["ngModelOptions"] }], update: [{ type: _angular_core.Output, args: ["ngModelChange"] }] }; /**
                                                                                                                                                                                                                                                                                                                                            * @license
                                                                                                                                                                                                                                                                                                                                            * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                                                            * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                                                                                                                                                            * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                                                                                                                                                            */
  var ReactiveErrors = function () {
    function ReactiveErrors() {}return ReactiveErrors.controlParentException = function () {
      throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
    }, ReactiveErrors.ngModelGroupException = function () {
      throw new Error('formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a "form" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ' + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
    }, ReactiveErrors.missingFormException = function () {
      throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
    }, ReactiveErrors.groupParentException = function () {
      throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
    }, ReactiveErrors.arrayParentException = function () {
      throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
    }, ReactiveErrors.disabledAttrWarning = function () {
      console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
    }, ReactiveErrors;
  }(),
      formControlBinding$1 = { provide: NgControl, useExisting: _angular_core.forwardRef(function () {
      return FormControlDirective;
    }) },
      FormControlDirective = function (_super) {
    function FormControlDirective(validators, asyncValidators, valueAccessors) {
      var _this = _super.call(this) || this;return _this.update = new _angular_core.EventEmitter(), _this._rawValidators = validators || [], _this._rawAsyncValidators = asyncValidators || [], _this.valueAccessor = selectValueAccessor(_this, valueAccessors), _this;
    }return __extends(FormControlDirective, _super), Object.defineProperty(FormControlDirective.prototype, "isDisabled", { set: function (isDisabled) {
        ReactiveErrors.disabledAttrWarning();
      }, enumerable: !0, configurable: !0 }), FormControlDirective.prototype.ngOnChanges = function (changes) {
      this._isControlChanged(changes) && (setUpControl(this.form, this), this.control.disabled && this.valueAccessor.setDisabledState && this.valueAccessor.setDisabledState(!0), this.form.updateValueAndValidity({ emitEvent: !1 })), isPropertyUpdated(changes, this.viewModel) && (this.form.setValue(this.model), this.viewModel = this.model);
    }, Object.defineProperty(FormControlDirective.prototype, "path", { get: function () {
        return [];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlDirective.prototype, "validator", { get: function () {
        return composeValidators(this._rawValidators);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlDirective.prototype, "asyncValidator", { get: function () {
        return composeAsyncValidators(this._rawAsyncValidators);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlDirective.prototype, "control", { get: function () {
        return this.form;
      }, enumerable: !0, configurable: !0 }), FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
      this.viewModel = newValue, this.update.emit(newValue);
    }, FormControlDirective.prototype._isControlChanged = function (changes) {
      return changes.hasOwnProperty("form");
    }, FormControlDirective;
  }(NgControl);FormControlDirective.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formControl]", providers: [formControlBinding$1], exportAs: "ngForm" }] }], FormControlDirective.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR] }] }];
  }, FormControlDirective.propDecorators = { form: [{ type: _angular_core.Input, args: ["formControl"] }], model: [{ type: _angular_core.Input, args: ["ngModel"] }], update: [{ type: _angular_core.Output, args: ["ngModelChange"] }], isDisabled: [{ type: _angular_core.Input, args: ["disabled"] }] }; /**
                                                                                                                                                                                                                                                                                                            * @license
                                                                                                                                                                                                                                                                                                            * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                            * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                                                                                                                            * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                                                                                                                            */
  var formDirectiveProvider$1 = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () {
      return FormGroupDirective;
    }) },
      FormGroupDirective = function (_super) {
    function FormGroupDirective(_validators, _asyncValidators) {
      var _this = _super.call(this) || this;return _this._validators = _validators, _this._asyncValidators = _asyncValidators, _this._submitted = !1, _this.directives = [], _this.form = null, _this.ngSubmit = new _angular_core.EventEmitter(), _this;
    }return __extends(FormGroupDirective, _super), FormGroupDirective.prototype.ngOnChanges = function (changes) {
      this._checkFormPresent(), changes.hasOwnProperty("form") && (this._updateValidators(), this._updateDomValue(), this._updateRegistrations());
    }, Object.defineProperty(FormGroupDirective.prototype, "submitted", { get: function () {
        return this._submitted;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormGroupDirective.prototype, "formDirective", { get: function () {
        return this;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormGroupDirective.prototype, "control", { get: function () {
        return this.form;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormGroupDirective.prototype, "path", { get: function () {
        return [];
      }, enumerable: !0, configurable: !0 }), FormGroupDirective.prototype.addControl = function (dir) {
      var ctrl = this.form.get(dir.path);return setUpControl(ctrl, dir), ctrl.updateValueAndValidity({ emitEvent: !1 }), this.directives.push(dir), ctrl;
    }, FormGroupDirective.prototype.getControl = function (dir) {
      return this.form.get(dir.path);
    }, FormGroupDirective.prototype.removeControl = function (dir) {
      remove(this.directives, dir);
    }, FormGroupDirective.prototype.addFormGroup = function (dir) {
      var ctrl = this.form.get(dir.path);setUpFormContainer(ctrl, dir), ctrl.updateValueAndValidity({ emitEvent: !1 });
    }, FormGroupDirective.prototype.removeFormGroup = function (dir) {}, FormGroupDirective.prototype.getFormGroup = function (dir) {
      return this.form.get(dir.path);
    }, FormGroupDirective.prototype.addFormArray = function (dir) {
      var ctrl = this.form.get(dir.path);setUpFormContainer(ctrl, dir), ctrl.updateValueAndValidity({ emitEvent: !1 });
    }, FormGroupDirective.prototype.removeFormArray = function (dir) {}, FormGroupDirective.prototype.getFormArray = function (dir) {
      return this.form.get(dir.path);
    }, FormGroupDirective.prototype.updateModel = function (dir, value) {
      var ctrl = this.form.get(dir.path);ctrl.setValue(value);
    }, FormGroupDirective.prototype.onSubmit = function ($event) {
      return this._submitted = !0, this.ngSubmit.emit($event), !1;
    }, FormGroupDirective.prototype.onReset = function () {
      this.resetForm();
    }, FormGroupDirective.prototype.resetForm = function (value) {
      void 0 === value && (value = void 0), this.form.reset(value), this._submitted = !1;
    }, FormGroupDirective.prototype._updateDomValue = function () {
      var _this = this;this.directives.forEach(function (dir) {
        var newCtrl = _this.form.get(dir.path);dir._control !== newCtrl && (cleanUpControl(dir._control, dir), newCtrl && setUpControl(newCtrl, dir), dir._control = newCtrl);
      }), this.form._updateTreeValidity({ emitEvent: !1 });
    }, FormGroupDirective.prototype._updateRegistrations = function () {
      var _this = this;this.form._registerOnCollectionChange(function () {
        return _this._updateDomValue();
      }), this._oldForm && this._oldForm._registerOnCollectionChange(function () {}), this._oldForm = this.form;
    }, FormGroupDirective.prototype._updateValidators = function () {
      var sync = composeValidators(this._validators);this.form.validator = Validators.compose([this.form.validator, sync]);var async = composeAsyncValidators(this._asyncValidators);this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
    }, FormGroupDirective.prototype._checkFormPresent = function () {
      this.form || ReactiveErrors.missingFormException();
    }, FormGroupDirective;
  }(ControlContainer);FormGroupDirective.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formGroup]", providers: [formDirectiveProvider$1], host: { "(submit)": "onSubmit($event)", "(reset)": "onReset()" }, exportAs: "ngForm" }] }], FormGroupDirective.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }];
  }, FormGroupDirective.propDecorators = { form: [{ type: _angular_core.Input, args: ["formGroup"] }], ngSubmit: [{ type: _angular_core.Output }] }; /**
                                                                                                                                                     * @license
                                                                                                                                                     * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                     *
                                                                                                                                                     * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                     * found in the LICENSE file at https://angular.io/license
                                                                                                                                                     */
  var formGroupNameProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () {
      return FormGroupName;
    }) },
      FormGroupName = function (_super) {
    function FormGroupName(parent, validators, asyncValidators) {
      var _this = _super.call(this) || this;return _this._parent = parent, _this._validators = validators, _this._asyncValidators = asyncValidators, _this;
    }return __extends(FormGroupName, _super), FormGroupName.prototype._checkParentType = function () {
      _hasInvalidParent(this._parent) && ReactiveErrors.groupParentException();
    }, FormGroupName;
  }(AbstractFormGroupDirective);FormGroupName.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formGroupName]", providers: [formGroupNameProvider] }] }], FormGroupName.ctorParameters = function () {
    return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }];
  }, FormGroupName.propDecorators = { name: [{ type: _angular_core.Input, args: ["formGroupName"] }] };var formArrayNameProvider = { provide: ControlContainer, useExisting: _angular_core.forwardRef(function () {
      return FormArrayName;
    }) },
      FormArrayName = function (_super) {
    function FormArrayName(parent, validators, asyncValidators) {
      var _this = _super.call(this) || this;return _this._parent = parent, _this._validators = validators, _this._asyncValidators = asyncValidators, _this;
    }return __extends(FormArrayName, _super), FormArrayName.prototype.ngOnInit = function () {
      this._checkParentType(), this.formDirective.addFormArray(this);
    }, FormArrayName.prototype.ngOnDestroy = function () {
      this.formDirective && this.formDirective.removeFormArray(this);
    }, Object.defineProperty(FormArrayName.prototype, "control", { get: function () {
        return this.formDirective.getFormArray(this);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "formDirective", { get: function () {
        return this._parent ? this._parent.formDirective : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "path", { get: function () {
        return controlPath(this.name, this._parent);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "validator", { get: function () {
        return composeValidators(this._validators);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormArrayName.prototype, "asyncValidator", { get: function () {
        return composeAsyncValidators(this._asyncValidators);
      }, enumerable: !0, configurable: !0 }), FormArrayName.prototype._checkParentType = function () {
      _hasInvalidParent(this._parent) && ReactiveErrors.arrayParentException();
    }, FormArrayName;
  }(ControlContainer);FormArrayName.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formArrayName]", providers: [formArrayNameProvider] }] }], FormArrayName.ctorParameters = function () {
    return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }];
  }, FormArrayName.propDecorators = { name: [{ type: _angular_core.Input, args: ["formArrayName"] }] }; /**
                                                                                                        * @license
                                                                                                        * Copyright Google Inc. All Rights Reserved.
                                                                                                        *
                                                                                                        * Use of this source code is governed by an MIT-style license that can be
                                                                                                        * found in the LICENSE file at https://angular.io/license
                                                                                                        */
  var controlNameBinding = { provide: NgControl, useExisting: _angular_core.forwardRef(function () {
      return FormControlName;
    }) },
      FormControlName = function (_super) {
    function FormControlName(parent, validators, asyncValidators, valueAccessors) {
      var _this = _super.call(this) || this;return _this._added = !1, _this.update = new _angular_core.EventEmitter(), _this._parent = parent, _this._rawValidators = validators || [], _this._rawAsyncValidators = asyncValidators || [], _this.valueAccessor = selectValueAccessor(_this, valueAccessors), _this;
    }return __extends(FormControlName, _super), Object.defineProperty(FormControlName.prototype, "isDisabled", { set: function (isDisabled) {
        ReactiveErrors.disabledAttrWarning();
      }, enumerable: !0, configurable: !0 }), FormControlName.prototype.ngOnChanges = function (changes) {
      this._added || this._setUpControl(), isPropertyUpdated(changes, this.viewModel) && (this.viewModel = this.model, this.formDirective.updateModel(this, this.model));
    }, FormControlName.prototype.ngOnDestroy = function () {
      this.formDirective && this.formDirective.removeControl(this);
    }, FormControlName.prototype.viewToModelUpdate = function (newValue) {
      this.viewModel = newValue, this.update.emit(newValue);
    }, Object.defineProperty(FormControlName.prototype, "path", { get: function () {
        return controlPath(this.name, this._parent);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "formDirective", { get: function () {
        return this._parent ? this._parent.formDirective : null;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "validator", { get: function () {
        return composeValidators(this._rawValidators);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "asyncValidator", { get: function () {
        return composeAsyncValidators(this._rawAsyncValidators);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(FormControlName.prototype, "control", { get: function () {
        return this._control;
      }, enumerable: !0, configurable: !0 }), FormControlName.prototype._checkParentType = function () {
      !(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective ? ReactiveErrors.ngModelGroupException() : this._parent instanceof FormGroupName || this._parent instanceof FormGroupDirective || this._parent instanceof FormArrayName || ReactiveErrors.controlParentException();
    }, FormControlName.prototype._setUpControl = function () {
      this._checkParentType(), this._control = this.formDirective.addControl(this), this.control.disabled && this.valueAccessor.setDisabledState && this.valueAccessor.setDisabledState(!0), this._added = !0;
    }, FormControlName;
  }(NgControl);FormControlName.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[formControlName]", providers: [controlNameBinding] }] }], FormControlName.ctorParameters = function () {
    return [{ type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS] }] }, { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR] }] }];
  }, FormControlName.propDecorators = { name: [{ type: _angular_core.Input, args: ["formControlName"] }], model: [{ type: _angular_core.Input, args: ["ngModel"] }], update: [{ type: _angular_core.Output, args: ["ngModelChange"] }], isDisabled: [{ type: _angular_core.Input, args: ["disabled"] }] }; /**
                                                                                                                                                                                                                                                                                                           * @license
                                                                                                                                                                                                                                                                                                           * Copyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                                                           * Use of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                                                                                                                           * found in the LICENSE file at https://angular.io/license
                                                                                                                                                                                                                                                                                                           */
  var REQUIRED_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () {
      return RequiredValidator;
    }), multi: !0 },
      CHECKBOX_REQUIRED_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () {
      return CheckboxRequiredValidator;
    }), multi: !0 },
      RequiredValidator = function () {
    function RequiredValidator() {}return Object.defineProperty(RequiredValidator.prototype, "required", { get: function () {
        return this._required;
      }, set: function (value) {
        this._required = null != value && value !== !1 && "" + value != "false", this._onChange && this._onChange();
      }, enumerable: !0, configurable: !0 }), RequiredValidator.prototype.validate = function (c) {
      return this.required ? Validators.required(c) : null;
    }, RequiredValidator.prototype.registerOnValidatorChange = function (fn) {
      this._onChange = fn;
    }, RequiredValidator;
  }();RequiredValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", providers: [REQUIRED_VALIDATOR], host: { "[attr.required]": 'required ? "" : null' } }] }], RequiredValidator.ctorParameters = function () {
    return [];
  }, RequiredValidator.propDecorators = { required: [{ type: _angular_core.Input }] };var CheckboxRequiredValidator = function (_super) {
    function CheckboxRequiredValidator() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(CheckboxRequiredValidator, _super), CheckboxRequiredValidator.prototype.validate = function (c) {
      return this.required ? Validators.requiredTrue(c) : null;
    }, CheckboxRequiredValidator;
  }(RequiredValidator);CheckboxRequiredValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]", providers: [CHECKBOX_REQUIRED_VALIDATOR], host: { "[attr.required]": 'required ? "" : null' } }] }], CheckboxRequiredValidator.ctorParameters = function () {
    return [];
  };var EMAIL_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () {
      return EmailValidator;
    }), multi: !0 },
      EmailValidator = function () {
    function EmailValidator() {}return Object.defineProperty(EmailValidator.prototype, "email", { set: function (value) {
        this._enabled = "" === value || value === !0 || "true" === value, this._onChange && this._onChange();
      }, enumerable: !0, configurable: !0 }), EmailValidator.prototype.validate = function (c) {
      return this._enabled ? Validators.email(c) : null;
    }, EmailValidator.prototype.registerOnValidatorChange = function (fn) {
      this._onChange = fn;
    }, EmailValidator;
  }();EmailValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[email][formControlName],[email][formControl],[email][ngModel]", providers: [EMAIL_VALIDATOR] }] }], EmailValidator.ctorParameters = function () {
    return [];
  }, EmailValidator.propDecorators = { email: [{ type: _angular_core.Input }] };var MIN_LENGTH_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () {
      return MinLengthValidator;
    }), multi: !0 },
      MinLengthValidator = function () {
    function MinLengthValidator() {}return MinLengthValidator.prototype.ngOnChanges = function (changes) {
      "minlength" in changes && (this._createValidator(), this._onChange && this._onChange());
    }, MinLengthValidator.prototype.validate = function (c) {
      return null == this.minlength ? null : this._validator(c);
    }, MinLengthValidator.prototype.registerOnValidatorChange = function (fn) {
      this._onChange = fn;
    }, MinLengthValidator.prototype._createValidator = function () {
      this._validator = Validators.minLength(parseInt(this.minlength, 10));
    }, MinLengthValidator;
  }();MinLengthValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", providers: [MIN_LENGTH_VALIDATOR], host: { "[attr.minlength]": "minlength ? minlength : null" } }] }], MinLengthValidator.ctorParameters = function () {
    return [];
  }, MinLengthValidator.propDecorators = { minlength: [{ type: _angular_core.Input }] };var MAX_LENGTH_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () {
      return MaxLengthValidator;
    }), multi: !0 },
      MaxLengthValidator = function () {
    function MaxLengthValidator() {}return MaxLengthValidator.prototype.ngOnChanges = function (changes) {
      "maxlength" in changes && (this._createValidator(), this._onChange && this._onChange());
    }, MaxLengthValidator.prototype.validate = function (c) {
      return null != this.maxlength ? this._validator(c) : null;
    }, MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) {
      this._onChange = fn;
    }, MaxLengthValidator.prototype._createValidator = function () {
      this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
    }, MaxLengthValidator;
  }();MaxLengthValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", providers: [MAX_LENGTH_VALIDATOR], host: { "[attr.maxlength]": "maxlength ? maxlength : null" } }] }], MaxLengthValidator.ctorParameters = function () {
    return [];
  }, MaxLengthValidator.propDecorators = { maxlength: [{ type: _angular_core.Input }] };var PATTERN_VALIDATOR = { provide: NG_VALIDATORS, useExisting: _angular_core.forwardRef(function () {
      return PatternValidator;
    }), multi: !0 },
      PatternValidator = function () {
    function PatternValidator() {}return PatternValidator.prototype.ngOnChanges = function (changes) {
      "pattern" in changes && (this._createValidator(), this._onChange && this._onChange());
    }, PatternValidator.prototype.validate = function (c) {
      return this._validator(c);
    }, PatternValidator.prototype.registerOnValidatorChange = function (fn) {
      this._onChange = fn;
    }, PatternValidator.prototype._createValidator = function () {
      this._validator = Validators.pattern(this.pattern);
    }, PatternValidator;
  }();PatternValidator.decorators = [{ type: _angular_core.Directive, args: [{ selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", providers: [PATTERN_VALIDATOR], host: { "[attr.pattern]": "pattern ? pattern : null" } }] }], PatternValidator.ctorParameters = function () {
    return [];
  }, PatternValidator.propDecorators = { pattern: [{ type: _angular_core.Input }] }; /**
                                                                                     * @license
                                                                                     * Copyright Google Inc. All Rights Reserved.
                                                                                     *
                                                                                     * Use of this source code is governed by an MIT-style license that can be
                                                                                     * found in the LICENSE file at https://angular.io/license
                                                                                     */
  var FormBuilder = function () {
    function FormBuilder() {}return FormBuilder.prototype.group = function (controlsConfig, extra) {
      void 0 === extra && (extra = null);var controls = this._reduceControls(controlsConfig),
          validator = null != extra ? extra.validator : null,
          asyncValidator = null != extra ? extra.asyncValidator : null;return new FormGroup(controls, validator, asyncValidator);
    }, FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
      return new FormControl(formState, validator, asyncValidator);
    }, FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
      var _this = this,
          controls = controlsConfig.map(function (c) {
        return _this._createControl(c);
      });return new FormArray(controls, validator, asyncValidator);
    }, FormBuilder.prototype._reduceControls = function (controlsConfig) {
      var _this = this,
          controls = {};return Object.keys(controlsConfig).forEach(function (controlName) {
        controls[controlName] = _this._createControl(controlsConfig[controlName]);
      }), controls;
    }, FormBuilder.prototype._createControl = function (controlConfig) {
      if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) return controlConfig;if (Array.isArray(controlConfig)) {
        var value = controlConfig[0],
            validator = controlConfig.length > 1 ? controlConfig[1] : null,
            asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;return this.control(value, validator, asyncValidator);
      }return this.control(controlConfig);
    }, FormBuilder;
  }();FormBuilder.decorators = [{ type: _angular_core.Injectable }], FormBuilder.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var VERSION = new _angular_core.Version("4.1.3"),
      NgNoValidate = function () {
    function NgNoValidate() {}return NgNoValidate;
  }();NgNoValidate.decorators = [{ type: _angular_core.Directive, args: [{ selector: "form:not([ngNoForm]):not([ngNativeValidate])", host: { novalidate: "" } }] }], NgNoValidate.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var SHARED_FORM_DIRECTIVES = [NgNoValidate, NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator],
      TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm],
      REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName],
      InternalFormsSharedModule = function () {
    function InternalFormsSharedModule() {}return InternalFormsSharedModule;
  }();InternalFormsSharedModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES }] }], InternalFormsSharedModule.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var FormsModule = function () {
    function FormsModule() {}return FormsModule;
  }();FormsModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: TEMPLATE_DRIVEN_DIRECTIVES, providers: [RadioControlRegistry], exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES] }] }], FormsModule.ctorParameters = function () {
    return [];
  };var ReactiveFormsModule = function () {
    function ReactiveFormsModule() {}return ReactiveFormsModule;
  }();ReactiveFormsModule.decorators = [{ type: _angular_core.NgModule, args: [{ declarations: [REACTIVE_DRIVEN_DIRECTIVES], providers: [FormBuilder, RadioControlRegistry], exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES] }] }], ReactiveFormsModule.ctorParameters = function () {
    return [];
  }, exports.AbstractControlDirective = AbstractControlDirective, exports.AbstractFormGroupDirective = AbstractFormGroupDirective, exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor, exports.ControlContainer = ControlContainer, exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR, exports.COMPOSITION_BUFFER_MODE = COMPOSITION_BUFFER_MODE, exports.DefaultValueAccessor = DefaultValueAccessor, exports.NgControl = NgControl, exports.NgControlStatus = NgControlStatus, exports.NgControlStatusGroup = NgControlStatusGroup, exports.NgForm = NgForm, exports.NgModel = NgModel, exports.NgModelGroup = NgModelGroup, exports.RadioControlValueAccessor = RadioControlValueAccessor, exports.FormControlDirective = FormControlDirective, exports.FormControlName = FormControlName, exports.FormGroupDirective = FormGroupDirective, exports.FormArrayName = FormArrayName, exports.FormGroupName = FormGroupName, exports.NgSelectOption = NgSelectOption, exports.SelectControlValueAccessor = SelectControlValueAccessor, exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor, exports.CheckboxRequiredValidator = CheckboxRequiredValidator, exports.EmailValidator = EmailValidator, exports.MaxLengthValidator = MaxLengthValidator, exports.MinLengthValidator = MinLengthValidator, exports.PatternValidator = PatternValidator, exports.RequiredValidator = RequiredValidator, exports.FormBuilder = FormBuilder, exports.AbstractControl = AbstractControl, exports.FormArray = FormArray, exports.FormControl = FormControl, exports.FormGroup = FormGroup, exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS, exports.NG_VALIDATORS = NG_VALIDATORS, exports.Validators = Validators, exports.VERSION = VERSION, exports.FormsModule = FormsModule, exports.ReactiveFormsModule = ReactiveFormsModule, exports.ɵba = InternalFormsSharedModule, exports.ɵz = REACTIVE_DRIVEN_DIRECTIVES, exports.ɵx = SHARED_FORM_DIRECTIVES, exports.ɵy = TEMPLATE_DRIVEN_DIRECTIVES, exports.ɵa = CHECKBOX_VALUE_ACCESSOR, exports.ɵb = DEFAULT_VALUE_ACCESSOR, exports.ɵc = AbstractControlStatus, exports.ɵd = ngControlStatusHost, exports.ɵe = formDirectiveProvider, exports.ɵf = formControlBinding, exports.ɵg = modelGroupProvider, exports.ɵbf = NgNoValidate, exports.ɵbb = NUMBER_VALUE_ACCESSOR, exports.ɵbc = NumberValueAccessor, exports.ɵh = RADIO_VALUE_ACCESSOR, exports.ɵi = RadioControlRegistry, exports.ɵbd = RANGE_VALUE_ACCESSOR, exports.ɵbe = RangeValueAccessor, exports.ɵj = formControlBinding$1, exports.ɵk = controlNameBinding, exports.ɵl = formDirectiveProvider$1, exports.ɵn = formArrayNameProvider, exports.ɵm = formGroupNameProvider, exports.ɵo = SELECT_VALUE_ACCESSOR, exports.ɵq = NgSelectMultipleOption, exports.ɵp = SELECT_MULTIPLE_VALUE_ACCESSOR, exports.ɵs = CHECKBOX_REQUIRED_VALIDATOR, exports.ɵt = EMAIL_VALIDATOR, exports.ɵv = MAX_LENGTH_VALIDATOR, exports.ɵu = MIN_LENGTH_VALIDATOR, exports.ɵw = PATTERN_VALIDATOR, exports.ɵr = REQUIRED_VALIDATOR, Object.defineProperty(exports, "__esModule", { value: !0 });
});

$__System.registerDynamic("7d", ["e", "49"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var forms_1 = $__require("49");
    var Filter = function () {
        function Filter(fb) {
            this.fb = fb;
            this.filtered = new core_1.EventEmitter();
            this.form = this.fb.group({});
        }
        Filter.prototype.ngOnChanges = function () {
            try {
                this.form = this.fb.group(this.filters);
            } catch (e) {}
        };
        Filter.prototype.onChange = function () {
            this.filtered.emit(this.form.value);
        };
        return Filter;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object)], Filter.prototype, "filters", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], Filter.prototype, "filtered", void 0);
    Filter = __decorate([core_1.Component({
        selector: 'filter',
        template: "\n    <form class=\"filter-container\" [formGroup]=\"form\">\n      <div\n        class=\"filter\"\n        *ngFor=\"let filter of filters | keys\"\n      >\n        <div class=\"filter__label\">\n          {{ filter }} :\n        </div>\n        \n        <select\n          class=\"filter__select input\"\n          formControlName=\"{{ filter }}\"\n          (change)=\"onChange(filter, $event.target.value)\"\n        >\n          <option value=\"\" selected>- Show all -</option>\n          <option\n            *ngFor=\"let option of filters[filter]\"\n            value=\"{{ option }}\"\n          >\n            {{ option }}\n          </option>\n        </select>\n      </div>\n    </form>\n  ",
        styles: ["\n    .filter {\n        display: flex;\n        align-items: center;\n        margin: 5px 0;\n    }\n    \n    .filter__label {\n        margin: 0 10px 0 0;\n        width: 100px;\n        text-transform: capitalize;\n        font-size: 15px;\n        word-break: break-word;\n    }\n    .filter__select {\n        width: 140px;\n        cursor: pointer;\n        font-size: 15px;\n    }\n    @media only screen and (max-width: 500px) {\n      .filter {\n          justify-content: space-between;\n      }\n      .filter__label {\n          width: 42%;\n      }\n      \n      .filter__select {\n          width: 47%;\n      }\n    }\n  "]
    }), __metadata("design:paramtypes", [forms_1.FormBuilder])], Filter);
    exports.Filter = Filter;

});
$__System.registerDynamic("1c", ["19"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("19");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ScalarObservable = function (_super) {
        __extends(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
            if (scheduler) {
                this._isScalar = false;
            }
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done,
                value = state.value,
                subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            } else {
                subscriber.next(value);
                if (!subscriber.closed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1.Observable);
    exports.ScalarObservable = ScalarObservable;

});
$__System.registerDynamic("1d", ["19"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("19");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var EmptyObservable = function (_super) {
        __extends(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits a complete notification.
         *
         * <span class="informal">Just emits 'complete', and nothing else.
         * </span>
         *
         * <img src="./img/empty.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the complete notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then complete.</caption>
         * var result = Rx.Observable.empty().startWith(7);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
         * );
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following to the console:
         * // x is equal to the count on the interval eg(0,1,2,3,...)
         * // x will occur every 1000ms
         * // if x % 2 is equal to 1 print abc
         * // if x % 2 is not equal to 1 nothing will be output
         *
         * @see {@link create}
         * @see {@link never}
         * @see {@link of}
         * @see {@link throw}
         *
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emission of the complete notification.
         * @return {Observable} An "empty" Observable: emits only the complete
         * notification.
         * @static true
         * @name empty
         * @owner Observable
         */
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            } else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1.Observable);
    exports.EmptyObservable = EmptyObservable;

});
$__System.registerDynamic('26', ['19', '1c', '1d', '5c'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('19');
    var ScalarObservable_1 = $__require('1c');
    var EmptyObservable_1 = $__require('1d');
    var isScheduler_1 = $__require('5c');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayObservable = function (_super) {
        __extends(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        /**
         * Creates an Observable that emits some values you specify as arguments,
         * immediately one after the other, and then emits a complete notification.
         *
         * <span class="informal">Emits the arguments you provide, then completes.
         * </span>
         *
         * <img src="./img/of.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the arguments given, and the complete notification thereafter. It can
         * be used for composing with other Observables, such as with {@link concat}.
         * By default, it uses a `null` IScheduler, which means the `next`
         * notifications are sent synchronously, although with a different IScheduler
         * it is possible to determine when those notifications will be delivered.
         *
         * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
         * var numbers = Rx.Observable.of(10, 20, 30);
         * var letters = Rx.Observable.of('a', 'b', 'c');
         * var interval = Rx.Observable.interval(1000);
         * var result = numbers.concat(letters).concat(interval);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link throw}
         *
         * @param {...T} values Arguments that represent `next` values to be emitted.
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emissions of the `next` notifications.
         * @return {Observable<T>} An Observable that emits each given input value.
         * @static true
         * @name of
         * @owner Observable
         */
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1.isScheduler(scheduler)) {
                array.pop();
            } else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            } else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            } else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array,
                index = state.index,
                count = state.count,
                subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < count && !subscriber.closed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1.Observable);
    exports.ArrayObservable = ArrayObservable;

});
$__System.registerDynamic("2f", ["1f"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("1f");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var OuterSubscriber = function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1.Subscriber);
    exports.OuterSubscriber = OuterSubscriber;

});
$__System.registerDynamic("23", [], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  exports.isArrayLike = function (x) {
    return x && typeof x.length === 'number';
  };

});
$__System.registerDynamic('24', [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    exports.isPromise = isPromise;

});
$__System.registerDynamic('1a', ['18'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var root_1 = $__require('18');
    function symbolIteratorPonyfill(root) {
        var Symbol = root.Symbol;
        if (typeof Symbol === 'function') {
            if (!Symbol.iterator) {
                Symbol.iterator = Symbol('iterator polyfill');
            }
            return Symbol.iterator;
        } else {
            // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
            var Set_1 = root.Set;
            if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
                return '@@iterator';
            }
            var Map_1 = root.Map;
            // required for compatability with es6-shim
            if (Map_1) {
                var keys = Object.getOwnPropertyNames(Map_1.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                    if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                        return key;
                    }
                }
            }
            return '@@iterator';
        }
    }
    exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
    exports.iterator = symbolIteratorPonyfill(root_1.root);
    /**
     * @deprecated use iterator instead
     */
    exports.$$iterator = exports.iterator;

});
$__System.registerDynamic("7e", ["1f"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("1f");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerSubscriber = function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1.Subscriber);
    exports.InnerSubscriber = InnerSubscriber;

});
$__System.registerDynamic('2e', ['18', '23', '24', '7f', '19', '1a', '7e', '27'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var root_1 = $__require('18');
    var isArrayLike_1 = $__require('23');
    var isPromise_1 = $__require('24');
    var isObject_1 = $__require('7f');
    var Observable_1 = $__require('19');
    var iterator_1 = $__require('1a');
    var InnerSubscriber_1 = $__require('7e');
    var observable_1 = $__require('27');
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.closed) {
            return null;
        }
        if (result instanceof Observable_1.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return null;
            } else {
                return result.subscribe(destination);
            }
        } else if (isArrayLike_1.isArrayLike(result)) {
            for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
                destination.next(result[i]);
            }
            if (!destination.closed) {
                destination.complete();
            }
        } else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.closed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) {
                return destination.error(err);
            }).then(null, function (err) {
                // Escaping the Promise trap: globally throw unhandled errors
                root_1.root.setTimeout(function () {
                    throw err;
                });
            });
            return destination;
        } else if (result && typeof result[iterator_1.iterator] === 'function') {
            var iterator = result[iterator_1.iterator]();
            do {
                var item = iterator.next();
                if (item.done) {
                    destination.complete();
                    break;
                }
                destination.next(item.value);
                if (destination.closed) {
                    break;
                }
            } while (true);
        } else if (result && typeof result[observable_1.observable] === 'function') {
            var obs = result[observable_1.observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
            } else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        } else {
            var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
            var msg = "You provided " + value + " where a stream was expected." + ' You can provide an Observable, Promise, Array, or Iterable.';
            destination.error(new TypeError(msg));
        }
        return null;
    }
    exports.subscribeToResult = subscribeToResult;

});
$__System.registerDynamic('32', ['2f', '2e'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('2f');
    var subscribeToResult_1 = $__require('2e');
    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeAllOperator(concurrent));
    }
    exports.mergeAll = mergeAll;
    var MergeAllOperator = function () {
        function MergeAllOperator(concurrent) {
            this.concurrent = concurrent;
        }
        MergeAllOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
        };
        return MergeAllOperator;
    }();
    exports.MergeAllOperator = MergeAllOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeAllSubscriber = function (_super) {
        __extends(MergeAllSubscriber, _super);
        function MergeAllSubscriber(destination, concurrent) {
            _super.call(this, destination);
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
        }
        MergeAllSubscriber.prototype._next = function (observable) {
            if (this.active < this.concurrent) {
                this.active++;
                this.add(subscribeToResult_1.subscribeToResult(this, observable));
            } else {
                this.buffer.push(observable);
            }
        };
        MergeAllSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeAllSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeAllSubscriber = MergeAllSubscriber;

});
$__System.registerDynamic("5c", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    exports.isScheduler = isScheduler;

});
$__System.registerDynamic('5a', ['19', '26', '32', '5c'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('19');
    var ArrayObservable_1 = $__require('26');
    var mergeAll_1 = $__require('32');
    var isScheduler_1 = $__require('5c');
    /* tslint:enable:max-line-length */
    /**
     * Creates an output Observable which concurrently emits all values from every
     * given input Observable.
     *
     * <span class="informal">Flattens multiple Observables together by blending
     * their values into one Observable.</span>
     *
     * <img src="./img/merge.png" width="100%">
     *
     * `merge` subscribes to each given input Observable (either the source or an
     * Observable given as argument), and simply forwards (without doing any
     * transformation) all the values from all the input Observables to the output
     * Observable. The output Observable only completes once all input Observables
     * have completed. Any error delivered by an input Observable will be immediately
     * emitted on the output Observable.
     *
     * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var timer = Rx.Observable.interval(1000);
     * var clicksOrTimer = clicks.merge(timer);
     * clicksOrTimer.subscribe(x => console.log(x));
     *
     * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var concurrent = 2; // the argument
     * var merged = timer1.merge(timer2, timer3, concurrent);
     * merged.subscribe(x => console.log(x));
     *
     * @see {@link mergeAll}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     *
     * @param {ObservableInput} other An input Observable to merge with the source
     * Observable. More than one input Observables may be given as argument.
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
     * concurrency of input Observables.
     * @return {Observable} An Observable that emits items that are the result of
     * every input Observable.
     * @method merge
     * @owner Observable
     */
    function merge() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
    }
    exports.merge = merge;
    /* tslint:enable:max-line-length */
    /**
     * Creates an output Observable which concurrently emits all values from every
     * given input Observable.
     *
     * <span class="informal">Flattens multiple Observables together by blending
     * their values into one Observable.</span>
     *
     * <img src="./img/merge.png" width="100%">
     *
     * `merge` subscribes to each given input Observable (as arguments), and simply
     * forwards (without doing any transformation) all the values from all the input
     * Observables to the output Observable. The output Observable only completes
     * once all input Observables have completed. Any error delivered by an input
     * Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var timer = Rx.Observable.interval(1000);
     * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
     * clicksOrTimer.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // timer will emit ascending values, one every second(1000ms) to console
     * // clicks logs MouseEvents to console everytime the "document" is clicked
     * // Since the two streams are merged you see these happening
     * // as they occur.
     *
     * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
     * var timer1 = Rx.Observable.interval(1000).take(10);
     * var timer2 = Rx.Observable.interval(2000).take(6);
     * var timer3 = Rx.Observable.interval(500).take(10);
     * var concurrent = 2; // the argument
     * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
     * merged.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // - First timer1 and timer2 will run concurrently
     * // - timer1 will emit a value every 1000ms for 10 iterations
     * // - timer2 will emit a value every 2000ms for 6 iterations
     * // - after timer1 hits it's max iteration, timer2 will
     * //   continue, and timer3 will start to run concurrently with timer2
     * // - when timer2 hits it's max iteration it terminates, and
     * //   timer3 will continue to emit a value every 500ms until it is complete
     *
     * @see {@link mergeAll}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     *
     * @param {...ObservableInput} observables Input Observables to merge together.
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
     * concurrency of input Observables.
     * @return {Observable} an Observable that emits items that are the result of
     * every input Observable.
     * @static true
     * @name merge
     * @owner Observable
     */
    function mergeStatic() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;
        var last = observables[observables.length - 1];
        if (isScheduler_1.isScheduler(last)) {
            scheduler = observables.pop();
            if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
                concurrent = observables.pop();
            }
        } else if (typeof last === 'number') {
            concurrent = observables.pop();
        }
        if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
            return observables[0];
        }
        return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
    }
    exports.mergeStatic = mergeStatic;

});
$__System.registerDynamic("80", ["5a"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var merge_1 = $__require("5a");
  exports.merge = merge_1.mergeStatic;

});
$__System.registerDynamic('81', ['36', '19', '1f', '55'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('36');
    var Observable_1 = $__require('19');
    var Subscriber_1 = $__require('1f');
    var Subscription_1 = $__require('55');
    /**
     * @class ConnectableObservable<T>
     */
    var ConnectableObservable = function (_super) {
        __extends(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            _super.call(this);
            this.source = source;
            this.subjectFactory = subjectFactory;
            this._refCount = 0;
            this._isComplete = false;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                this._isComplete = false;
                connection = this._connection = new Subscription_1.Subscription();
                connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription_1.Subscription.EMPTY;
                } else {
                    this._connection = connection;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return this.lift(new RefCountOperator(this));
        };
        return ConnectableObservable;
    }(Observable_1.Observable);
    exports.ConnectableObservable = ConnectableObservable;
    var connectableProto = ConnectableObservable.prototype;
    exports.connectableObservableDescriptor = {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subject: { value: null, writable: true },
        _connection: { value: null, writable: true },
        _subscribe: { value: connectableProto._subscribe },
        _isComplete: { value: connectableProto._isComplete, writable: true },
        getSubject: { value: connectableProto.getSubject },
        connect: { value: connectableProto.connect },
        refCount: { value: connectableProto.refCount }
    };
    var ConnectableSubscriber = function (_super) {
        __extends(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this.connectable._isComplete = true;
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(Subject_1.SubjectSubscriber);
    var RefCountOperator = function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }();
    var RefCountSubscriber = function (_super) {
        __extends(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            ///
            // Compare the local RefCountSubscriber's connection Subscription to the
            // connection Subscription on the shared ConnectableObservable. In cases
            // where the ConnectableObservable source synchronously emits values, and
            // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
            // execution continues to here before the RefCountOperator has a chance to
            // supply the RefCountSubscriber with the shared connection Subscription.
            // For example:
            // ```
            // Observable.range(0, 10)
            //   .publish()
            //   .refCount()
            //   .take(5)
            //   .subscribe();
            // ```
            // In order to account for this case, RefCountSubscriber should only dispose
            // the ConnectableObservable's shared connection Subscription if the
            // connection Subscription exists, *and* either:
            //   a. RefCountSubscriber doesn't have a reference to the shared connection
            //      Subscription yet, or,
            //   b. RefCountSubscriber's connection Subscription reference is identical
            //      to the shared connection Subscription
            ///
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber_1.Subscriber);

});
$__System.registerDynamic('82', ['81'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var ConnectableObservable_1 = $__require('81');
    /* tslint:enable:max-line-length */
    /**
     * Returns an Observable that emits the results of invoking a specified selector on items
     * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
     *
     * <img src="./img/multicast.png" width="100%">
     *
     * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
     * which the source sequence's elements will be multicast to the selector function
     * or Subject to push source elements into.
     * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
     * as many times as needed, without causing multiple subscriptions to the source stream.
     * Subscribers to the given source will receive all notifications of the source from the
     * time of the subscription forward.
     * @return {Observable} An Observable that emits the results of invoking the selector
     * on the items emitted by a `ConnectableObservable` that shares a single subscription to
     * the underlying stream.
     * @method multicast
     * @owner Observable
     */
    function multicast(subjectOrSubjectFactory, selector) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        } else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return this.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
        connectable.source = this;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    }
    exports.multicast = multicast;
    var MulticastOperator = function () {
        function MulticastOperator(subjectFactory, selector) {
            this.subjectFactory = subjectFactory;
            this.selector = selector;
        }
        MulticastOperator.prototype.call = function (subscriber, source) {
            var selector = this.selector;
            var subject = this.subjectFactory();
            var subscription = selector(subject).subscribe(subscriber);
            subscription.add(source.subscribe(subject));
            return subscription;
        };
        return MulticastOperator;
    }();
    exports.MulticastOperator = MulticastOperator;

});
$__System.registerDynamic('5f', ['82', '36'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var multicast_1 = $__require('82');
    var Subject_1 = $__require('36');
    function shareSubjectFactory() {
        return new Subject_1.Subject();
    }
    /**
     * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
     * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
     * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
     * This is an alias for .publish().refCount().
     *
     * <img src="./img/share.png" width="100%">
     *
     * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
     * @method share
     * @owner Observable
     */
    function share() {
        return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
    }
    exports.share = share;
    ;

});
/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
!function (global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("rxjs/Observable"), require("rxjs/observable/merge"), require("rxjs/operator/share"), require("rxjs/Subject")) : "function" == "function" && true ? $__System.registerDynamic("e", ["19", "80", "5f", "36"], false, function ($__require, $__exports, $__module) {
    if (typeof factory === "function") {
      return factory.call($__exports, $__exports, $__require("19"), $__require("80"), $__require("5f"), $__require("36"));
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx);
}(this, function (exports, rxjs_Observable, rxjs_observable_merge, rxjs_operator_share, rxjs_Subject) {
  "use strict";
  function getSymbolIterator() {
    if (!_symbolIterator) {
      var Symbol = _global.Symbol;if (Symbol && Symbol.iterator) _symbolIterator = Symbol.iterator;else for (var keys = Object.getOwnPropertyNames(Map.prototype), i = 0; i < keys.length; ++i) {
        var key = keys[i];"entries" !== key && "size" !== key && Map.prototype[key] === Map.prototype.entries && (_symbolIterator = key);
      }
    }return _symbolIterator;
  }function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
  }function looseIdentical(a, b) {
    return a === b || "number" == typeof a && "number" == typeof b && isNaN(a) && isNaN(b);
  }function stringify(token) {
    if ("string" == typeof token) return token;if (null == token) return "" + token;if (token.overriddenName) return "" + token.overriddenName;if (token.name) return "" + token.name;var res = token.toString();if (null == res) return "" + res;var newLineIndex = res.indexOf("\n");return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }function extractAnnotation(annotation) {
    return "function" == typeof annotation && annotation.hasOwnProperty("annotation") && (annotation = annotation.annotation), annotation;
  }function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");if ("function" == typeof fnOrArray) return fnOrArray;if (Array.isArray(fnOrArray)) {
      var annotations = fnOrArray,
          annoLength = annotations.length - 1,
          fn = fnOrArray[annoLength];if ("function" != typeof fn) throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");if (annoLength != fn.length) throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));for (var paramsAnnotations = [], i = 0, ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];paramsAnnotations.push(paramAnnotations);var annotation = annotations[i];if (Array.isArray(annotation)) for (var j = 0; j < annotation.length; j++) paramAnnotations.push(extractAnnotation(annotation[j]));else "function" == typeof annotation ? paramAnnotations.push(extractAnnotation(annotation)) : paramAnnotations.push(annotation);
      }return Reflect.defineMetadata("parameters", paramsAnnotations, fn), fn;
    }throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
  }function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : void 0, "constructor"),
        proto = constructor.prototype;if (clsDef.hasOwnProperty("extends")) {
      if ("function" != typeof clsDef.extends) throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));constructor.prototype = proto = Object.create(clsDef.extends.prototype);
    }for (var key in clsDef) "extends" !== key && "prototype" !== key && clsDef.hasOwnProperty(key) && (proto[key] = applyParams(clsDef[key], key));this && this.annotations instanceof Array && Reflect.defineMetadata("annotations", this.annotations, constructor);var constructorName = constructor.name;return constructorName && "constructor" !== constructorName || (constructor.overriddenName = "class" + _nextClassId++), constructor;
  }function makeDecorator(name, props, parentClass, chainFn) {
    function DecoratorFactory(objOrType) {
      if (!Reflect || !Reflect.getOwnMetadata) throw "reflect-metadata shim is required when using class decorators";if (this instanceof DecoratorFactory) return metaCtor.call(this, objOrType), this;var annotationInstance = new DecoratorFactory(objOrType),
          chainAnnotation = "function" == typeof this && Array.isArray(this.annotations) ? this.annotations : [];chainAnnotation.push(annotationInstance);var TypeDecorator = function (cls) {
        var annotations = Reflect.getOwnMetadata("annotations", cls) || [];return annotations.push(annotationInstance), Reflect.defineMetadata("annotations", annotations, cls), cls;
      };return TypeDecorator.annotations = chainAnnotation, TypeDecorator.Class = Class, chainFn && chainFn(TypeDecorator), TypeDecorator;
    }var metaCtor = makeMetadataCtor([props]);return parentClass && (DecoratorFactory.prototype = Object.create(parentClass.prototype)), DecoratorFactory.prototype.toString = function () {
      return "@" + name;
    }, DecoratorFactory.annotationCls = DecoratorFactory, DecoratorFactory;
  }function makeMetadataCtor(props) {
    return function () {
      for (var _this = this, args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];props.forEach(function (prop, i) {
        var argVal = args[i];if (Array.isArray(prop)) _this[prop[0]] = void 0 === argVal ? prop[1] : argVal;else for (var propName in prop) _this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
      });
    };
  }function makeParamDecorator(name, props, parentClass) {
    function ParamDecoratorFactory() {
      function ParamDecorator(cls, unusedKey, index) {
        for (var parameters = Reflect.getOwnMetadata("parameters", cls) || []; parameters.length <= index;) parameters.push(null);return parameters[index] = parameters[index] || [], parameters[index].push(annotationInstance), Reflect.defineMetadata("parameters", parameters, cls), cls;
      }for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];if (this instanceof ParamDecoratorFactory) return metaCtor.apply(this, args), this;var annotationInstance = new (ParamDecoratorFactory.bind.apply(ParamDecoratorFactory, [void 0].concat(args)))();return ParamDecorator.annotation = annotationInstance, ParamDecorator;
    }var metaCtor = makeMetadataCtor(props);return parentClass && (ParamDecoratorFactory.prototype = Object.create(parentClass.prototype)), ParamDecoratorFactory.prototype.toString = function () {
      return "@" + name;
    }, ParamDecoratorFactory.annotationCls = ParamDecoratorFactory, ParamDecoratorFactory;
  }function makePropDecorator(name, props, parentClass) {
    function PropDecoratorFactory() {
      for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];if (this instanceof PropDecoratorFactory) return metaCtor.apply(this, args), this;var decoratorInstance = new (PropDecoratorFactory.bind.apply(PropDecoratorFactory, [void 0].concat(args)))();return function (target, name) {
        var meta = Reflect.getOwnMetadata("propMetadata", target.constructor) || {};meta[name] = meta.hasOwnProperty(name) && meta[name] || [], meta[name].unshift(decoratorInstance), Reflect.defineMetadata("propMetadata", meta, target.constructor);
      };
    }var metaCtor = makeMetadataCtor(props);return parentClass && (PropDecoratorFactory.prototype = Object.create(parentClass.prototype)), PropDecoratorFactory.prototype.toString = function () {
      return "@" + name;
    }, PropDecoratorFactory.annotationCls = PropDecoratorFactory, PropDecoratorFactory;
  }function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return null == changeDetectionStrategy || changeDetectionStrategy === ChangeDetectionStrategy.Default;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function forwardRef(forwardRefFn) {
    return forwardRefFn.__forward_ref__ = forwardRef, forwardRefFn.toString = function () {
      return stringify(this());
    }, forwardRefFn;
  }function resolveForwardRef(type) {
    return "function" == typeof type && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef ? type() : type;
  }function getDebugContext(error) {
    return error[ERROR_DEBUG_CONTEXT];
  }function getOriginalError(error) {
    return error[ERROR_ORIGINAL_ERROR];
  }function getErrorLogger(error) {
    return error[ERROR_LOGGER] || defaultErrorLogger;
  }function defaultErrorLogger(console) {
    for (var values = [], _i = 1; _i < arguments.length; _i++) values[_i - 1] = arguments[_i];console.error.apply(console, values);
  }function wrappedError(message, originalError) {
    var msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError),
        error = Error(msg);return error[ERROR_ORIGINAL_ERROR] = originalError, error;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function findFirstClosedCycle(keys) {
    for (var res = [], i = 0; i < keys.length; ++i) {
      if (res.indexOf(keys[i]) > -1) return res.push(keys[i]), res;res.push(keys[i]);
    }return res;
  }function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(keys.slice().reverse()),
          tokenStrs = reversed.map(function (k) {
        return stringify(k.token);
      });return " (" + tokenStrs.join(" -> ") + ")";
    }return "";
  }function injectionError(injector, key, constructResolvingMessage, originalError) {
    var error = originalError ? wrappedError("", originalError) : Error();return error.addKey = addKey, error.keys = [key], error.injectors = [injector], error.constructResolvingMessage = constructResolvingMessage, error.message = error.constructResolvingMessage(), error[ERROR_ORIGINAL_ERROR] = originalError, error;
  }function addKey(injector, key) {
    this.injectors.push(injector), this.keys.push(key), this.message = this.constructResolvingMessage();
  }function noProviderError(injector, key) {
    return injectionError(injector, key, function () {
      var first = stringify(this.keys[0].token);return "No provider for " + first + "!" + constructResolvingPath(this.keys);
    });
  }function cyclicDependencyError(injector, key) {
    return injectionError(injector, key, function () {
      return "Cannot instantiate cyclic dependency!" + constructResolvingPath(this.keys);
    });
  }function instantiationError(injector, originalException, originalStack, key) {
    return injectionError(injector, key, function () {
      var first = stringify(this.keys[0].token);return getOriginalError(this).message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
    }, originalException);
  }function invalidProviderError(provider) {
    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
  }function noAnnotationError(typeOrFunc, params) {
    for (var signature = [], i = 0, ii = params.length; i < ii; i++) {
      var parameter = params[i];parameter && 0 != parameter.length ? signature.push(parameter.map(stringify).join(" ")) : signature.push("?");
    }return Error("Cannot resolve all parameters for '" + stringify(typeOrFunc) + "'(" + signature.join(", ") + "). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + stringify(typeOrFunc) + "' is decorated with Injectable.");
  }function outOfBoundsError(index) {
    return Error("Index " + index + " is out-of-bounds.");
  }function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
  }function isType(v) {
    return "function" == typeof v;
  }function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    return decoratorInvocations ? decoratorInvocations.map(function (decoratorInvocation) {
      var decoratorType = decoratorInvocation.type,
          annotationCls = decoratorType.annotationCls,
          annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    }) : [];
  }function getParentCtor(ctor) {
    var parentProto = Object.getPrototypeOf(ctor.prototype),
        parentCtor = parentProto ? parentProto.constructor : null;return parentCtor || Object;
  }function resolveReflectiveFactory(provider) {
    var factoryFn, resolvedDeps;if (provider.useClass) {
      var useClass = resolveForwardRef(provider.useClass);factoryFn = reflector.factory(useClass), resolvedDeps = _dependenciesFor(useClass);
    } else provider.useExisting ? (factoryFn = function (aliasInstance) {
      return aliasInstance;
    }, resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))]) : provider.useFactory ? (factoryFn = provider.useFactory, resolvedDeps = constructDependencies(provider.useFactory, provider.deps)) : (factoryFn = function () {
      return provider.useValue;
    }, resolvedDeps = _EMPTY_LIST);return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || !1);
  }function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []),
        resolved = normalized.map(resolveReflectiveProvider),
        resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());return Array.from(resolvedProviderMap.values());
  }function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i],
          existing = normalizedProvidersMap.get(provider.key.id);if (existing) {
        if (provider.multiProvider !== existing.multiProvider) throw mixingMultiProvidersWithRegularProvidersError(existing, provider);if (provider.multiProvider) for (var j = 0; j < provider.resolvedFactories.length; j++) existing.resolvedFactories.push(provider.resolvedFactories[j]);else normalizedProvidersMap.set(provider.key.id, provider);
      } else {
        var resolvedProvider = void 0;resolvedProvider = provider.multiProvider ? new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider) : provider, normalizedProvidersMap.set(provider.key.id, resolvedProvider);
      }
    }return normalizedProvidersMap;
  }function _normalizeProviders(providers, res) {
    return providers.forEach(function (b) {
      if (b instanceof Type) res.push({ provide: b, useClass: b });else if (b && "object" == typeof b && void 0 !== b.provide) res.push(b);else {
        if (!(b instanceof Array)) throw invalidProviderError(b);_normalizeProviders(b, res);
      }
    }), res;
  }function constructDependencies(typeOrFunc, dependencies) {
    if (dependencies) {
      var params_1 = dependencies.map(function (t) {
        return [t];
      });return dependencies.map(function (t) {
        return _extractToken(typeOrFunc, t, params_1);
      });
    }return _dependenciesFor(typeOrFunc);
  }function _dependenciesFor(typeOrFunc) {
    var params = reflector.parameters(typeOrFunc);if (!params) return [];if (params.some(function (p) {
      return null == p;
    })) throw noAnnotationError(typeOrFunc, params);return params.map(function (p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }function _extractToken(typeOrFunc, metadata, params) {
    var token = null,
        optional = !1;if (!Array.isArray(metadata)) return metadata instanceof Inject ? _createDependency(metadata.token, optional, null) : _createDependency(metadata, optional, null);for (var visibility = null, i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];paramMetadata instanceof Type ? token = paramMetadata : paramMetadata instanceof Inject ? token = paramMetadata.token : paramMetadata instanceof Optional ? optional = !0 : paramMetadata instanceof Self || paramMetadata instanceof SkipSelf ? visibility = paramMetadata : paramMetadata instanceof InjectionToken && (token = paramMetadata);
    }if (token = resolveForwardRef(token), null != token) return _createDependency(token, optional, visibility);throw noAnnotationError(typeOrFunc, params);
  }function _createDependency(token, optional, visibility) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
  }function _mapProviders(injector, fn) {
    for (var res = new Array(injector._providers.length), i = 0; i < injector._providers.length; ++i) res[i] = fn(injector.getProviderAtIndex(i));return res;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function isPromise(obj) {
    return !!obj && "function" == typeof obj.then;
  }function isObservable(obj) {
    return !!obj && "function" == typeof obj.subscribe;
  }function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }function _randomChar() {
    return String.fromCharCode(97 + Math.floor(25 * Math.random()));
  }function _throwError() {
    throw new Error("Runtime compiler is not loaded");
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function noComponentFactoryError(component) {
    var error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");return error[ERROR_COMPONENT] = component, error;
  }function detectWTF() {
    var wtf = _global.wtf;return !(!wtf || !(trace = wtf.trace)) && (events = trace.events, !0);
  }function createScope$1(signature, flags) {
    return void 0 === flags && (flags = null), events.createScope(signature, flags);
  }function leave(scope, returnValue) {
    return trace.leaveScope(scope, returnValue), returnValue;
  }function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }function endTimeRange(range) {
    trace.endTimeRange(range);
  }function noopScope(arg0, arg1) {
    return null;
  }function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }function enableProdMode() {
    if (_runModeLocked) throw new Error("Cannot enable prod mode after platform setup.");_devMode = !1;
  }function isDevMode() {
    return _runModeLocked = !0, _devMode;
  }function createPlatform(injector) {
    if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, !1)) throw new Error("There can be only one platform. Destroy the previous one to create a new one.");_platform = injector.get(PlatformRef);var inits = injector.get(PLATFORM_INITIALIZER, null);return inits && inits.forEach(function (init) {
      return init();
    }), _platform;
  }function createPlatformFactory(parentPlatformFactory, name, providers) {
    void 0 === providers && (providers = []);var marker = new InjectionToken("Platform: " + name);return function (extraProviders) {
      void 0 === extraProviders && (extraProviders = []);var platform = getPlatform();return platform && !platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, !1) || (parentPlatformFactory ? parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: !0 })) : createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: !0 })))), assertPlatform(marker);
    };
  }function assertPlatform(requiredToken) {
    var platform = getPlatform();if (!platform) throw new Error("No platform exists!");if (!platform.injector.get(requiredToken, null)) throw new Error("A platform with a different configuration has been created. Please destroy it first.");return platform;
  }function destroyPlatform() {
    _platform && !_platform.destroyed && _platform.destroy();
  }function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
  }function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
      var result = callback();return isPromise(result) ? result.catch(function (e) {
        throw errorHandler.handleError(e), e;
      }) : result;
    } catch (e) {
      throw errorHandler.handleError(e), e;
    }
  }function remove(list, el) {
    var index = list.indexOf(el);index > -1 && list.splice(index, 1);
  }function registerModuleFactory(id, factory) {
    var existing = moduleFactories.get(id);if (existing) throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);moduleFactories.set(id, factory);
  }function getModuleFactory(id) {
    var factory = moduleFactories.get(id);if (!factory) throw new Error("No module with ID " + id + " loaded");return factory;
  }function flatten(list) {
    return list.reduce(function (flat, item) {
      var flatItem = Array.isArray(item) ? flatten(item) : item;return flat.concat(flatItem);
    }, []);
  }function checkNotEmpty(value, modulePath, exportName) {
    if (!value) throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");return value;
  }function asNativeElements(debugEls) {
    return debugEls.map(function (el) {
      return el.nativeElement;
    });
  }function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function (node) {
      node instanceof DebugElement && (predicate(node) && matches.push(node), _queryElementChildren(node, predicate, matches));
    });
  }function _queryNodeChildren(parentNode, predicate, matches) {
    parentNode instanceof DebugElement && parentNode.childNodes.forEach(function (node) {
      predicate(node) && matches.push(node), node instanceof DebugElement && _queryNodeChildren(node, predicate, matches);
    });
  }function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode) || null;
  }function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
  }function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function devModeEqual(a, b) {
    var isListLikeIterableA = isListLikeIterable(a),
        isListLikeIterableB = isListLikeIterable(b);if (isListLikeIterableA && isListLikeIterableB) return areIterablesEqual(a, b, devModeEqual);var isAObject = a && ("object" == typeof a || "function" == typeof a),
        isBObject = b && ("object" == typeof b || "function" == typeof b);return !(isListLikeIterableA || !isAObject || isListLikeIterableB || !isBObject) || looseIdentical(a, b);
  }function isListLikeIterable(obj) {
    return !!isJsObject(obj) && (Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj);
  }function areIterablesEqual(a, b, comparator) {
    for (var iterator1 = a[getSymbolIterator()](), iterator2 = b[getSymbolIterator()]();;) {
      var item1 = iterator1.next(),
          item2 = iterator2.next();if (item1.done && item2.done) return !0;if (item1.done || item2.done) return !1;if (!comparator(item1.value, item2.value)) return !1;
    }
  }function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) for (var i = 0; i < obj.length; i++) fn(obj[i]);else for (var iterator = obj[getSymbolIterator()](), item = void 0; !(item = iterator.next()).done;) fn(item.value);
  }function isJsObject(o) {
    return null !== o && ("function" == typeof o || "object" == typeof o);
  }function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var previousIndex = item.previousIndex;if (null === previousIndex) return previousIndex;var moveOffset = 0;return moveOffsets && previousIndex < moveOffsets.length && (moveOffset = moveOffsets[previousIndex]), previousIndex + addRemoveOffset + moveOffset;
  }function getTypeNameForDebugging(type) {
    return type.name || typeof type;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function _reflector() {
    return reflector;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function asTextData(view, index) {
    return view.nodes[index];
  }function asElementData(view, index) {
    return view.nodes[index];
  }function asProviderData(view, index) {
    return view.nodes[index];
  }function asPureExpressionData(view, index) {
    return view.nodes[index];
  }function asQueryList(view, index) {
    return view.nodes[index];
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
    var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";return isFirstCheck && (msg += " It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook ?"), viewDebugError(msg, context);
  }function viewWrappedDebugError(err, context) {
    return err instanceof Error || (err = new Error(err.toString())), _addDebugContext(err, context), err;
  }function viewDebugError(msg, context) {
    var err = new Error(msg);return _addDebugContext(err, context), err;
  }function _addDebugContext(err, context) {
    err[ERROR_DEBUG_CONTEXT] = context, err[ERROR_LOGGER] = context.logError.bind(context);
  }function isViewDebugError(err) {
    return !!getDebugContext(err);
  }function viewDestroyedError(action) {
    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
  }function tokenKey(token) {
    var key = _tokenKeyCache.get(token);return key || (key = stringify(token) + "_" + _tokenKeyCache.size, _tokenKeyCache.set(token, key)), key;
  }function unwrapValue(view, nodeIdx, bindingIdx, value) {
    if (value instanceof WrappedValue) {
      value = value.wrapped;var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx,
          oldValue = view.oldValues[globalBindingIdx];oldValue instanceof WrappedValue && (oldValue = oldValue.wrapped), view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
    }return value;
  }function createRendererType2(values) {
    return { id: UNDEFINED_RENDERER_TYPE_ID, styles: values.styles, encapsulation: values.encapsulation, data: values.data };
  }function resolveRendererType2(type) {
    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
      var isFilled = null != type.encapsulation && type.encapsulation !== ViewEncapsulation.None || type.styles.length || Object.keys(type.data).length;isFilled ? type.id = "c" + _renderCompCount++ : type.id = EMPTY_RENDERER_TYPE_ID;
    }return type && type.id === EMPTY_RENDERER_TYPE_ID && (type = null), type || null;
  }function checkBinding(view, def, bindingIdx, value) {
    var oldValues = view.oldValues;return !(!(2 & view.state) && looseIdentical(oldValues[def.bindingIndex + bindingIdx], value));
  }function checkAndUpdateBinding(view, def, bindingIdx, value) {
    return !!checkBinding(view, def, bindingIdx, value) && (view.oldValues[def.bindingIndex + bindingIdx] = value, !0);
  }function checkBindingNoChanges(view, def, bindingIdx, value) {
    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];if (1 & view.state || !devModeEqual(oldValue, value)) throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, 0 !== (1 & view.state));
  }function markParentViewsForCheck(view) {
    for (var currView = view; currView;) 2 & currView.def.flags && (currView.state |= 8), currView = currView.viewContainerParent || currView.parent;
  }function markParentViewsForCheckProjectedViews(view, endView) {
    for (var currView = view; currView && currView !== endView;) currView.state |= 64, currView = currView.viewContainerParent || currView.parent;
  }function dispatchEvent(view, nodeIndex, eventName, event) {
    var nodeDef = view.def.nodes[nodeIndex],
        startView = 33554432 & nodeDef.flags ? asElementData(view, nodeIndex).componentView : view;return markParentViewsForCheck(startView), Services.handleEvent(view, nodeIndex, eventName, event);
  }function declaredViewContainer(view) {
    if (view.parent) {
      var parentView = view.parent;return asElementData(parentView, view.parentNodeDef.index);
    }return null;
  }function viewParentEl(view) {
    var parentView = view.parent;return parentView ? view.parentNodeDef.parent : null;
  }function renderNode(view, def) {
    switch (201347067 & def.flags) {case 1:
        return asElementData(view, def.index).renderElement;case 2:
        return asTextData(view, def.index).renderText;}
  }function elementEventFullName(target, name) {
    return target ? target + ":" + name : name;
  }function isComponentView(view) {
    return !!view.parent && !!(32768 & view.parentNodeDef.flags);
  }function isEmbeddedView(view) {
    return !(!view.parent || 32768 & view.parentNodeDef.flags);
  }function filterQueryId(queryId) {
    return 1 << queryId % 32;
  }function splitMatchedQueriesDsl(matchedQueriesDsl) {
    var matchedQueries = {},
        matchedQueryIds = 0,
        references = {};return matchedQueriesDsl && matchedQueriesDsl.forEach(function (_a) {
      var queryId = _a[0],
          valueType = _a[1];"number" == typeof queryId ? (matchedQueries[queryId] = valueType, matchedQueryIds |= filterQueryId(queryId)) : references[queryId] = valueType;
    }), { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
  }function getParentRenderElement(view, renderHost, def) {
    var renderParent = def.renderParent;return renderParent ? 0 === (1 & renderParent.flags) || 0 === (33554432 & renderParent.flags) || renderParent.element.componentRendererType && renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native ? asElementData(view, def.renderParent.index).renderElement : void 0 : renderHost;
  }function resolveViewDefinition(factory) {
    var value = VIEW_DEFINITION_CACHE.get(factory);return value || (value = factory(function () {
      return NOOP;
    }), value.factory = factory, VIEW_DEFINITION_CACHE.set(factory, value)), value;
  }function rootRenderNodes(view) {
    var renderNodes = [];return visitRootRenderNodes(view, 0, void 0, void 0, renderNodes), renderNodes;
  }function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
    3 === action && (parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode))), visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
  }function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
    for (var i = startIndex; i <= endIndex; i++) {
      var nodeDef = view.def.nodes[i];11 & nodeDef.flags && visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target), i += nodeDef.childCount;
    }
  }function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
    for (var compView = view; compView && !isComponentView(compView);) compView = compView.parent;for (var hostView = compView.parent, hostElDef = viewParentEl(compView), startIndex = hostElDef.index + 1, endIndex = hostElDef.index + hostElDef.childCount, i = startIndex; i <= endIndex; i++) {
      var nodeDef = hostView.def.nodes[i];nodeDef.ngContentIndex === ngContentIndex && visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target), i += nodeDef.childCount;
    }if (!hostView.parent) {
      var projectedNodes = view.root.projectableNodes[ngContentIndex];if (projectedNodes) for (var i = 0; i < projectedNodes.length; i++) execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
    }
  }function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
    if (8 & nodeDef.flags) visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);else {
      var rn = renderNode(view, nodeDef);if (3 === action && 33554432 & nodeDef.flags && 48 & nodeDef.bindingFlags) {
        if (16 & nodeDef.bindingFlags && execRenderNodeAction(view, rn, action, parentNode, nextSibling, target), 32 & nodeDef.bindingFlags) {
          var compView = asElementData(view, nodeDef.index).componentView;execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
        }
      } else execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);if (16777216 & nodeDef.flags) for (var embeddedViews = asElementData(view, nodeDef.index).viewContainer._embeddedViews, k = 0; k < embeddedViews.length; k++) visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);1 & nodeDef.flags && !nodeDef.element.name && visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
    }
  }function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
    var renderer = view.renderer;switch (action) {case 1:
        renderer.appendChild(parentNode, renderNode);break;case 2:
        renderer.insertBefore(parentNode, renderNode, nextSibling);break;case 3:
        renderer.removeChild(parentNode, renderNode);break;case 0:
        target.push(renderNode);}
  }function splitNamespace(name) {
    if (":" === name[0]) {
      var match = name.match(NS_PREFIX_RE);return [match[1], match[2]];
    }return ["", name];
  }function calcBindingFlags(bindings) {
    for (var flags = 0, i = 0; i < bindings.length; i++) flags |= bindings[i].flags;return flags;
  }function interpolate(valueCount, constAndInterp) {
    for (var result = "", i = 0; i < 2 * valueCount; i += 2) result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);return result + constAndInterp[2 * valueCount];
  }function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {case 1:
        return c0 + _toStringWithNull(a1) + c1;case 2:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;case 3:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;case 4:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;case 5:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;case 6:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;case 7:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;case 8:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;case 9:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;default:
        throw new Error("Does not support more than 9 expressions");}
  }function _toStringWithNull(v) {
    return null != v ? v.toString() : "";
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
    flags |= 1;var _a = splitMatchedQueriesDsl(matchedQueriesDsl),
        matchedQueries = _a.matchedQueries,
        references = _a.references,
        matchedQueryIds = _a.matchedQueryIds,
        template = templateFactory ? resolveViewDefinition(templateFactory) : null;return { index: -1, parent: null, renderParent: null, bindingIndex: -1, outputIndex: -1, flags: flags, childFlags: 0, directChildFlags: 0, childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount, bindings: [], bindingFlags: 0, outputs: [], element: { ns: null, name: null, attrs: null, template: template, componentProvider: null, componentView: null, componentRendererType: null, publicProviders: null, allProviders: null, handleEvent: handleEvent || NOOP }, provider: null, text: null, query: null, ngContent: null };
  }function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
    void 0 === fixedAttrs && (fixedAttrs = []), handleEvent || (handleEvent = NOOP);var _a = splitMatchedQueriesDsl(matchedQueriesDsl),
        matchedQueries = _a.matchedQueries,
        references = _a.references,
        matchedQueryIds = _a.matchedQueryIds,
        ns = null,
        name = null;namespaceAndName && (_b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1]), bindings = bindings || [];for (var bindingDefs = new Array(bindings.length), i = 0; i < bindings.length; i++) {
      var _c = bindings[i],
          bindingFlags = _c[0],
          namespaceAndName_1 = _c[1],
          suffixOrSecurityContext = _c[2],
          _d = splitNamespace(namespaceAndName_1),
          ns_1 = _d[0],
          name_1 = _d[1],
          securityContext = void 0,
          suffix = void 0;switch (15 & bindingFlags) {case 4:
          suffix = suffixOrSecurityContext;break;case 1:case 8:
          securityContext = suffixOrSecurityContext;}bindingDefs[i] = { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
    }outputs = outputs || [];for (var outputDefs = new Array(outputs.length), i = 0; i < outputs.length; i++) {
      var _e = outputs[i],
          target = _e[0],
          eventName = _e[1];outputDefs[i] = { type: 0, target: target, eventName: eventName, propName: null };
    }fixedAttrs = fixedAttrs || [];var attrs = fixedAttrs.map(function (_a) {
      var namespaceAndName = _a[0],
          value = _a[1],
          _b = splitNamespace(namespaceAndName),
          ns = _b[0],
          name = _b[1];return [ns, name, value];
    });return componentRendererType = resolveRendererType2(componentRendererType), componentView && (flags |= 33554432), flags |= 1, { index: -1, parent: null, renderParent: null, bindingIndex: -1, outputIndex: -1, flags: flags, childFlags: 0, directChildFlags: 0, childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount, bindings: bindingDefs, bindingFlags: calcBindingFlags(bindingDefs), outputs: outputDefs, element: { ns: ns, name: name, attrs: attrs, template: null, componentProvider: null, componentView: componentView || null, componentRendererType: componentRendererType, publicProviders: null, allProviders: null, handleEvent: handleEvent || NOOP }, provider: null, text: null, query: null, ngContent: null };var _b;
  }function createElement(view, renderHost, def) {
    var el,
        elDef = def.element,
        rootSelectorOrNode = view.root.selectorOrNode,
        renderer = view.renderer;if (view.parent || !rootSelectorOrNode) {
      el = elDef.name ? renderer.createElement(elDef.name, elDef.ns) : renderer.createComment("");var parentEl = getParentRenderElement(view, renderHost, def);parentEl && renderer.appendChild(parentEl, el);
    } else el = renderer.selectRootElement(rootSelectorOrNode);if (elDef.attrs) for (var i = 0; i < elDef.attrs.length; i++) {
      var _a = elDef.attrs[i],
          ns = _a[0],
          name = _a[1],
          value = _a[2];renderer.setAttribute(el, name, value, ns);
    }return el;
  }function listenToElementOutputs(view, compView, def, el) {
    for (var i = 0; i < def.outputs.length; i++) {
      var output = def.outputs[i],
          handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName)),
          listenTarget = output.target,
          listenerView = view;"component" === output.target && (listenTarget = null, listenerView = compView);var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);view.disposables[def.outputIndex + i] = disposable;
    }
  }function renderEventHandlerClosure(view, index, eventName) {
    return function (event) {
      try {
        return dispatchEvent(view, index, eventName, event);
      } catch (e) {
        view.root.errorHandler.handleError(e);
      }
    };
  }function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var bindLen = def.bindings.length,
        changed = !1;return bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0) && (changed = !0), bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1) && (changed = !0), bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2) && (changed = !0), bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3) && (changed = !0), bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4) && (changed = !0), bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5) && (changed = !0), bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6) && (changed = !0), bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7) && (changed = !0), bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8) && (changed = !0), bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9) && (changed = !0), changed;
  }function checkAndUpdateElementDynamic(view, def, values) {
    for (var changed = !1, i = 0; i < values.length; i++) checkAndUpdateElementValue(view, def, i, values[i]) && (changed = !0);return changed;
  }function checkAndUpdateElementValue(view, def, bindingIdx, value) {
    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) return !1;var binding = def.bindings[bindingIdx],
        elData = asElementData(view, def.index),
        renderNode$$1 = elData.renderElement,
        name = binding.name;switch (15 & binding.flags) {case 1:
        setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);break;case 2:
        setElementClass(view, renderNode$$1, name, value);break;case 4:
        setElementStyle(view, binding, renderNode$$1, name, value);break;case 8:
        var bindView = 33554432 & def.flags && 32 & binding.flags ? elData.componentView : view;setElementProperty(bindView, binding, renderNode$$1, name, value);}return !0;
  }function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
    var securityContext = binding.securityContext,
        renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;renderValue = null != renderValue ? renderValue.toString() : null;var renderer = view.renderer;null != value ? renderer.setAttribute(renderNode$$1, name, renderValue, ns) : renderer.removeAttribute(renderNode$$1, name, ns);
  }function setElementClass(view, renderNode$$1, name, value) {
    var renderer = view.renderer;value ? renderer.addClass(renderNode$$1, name) : renderer.removeClass(renderNode$$1, name);
  }function setElementStyle(view, binding, renderNode$$1, name, value) {
    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);if (null != renderValue) {
      renderValue = renderValue.toString();var unit = binding.suffix;null != unit && (renderValue += unit);
    } else renderValue = null;var renderer = view.renderer;null != renderValue ? renderer.setStyle(renderNode$$1, name, renderValue) : renderer.removeStyle(renderNode$$1, name);
  }function setElementProperty(view, binding, renderNode$$1, name, value) {
    var securityContext = binding.securityContext,
        renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;view.renderer.setProperty(renderNode$$1, name, renderValue);
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function ngContentDef(ngContentIndex, index) {
    return { index: -1, parent: null, renderParent: null, bindingIndex: -1, outputIndex: -1, flags: 8, childFlags: 0, directChildFlags: 0, childMatchedQueries: 0, matchedQueries: {}, matchedQueryIds: 0, references: {}, ngContentIndex: ngContentIndex, childCount: 0, bindings: [], bindingFlags: 0, outputs: [], element: null, provider: null, text: null, query: null, ngContent: { index: index } };
  }function appendNgContent(view, renderHost, def) {
    var parentEl = getParentRenderElement(view, renderHost, def);if (parentEl) {
      var ngContentIndex = def.ngContent.index;visitProjectedRenderNodes(view, ngContentIndex, 1, parentEl, null, void 0);
    }
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function attachEmbeddedView(parentView, elementData, viewIndex, view) {
    var embeddedViews = elementData.viewContainer._embeddedViews;null !== viewIndex && void 0 !== viewIndex || (viewIndex = embeddedViews.length), view.viewContainerParent = parentView, addToArray(embeddedViews, viewIndex, view), attachProjectedView(elementData, view), Services.dirtyParentQueries(view);var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;renderAttachEmbeddedView(elementData, prevView, view);
  }function attachProjectedView(vcElementData, view) {
    var dvcElementData = declaredViewContainer(view);if (dvcElementData && dvcElementData !== vcElementData && !(16 & view.state)) {
      view.state |= 16;var projectedViews = dvcElementData.template._projectedViews;projectedViews || (projectedViews = dvcElementData.template._projectedViews = []), projectedViews.push(view), markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);
    }
  }function markNodeAsProjectedTemplate(viewDef, nodeDef) {
    if (!(4 & nodeDef.flags)) {
      viewDef.nodeFlags |= 4, nodeDef.flags |= 4;for (var parentNodeDef = nodeDef.parent; parentNodeDef;) parentNodeDef.childFlags |= 4, parentNodeDef = parentNodeDef.parent;
    }
  }function detachEmbeddedView(elementData, viewIndex) {
    var embeddedViews = elementData.viewContainer._embeddedViews;if ((null == viewIndex || viewIndex >= embeddedViews.length) && (viewIndex = embeddedViews.length - 1), viewIndex < 0) return null;var view = embeddedViews[viewIndex];return view.viewContainerParent = null, removeFromArray(embeddedViews, viewIndex), Services.dirtyParentQueries(view), renderDetachView(view), view;
  }function detachProjectedView(view) {
    if (16 & view.state) {
      var dvcElementData = declaredViewContainer(view);if (dvcElementData) {
        var projectedViews = dvcElementData.template._projectedViews;projectedViews && (removeFromArray(projectedViews, projectedViews.indexOf(view)), Services.dirtyParentQueries(view));
      }
    }
  }function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
    var embeddedViews = elementData.viewContainer._embeddedViews,
        view = embeddedViews[oldViewIndex];removeFromArray(embeddedViews, oldViewIndex), null == newViewIndex && (newViewIndex = embeddedViews.length), addToArray(embeddedViews, newViewIndex, view), Services.dirtyParentQueries(view), renderDetachView(view);var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;return renderAttachEmbeddedView(elementData, prevView, view), view;
  }function renderAttachEmbeddedView(elementData, prevView, view) {
    var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement,
        parentNode = view.renderer.parentNode(prevRenderNode),
        nextSibling = view.renderer.nextSibling(prevRenderNode);visitRootRenderNodes(view, 2, parentNode, nextSibling, void 0);
  }function renderDetachView(view) {
    visitRootRenderNodes(view, 3, null, null, void 0);
  }function addToArray(arr, index, value) {
    index >= arr.length ? arr.push(value) : arr.splice(index, 0, value);
  }function removeFromArray(arr, index) {
    index >= arr.length - 1 ? arr.pop() : arr.splice(index, 1);
  }function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
  }function getComponentViewDefinitionFactory(componentFactory) {
    return componentFactory.viewDefFactory;
  }function createViewContainerData(view, elDef, elData) {
    return new ViewContainerRef_(view, elDef, elData);
  }function createChangeDetectorRef(view) {
    return new ViewRef_(view);
  }function createTemplateData(view, def) {
    return new TemplateRef_(view, def);
  }function createInjector(view, elDef) {
    return new Injector_(view, elDef);
  }function nodeValue(view, index) {
    var def = view.def.nodes[index];if (1 & def.flags) {
      var elData = asElementData(view, def.index);return def.element.template ? elData.template : elData.renderElement;
    }if (2 & def.flags) return asTextData(view, def.index).renderText;if (20240 & def.flags) return asProviderData(view, def.index).instance;throw new Error("Illegal state: read nodeValue for node index " + index);
  }function createRendererV1(view) {
    return new RendererAdapter(view.renderer);
  }function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
    var bindings = [];if (props) for (var prop in props) {
      var _a = props[prop],
          bindingIndex = _a[0],
          nonMinifiedName = _a[1];bindings[bindingIndex] = { flags: 8, name: prop, nonMinifiedName: nonMinifiedName, ns: null, securityContext: null, suffix: null };
    }var outputDefs = [];if (outputs) for (var propName in outputs) outputDefs.push({ type: 1, propName: propName, target: null, eventName: outputs[propName] });return flags |= 16384, _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
  }function pipeDef(flags, ctor, deps) {
    return flags |= 16, _def(flags, null, 0, ctor, ctor, deps);
  }function providerDef(flags, matchedQueries, token, value, deps) {
    return _def(flags, matchedQueries, 0, token, value, deps);
  }function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
    var _a = splitMatchedQueriesDsl(matchedQueriesDsl),
        matchedQueries = _a.matchedQueries,
        references = _a.references,
        matchedQueryIds = _a.matchedQueryIds;outputs || (outputs = []), bindings || (bindings = []);var depDefs = deps.map(function (value) {
      var token, flags;return Array.isArray(value) ? (flags = value[0], token = value[1]) : (flags = 0, token = value), { flags: flags, token: token, tokenKey: tokenKey(token) };
    });return { index: -1, parent: null, renderParent: null, bindingIndex: -1, outputIndex: -1, flags: flags, childFlags: 0, directChildFlags: 0, childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: -1, childCount: childCount, bindings: bindings, bindingFlags: calcBindingFlags(bindings), outputs: outputs, element: null, provider: { token: token, tokenKey: tokenKey(token), value: value, deps: depDefs }, text: null, query: null, ngContent: null };
  }function createProviderInstance(view, def) {
    return 4096 & def.flags ? NOT_CREATED : _createProviderInstance(view, def);
  }function createPipeInstance(view, def) {
    for (var compView = view; compView.parent && !isComponentView(compView);) compView = compView.parent;var allowPrivateServices = !0;return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
  }function createDirectiveInstance(view, def) {
    var allowPrivateServices = (32768 & def.flags) > 0,
        instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);if (def.outputs.length) for (var i = 0; i < def.outputs.length; i++) {
      var output = def.outputs[i],
          subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.index, output.eventName));view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
    }return instance;
  }function eventHandlerClosure(view, index, eventName) {
    return function (event) {
      try {
        return dispatchEvent(view, index, eventName, event);
      } catch (e) {
        view.root.errorHandler.handleError(e);
      }
    };
  }function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var providerData = asProviderData(view, def.index),
        directive = providerData.instance,
        changed = !1,
        changes = void 0,
        bindLen = def.bindings.length;return bindLen > 0 && checkBinding(view, def, 0, v0) && (changed = !0, changes = updateProp(view, providerData, def, 0, v0, changes)), bindLen > 1 && checkBinding(view, def, 1, v1) && (changed = !0, changes = updateProp(view, providerData, def, 1, v1, changes)), bindLen > 2 && checkBinding(view, def, 2, v2) && (changed = !0, changes = updateProp(view, providerData, def, 2, v2, changes)), bindLen > 3 && checkBinding(view, def, 3, v3) && (changed = !0, changes = updateProp(view, providerData, def, 3, v3, changes)), bindLen > 4 && checkBinding(view, def, 4, v4) && (changed = !0, changes = updateProp(view, providerData, def, 4, v4, changes)), bindLen > 5 && checkBinding(view, def, 5, v5) && (changed = !0, changes = updateProp(view, providerData, def, 5, v5, changes)), bindLen > 6 && checkBinding(view, def, 6, v6) && (changed = !0, changes = updateProp(view, providerData, def, 6, v6, changes)), bindLen > 7 && checkBinding(view, def, 7, v7) && (changed = !0, changes = updateProp(view, providerData, def, 7, v7, changes)), bindLen > 8 && checkBinding(view, def, 8, v8) && (changed = !0, changes = updateProp(view, providerData, def, 8, v8, changes)), bindLen > 9 && checkBinding(view, def, 9, v9) && (changed = !0, changes = updateProp(view, providerData, def, 9, v9, changes)), changes && directive.ngOnChanges(changes), 2 & view.state && 65536 & def.flags && directive.ngOnInit(), 262144 & def.flags && directive.ngDoCheck(), changed;
  }function checkAndUpdateDirectiveDynamic(view, def, values) {
    for (var providerData = asProviderData(view, def.index), directive = providerData.instance, changed = !1, changes = void 0, i = 0; i < values.length; i++) checkBinding(view, def, i, values[i]) && (changed = !0, changes = updateProp(view, providerData, def, i, values[i], changes));return changes && directive.ngOnChanges(changes), 2 & view.state && 65536 & def.flags && directive.ngOnInit(), 262144 & def.flags && directive.ngDoCheck(), changed;
  }function _createProviderInstance(view, def) {
    var injectable,
        allowPrivateServices = (8192 & def.flags) > 0,
        providerDef = def.provider;switch (201347067 & def.flags) {case 512:
        injectable = createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);break;case 1024:
        injectable = callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);break;case 2048:
        injectable = resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);break;case 256:
        injectable = providerDef.value;}return injectable;
  }function createClass(view, elDef, allowPrivateServices, ctor, deps) {
    var injectable,
        len = deps.length;switch (len) {case 0:
        injectable = new ctor();break;case 1:
        injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));break;case 2:
        injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));break;case 3:
        injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));break;default:
        for (var depValues = new Array(len), i = 0; i < len; i++) depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);injectable = new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();}return injectable;
  }function callFactory(view, elDef, allowPrivateServices, factory, deps) {
    var injectable,
        len = deps.length;switch (len) {case 0:
        injectable = factory();break;case 1:
        injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));break;case 2:
        injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));break;case 3:
        injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));break;default:
        for (var depValues = Array(len), i = 0; i < len; i++) depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);injectable = factory.apply(void 0, depValues);}return injectable;
  }function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
    if (void 0 === notFoundValue && (notFoundValue = Injector.THROW_IF_NOT_FOUND), 8 & depDef.flags) return depDef.token;var startView = view;2 & depDef.flags && (notFoundValue = null);var tokenKey$$1 = depDef.tokenKey;for (tokenKey$$1 === ChangeDetectorRefTokenKey && (allowPrivateServices = !(!elDef || !elDef.element.componentView)), elDef && 1 & depDef.flags && (allowPrivateServices = !1, elDef = elDef.parent); view;) {
      if (elDef) switch (tokenKey$$1) {case RendererV1TokenKey:
          var compView = findCompView(view, elDef, allowPrivateServices);return createRendererV1(compView);case Renderer2TokenKey:
          var compView = findCompView(view, elDef, allowPrivateServices);return compView.renderer;case ElementRefTokenKey:
          return new ElementRef(asElementData(view, elDef.index).renderElement);case ViewContainerRefTokenKey:
          return asElementData(view, elDef.index).viewContainer;case TemplateRefTokenKey:
          if (elDef.element.template) return asElementData(view, elDef.index).template;break;case ChangeDetectorRefTokenKey:
          var cdView = findCompView(view, elDef, allowPrivateServices);return createChangeDetectorRef(cdView);case InjectorRefTokenKey:
          return createInjector(view, elDef);default:
          var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey$$1];if (providerDef_1) {
            var providerData = asProviderData(view, providerDef_1.index);return providerData.instance === NOT_CREATED && (providerData.instance = _createProviderInstance(view, providerDef_1)), providerData.instance;
          }}allowPrivateServices = isComponentView(view), elDef = viewParentEl(view), view = view.parent;
    }var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);return value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ? value : startView.root.ngModule.injector.get(depDef.token, notFoundValue);
  }function findCompView(view, elDef, allowPrivateServices) {
    var compView;if (allowPrivateServices) compView = asElementData(view, elDef.index).componentView;else for (compView = view; compView.parent && !isComponentView(compView);) compView = compView.parent;return compView;
  }function updateProp(view, providerData, def, bindingIdx, value, changes) {
    if (32768 & def.flags) {
      var compView = asElementData(view, def.parent.index).componentView;2 & compView.def.flags && (compView.state |= 8);
    }var binding = def.bindings[bindingIdx],
        propName = binding.name;if (providerData.instance[propName] = value, 524288 & def.flags) {
      changes = changes || {};var oldValue = view.oldValues[def.bindingIndex + bindingIdx];oldValue instanceof WrappedValue && (oldValue = oldValue.wrapped);var binding_1 = def.bindings[bindingIdx];changes[binding_1.nonMinifiedName] = new SimpleChange(oldValue, value, 0 !== (2 & view.state));
    }return view.oldValues[def.bindingIndex + bindingIdx] = value, changes;
  }function callLifecycleHooksChildrenFirst(view, lifecycles) {
    if (view.def.nodeFlags & lifecycles) for (var nodes = view.def.nodes, i = 0; i < nodes.length; i++) {
      var nodeDef = nodes[i],
          parent = nodeDef.parent;for (!parent && nodeDef.flags & lifecycles && callProviderLifecycles(view, i, nodeDef.flags & lifecycles), 0 === (nodeDef.childFlags & lifecycles) && (i += nodeDef.childCount); parent && 1 & parent.flags && i === parent.index + parent.childCount;) parent.directChildFlags & lifecycles && callElementProvidersLifecycles(view, parent, lifecycles), parent = parent.parent;
    }
  }function callElementProvidersLifecycles(view, elDef, lifecycles) {
    for (var i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
      var nodeDef = view.def.nodes[i];nodeDef.flags & lifecycles && callProviderLifecycles(view, i, nodeDef.flags & lifecycles), i += nodeDef.childCount;
    }
  }function callProviderLifecycles(view, index, lifecycles) {
    var provider = asProviderData(view, index).instance;provider !== NOT_CREATED && (Services.setCurrentNode(view, index), 1048576 & lifecycles && provider.ngAfterContentInit(), 2097152 & lifecycles && provider.ngAfterContentChecked(), 4194304 & lifecycles && provider.ngAfterViewInit(), 8388608 & lifecycles && provider.ngAfterViewChecked(), 131072 & lifecycles && provider.ngOnDestroy());
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function purePipeDef(argCount) {
    return _pureExpressionDef(128, new Array(argCount + 1));
  }function pureArrayDef(argCount) {
    return _pureExpressionDef(32, new Array(argCount));
  }function pureObjectDef(propertyNames) {
    return _pureExpressionDef(64, propertyNames);
  }function _pureExpressionDef(flags, propertyNames) {
    for (var bindings = new Array(propertyNames.length), i = 0; i < propertyNames.length; i++) {
      var prop = propertyNames[i];bindings[i] = { flags: 8, name: prop, ns: null, nonMinifiedName: prop, securityContext: null, suffix: null };
    }return { index: -1, parent: null, renderParent: null, bindingIndex: -1, outputIndex: -1, flags: flags, childFlags: 0, directChildFlags: 0, childMatchedQueries: 0, matchedQueries: {}, matchedQueryIds: 0, references: {}, ngContentIndex: -1, childCount: 0, bindings: bindings, bindingFlags: calcBindingFlags(bindings), outputs: [], element: null, provider: null, text: null, query: null, ngContent: null };
  }function createPureExpression(view, def) {
    return { value: void 0 };
  }function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var bindings = def.bindings,
        changed = !1,
        bindLen = bindings.length;if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0) && (changed = !0), bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1) && (changed = !0), bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2) && (changed = !0), bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3) && (changed = !0), bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4) && (changed = !0), bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5) && (changed = !0), bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6) && (changed = !0), bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7) && (changed = !0), bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8) && (changed = !0), bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9) && (changed = !0), changed) {
      var data = asPureExpressionData(view, def.index),
          value = void 0;switch (201347067 & def.flags) {case 32:
          value = new Array(bindings.length), bindLen > 0 && (value[0] = v0), bindLen > 1 && (value[1] = v1), bindLen > 2 && (value[2] = v2), bindLen > 3 && (value[3] = v3), bindLen > 4 && (value[4] = v4), bindLen > 5 && (value[5] = v5), bindLen > 6 && (value[6] = v6), bindLen > 7 && (value[7] = v7), bindLen > 8 && (value[8] = v8), bindLen > 9 && (value[9] = v9);break;case 64:
          value = {}, bindLen > 0 && (value[bindings[0].name] = v0), bindLen > 1 && (value[bindings[1].name] = v1), bindLen > 2 && (value[bindings[2].name] = v2), bindLen > 3 && (value[bindings[3].name] = v3), bindLen > 4 && (value[bindings[4].name] = v4), bindLen > 5 && (value[bindings[5].name] = v5), bindLen > 6 && (value[bindings[6].name] = v6), bindLen > 7 && (value[bindings[7].name] = v7), bindLen > 8 && (value[bindings[8].name] = v8), bindLen > 9 && (value[bindings[9].name] = v9);break;case 128:
          var pipe = v0;switch (bindLen) {case 1:
              value = pipe.transform(v0);break;case 2:
              value = pipe.transform(v1);break;case 3:
              value = pipe.transform(v1, v2);break;case 4:
              value = pipe.transform(v1, v2, v3);break;case 5:
              value = pipe.transform(v1, v2, v3, v4);break;case 6:
              value = pipe.transform(v1, v2, v3, v4, v5);break;case 7:
              value = pipe.transform(v1, v2, v3, v4, v5, v6);break;case 8:
              value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);break;case 9:
              value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);break;case 10:
              value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);}}data.value = value;
    }return changed;
  }function checkAndUpdatePureExpressionDynamic(view, def, values) {
    for (var bindings = def.bindings, changed = !1, i = 0; i < values.length; i++) checkAndUpdateBinding(view, def, i, values[i]) && (changed = !0);if (changed) {
      var data = asPureExpressionData(view, def.index),
          value = void 0;switch (201347067 & def.flags) {case 32:
          value = values;break;case 64:
          value = {};for (var i = 0; i < values.length; i++) value[bindings[i].name] = values[i];break;case 128:
          var pipe = values[0],
              params = values.slice(1);value = pipe.transform.apply(pipe, params);}data.value = value;
    }return changed;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function queryDef(flags, id, bindings) {
    var bindingDefs = [];for (var propName in bindings) {
      var bindingType = bindings[propName];bindingDefs.push({ propName: propName, bindingType: bindingType });
    }return { index: -1, parent: null, renderParent: null, bindingIndex: -1, outputIndex: -1, flags: flags, childFlags: 0, directChildFlags: 0, childMatchedQueries: 0, ngContentIndex: -1, matchedQueries: {}, matchedQueryIds: 0, references: {}, childCount: 0, bindings: [], bindingFlags: 0, outputs: [], element: null, provider: null, text: null, query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs }, ngContent: null };
  }function createQuery() {
    return new QueryList();
  }function dirtyParentQueries(view) {
    for (var queryIds = view.def.nodeMatchedQueries; view.parent && isEmbeddedView(view);) {
      var tplDef = view.parentNodeDef;view = view.parent;for (var end = tplDef.index + tplDef.childCount, i = 0; i <= end; i++) {
        var nodeDef = view.def.nodes[i];67108864 & nodeDef.flags && 536870912 & nodeDef.flags && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId && asQueryList(view, i).setDirty(), !(1 & nodeDef.flags && i + nodeDef.childCount < tplDef.index) && 67108864 & nodeDef.childFlags && 536870912 & nodeDef.childFlags || (i += nodeDef.childCount);
      }
    }if (134217728 & view.def.nodeFlags) for (var i = 0; i < view.def.nodes.length; i++) {
      var nodeDef = view.def.nodes[i];134217728 & nodeDef.flags && 536870912 & nodeDef.flags && asQueryList(view, i).setDirty(), i += nodeDef.childCount;
    }
  }function checkAndUpdateQuery(view, nodeDef) {
    var queryList = asQueryList(view, nodeDef.index);if (queryList.dirty) {
      var directiveInstance,
          newValues = void 0;if (67108864 & nodeDef.flags) {
        var elementDef_1 = nodeDef.parent.parent;newValues = calcQueryValues(view, elementDef_1.index, elementDef_1.index + elementDef_1.childCount, nodeDef.query, []), directiveInstance = asProviderData(view, nodeDef.parent.index).instance;
      } else 134217728 & nodeDef.flags && (newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []), directiveInstance = view.component);queryList.reset(newValues);for (var bindings = nodeDef.query.bindings, notify = !1, i = 0; i < bindings.length; i++) {
        var binding = bindings[i],
            boundValue = void 0;switch (binding.bindingType) {case 0:
            boundValue = queryList.first;break;case 1:
            boundValue = queryList, notify = !0;}directiveInstance[binding.propName] = boundValue;
      }notify && queryList.notifyOnChanges();
    }
  }function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
    for (var i = startIndex; i <= endIndex; i++) {
      var nodeDef = view.def.nodes[i],
          valueType = nodeDef.matchedQueries[queryDef.id];if (null != valueType && values.push(getQueryValue(view, nodeDef, valueType)), 1 & nodeDef.flags && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
        var elementData = asElementData(view, i);if (16777216 & nodeDef.flags) for (var embeddedViews = elementData.viewContainer._embeddedViews, k = 0; k < embeddedViews.length; k++) {
          var embeddedView = embeddedViews[k],
              dvc = declaredViewContainer(embeddedView);dvc && dvc === elementData && calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
        }var projectedViews = elementData.template._projectedViews;if (projectedViews) for (var k = 0; k < projectedViews.length; k++) {
          var projectedView = projectedViews[k];calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
        }
      }(nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId && (i += nodeDef.childCount);
    }return values;
  }function getQueryValue(view, nodeDef, queryValueType) {
    if (null != queryValueType) {
      var value = void 0;switch (queryValueType) {case 1:
          value = asElementData(view, nodeDef.index).renderElement;break;case 0:
          value = new ElementRef(asElementData(view, nodeDef.index).renderElement);break;case 2:
          value = asElementData(view, nodeDef.index).template;break;case 3:
          value = asElementData(view, nodeDef.index).viewContainer;break;case 4:
          value = asProviderData(view, nodeDef.index).instance;}return value;
    }
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function textDef(ngContentIndex, constants) {
    for (var bindings = new Array(constants.length - 1), i = 1; i < constants.length; i++) bindings[i - 1] = { flags: 8, name: null, ns: null, nonMinifiedName: null, securityContext: null, suffix: constants[i] };var flags = 2;return { index: -1, parent: null, renderParent: null, bindingIndex: -1, outputIndex: -1, flags: flags, childFlags: 0, directChildFlags: 0, childMatchedQueries: 0, matchedQueries: {}, matchedQueryIds: 0, references: {}, ngContentIndex: ngContentIndex, childCount: 0, bindings: bindings, bindingFlags: calcBindingFlags(bindings), outputs: [], element: null, provider: null, text: { prefix: constants[0] }, query: null, ngContent: null };
  }function createText(view, renderHost, def) {
    var renderNode$$1,
        renderer = view.renderer;renderNode$$1 = renderer.createText(def.text.prefix);var parentEl = getParentRenderElement(view, renderHost, def);return parentEl && renderer.appendChild(parentEl, renderNode$$1), { renderText: renderNode$$1 };
  }function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var changed = !1,
        bindings = def.bindings,
        bindLen = bindings.length;if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0) && (changed = !0), bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1) && (changed = !0), bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2) && (changed = !0), bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3) && (changed = !0), bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4) && (changed = !0), bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5) && (changed = !0), bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6) && (changed = !0), bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7) && (changed = !0), bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8) && (changed = !0), bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9) && (changed = !0), changed) {
      var value = def.text.prefix;bindLen > 0 && (value += _addInterpolationPart(v0, bindings[0])), bindLen > 1 && (value += _addInterpolationPart(v1, bindings[1])), bindLen > 2 && (value += _addInterpolationPart(v2, bindings[2])), bindLen > 3 && (value += _addInterpolationPart(v3, bindings[3])), bindLen > 4 && (value += _addInterpolationPart(v4, bindings[4])), bindLen > 5 && (value += _addInterpolationPart(v5, bindings[5])), bindLen > 6 && (value += _addInterpolationPart(v6, bindings[6])), bindLen > 7 && (value += _addInterpolationPart(v7, bindings[7])), bindLen > 8 && (value += _addInterpolationPart(v8, bindings[8])), bindLen > 9 && (value += _addInterpolationPart(v9, bindings[9]));var renderNode$$1 = asTextData(view, def.index).renderText;view.renderer.setValue(renderNode$$1, value);
    }return changed;
  }function checkAndUpdateTextDynamic(view, def, values) {
    for (var bindings = def.bindings, changed = !1, i = 0; i < values.length; i++) checkAndUpdateBinding(view, def, i, values[i]) && (changed = !0);if (changed) {
      for (var value = "", i = 0; i < values.length; i++) value += _addInterpolationPart(values[i], bindings[i]);value = def.text.prefix + value;var renderNode$$1 = asTextData(view, def.index).renderText;view.renderer.setValue(renderNode$$1, value);
    }return changed;
  }function _addInterpolationPart(value, binding) {
    var valueStr = null != value ? value.toString() : "";return valueStr + binding.suffix;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  function viewDef(flags, nodes, updateDirectives, updateRenderer) {
    for (var viewBindingCount = 0, viewDisposableCount = 0, viewNodeFlags = 0, viewRootNodeFlags = 0, viewMatchedQueries = 0, currentParent = null, currentElementHasPublicProviders = !1, currentElementHasPrivateProviders = !1, lastRenderRootNode = null, i = 0; i < nodes.length; i++) {
      for (; currentParent && i > currentParent.index + currentParent.childCount;) {
        var newParent = currentParent.parent;newParent && (newParent.childFlags |= currentParent.childFlags, newParent.childMatchedQueries |= currentParent.childMatchedQueries), currentParent = newParent;
      }var node = nodes[i];node.index = i, node.parent = currentParent, node.bindingIndex = viewBindingCount, node.outputIndex = viewDisposableCount;var currentRenderParent = void 0;if (currentRenderParent = currentParent && 1 & currentParent.flags && !currentParent.element.name ? currentParent.renderParent : currentParent, node.renderParent = currentRenderParent, node.element) {
        var elDef = node.element;elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null), elDef.allProviders = elDef.publicProviders, currentElementHasPublicProviders = !1, currentElementHasPrivateProviders = !1;
      }if (validateNode(currentParent, node, nodes.length), viewNodeFlags |= node.flags, viewMatchedQueries |= node.matchedQueryIds, node.element && node.element.template && (viewMatchedQueries |= node.element.template.nodeMatchedQueries), currentParent ? (currentParent.childFlags |= node.flags, currentParent.directChildFlags |= node.flags, currentParent.childMatchedQueries |= node.matchedQueryIds, node.element && node.element.template && (currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries)) : viewRootNodeFlags |= node.flags, viewBindingCount += node.bindings.length, viewDisposableCount += node.outputs.length, !currentRenderParent && 3 & node.flags && (lastRenderRootNode = node), 20224 & node.flags) {
        currentElementHasPublicProviders || (currentElementHasPublicProviders = !0, currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders), currentParent.element.allProviders = currentParent.element.publicProviders);var isPrivateService = 0 !== (8192 & node.flags),
            isComponent = 0 !== (32768 & node.flags);!isPrivateService || isComponent ? currentParent.element.publicProviders[node.provider.tokenKey] = node : (currentElementHasPrivateProviders || (currentElementHasPrivateProviders = !0, currentParent.element.allProviders = Object.create(currentParent.element.publicProviders)), currentParent.element.allProviders[node.provider.tokenKey] = node), isComponent && (currentParent.element.componentProvider = node);
      }node.childCount && (currentParent = node);
    }for (; currentParent;) {
      var newParent = currentParent.parent;newParent && (newParent.childFlags |= currentParent.childFlags, newParent.childMatchedQueries |= currentParent.childMatchedQueries), currentParent = newParent;
    }var handleEvent = function (view, nodeIndex, eventName, event) {
      return nodes[nodeIndex].element.handleEvent(view, eventName, event);
    };return { factory: null, nodeFlags: viewNodeFlags, rootNodeFlags: viewRootNodeFlags, nodeMatchedQueries: viewMatchedQueries, flags: flags, nodes: nodes, updateDirectives: updateDirectives || NOOP, updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent || NOOP, bindingCount: viewBindingCount, outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode };
  }function validateNode(parent, node, nodeCount) {
    var template = node.element && node.element.template;if (template) {
      if (!template.lastRenderRootNode) throw new Error("Illegal State: Embedded templates without nodes are not allowed!");if (template.lastRenderRootNode && 16777216 & template.lastRenderRootNode.flags) throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.index + "!");
    }if (20224 & node.flags) {
      var parentFlags = parent ? parent.flags : 0;if (0 === (1 & parentFlags)) throw new Error("Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index " + node.index + "!");
    }if (node.query) {
      if (67108864 & node.flags && (!parent || 0 === (16384 & parent.flags))) throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.index + "!");if (134217728 & node.flags && parent) throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.index + "!");
    }if (node.childCount) {
      var parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;if (node.index <= parentEnd && node.index + node.childCount > parentEnd) throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.index + "!");
    }
  }function createEmbeddedView(parent, anchorDef$$1, context) {
    var view = createView(parent.root, parent.renderer, parent, anchorDef$$1, anchorDef$$1.element.template);return initView(view, parent.component, context), createViewNodes(view), view;
  }function createRootView(root, def, context) {
    var view = createView(root, root.renderer, null, null, def);return initView(view, context, context), createViewNodes(view), view;
  }function createView(root, renderer, parent, parentNodeDef, def) {
    var nodes = new Array(def.nodes.length),
        disposables = def.outputCount ? new Array(def.outputCount) : null,
        view = { def: def, parent: parent, viewContainerParent: null, parentNodeDef: parentNodeDef, context: null, component: null, nodes: nodes, state: 13, root: root, renderer: renderer, oldValues: new Array(def.bindingCount), disposables: disposables };return view;
  }function initView(view, component, context) {
    view.component = component, view.context = context;
  }function createViewNodes(view) {
    var renderHost;if (isComponentView(view)) {
      var hostDef = view.parentNodeDef;renderHost = asElementData(view.parent, hostDef.parent.index).renderElement;
    }for (var def = view.def, nodes = view.nodes, i = 0; i < def.nodes.length; i++) {
      var nodeDef = def.nodes[i];Services.setCurrentNode(view, i);var nodeData = void 0;switch (201347067 & nodeDef.flags) {case 1:
          var el = createElement(view, renderHost, nodeDef),
              componentView = void 0;if (33554432 & nodeDef.flags) {
            var compViewDef = resolveViewDefinition(nodeDef.element.componentView),
                rendererType = nodeDef.element.componentRendererType,
                compRenderer = void 0;compRenderer = rendererType ? view.root.rendererFactory.createRenderer(el, rendererType) : view.root.renderer, componentView = createView(view.root, compRenderer, view, nodeDef.element.componentProvider, compViewDef);
          }listenToElementOutputs(view, componentView, nodeDef, el), nodeData = { renderElement: el, componentView: componentView, viewContainer: null, template: nodeDef.element.template ? createTemplateData(view, nodeDef) : void 0 }, 16777216 & nodeDef.flags && (nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData));break;case 2:
          nodeData = createText(view, renderHost, nodeDef);break;case 512:case 1024:case 2048:case 256:
          var instance = createProviderInstance(view, nodeDef);nodeData = { instance: instance };break;case 16:
          var instance = createPipeInstance(view, nodeDef);nodeData = { instance: instance };break;case 16384:
          var instance = createDirectiveInstance(view, nodeDef);if (nodeData = { instance: instance }, 32768 & nodeDef.flags) {
            var compView = asElementData(view, nodeDef.parent.index).componentView;initView(compView, instance, instance);
          }break;case 32:case 64:case 128:
          nodeData = createPureExpression(view, nodeDef);break;case 67108864:case 134217728:
          nodeData = createQuery();break;case 8:
          appendNgContent(view, renderHost, nodeDef), nodeData = void 0;}nodes[i] = nodeData;
    }execComponentViewsAction(view, ViewAction.CreateViewNodes), execQueriesAction(view, 201326592, 268435456, 0);
  }function checkNoChangesView(view) {
    markProjectedViewsForCheck(view), Services.updateDirectives(view, 1), execEmbeddedViewsAction(view, ViewAction.CheckNoChanges), Services.updateRenderer(view, 1), execComponentViewsAction(view, ViewAction.CheckNoChanges), view.state &= -97;
  }function checkAndUpdateView(view) {
    1 & view.state ? (view.state &= -2, view.state |= 2) : view.state &= -3, markProjectedViewsForCheck(view), Services.updateDirectives(view, 0), execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate), execQueriesAction(view, 67108864, 536870912, 0), callLifecycleHooksChildrenFirst(view, 2097152 | (2 & view.state ? 1048576 : 0)), Services.updateRenderer(view, 0), execComponentViewsAction(view, ViewAction.CheckAndUpdate), execQueriesAction(view, 134217728, 536870912, 0), callLifecycleHooksChildrenFirst(view, 8388608 | (2 & view.state ? 4194304 : 0)), 2 & view.def.flags && (view.state &= -9), view.state &= -97;
  }function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    return 0 === argStyle ? checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) : checkAndUpdateNodeDynamic(view, nodeDef, v0);
  }function markProjectedViewsForCheck(view) {
    var def = view.def;if (4 & def.nodeFlags) for (var i = 0; i < def.nodes.length; i++) {
      var nodeDef = def.nodes[i];if (4 & nodeDef.flags) {
        var projectedViews = asElementData(view, i).template._projectedViews;if (projectedViews) for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {
          var projectedView = projectedViews[i_1];projectedView.state |= 32, markParentViewsForCheckProjectedViews(projectedView, view);
        }
      } else 0 === (4 & nodeDef.childFlags) && (i += nodeDef.childCount);
    }
  }function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var changed = !1;switch (201347067 & nodeDef.flags) {case 1:
        changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);break;case 2:
        changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);break;case 16384:
        changed = checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);break;case 32:case 64:case 128:
        changed = checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);}return changed;
  }function checkAndUpdateNodeDynamic(view, nodeDef, values) {
    var changed = !1;switch (201347067 & nodeDef.flags) {case 1:
        changed = checkAndUpdateElementDynamic(view, nodeDef, values);break;case 2:
        changed = checkAndUpdateTextDynamic(view, nodeDef, values);break;case 16384:
        changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);break;case 32:case 64:case 128:
        changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);}if (changed) for (var bindLen = nodeDef.bindings.length, bindingStart = nodeDef.bindingIndex, oldValues = view.oldValues, i = 0; i < bindLen; i++) oldValues[bindingStart + i] = values[i];return changed;
  }function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    return 0 === argStyle ? checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) : checkNoChangesNodeDynamic(view, nodeDef, v0), !1;
  }function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var bindLen = nodeDef.bindings.length;bindLen > 0 && checkBindingNoChanges(view, nodeDef, 0, v0), bindLen > 1 && checkBindingNoChanges(view, nodeDef, 1, v1), bindLen > 2 && checkBindingNoChanges(view, nodeDef, 2, v2), bindLen > 3 && checkBindingNoChanges(view, nodeDef, 3, v3), bindLen > 4 && checkBindingNoChanges(view, nodeDef, 4, v4), bindLen > 5 && checkBindingNoChanges(view, nodeDef, 5, v5), bindLen > 6 && checkBindingNoChanges(view, nodeDef, 6, v6), bindLen > 7 && checkBindingNoChanges(view, nodeDef, 7, v7), bindLen > 8 && checkBindingNoChanges(view, nodeDef, 8, v8), bindLen > 9 && checkBindingNoChanges(view, nodeDef, 9, v9);
  }function checkNoChangesNodeDynamic(view, nodeDef, values) {
    for (var i = 0; i < values.length; i++) checkBindingNoChanges(view, nodeDef, i, values[i]);
  }function checkNoChangesQuery(view, nodeDef) {
    var queryList = asQueryList(view, nodeDef.index);if (queryList.dirty) throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), "Query " + nodeDef.query.id + " not dirty", "Query " + nodeDef.query.id + " dirty", 0 !== (1 & view.state));
  }function destroyView(view) {
    if (!(128 & view.state)) {
      if (execEmbeddedViewsAction(view, ViewAction.Destroy), execComponentViewsAction(view, ViewAction.Destroy), callLifecycleHooksChildrenFirst(view, 131072), view.disposables) for (var i = 0; i < view.disposables.length; i++) view.disposables[i]();detachProjectedView(view), view.renderer.destroyNode && destroyViewNodes(view), isComponentView(view) && view.renderer.destroy(), view.state |= 128;
    }
  }function destroyViewNodes(view) {
    for (var len = view.def.nodes.length, i = 0; i < len; i++) {
      var def = view.def.nodes[i];1 & def.flags ? view.renderer.destroyNode(asElementData(view, i).renderElement) : 2 & def.flags && view.renderer.destroyNode(asTextData(view, i).renderText);
    }
  }function execComponentViewsAction(view, action) {
    var def = view.def;if (33554432 & def.nodeFlags) for (var i = 0; i < def.nodes.length; i++) {
      var nodeDef = def.nodes[i];33554432 & nodeDef.flags ? callViewAction(asElementData(view, i).componentView, action) : 0 === (33554432 & nodeDef.childFlags) && (i += nodeDef.childCount);
    }
  }function execEmbeddedViewsAction(view, action) {
    var def = view.def;if (16777216 & def.nodeFlags) for (var i = 0; i < def.nodes.length; i++) {
      var nodeDef = def.nodes[i];if (16777216 & nodeDef.flags) for (var embeddedViews = asElementData(view, i).viewContainer._embeddedViews, k = 0; k < embeddedViews.length; k++) callViewAction(embeddedViews[k], action);else 0 === (16777216 & nodeDef.childFlags) && (i += nodeDef.childCount);
    }
  }function callViewAction(view, action) {
    var viewState = view.state;switch (action) {case ViewAction.CheckNoChanges:
        0 === (128 & viewState) && (12 === (12 & viewState) ? checkNoChangesView(view) : 64 & viewState && execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews));break;case ViewAction.CheckNoChangesProjectedViews:
        0 === (128 & viewState) && (32 & viewState ? checkNoChangesView(view) : 64 & viewState && execProjectedViewsAction(view, action));break;case ViewAction.CheckAndUpdate:
        0 === (128 & viewState) && (12 === (12 & viewState) ? checkAndUpdateView(view) : 64 & viewState && execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews));break;case ViewAction.CheckAndUpdateProjectedViews:
        0 === (128 & viewState) && (32 & viewState ? checkAndUpdateView(view) : 64 & viewState && execProjectedViewsAction(view, action));break;case ViewAction.Destroy:
        destroyView(view);break;case ViewAction.CreateViewNodes:
        createViewNodes(view);}
  }function execProjectedViewsAction(view, action) {
    execEmbeddedViewsAction(view, action), execComponentViewsAction(view, action);
  }function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
    if (view.def.nodeFlags & queryFlags && view.def.nodeFlags & staticDynamicQueryFlag) for (var nodeCount = view.def.nodes.length, i = 0; i < nodeCount; i++) {
      var nodeDef = view.def.nodes[i];if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) switch (Services.setCurrentNode(view, nodeDef.index), checkType) {case 0:
          checkAndUpdateQuery(view, nodeDef);break;case 1:
          checkNoChangesQuery(view, nodeDef);}nodeDef.childFlags & queryFlags && nodeDef.childFlags & staticDynamicQueryFlag || (i += nodeDef.childCount);
    }
  }function initServicesIfNeeded() {
    if (!initialized) {
      initialized = !0;var services = isDevMode() ? createDebugServices() : createProdServices();Services.setCurrentNode = services.setCurrentNode, Services.createRootView = services.createRootView, Services.createEmbeddedView = services.createEmbeddedView, Services.checkAndUpdateView = services.checkAndUpdateView, Services.checkNoChangesView = services.checkNoChangesView, Services.destroyView = services.destroyView, Services.resolveDep = resolveDep, Services.createDebugContext = services.createDebugContext, Services.handleEvent = services.handleEvent, Services.updateDirectives = services.updateDirectives, Services.updateRenderer = services.updateRenderer, Services.dirtyParentQueries = dirtyParentQueries;
    }
  }function createProdServices() {
    return { setCurrentNode: function () {}, createRootView: createProdRootView, createEmbeddedView: createEmbeddedView, checkAndUpdateView: checkAndUpdateView, checkNoChangesView: checkNoChangesView, destroyView: destroyView, createDebugContext: function (view, nodeIndex) {
        return new DebugContext_(view, nodeIndex);
      }, handleEvent: function (view, nodeIndex, eventName, event) {
        return view.def.handleEvent(view, nodeIndex, eventName, event);
      }, updateDirectives: function (view, checkType) {
        return view.def.updateDirectives(0 === checkType ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
      }, updateRenderer: function (view, checkType) {
        return view.def.updateRenderer(0 === checkType ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
      } };
  }function createDebugServices() {
    return { setCurrentNode: debugSetCurrentNode, createRootView: debugCreateRootView, createEmbeddedView: debugCreateEmbeddedView, checkAndUpdateView: debugCheckAndUpdateView, checkNoChangesView: debugCheckNoChangesView, destroyView: debugDestroyView, createDebugContext: function (view, nodeIndex) {
        return new DebugContext_(view, nodeIndex);
      }, handleEvent: debugHandleEvent, updateDirectives: debugUpdateDirectives, updateRenderer: debugUpdateRenderer };
  }function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    var rendererFactory = ngModule.injector.get(RendererFactory2);return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
  }function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    var rendererFactory = ngModule.injector.get(RendererFactory2),
        root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);
  }function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
    var sanitizer = ngModule.injector.get(Sanitizer),
        errorHandler = ngModule.injector.get(ErrorHandler),
        renderer = rendererFactory.createRenderer(null, null);return { ngModule: ngModule, injector: elInjector, projectableNodes: projectableNodes, selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler };
  }function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var nodeDef = view.def.nodes[nodeIndex];return checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9), 224 & nodeDef.flags ? asPureExpressionData(view, nodeIndex).value : void 0;
  }function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var nodeDef = view.def.nodes[nodeIndex];return checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9), 224 & nodeDef.flags ? asPureExpressionData(view, nodeIndex).value : void 0;
  }function debugCreateEmbeddedView(parent, anchorDef, context) {
    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);
  }function debugCheckAndUpdateView(view) {
    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
  }function debugCheckNoChangesView(view) {
    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
  }function debugDestroyView(view) {
    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
  }function debugSetCurrentNode(view, nodeIndex) {
    _currentView = view, _currentNodeIndex = nodeIndex;
  }function debugHandleEvent(view, nodeIndex, eventName, event) {
    return debugSetCurrentNode(view, nodeIndex), callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
  }function debugUpdateDirectives(view, checkType) {
    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
      for (var values = [], _i = 3; _i < arguments.length; _i++) values[_i - 3] = arguments[_i];var nodeDef = view.def.nodes[nodeIndex];return 0 === checkType ? debugCheckAndUpdateNode(view, nodeDef, argStyle, values) : debugCheckNoChangesNode(view, nodeDef, argStyle, values), 16384 & nodeDef.flags && debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex)), 224 & nodeDef.flags ? asPureExpressionData(view, nodeDef.index).value : void 0;
    }if (128 & view.state) throw viewDestroyedError(DebugAction[_currentAction]);return debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0)), view.def.updateDirectives(debugCheckDirectivesFn, view);
  }function debugUpdateRenderer(view, checkType) {
    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
      for (var values = [], _i = 3; _i < arguments.length; _i++) values[_i - 3] = arguments[_i];var nodeDef = view.def.nodes[nodeIndex];return 0 === checkType ? debugCheckAndUpdateNode(view, nodeDef, argStyle, values) : debugCheckNoChangesNode(view, nodeDef, argStyle, values), 3 & nodeDef.flags && debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex)), 224 & nodeDef.flags ? asPureExpressionData(view, nodeDef.index).value : void 0;
    }if (128 & view.state) throw viewDestroyedError(DebugAction[_currentAction]);return debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0)), view.def.updateRenderer(debugCheckRenderNodeFn, view);
  }function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
    var changed = checkAndUpdateNode.apply(void 0, [view, nodeDef, argStyle].concat(givenValues));if (changed) {
      var values = 1 === argStyle ? givenValues[0] : givenValues;if (16384 & nodeDef.flags) {
        for (var bindingValues = {}, i = 0; i < nodeDef.bindings.length; i++) {
          var binding = nodeDef.bindings[i],
              value = values[i];8 & binding.flags && (bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value));
        }var elDef = nodeDef.parent,
            el = asElementData(view, elDef.index).renderElement;if (elDef.element.name) for (var attr in bindingValues) {
          var value = bindingValues[attr];null != value ? view.renderer.setAttribute(el, attr, value) : view.renderer.removeAttribute(el, attr);
        } else view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
      }
    }
  }function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
    checkNoChangesNode.apply(void 0, [view, nodeDef, argStyle].concat(values));
  }function normalizeDebugBindingName(name) {
    return name = camelCaseToDashCase(name.replace(/[$@]/g, "_")), "ng-reflect-" + name;
  }function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function () {
      for (var m = [], _i = 0; _i < arguments.length; _i++) m[_i] = arguments[_i];return "-" + m[1].toLowerCase();
    });
  }function normalizeDebugBindingValue(value) {
    try {
      return null != value ? value.toString().slice(0, 30) : value;
    } catch (e) {
      return "[ERROR] Exception while trying to serialize the value";
    }
  }function nextDirectiveWithBinding(view, nodeIndex) {
    for (var i = nodeIndex; i < view.def.nodes.length; i++) {
      var nodeDef = view.def.nodes[i];if (16384 & nodeDef.flags && nodeDef.bindings && nodeDef.bindings.length) return i;
    }return null;
  }function nextRenderNodeWithBinding(view, nodeIndex) {
    for (var i = nodeIndex; i < view.def.nodes.length; i++) {
      var nodeDef = view.def.nodes[i];if (3 & nodeDef.flags && nodeDef.bindings && nodeDef.bindings.length) return i;
    }return null;
  }function getRenderNodeIndex(viewDef$$1, nodeIndex) {
    for (var renderNodeIndex = -1, i = 0; i <= nodeIndex; i++) {
      var nodeDef = viewDef$$1.nodes[i];3 & nodeDef.flags && renderNodeIndex++;
    }return renderNodeIndex;
  }function findHostElement(view) {
    for (; view && !isComponentView(view);) view = view.parent;return view.parent ? asElementData(view.parent, viewParentEl(view).index) : null;
  }function collectReferences(view, nodeDef, references) {
    for (var refName in nodeDef.references) references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
  }function callWithDebugContext(action, fn, self, args) {
    var oldAction = _currentAction,
        oldView = _currentView,
        oldNodeIndex = _currentNodeIndex;try {
      _currentAction = action;var result = fn.apply(self, args);return _currentView = oldView, _currentNodeIndex = oldNodeIndex, _currentAction = oldAction, result;
    } catch (e) {
      if (isViewDebugError(e) || !_currentView) throw e;throw viewWrappedDebugError(e, getCurrentDebugContext());
    }
  }function getCurrentDebugContext() {
    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function _iterableDiffersFactory() {
    return defaultIterableDiffers;
  }function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
  }function _localeFactory(locale) {
    return locale || "en-US";
  }function _initViewEngine() {
    initServicesIfNeeded();
  } /**
    * @license
    * Copyright Google Inc. All Rights Reserved.
    *
    * Use of this source code is governed by an MIT-style license that can be
    * found in the LICENSE file at https://angular.io/license
    */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  function trigger$1(name, definitions) {
    return { name: name, definitions: definitions };
  }function animate$1(timings, styles) {
    return void 0 === styles && (styles = null), { type: 4, styles: styles, timings: timings };
  }function group$1(steps) {
    return { type: 3, steps: steps };
  }function sequence$1(steps) {
    return { type: 2, steps: steps };
  }function style$1(tokens) {
    return { type: 6, styles: tokens };
  }function state$1(name, styles) {
    return { type: 0, name: name, styles: styles };
  }function keyframes$1(steps) {
    return { type: 5, steps: steps };
  }function transition$1(stateChangeExpr, steps) {
    return { type: 1, expr: stateChangeExpr, animation: steps };
  }function trigger$$1(name, definitions) {
    return trigger$1(name, definitions);
  }function animate$$1(timings, styles) {
    return animate$1(timings, styles);
  }function group$$1(steps) {
    return group$1(steps);
  }function sequence$$1(steps) {
    return sequence$1(steps);
  }function style$$1(tokens) {
    return style$1(tokens);
  }function state$$1(name, styles) {
    return state$1(name, styles);
  }function keyframes$$1(steps) {
    return keyframes$1(steps);
  }function transition$$1(stateChangeExpr, steps) {
    return transition$1(stateChangeExpr, steps);
  }var __extends = function (d, b) {
    function __() {
      this.constructor = d;
    }for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  },
      OpaqueToken = function () {
    function OpaqueToken(_desc) {
      this._desc = _desc;
    }return OpaqueToken.prototype.toString = function () {
      return "Token " + this._desc;
    }, OpaqueToken;
  }(),
      InjectionToken = function (_super) {
    function InjectionToken(desc) {
      return _super.call(this, desc) || this;
    }return __extends(InjectionToken, _super), InjectionToken.prototype.toString = function () {
      return "InjectionToken " + this._desc;
    }, InjectionToken;
  }(OpaqueToken),
      __window = "undefined" != typeof window && window,
      __self = "undefined" != typeof self && "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope && self,
      __global = "undefined" != typeof global && global,
      _global = __window || __global || __self,
      _symbolIterator = null,
      _nextClassId = 0,
      Reflect = _global.Reflect,
      ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken("AnalyzeForEntryComponents"),
      Attribute = makeParamDecorator("Attribute", [["attributeName", void 0]]),
      Query = function () {
    function Query() {}return Query;
  }(),
      ContentChildren = makePropDecorator("ContentChildren", [["selector", void 0], { first: !1, isViewQuery: !1, descendants: !1, read: void 0 }], Query),
      ContentChild = makePropDecorator("ContentChild", [["selector", void 0], { first: !0, isViewQuery: !1, descendants: !0, read: void 0 }], Query),
      ViewChildren = makePropDecorator("ViewChildren", [["selector", void 0], { first: !1, isViewQuery: !0, descendants: !0, read: void 0 }], Query),
      ViewChild = makePropDecorator("ViewChild", [["selector", void 0], { first: !0, isViewQuery: !0, descendants: !0, read: void 0 }], Query),
      ChangeDetectionStrategy = {};ChangeDetectionStrategy.OnPush = 0, ChangeDetectionStrategy.Default = 1, ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush", ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";var ChangeDetectorStatus = {};ChangeDetectorStatus.CheckOnce = 0, ChangeDetectorStatus.Checked = 1, ChangeDetectorStatus.CheckAlways = 2, ChangeDetectorStatus.Detached = 3, ChangeDetectorStatus.Errored = 4, ChangeDetectorStatus.Destroyed = 5, ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce", ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked", ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways", ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached", ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored", ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed"; /**
license
opyright Google Inc. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *
se of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.io/license

  var Directive = makeDecorator("Directive", { selector: void 0, inputs: void 0, outputs: void 0, host: void 0, providers: void 0, exportAs: void 0, queries: void 0 }),
      Component = makeDecorator("Component", { selector: void 0, inputs: void 0, outputs: void 0, host: void 0, exportAs: void 0, moduleId: void 0, providers: void 0, viewProviders: void 0, changeDetection: ChangeDetectionStrategy.Default, queries: void 0, templateUrl: void 0, template: void 0, styleUrls: void 0, styles: void 0, animations: void 0, encapsulation: void 0, interpolation: void 0, entryComponents: void 0 }, Directive),
      Pipe = makeDecorator("Pipe", { name: void 0, pure: !0 }),
      Input = makePropDecorator("Input", [["bindingPropertyName", void 0]]),
      Output = makePropDecorator("Output", [["bindingPropertyName", void 0]]),
      HostBinding = makePropDecorator("HostBinding", [["hostPropertyName", void 0]]),
      HostListener = makePropDecorator("HostListener", [["eventName", void 0], ["args", []]]),
      CUSTOM_ELEMENTS_SCHEMA = { name: "custom-elements" },
      NO_ERRORS_SCHEMA = { name: "no-errors-schema" },
      NgModule = makeDecorator("NgModule", { providers: void 0, declarations: void 0, imports: void 0, exports: void 0, entryComponents: void 0, bootstrap: void 0, schemas: void 0, id: void 0 }),
      ViewEncapsulation = {};ViewEncapsulation.Emulated = 0, ViewEncapsulation.Native = 1, ViewEncapsulation.None = 2, ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated", ViewEncapsulation[ViewEncapsulation.Native] = "Native", ViewEncapsulation[ViewEncapsulation.None] = "None";var ViewMetadata = function () {
    function ViewMetadata(_a) {
      var _b = void 0 === _a ? {} : _a,
          templateUrl = _b.templateUrl,
          template = _b.template,
          encapsulation = _b.encapsulation,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          animations = _b.animations,
          interpolation = _b.interpolation;this.templateUrl = templateUrl, this.template = template, this.styleUrls = styleUrls, this.styles = styles, this.encapsulation = encapsulation, this.animations = animations, this.interpolation = interpolation;
    }return ViewMetadata;
  }(),
      Version = function () {
    function Version(full) {
      this.full = full;
    }return Object.defineProperty(Version.prototype, "major", { get: function () {
        return this.full.split(".")[0];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(Version.prototype, "minor", { get: function () {
        return this.full.split(".")[1];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(Version.prototype, "patch", { get: function () {
        return this.full.split(".").slice(2).join(".");
      }, enumerable: !0, configurable: !0 }), Version;
  }(),
      VERSION = new Version("4.1.3"),
      Inject = makeParamDecorator("Inject", [["token", void 0]]),
      Optional = makeParamDecorator("Optional", []),
      Injectable = makeDecorator("Injectable", []),
      Self = makeParamDecorator("Self", []),
      SkipSelf = makeParamDecorator("SkipSelf", []),
      Host = makeParamDecorator("Host", []),
      _THROW_IF_NOT_FOUND = new Object(),
      THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND,
      _NullInjector = function () {
    function _NullInjector() {}return _NullInjector.prototype.get = function (token, notFoundValue) {
      if (void 0 === notFoundValue && (notFoundValue = _THROW_IF_NOT_FOUND), notFoundValue === _THROW_IF_NOT_FOUND) throw new Error("No provider for " + stringify(token) + "!");return notFoundValue;
    }, _NullInjector;
  }(),
      Injector = function () {
    function Injector() {}return Injector.prototype.get = function (token, notFoundValue) {}, Injector.prototype.get = function (token, notFoundValue) {}, Injector;
  }();Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND, Injector.NULL = new _NullInjector(); /**
                                                                                              * @license
                                                                                              * Copyright Google Inc. All Rights Reserved.
                                                                                              *
                                                                                              * Use of this source code is governed by an MIT-style license that can be
                                                                                              * found in the LICENSE file at https://angular.io/license
                                                                                              */
  var ERROR_COMPONENT_TYPE = "ngComponentType",
      ERROR_DEBUG_CONTEXT = "ngDebugContext",
      ERROR_ORIGINAL_ERROR = "ngOriginalError",
      ERROR_LOGGER = "ngErrorLogger",
      ErrorHandler = function () {
    function ErrorHandler(deprecatedParameter) {
      this._console = console;
    }return ErrorHandler.prototype.handleError = function (error) {
      var originalError = this._findOriginalError(error),
          context = this._findContext(error),
          errorLogger = getErrorLogger(error);errorLogger(this._console, "ERROR", error), originalError && errorLogger(this._console, "ORIGINAL ERROR", originalError), context && errorLogger(this._console, "ERROR CONTEXT", context);
    }, ErrorHandler.prototype._findContext = function (error) {
      return error ? getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error)) : null;
    }, ErrorHandler.prototype._findOriginalError = function (error) {
      for (var e = getOriginalError(error); e && getOriginalError(e);) e = getOriginalError(e);return e;
    }, ErrorHandler;
  }(),
      ReflectiveKey = function () {
    function ReflectiveKey(token, id) {
      if (this.token = token, this.id = id, !token) throw new Error("Token must be defined!");
    }return Object.defineProperty(ReflectiveKey.prototype, "displayName", { get: function () {
        return stringify(this.token);
      }, enumerable: !0, configurable: !0 }), ReflectiveKey.get = function (token) {
      return _globalKeyRegistry.get(resolveForwardRef(token));
    }, Object.defineProperty(ReflectiveKey, "numberOfKeys", { get: function () {
        return _globalKeyRegistry.numberOfKeys;
      }, enumerable: !0, configurable: !0 }), ReflectiveKey;
  }(),
      KeyRegistry = function () {
    function KeyRegistry() {
      this._allKeys = new Map();
    }return KeyRegistry.prototype.get = function (token) {
      if (token instanceof ReflectiveKey) return token;if (this._allKeys.has(token)) return this._allKeys.get(token);var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);return this._allKeys.set(token, newKey), newKey;
    }, Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", { get: function () {
        return this._allKeys.size;
      }, enumerable: !0, configurable: !0 }), KeyRegistry;
  }(),
      _globalKeyRegistry = new KeyRegistry(),
      Type = Function,
      DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/,
      ReflectionCapabilities = function () {
    function ReflectionCapabilities(reflect) {
      this._reflect = reflect || _global.Reflect;
    }return ReflectionCapabilities.prototype.isReflectionEnabled = function () {
      return !0;
    }, ReflectionCapabilities.prototype.factory = function (t) {
      return function () {
        for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];return new (t.bind.apply(t, [void 0].concat(args)))();
      };
    }, ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
      var result;result = "undefined" == typeof paramTypes ? new Array(paramAnnotations.length) : new Array(paramTypes.length);for (var i = 0; i < result.length; i++) "undefined" == typeof paramTypes ? result[i] = [] : paramTypes[i] != Object ? result[i] = [paramTypes[i]] : result[i] = [], paramAnnotations && null != paramAnnotations[i] && (result[i] = result[i].concat(paramAnnotations[i]));return result;
    }, ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
      if (DELEGATE_CTOR.exec(type.toString())) return null;if (type.parameters && type.parameters !== parentCtor.parameters) return type.parameters;var tsickleCtorParams = type.ctorParameters;if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
        var ctorParameters = "function" == typeof tsickleCtorParams ? tsickleCtorParams() : tsickleCtorParams,
            paramTypes = ctorParameters.map(function (ctorParam) {
          return ctorParam && ctorParam.type;
        }),
            paramAnnotations = ctorParameters.map(function (ctorParam) {
          return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
        });return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
      }if (null != this._reflect && null != this._reflect.getOwnMetadata) {
        var paramAnnotations = this._reflect.getOwnMetadata("parameters", type),
            paramTypes = this._reflect.getOwnMetadata("design:paramtypes", type);if (paramTypes || paramAnnotations) return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
      }return new Array(type.length).fill(void 0);
    }, ReflectionCapabilities.prototype.parameters = function (type) {
      if (!isType(type)) return [];var parentCtor = getParentCtor(type),
          parameters = this._ownParameters(type, parentCtor);return parameters || parentCtor === Object || (parameters = this.parameters(parentCtor)), parameters || [];
    }, ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
      if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
        var annotations = typeOrFunc.annotations;return "function" == typeof annotations && annotations.annotations && (annotations = annotations.annotations), annotations;
      }return typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators ? convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators) : this._reflect && this._reflect.getOwnMetadata ? this._reflect.getOwnMetadata("annotations", typeOrFunc) : null;
    }, ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
      if (!isType(typeOrFunc)) return [];var parentCtor = getParentCtor(typeOrFunc),
          ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [],
          parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];return parentAnnotations.concat(ownAnnotations);
    }, ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
      if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
        var propMetadata = typeOrFunc.propMetadata;return "function" == typeof propMetadata && propMetadata.propMetadata && (propMetadata = propMetadata.propMetadata), propMetadata;
      }if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
        var propDecorators_1 = typeOrFunc.propDecorators,
            propMetadata_1 = {};return Object.keys(propDecorators_1).forEach(function (prop) {
          propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
        }), propMetadata_1;
      }return this._reflect && this._reflect.getOwnMetadata ? this._reflect.getOwnMetadata("propMetadata", typeOrFunc) : null;
    }, ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
      if (!isType(typeOrFunc)) return {};var parentCtor = getParentCtor(typeOrFunc),
          propMetadata = {};if (parentCtor !== Object) {
        var parentPropMetadata_1 = this.propMetadata(parentCtor);Object.keys(parentPropMetadata_1).forEach(function (propName) {
          propMetadata[propName] = parentPropMetadata_1[propName];
        });
      }var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);return ownPropMetadata && Object.keys(ownPropMetadata).forEach(function (propName) {
        var decorators = [];propMetadata.hasOwnProperty(propName) && decorators.push.apply(decorators, propMetadata[propName]), decorators.push.apply(decorators, ownPropMetadata[propName]), propMetadata[propName] = decorators;
      }), propMetadata;
    }, ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
      return type instanceof Type && lcProperty in type.prototype;
    }, ReflectionCapabilities.prototype.getter = function (name) {
      return new Function("o", "return o." + name + ";");
    }, ReflectionCapabilities.prototype.setter = function (name) {
      return new Function("o", "v", "return o." + name + " = v;");
    }, ReflectionCapabilities.prototype.method = function (name) {
      var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";return new Function("o", "args", functionBody);
    }, ReflectionCapabilities.prototype.importUri = function (type) {
      return "object" == typeof type && type.filePath ? type.filePath : "./" + stringify(type);
    }, ReflectionCapabilities.prototype.resourceUri = function (type) {
      return "./" + stringify(type);
    }, ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
      return runtime;
    }, ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
      return enumIdentifier[name];
    }, ReflectionCapabilities;
  }(),
      ReflectorReader = function () {
    function ReflectorReader() {}return ReflectorReader.prototype.parameters = function (typeOrFunc) {}, ReflectorReader.prototype.annotations = function (typeOrFunc) {}, ReflectorReader.prototype.propMetadata = function (typeOrFunc) {}, ReflectorReader.prototype.importUri = function (typeOrFunc) {}, ReflectorReader.prototype.resourceUri = function (typeOrFunc) {}, ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {}, ReflectorReader.prototype.resolveEnum = function (identifier, name) {}, ReflectorReader;
  }(),
      Reflector = function (_super) {
    function Reflector(reflectionCapabilities) {
      var _this = _super.call(this) || this;return _this.reflectionCapabilities = reflectionCapabilities, _this;
    }return __extends(Reflector, _super), Reflector.prototype.updateCapabilities = function (caps) {
      this.reflectionCapabilities = caps;
    }, Reflector.prototype.factory = function (type) {
      return this.reflectionCapabilities.factory(type);
    }, Reflector.prototype.parameters = function (typeOrFunc) {
      return this.reflectionCapabilities.parameters(typeOrFunc);
    }, Reflector.prototype.annotations = function (typeOrFunc) {
      return this.reflectionCapabilities.annotations(typeOrFunc);
    }, Reflector.prototype.propMetadata = function (typeOrFunc) {
      return this.reflectionCapabilities.propMetadata(typeOrFunc);
    }, Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
      return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    }, Reflector.prototype.getter = function (name) {
      return this.reflectionCapabilities.getter(name);
    }, Reflector.prototype.setter = function (name) {
      return this.reflectionCapabilities.setter(name);
    }, Reflector.prototype.method = function (name) {
      return this.reflectionCapabilities.method(name);
    }, Reflector.prototype.importUri = function (type) {
      return this.reflectionCapabilities.importUri(type);
    }, Reflector.prototype.resourceUri = function (type) {
      return this.reflectionCapabilities.resourceUri(type);
    }, Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
      return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
    }, Reflector.prototype.resolveEnum = function (identifier, name) {
      return this.reflectionCapabilities.resolveEnum(identifier, name);
    }, Reflector;
  }(ReflectorReader),
      reflector = new Reflector(new ReflectionCapabilities()),
      ReflectiveDependency = function () {
    function ReflectiveDependency(key, optional, visibility) {
      this.key = key, this.optional = optional, this.visibility = visibility;
    }return ReflectiveDependency.fromKey = function (key) {
      return new ReflectiveDependency(key, !1, null);
    }, ReflectiveDependency;
  }(),
      _EMPTY_LIST = [],
      ResolvedReflectiveProvider_ = function () {
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
      this.key = key, this.resolvedFactories = resolvedFactories, this.multiProvider = multiProvider;
    }return Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", { get: function () {
        return this.resolvedFactories[0];
      }, enumerable: !0, configurable: !0 }), ResolvedReflectiveProvider_;
  }(),
      ResolvedReflectiveFactory = function () {
    function ResolvedReflectiveFactory(factory, dependencies) {
      this.factory = factory, this.dependencies = dependencies;
    }return ResolvedReflectiveFactory;
  }(),
      UNDEFINED = new Object(),
      ReflectiveInjector = function () {
    function ReflectiveInjector() {}return ReflectiveInjector.resolve = function (providers) {
      return resolveReflectiveProviders(providers);
    }, ReflectiveInjector.resolveAndCreate = function (providers, parent) {
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    }, ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
      return new ReflectiveInjector_(providers, parent);
    }, ReflectiveInjector.prototype.parent = function () {}, ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) {}, ReflectiveInjector.prototype.createChildFromResolved = function (providers) {}, ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) {}, ReflectiveInjector.prototype.instantiateResolved = function (provider) {}, ReflectiveInjector.prototype.get = function (token, notFoundValue) {}, ReflectiveInjector;
  }(),
      ReflectiveInjector_ = function () {
    function ReflectiveInjector_(_providers, _parent) {
      this._constructionCounter = 0, this._providers = _providers, this._parent = _parent || null;var len = _providers.length;this.keyIds = new Array(len), this.objs = new Array(len);for (var i = 0; i < len; i++) this.keyIds[i] = _providers[i].key.id, this.objs[i] = UNDEFINED;
    }return ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
      return void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
    }, Object.defineProperty(ReflectiveInjector_.prototype, "parent", { get: function () {
        return this._parent;
      }, enumerable: !0, configurable: !0 }), ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);return this.createChildFromResolved(ResolvedReflectiveProviders);
    }, ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
      var inj = new ReflectiveInjector_(providers);return inj._parent = this, inj;
    }, ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
      return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    }, ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
      return this._instantiateProvider(provider);
    }, ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
      if (index < 0 || index >= this._providers.length) throw outOfBoundsError(index);return this._providers[index];
    }, ReflectiveInjector_.prototype._new = function (provider) {
      if (this._constructionCounter++ > this._getMaxNumberOfObjects()) throw cyclicDependencyError(this, provider.key);return this._instantiateProvider(provider);
    }, ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () {
      return this.objs.length;
    }, ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
      if (provider.multiProvider) {
        for (var res = new Array(provider.resolvedFactories.length), i = 0; i < provider.resolvedFactories.length; ++i) res[i] = this._instantiate(provider, provider.resolvedFactories[i]);return res;
      }return this._instantiate(provider, provider.resolvedFactories[0]);
    }, ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
      var deps,
          _this = this,
          factory = ResolvedReflectiveFactory$$1.factory;try {
        deps = ResolvedReflectiveFactory$$1.dependencies.map(function (dep) {
          return _this._getByReflectiveDependency(dep);
        });
      } catch (e) {
        throw e.addKey && e.addKey(this, provider.key), e;
      }var obj;try {
        obj = factory.apply(void 0, deps);
      } catch (e) {
        throw instantiationError(this, e, e.stack, provider.key);
      }return obj;
    }, ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
      return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    }, ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
      return key === INJECTOR_KEY ? this : visibility instanceof Self ? this._getByKeySelf(key, notFoundValue) : this._getByKeyDefault(key, notFoundValue, visibility);
    }, ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
      for (var i = 0; i < this.keyIds.length; i++) if (this.keyIds[i] === keyId) return this.objs[i] === UNDEFINED && (this.objs[i] = this._new(this._providers[i])), this.objs[i];return UNDEFINED;
    }, ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
      if (notFoundValue !== THROW_IF_NOT_FOUND) return notFoundValue;throw noProviderError(this, key);
    }, ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
      var obj = this._getObjByKeyId(key.id);return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
    }, ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
      var inj;for (inj = visibility instanceof SkipSelf ? this._parent : this; inj instanceof ReflectiveInjector_;) {
        var inj_ = inj,
            obj = inj_._getObjByKeyId(key.id);if (obj !== UNDEFINED) return obj;inj = inj_._parent;
      }return null !== inj ? inj.get(key.token, notFoundValue) : this._throwOrNull(key, notFoundValue);
    }, Object.defineProperty(ReflectiveInjector_.prototype, "displayName", { get: function () {
        var providers = _mapProviders(this, function (b) {
          return ' "' + b.key.displayName + '" ';
        }).join(", ");return "ReflectiveInjector(providers: [" + providers + "])";
      }, enumerable: !0, configurable: !0 }), ReflectiveInjector_.prototype.toString = function () {
      return this.displayName;
    }, ReflectiveInjector_;
  }(),
      INJECTOR_KEY = ReflectiveKey.get(Injector),
      APP_INITIALIZER = new InjectionToken("Application Initializer"),
      ApplicationInitStatus = function () {
    function ApplicationInitStatus(appInits) {
      var _this = this;this.appInits = appInits, this.initialized = !1, this._done = !1, this._donePromise = new Promise(function (res, rej) {
        _this.resolve = res, _this.reject = rej;
      });
    }return ApplicationInitStatus.prototype.runInitializers = function () {
      var _this = this;if (!this.initialized) {
        var asyncInitPromises = [],
            complete = function () {
          _this._done = !0, _this.resolve();
        };if (this.appInits) for (var i = 0; i < this.appInits.length; i++) {
          var initResult = this.appInits[i]();isPromise(initResult) && asyncInitPromises.push(initResult);
        }Promise.all(asyncInitPromises).then(function () {
          complete();
        }).catch(function (e) {
          _this.reject(e);
        }), 0 === asyncInitPromises.length && complete(), this.initialized = !0;
      }
    }, Object.defineProperty(ApplicationInitStatus.prototype, "done", { get: function () {
        return this._done;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", { get: function () {
        return this._donePromise;
      }, enumerable: !0, configurable: !0 }), ApplicationInitStatus;
  }();ApplicationInitStatus.decorators = [{ type: Injectable }], ApplicationInitStatus.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER] }, { type: Optional }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var APP_ID = new InjectionToken("AppId"),
      APP_ID_RANDOM_PROVIDER = { provide: APP_ID, useFactory: _appIdRandomProviderFactory, deps: [] },
      PLATFORM_INITIALIZER = new InjectionToken("Platform Initializer"),
      PLATFORM_ID = new InjectionToken("Platform ID"),
      APP_BOOTSTRAP_LISTENER = new InjectionToken("appBootstrapListener"),
      PACKAGE_ROOT_URL = new InjectionToken("Application Packages Root URL"),
      Console = function () {
    function Console() {}return Console.prototype.log = function (message) {
      console.log(message);
    }, Console.prototype.warn = function (message) {
      console.warn(message);
    }, Console;
  }();Console.decorators = [{ type: Injectable }], Console.ctorParameters = function () {
    return [];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var ModuleWithComponentFactories = function () {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
      this.ngModuleFactory = ngModuleFactory, this.componentFactories = componentFactories;
    }return ModuleWithComponentFactories;
  }(),
      Compiler = function () {
    function Compiler() {}return Compiler.prototype.compileModuleSync = function (moduleType) {
      throw _throwError();
    }, Compiler.prototype.compileModuleAsync = function (moduleType) {
      throw _throwError();
    }, Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
      throw _throwError();
    }, Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
      throw _throwError();
    }, Compiler.prototype.getNgContentSelectors = function (component) {
      throw _throwError();
    }, Compiler.prototype.clearCache = function () {}, Compiler.prototype.clearCacheFor = function (type) {}, Compiler;
  }();Compiler.decorators = [{ type: Injectable }], Compiler.ctorParameters = function () {
    return [];
  };var COMPILER_OPTIONS = new InjectionToken("compilerOptions"),
      CompilerFactory = function () {
    function CompilerFactory() {}return CompilerFactory.prototype.createCompiler = function (options) {}, CompilerFactory;
  }(),
      ComponentRef = function () {
    function ComponentRef() {}return ComponentRef.prototype.location = function () {}, ComponentRef.prototype.injector = function () {}, ComponentRef.prototype.instance = function () {}, ComponentRef.prototype.hostView = function () {}, ComponentRef.prototype.changeDetectorRef = function () {}, ComponentRef.prototype.componentType = function () {}, ComponentRef.prototype.destroy = function () {}, ComponentRef.prototype.onDestroy = function (callback) {}, ComponentRef;
  }(),
      ComponentFactory = function () {
    function ComponentFactory() {}return ComponentFactory.prototype.selector = function () {}, ComponentFactory.prototype.componentType = function () {}, ComponentFactory.prototype.ngContentSelectors = function () {}, ComponentFactory.prototype.inputs = function () {}, ComponentFactory.prototype.outputs = function () {}, ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {}, ComponentFactory;
  }(),
      ERROR_COMPONENT = "ngComponent",
      _NullComponentFactoryResolver = function () {
    function _NullComponentFactoryResolver() {}return _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
      throw noComponentFactoryError(component);
    }, _NullComponentFactoryResolver;
  }(),
      ComponentFactoryResolver = function () {
    function ComponentFactoryResolver() {}return ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {}, ComponentFactoryResolver;
  }();ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();var trace,
      events,
      CodegenComponentFactoryResolver = function () {
    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
      this._parent = _parent, this._ngModule = _ngModule, this._factories = new Map();for (var i = 0; i < factories.length; i++) {
        var factory = factories[i];this._factories.set(factory.componentType, factory);
      }
    }return CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
      var factory = this._factories.get(component) || this._parent.resolveComponentFactory(component);return new ComponentFactoryBoundToModule(factory, this._ngModule);
    }, CodegenComponentFactoryResolver;
  }(),
      ComponentFactoryBoundToModule = function (_super) {
    function ComponentFactoryBoundToModule(factory, ngModule) {
      var _this = _super.call(this) || this;return _this.factory = factory, _this.ngModule = ngModule, _this;
    }return __extends(ComponentFactoryBoundToModule, _super), Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", { get: function () {
        return this.factory.selector;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", { get: function () {
        return this.factory.componentType;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", { get: function () {
        return this.factory.ngContentSelectors;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", { get: function () {
        return this.factory.inputs;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", { get: function () {
        return this.factory.outputs;
      }, enumerable: !0, configurable: !0 }), ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
      return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
    }, ComponentFactoryBoundToModule;
  }(ComponentFactory),
      NgModuleRef = function () {
    function NgModuleRef() {}return NgModuleRef.prototype.injector = function () {}, NgModuleRef.prototype.componentFactoryResolver = function () {}, NgModuleRef.prototype.instance = function () {}, NgModuleRef.prototype.destroy = function () {}, NgModuleRef.prototype.onDestroy = function (callback) {}, NgModuleRef;
  }(),
      NgModuleFactory = function () {
    function NgModuleFactory(_injectorClass, _moduleType) {
      this._injectorClass = _injectorClass, this._moduleType = _moduleType;
    }return Object.defineProperty(NgModuleFactory.prototype, "moduleType", { get: function () {
        return this._moduleType;
      }, enumerable: !0, configurable: !0 }), NgModuleFactory.prototype.create = function (parentInjector) {
      var instance = new this._injectorClass(parentInjector || Injector.NULL);return instance.create(), instance;
    }, NgModuleFactory;
  }(),
      _UNDEFINED = new Object(),
      NgModuleInjector = function () {
    function NgModuleInjector(parent, factories, bootstrapFactories) {
      var _this = this;this.parent = parent, this._destroyListeners = [], this._destroyed = !1, this.bootstrapFactories = bootstrapFactories.map(function (f) {
        return new ComponentFactoryBoundToModule(f, _this);
      }), this._cmpFactoryResolver = new CodegenComponentFactoryResolver(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL), this);
    }return NgModuleInjector.prototype.create = function () {
      this.instance = this.createInternal();
    }, NgModuleInjector.prototype.createInternal = function () {}, NgModuleInjector.prototype.get = function (token, notFoundValue) {
      if (void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), token === Injector || token === NgModuleRef) return this;if (token === ComponentFactoryResolver) return this._cmpFactoryResolver;var result = this.getInternal(token, _UNDEFINED);return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
    }, NgModuleInjector.prototype.getInternal = function (token, notFoundValue) {}, Object.defineProperty(NgModuleInjector.prototype, "injector", { get: function () {
        return this;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", { get: function () {
        return this._cmpFactoryResolver;
      }, enumerable: !0, configurable: !0 }), NgModuleInjector.prototype.destroy = function () {
      if (this._destroyed) throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");this._destroyed = !0, this.destroyInternal(), this._destroyListeners.forEach(function (listener) {
        return listener();
      });
    }, NgModuleInjector.prototype.onDestroy = function (callback) {
      this._destroyListeners.push(callback);
    }, NgModuleInjector.prototype.destroyInternal = function () {}, NgModuleInjector;
  }(),
      wtfEnabled = detectWTF(),
      wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) {
    return noopScope;
  },
      wtfLeave = wtfEnabled ? leave : function (s, r) {
    return r;
  },
      wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) {
    return null;
  },
      wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) {
    return null;
  },
      EventEmitter = function (_super) {
    function EventEmitter(isAsync) {
      void 0 === isAsync && (isAsync = !1);var _this = _super.call(this) || this;return _this.__isAsync = isAsync, _this;
    }return __extends(EventEmitter, _super), EventEmitter.prototype.emit = function (value) {
      _super.prototype.next.call(this, value);
    }, EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
      var schedulerFn,
          errorFn = function (err) {
        return null;
      },
          completeFn = function () {
        return null;
      };return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function (value) {
        setTimeout(function () {
          return generatorOrNext.next(value);
        });
      } : function (value) {
        generatorOrNext.next(value);
      }, generatorOrNext.error && (errorFn = this.__isAsync ? function (err) {
        setTimeout(function () {
          return generatorOrNext.error(err);
        });
      } : function (err) {
        generatorOrNext.error(err);
      }), generatorOrNext.complete && (completeFn = this.__isAsync ? function () {
        setTimeout(function () {
          return generatorOrNext.complete();
        });
      } : function () {
        generatorOrNext.complete();
      })) : (schedulerFn = this.__isAsync ? function (value) {
        setTimeout(function () {
          return generatorOrNext(value);
        });
      } : function (value) {
        generatorOrNext(value);
      }, error && (errorFn = this.__isAsync ? function (err) {
        setTimeout(function () {
          return error(err);
        });
      } : function (err) {
        error(err);
      }), complete && (completeFn = this.__isAsync ? function () {
        setTimeout(function () {
          return complete();
        });
      } : function () {
        complete();
      })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    }, EventEmitter;
  }(rxjs_Subject.Subject),
      NgZone = function () {
    function NgZone(_a) {
      var _b = _a.enableLongStackTrace,
          enableLongStackTrace = void 0 !== _b && _b;if (this._hasPendingMicrotasks = !1, this._hasPendingMacrotasks = !1, this._isStable = !0, this._nesting = 0, this._onUnstable = new EventEmitter(!1), this._onMicrotaskEmpty = new EventEmitter(!1), this._onStable = new EventEmitter(!1), this._onErrorEvents = new EventEmitter(!1), "undefined" == typeof Zone) throw new Error("Angular requires Zone.js prolyfill.");Zone.assertZonePatched(), this.outer = this.inner = Zone.current, Zone.wtfZoneSpec && (this.inner = this.inner.fork(Zone.wtfZoneSpec)), enableLongStackTrace && Zone.longStackTraceZoneSpec && (this.inner = this.inner.fork(Zone.longStackTraceZoneSpec)), this.forkInnerZoneWithAngularBehavior();
    }return NgZone.isInAngularZone = function () {
      return Zone.current.get("isAngularZone") === !0;
    }, NgZone.assertInAngularZone = function () {
      if (!NgZone.isInAngularZone()) throw new Error("Expected to be in Angular Zone, but it is not!");
    }, NgZone.assertNotInAngularZone = function () {
      if (NgZone.isInAngularZone()) throw new Error("Expected to not be in Angular Zone, but it is!");
    }, NgZone.prototype.run = function (fn) {
      return this.inner.run(fn);
    }, NgZone.prototype.runGuarded = function (fn) {
      return this.inner.runGuarded(fn);
    }, NgZone.prototype.runOutsideAngular = function (fn) {
      return this.outer.run(fn);
    }, Object.defineProperty(NgZone.prototype, "onUnstable", { get: function () {
        return this._onUnstable;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", { get: function () {
        return this._onMicrotaskEmpty;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "onStable", { get: function () {
        return this._onStable;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "onError", { get: function () {
        return this._onErrorEvents;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "isStable", { get: function () {
        return this._isStable;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", { get: function () {
        return this._hasPendingMicrotasks;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", { get: function () {
        return this._hasPendingMacrotasks;
      }, enumerable: !0, configurable: !0 }), NgZone.prototype.checkStable = function () {
      var _this = this;if (0 == this._nesting && !this._hasPendingMicrotasks && !this._isStable) try {
        this._nesting++, this._onMicrotaskEmpty.emit(null);
      } finally {
        if (this._nesting--, !this._hasPendingMicrotasks) try {
          this.runOutsideAngular(function () {
            return _this._onStable.emit(null);
          });
        } finally {
          this._isStable = !0;
        }
      }
    }, NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
      var _this = this;this.inner = this.inner.fork({ name: "angular", properties: { isAngularZone: !0 }, onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
          try {
            return _this.onEnter(), delegate.invokeTask(target, task, applyThis, applyArgs);
          } finally {
            _this.onLeave();
          }
        }, onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
          try {
            return _this.onEnter(), delegate.invoke(target, callback, applyThis, applyArgs, source);
          } finally {
            _this.onLeave();
          }
        }, onHasTask: function (delegate, current, target, hasTaskState) {
          delegate.hasTask(target, hasTaskState), current === target && ("microTask" == hasTaskState.change ? _this.setHasMicrotask(hasTaskState.microTask) : "macroTask" == hasTaskState.change && _this.setHasMacrotask(hasTaskState.macroTask));
        }, onHandleError: function (delegate, current, target, error) {
          return delegate.handleError(target, error), _this.triggerError(error), !1;
        } });
    }, NgZone.prototype.onEnter = function () {
      this._nesting++, this._isStable && (this._isStable = !1, this._onUnstable.emit(null));
    }, NgZone.prototype.onLeave = function () {
      this._nesting--, this.checkStable();
    }, NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
      this._hasPendingMicrotasks = hasMicrotasks, this.checkStable();
    }, NgZone.prototype.setHasMacrotask = function (hasMacrotasks) {
      this._hasPendingMacrotasks = hasMacrotasks;
    }, NgZone.prototype.triggerError = function (error) {
      this._onErrorEvents.emit(error);
    }, NgZone;
  }(),
      Testability = function () {
    function Testability(_ngZone) {
      this._ngZone = _ngZone, this._pendingCount = 0, this._isZoneStable = !0, this._didWork = !1, this._callbacks = [], this._watchAngularEvents();
    }return Testability.prototype._watchAngularEvents = function () {
      var _this = this;this._ngZone.onUnstable.subscribe({ next: function () {
          _this._didWork = !0, _this._isZoneStable = !1;
        } }), this._ngZone.runOutsideAngular(function () {
        _this._ngZone.onStable.subscribe({ next: function () {
            NgZone.assertNotInAngularZone(), scheduleMicroTask(function () {
              _this._isZoneStable = !0, _this._runCallbacksIfReady();
            });
          } });
      });
    }, Testability.prototype.increasePendingRequestCount = function () {
      return this._pendingCount += 1, this._didWork = !0, this._pendingCount;
    }, Testability.prototype.decreasePendingRequestCount = function () {
      if (this._pendingCount -= 1, this._pendingCount < 0) throw new Error("pending async requests below zero");return this._runCallbacksIfReady(), this._pendingCount;
    }, Testability.prototype.isStable = function () {
      return this._isZoneStable && 0 == this._pendingCount && !this._ngZone.hasPendingMacrotasks;
    }, Testability.prototype._runCallbacksIfReady = function () {
      var _this = this;this.isStable() ? scheduleMicroTask(function () {
        for (; 0 !== _this._callbacks.length;) _this._callbacks.pop()(_this._didWork);_this._didWork = !1;
      }) : this._didWork = !0;
    }, Testability.prototype.whenStable = function (callback) {
      this._callbacks.push(callback), this._runCallbacksIfReady();
    }, Testability.prototype.getPendingRequestCount = function () {
      return this._pendingCount;
    }, Testability.prototype.findBindings = function (using, provider, exactMatch) {
      return [];
    }, Testability.prototype.findProviders = function (using, provider, exactMatch) {
      return [];
    }, Testability;
  }();Testability.decorators = [{ type: Injectable }], Testability.ctorParameters = function () {
    return [{ type: NgZone }];
  };var TestabilityRegistry = function () {
    function TestabilityRegistry() {
      this._applications = new Map(), _testabilityGetter.addToWindow(this);
    }return TestabilityRegistry.prototype.registerApplication = function (token, testability) {
      this._applications.set(token, testability);
    }, TestabilityRegistry.prototype.getTestability = function (elem) {
      return this._applications.get(elem) || null;
    }, TestabilityRegistry.prototype.getAllTestabilities = function () {
      return Array.from(this._applications.values());
    }, TestabilityRegistry.prototype.getAllRootElements = function () {
      return Array.from(this._applications.keys());
    }, TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
      return void 0 === findInAncestors && (findInAncestors = !0), _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    }, TestabilityRegistry;
  }();TestabilityRegistry.decorators = [{ type: Injectable }], TestabilityRegistry.ctorParameters = function () {
    return [];
  };var _platform,
      _NoopGetTestability = function () {
    function _NoopGetTestability() {}return _NoopGetTestability.prototype.addToWindow = function (registry) {}, _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
      return null;
    }, _NoopGetTestability;
  }(),
      _testabilityGetter = new _NoopGetTestability(),
      _devMode = !0,
      _runModeLocked = !1,
      ALLOW_MULTIPLE_PLATFORMS = new InjectionToken("AllowMultipleToken"),
      NgProbeToken = function () {
    function NgProbeToken(name, token) {
      this.name = name, this.token = token;
    }return NgProbeToken;
  }(),
      PlatformRef = function () {
    function PlatformRef() {}return PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {}, PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {}, PlatformRef.prototype.onDestroy = function (callback) {}, PlatformRef.prototype.injector = function () {}, PlatformRef.prototype.destroy = function () {}, PlatformRef.prototype.destroyed = function () {}, PlatformRef;
  }(),
      PlatformRef_ = function (_super) {
    function PlatformRef_(_injector) {
      var _this = _super.call(this) || this;return _this._injector = _injector, _this._modules = [], _this._destroyListeners = [], _this._destroyed = !1, _this;
    }return __extends(PlatformRef_, _super), PlatformRef_.prototype.onDestroy = function (callback) {
      this._destroyListeners.push(callback);
    }, Object.defineProperty(PlatformRef_.prototype, "injector", { get: function () {
        return this._injector;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(PlatformRef_.prototype, "destroyed", { get: function () {
        return this._destroyed;
      }, enumerable: !0, configurable: !0 }), PlatformRef_.prototype.destroy = function () {
      if (this._destroyed) throw new Error("The platform has already been destroyed!");this._modules.slice().forEach(function (module) {
        return module.destroy();
      }), this._destroyListeners.forEach(function (listener) {
        return listener();
      }), this._destroyed = !0;
    }, PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
      return this._bootstrapModuleFactoryWithZone(moduleFactory);
    }, PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
      var _this = this;return ngZone || (ngZone = new NgZone({ enableLongStackTrace: isDevMode() })), ngZone.run(function () {
        var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector),
            moduleRef = moduleFactory.create(ngZoneInjector),
            exceptionHandler = moduleRef.injector.get(ErrorHandler, null);if (!exceptionHandler) throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");return moduleRef.onDestroy(function () {
          return remove(_this._modules, moduleRef);
        }), ngZone.onError.subscribe({ next: function (error) {
            exceptionHandler.handleError(error);
          } }), _callAndReportToErrorHandler(exceptionHandler, function () {
          var initStatus = moduleRef.injector.get(ApplicationInitStatus);return initStatus.runInitializers(), initStatus.donePromise.then(function () {
            return _this._moduleDoBootstrap(moduleRef), moduleRef;
          });
        });
      });
    }, PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
      return void 0 === compilerOptions && (compilerOptions = []), this._bootstrapModuleWithZone(moduleType, compilerOptions);
    }, PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
      var _this = this;void 0 === compilerOptions && (compilerOptions = []);var compilerFactory = this.injector.get(CompilerFactory),
          compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);return compiler.compileModuleAsync(moduleType).then(function (moduleFactory) {
        return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
      });
    }, PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
      var appRef = moduleRef.injector.get(ApplicationRef);if (moduleRef.bootstrapFactories.length > 0) moduleRef.bootstrapFactories.forEach(function (f) {
        return appRef.bootstrap(f);
      });else {
        if (!moduleRef.instance.ngDoBootstrap) throw new Error("The module " + stringify(moduleRef.instance.constructor) + ' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.');moduleRef.instance.ngDoBootstrap(appRef);
      }this._modules.push(moduleRef);
    }, PlatformRef_;
  }(PlatformRef);PlatformRef_.decorators = [{ type: Injectable }], PlatformRef_.ctorParameters = function () {
    return [{ type: Injector }];
  };var ApplicationRef = function () {
    function ApplicationRef() {}return ApplicationRef.prototype.bootstrap = function (componentFactory) {}, ApplicationRef.prototype.tick = function () {}, ApplicationRef.prototype.componentTypes = function () {}, ApplicationRef.prototype.components = function () {}, ApplicationRef.prototype.attachView = function (view) {}, ApplicationRef.prototype.detachView = function (view) {}, ApplicationRef.prototype.viewCount = function () {}, ApplicationRef.prototype.isStable = function () {}, ApplicationRef;
  }(),
      ApplicationRef_ = function (_super) {
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
      var _this = _super.call(this) || this;_this._zone = _zone, _this._console = _console, _this._injector = _injector, _this._exceptionHandler = _exceptionHandler, _this._componentFactoryResolver = _componentFactoryResolver, _this._initStatus = _initStatus, _this._bootstrapListeners = [], _this._rootComponents = [], _this._rootComponentTypes = [], _this._views = [], _this._runningTick = !1, _this._enforceNoNewChanges = !1, _this._stable = !0, _this._enforceNoNewChanges = isDevMode(), _this._zone.onMicrotaskEmpty.subscribe({ next: function () {
          _this._zone.run(function () {
            _this.tick();
          });
        } });var isCurrentlyStable = new rxjs_Observable.Observable(function (observer) {
        _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks && !_this._zone.hasPendingMicrotasks, _this._zone.runOutsideAngular(function () {
          observer.next(_this._stable), observer.complete();
        });
      }),
          isStable = new rxjs_Observable.Observable(function (observer) {
        var stableSub = _this._zone.onStable.subscribe(function () {
          NgZone.assertNotInAngularZone(), scheduleMicroTask(function () {
            _this._stable || _this._zone.hasPendingMacrotasks || _this._zone.hasPendingMicrotasks || (_this._stable = !0, observer.next(!0));
          });
        }),
            unstableSub = _this._zone.onUnstable.subscribe(function () {
          NgZone.assertInAngularZone(), _this._stable && (_this._stable = !1, _this._zone.runOutsideAngular(function () {
            observer.next(!1);
          }));
        });return function () {
          stableSub.unsubscribe(), unstableSub.unsubscribe();
        };
      });return _this._isStable = rxjs_observable_merge.merge(isCurrentlyStable, rxjs_operator_share.share.call(isStable)), _this;
    }return __extends(ApplicationRef_, _super), ApplicationRef_.prototype.attachView = function (viewRef) {
      var view = viewRef;this._views.push(view), view.attachToAppRef(this);
    }, ApplicationRef_.prototype.detachView = function (viewRef) {
      var view = viewRef;remove(this._views, view), view.detachFromAppRef();
    }, ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
      var _this = this;if (!this._initStatus.done) throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");var componentFactory;componentFactory = componentOrFactory instanceof ComponentFactory ? componentOrFactory : this._componentFactoryResolver.resolveComponentFactory(componentOrFactory), this._rootComponentTypes.push(componentFactory.componentType);var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ? null : this._injector.get(NgModuleRef),
          compRef = componentFactory.create(Injector.NULL, [], componentFactory.selector, ngModule);compRef.onDestroy(function () {
        _this._unloadComponent(compRef);
      });var testability = compRef.injector.get(Testability, null);return testability && compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability), this._loadComponent(compRef), isDevMode() && this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode."), compRef;
    }, ApplicationRef_.prototype._loadComponent = function (componentRef) {
      this.attachView(componentRef.hostView), this.tick(), this._rootComponents.push(componentRef);var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);listeners.forEach(function (listener) {
        return listener(componentRef);
      });
    }, ApplicationRef_.prototype._unloadComponent = function (componentRef) {
      this.detachView(componentRef.hostView), remove(this._rootComponents, componentRef);
    }, ApplicationRef_.prototype.tick = function () {
      if (this._runningTick) throw new Error("ApplicationRef.tick is called recursively");var scope = ApplicationRef_._tickScope();try {
        this._runningTick = !0, this._views.forEach(function (view) {
          return view.detectChanges();
        }), this._enforceNoNewChanges && this._views.forEach(function (view) {
          return view.checkNoChanges();
        });
      } catch (e) {
        this._exceptionHandler.handleError(e);
      } finally {
        this._runningTick = !1, wtfLeave(scope);
      }
    }, ApplicationRef_.prototype.ngOnDestroy = function () {
      this._views.slice().forEach(function (view) {
        return view.destroy();
      });
    }, Object.defineProperty(ApplicationRef_.prototype, "viewCount", { get: function () {
        return this._views.length;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationRef_.prototype, "componentTypes", { get: function () {
        return this._rootComponentTypes;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationRef_.prototype, "components", { get: function () {
        return this._rootComponents;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ApplicationRef_.prototype, "isStable", { get: function () {
        return this._isStable;
      }, enumerable: !0, configurable: !0 }), ApplicationRef_;
  }(ApplicationRef);ApplicationRef_._tickScope = wtfCreateScope("ApplicationRef#tick()"), ApplicationRef_.decorators = [{ type: Injectable }], ApplicationRef_.ctorParameters = function () {
    return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var RenderComponentType = function () {
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
      this.id = id, this.templateUrl = templateUrl, this.slotCount = slotCount, this.encapsulation = encapsulation, this.styles = styles, this.animations = animations;
    }return RenderComponentType;
  }(),
      RenderDebugInfo = function () {
    function RenderDebugInfo() {}return RenderDebugInfo.prototype.injector = function () {}, RenderDebugInfo.prototype.component = function () {}, RenderDebugInfo.prototype.providerTokens = function () {}, RenderDebugInfo.prototype.references = function () {}, RenderDebugInfo.prototype.context = function () {}, RenderDebugInfo.prototype.source = function () {}, RenderDebugInfo;
  }(),
      Renderer = function () {
    function Renderer() {}return Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {}, Renderer.prototype.createElement = function (parentElement, name, debugInfo) {}, Renderer.prototype.createViewRoot = function (hostElement) {}, Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {}, Renderer.prototype.createText = function (parentElement, value, debugInfo) {}, Renderer.prototype.projectNodes = function (parentElement, nodes) {}, Renderer.prototype.attachViewAfter = function (node, viewRootNodes) {}, Renderer.prototype.detachView = function (viewRootNodes) {}, Renderer.prototype.destroyView = function (hostElement, viewAllNodes) {}, Renderer.prototype.listen = function (renderElement, name, callback) {}, Renderer.prototype.listenGlobal = function (target, name, callback) {}, Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {}, Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {}, Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {}, Renderer.prototype.setElementClass = function (renderElement, className, isAdd) {}, Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {}, Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {}, Renderer.prototype.setText = function (renderNode, text) {}, Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {}, Renderer;
  }(),
      RootRenderer = (new InjectionToken("Renderer2Interceptor"), function () {
    function RootRenderer() {}return RootRenderer.prototype.renderComponent = function (componentType) {}, RootRenderer;
  }()),
      RendererFactory2 = function () {
    function RendererFactory2() {}return RendererFactory2.prototype.createRenderer = function (hostElement, type) {}, RendererFactory2;
  }(),
      RendererStyleFlags2 = {};RendererStyleFlags2.Important = 1, RendererStyleFlags2.DashCase = 2, RendererStyleFlags2[RendererStyleFlags2.Important] = "Important", RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";var Renderer2 = function () {
    function Renderer2() {}return Renderer2.prototype.data = function () {}, Renderer2.prototype.destroy = function () {}, Renderer2.prototype.createElement = function (name, namespace) {}, Renderer2.prototype.createComment = function (value) {}, Renderer2.prototype.createText = function (value) {}, Renderer2.prototype.appendChild = function (parent, newChild) {}, Renderer2.prototype.insertBefore = function (parent, newChild, refChild) {}, Renderer2.prototype.removeChild = function (parent, oldChild) {}, Renderer2.prototype.selectRootElement = function (selectorOrNode) {}, Renderer2.prototype.parentNode = function (node) {}, Renderer2.prototype.nextSibling = function (node) {}, Renderer2.prototype.setAttribute = function (el, name, value, namespace) {}, Renderer2.prototype.removeAttribute = function (el, name, namespace) {}, Renderer2.prototype.addClass = function (el, name) {}, Renderer2.prototype.removeClass = function (el, name) {}, Renderer2.prototype.setStyle = function (el, style, value, flags) {}, Renderer2.prototype.removeStyle = function (el, style, flags) {}, Renderer2.prototype.setProperty = function (el, name, value) {}, Renderer2.prototype.setValue = function (node, value) {}, Renderer2.prototype.listen = function (target, eventName, callback) {}, Renderer2;
  }(),
      ElementRef = function () {
    function ElementRef(nativeElement) {
      this.nativeElement = nativeElement;
    }return ElementRef;
  }(),
      NgModuleFactoryLoader = function () {
    function NgModuleFactoryLoader() {}return NgModuleFactoryLoader.prototype.load = function (path) {}, NgModuleFactoryLoader;
  }(),
      moduleFactories = new Map(),
      QueryList = function () {
    function QueryList() {
      this._dirty = !0, this._results = [], this._emitter = new EventEmitter();
    }return Object.defineProperty(QueryList.prototype, "changes", { get: function () {
        return this._emitter;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(QueryList.prototype, "length", { get: function () {
        return this._results.length;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(QueryList.prototype, "first", { get: function () {
        return this._results[0];
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(QueryList.prototype, "last", { get: function () {
        return this._results[this.length - 1];
      }, enumerable: !0, configurable: !0 }), QueryList.prototype.map = function (fn) {
      return this._results.map(fn);
    }, QueryList.prototype.filter = function (fn) {
      return this._results.filter(fn);
    }, QueryList.prototype.find = function (fn) {
      return this._results.find(fn);
    }, QueryList.prototype.reduce = function (fn, init) {
      return this._results.reduce(fn, init);
    }, QueryList.prototype.forEach = function (fn) {
      this._results.forEach(fn);
    }, QueryList.prototype.some = function (fn) {
      return this._results.some(fn);
    }, QueryList.prototype.toArray = function () {
      return this._results.slice();
    }, QueryList.prototype[getSymbolIterator()] = function () {
      return this._results[getSymbolIterator()]();
    }, QueryList.prototype.toString = function () {
      return this._results.toString();
    }, QueryList.prototype.reset = function (res) {
      this._results = flatten(res), this._dirty = !1;
    }, QueryList.prototype.notifyOnChanges = function () {
      this._emitter.emit(this);
    }, QueryList.prototype.setDirty = function () {
      this._dirty = !0;
    }, Object.defineProperty(QueryList.prototype, "dirty", { get: function () {
        return this._dirty;
      }, enumerable: !0, configurable: !0 }), QueryList;
  }(),
      _SEPARATOR = "#",
      FACTORY_CLASS_SUFFIX = "NgFactory",
      SystemJsNgModuleLoaderConfig = function () {
    function SystemJsNgModuleLoaderConfig() {}return SystemJsNgModuleLoaderConfig;
  }(),
      DEFAULT_CONFIG = { factoryPathPrefix: "", factoryPathSuffix: ".ngfactory" },
      SystemJsNgModuleLoader = function () {
    function SystemJsNgModuleLoader(_compiler, config) {
      this._compiler = _compiler, this._config = config || DEFAULT_CONFIG;
    }return SystemJsNgModuleLoader.prototype.load = function (path) {
      var offlineMode = this._compiler instanceof Compiler;return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    }, SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
      var _this = this,
          _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1];return void 0 === exportName && (exportName = "default"), System.import(module).then(function (module) {
        return module[exportName];
      }).then(function (type) {
        return checkNotEmpty(type, module, exportName);
      }).then(function (type) {
        return _this._compiler.compileModuleAsync(type);
      });
    }, SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
      var _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1],
          factoryClassSuffix = FACTORY_CLASS_SUFFIX;return void 0 === exportName && (exportName = "default", factoryClassSuffix = ""), System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {
        return module[exportName + factoryClassSuffix];
      }).then(function (factory) {
        return checkNotEmpty(factory, module, exportName);
      });
    }, SystemJsNgModuleLoader;
  }();SystemJsNgModuleLoader.decorators = [{ type: Injectable }], SystemJsNgModuleLoader.ctorParameters = function () {
    return [{ type: Compiler }, { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var TemplateRef = function () {
    function TemplateRef() {}return TemplateRef.prototype.elementRef = function () {}, TemplateRef.prototype.createEmbeddedView = function (context) {}, TemplateRef;
  }(),
      ViewContainerRef = function () {
    function ViewContainerRef() {}return ViewContainerRef.prototype.element = function () {}, ViewContainerRef.prototype.injector = function () {}, ViewContainerRef.prototype.parentInjector = function () {}, ViewContainerRef.prototype.clear = function () {}, ViewContainerRef.prototype.get = function (index) {}, ViewContainerRef.prototype.length = function () {}, ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) {}, ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) {}, ViewContainerRef.prototype.insert = function (viewRef, index) {}, ViewContainerRef.prototype.move = function (viewRef, currentIndex) {}, ViewContainerRef.prototype.indexOf = function (viewRef) {}, ViewContainerRef.prototype.remove = function (index) {}, ViewContainerRef.prototype.detach = function (index) {}, ViewContainerRef;
  }(),
      ChangeDetectorRef = function () {
    function ChangeDetectorRef() {}return ChangeDetectorRef.prototype.markForCheck = function () {}, ChangeDetectorRef.prototype.detach = function () {}, ChangeDetectorRef.prototype.detectChanges = function () {}, ChangeDetectorRef.prototype.checkNoChanges = function () {}, ChangeDetectorRef.prototype.reattach = function () {}, ChangeDetectorRef;
  }(),
      ViewRef = function (_super) {
    function ViewRef() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(ViewRef, _super), ViewRef.prototype.destroy = function () {}, ViewRef.prototype.destroyed = function () {}, ViewRef.prototype.onDestroy = function (callback) {}, ViewRef;
  }(ChangeDetectorRef),
      EmbeddedViewRef = function (_super) {
    function EmbeddedViewRef() {
      return null !== _super && _super.apply(this, arguments) || this;
    }return __extends(EmbeddedViewRef, _super), EmbeddedViewRef.prototype.context = function () {}, EmbeddedViewRef.prototype.rootNodes = function () {}, EmbeddedViewRef;
  }(ViewRef),
      EventListener = function () {
    function EventListener(name, callback) {
      this.name = name, this.callback = callback;
    }return EventListener;
  }(),
      DebugNode = function () {
    function DebugNode(nativeNode, parent, _debugContext) {
      this._debugContext = _debugContext, this.nativeNode = nativeNode, parent && parent instanceof DebugElement ? parent.addChild(this) : this.parent = null, this.listeners = [];
    }return Object.defineProperty(DebugNode.prototype, "injector", { get: function () {
        return this._debugContext.injector;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "componentInstance", { get: function () {
        return this._debugContext.component;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "context", { get: function () {
        return this._debugContext.context;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "references", { get: function () {
        return this._debugContext.references;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "providerTokens", { get: function () {
        return this._debugContext.providerTokens;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugNode.prototype, "source", { get: function () {
        return "Deprecated since v4";
      }, enumerable: !0, configurable: !0 }), DebugNode;
  }(),
      DebugElement = function (_super) {
    function DebugElement(nativeNode, parent, _debugContext) {
      var _this = _super.call(this, nativeNode, parent, _debugContext) || this;return _this.properties = {}, _this.attributes = {}, _this.classes = {}, _this.styles = {}, _this.childNodes = [], _this.nativeElement = nativeNode, _this;
    }return __extends(DebugElement, _super), DebugElement.prototype.addChild = function (child) {
      child && (this.childNodes.push(child), child.parent = this);
    }, DebugElement.prototype.removeChild = function (child) {
      var childIndex = this.childNodes.indexOf(child);childIndex !== -1 && (child.parent = null, this.childNodes.splice(childIndex, 1));
    }, DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
      var _this = this,
          siblingIndex = this.childNodes.indexOf(child);siblingIndex !== -1 && ((_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren)), newChildren.forEach(function (c) {
        c.parent && c.parent.removeChild(c), c.parent = _this;
      }));var _a;
    }, DebugElement.prototype.insertBefore = function (refChild, newChild) {
      var refIndex = this.childNodes.indexOf(refChild);refIndex === -1 ? this.addChild(newChild) : (newChild.parent && newChild.parent.removeChild(newChild), newChild.parent = this, this.childNodes.splice(refIndex, 0, newChild));
    }, DebugElement.prototype.query = function (predicate) {
      var results = this.queryAll(predicate);return results[0] || null;
    }, DebugElement.prototype.queryAll = function (predicate) {
      var matches = [];return _queryElementChildren(this, predicate, matches), matches;
    }, DebugElement.prototype.queryAllNodes = function (predicate) {
      var matches = [];return _queryNodeChildren(this, predicate, matches), matches;
    }, Object.defineProperty(DebugElement.prototype, "children", { get: function () {
        return this.childNodes.filter(function (node) {
          return node instanceof DebugElement;
        });
      }, enumerable: !0, configurable: !0 }), DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
      this.listeners.forEach(function (listener) {
        listener.name == eventName && listener.callback(eventObj);
      });
    }, DebugElement;
  }(DebugNode),
      _nativeNodeToDebugNode = new Map(),
      WrappedValue = function () {
    function WrappedValue(wrapped) {
      this.wrapped = wrapped;
    }return WrappedValue.wrap = function (value) {
      return new WrappedValue(value);
    }, WrappedValue;
  }(),
      ValueUnwrapper = function () {
    function ValueUnwrapper() {
      this.hasWrappedValue = !1;
    }return ValueUnwrapper.prototype.unwrap = function (value) {
      return value instanceof WrappedValue ? (this.hasWrappedValue = !0, value.wrapped) : value;
    }, ValueUnwrapper.prototype.reset = function () {
      this.hasWrappedValue = !1;
    }, ValueUnwrapper;
  }(),
      SimpleChange = function () {
    function SimpleChange(previousValue, currentValue, firstChange) {
      this.previousValue = previousValue, this.currentValue = currentValue, this.firstChange = firstChange;
    }return SimpleChange.prototype.isFirstChange = function () {
      return this.firstChange;
    }, SimpleChange;
  }(),
      DefaultIterableDifferFactory = function () {
    function DefaultIterableDifferFactory() {}return DefaultIterableDifferFactory.prototype.supports = function (obj) {
      return isListLikeIterable(obj);
    }, DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {
      return new DefaultIterableDiffer(trackByFn || cdRefOrTrackBy);
    }, DefaultIterableDifferFactory;
  }(),
      trackByIdentity = function (index, item) {
    return item;
  },
      DefaultIterableDiffer = function () {
    function DefaultIterableDiffer(trackByFn) {
      this._length = 0, this._collection = null, this._linkedRecords = null, this._unlinkedRecords = null, this._previousItHead = null, this._itHead = null, this._itTail = null, this._additionsHead = null, this._additionsTail = null, this._movesHead = null, this._movesTail = null, this._removalsHead = null, this._removalsTail = null, this._identityChangesHead = null, this._identityChangesTail = null, this._trackByFn = trackByFn || trackByIdentity;
    }return Object.defineProperty(DefaultIterableDiffer.prototype, "collection", { get: function () {
        return this._collection;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DefaultIterableDiffer.prototype, "length", { get: function () {
        return this._length;
      }, enumerable: !0, configurable: !0 }), DefaultIterableDiffer.prototype.forEachItem = function (fn) {
      var record;for (record = this._itHead; null !== record; record = record._next) fn(record);
    }, DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
      for (var nextIt = this._itHead, nextRemove = this._removalsHead, addRemoveOffset = 0, moveOffsets = null; nextIt || nextRemove;) {
        var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove,
            adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets),
            currentIndex = record.currentIndex;if (record === nextRemove) addRemoveOffset--, nextRemove = nextRemove._nextRemoved;else if (nextIt = nextIt._next, null == record.previousIndex) addRemoveOffset++;else {
          moveOffsets || (moveOffsets = []);var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset,
              localCurrentIndex = currentIndex - addRemoveOffset;if (localMovePreviousIndex != localCurrentIndex) {
            for (var i = 0; i < localMovePreviousIndex; i++) {
              var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0,
                  index = offset + i;localCurrentIndex <= index && index < localMovePreviousIndex && (moveOffsets[i] = offset + 1);
            }var previousIndex = record.previousIndex;moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
          }
        }adjPreviousIndex !== currentIndex && fn(record, adjPreviousIndex, currentIndex);
      }
    }, DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
      var record;for (record = this._previousItHead; null !== record; record = record._nextPrevious) fn(record);
    }, DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
      var record;for (record = this._additionsHead; null !== record; record = record._nextAdded) fn(record);
    }, DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
      var record;for (record = this._movesHead; null !== record; record = record._nextMoved) fn(record);
    }, DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
      var record;for (record = this._removalsHead; null !== record; record = record._nextRemoved) fn(record);
    }, DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
      var record;for (record = this._identityChangesHead; null !== record; record = record._nextIdentityChange) fn(record);
    }, DefaultIterableDiffer.prototype.diff = function (collection) {
      if (null == collection && (collection = []), !isListLikeIterable(collection)) throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");return this.check(collection) ? this : null;
    }, DefaultIterableDiffer.prototype.onDestroy = function () {}, DefaultIterableDiffer.prototype.check = function (collection) {
      var _this = this;this._reset();var index,
          item,
          itemTrackBy,
          record = this._itHead,
          mayBeDirty = !1;if (Array.isArray(collection)) {
        this._length = collection.length;for (var index_1 = 0; index_1 < this._length; index_1++) item = collection[index_1], itemTrackBy = this._trackByFn(index_1, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = this._verifyReinsertion(record, item, itemTrackBy, index_1)), looseIdentical(record.item, item) || this._addIdentityChange(record, item)) : (record = this._mismatch(record, item, itemTrackBy, index_1), mayBeDirty = !0), record = record._next;
      } else index = 0, iterateListLike(collection, function (item) {
        itemTrackBy = _this._trackByFn(index, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = _this._verifyReinsertion(record, item, itemTrackBy, index)), looseIdentical(record.item, item) || _this._addIdentityChange(record, item)) : (record = _this._mismatch(record, item, itemTrackBy, index), mayBeDirty = !0), record = record._next, index++;
      }), this._length = index;return this._truncate(record), this._collection = collection, this.isDirty;
    }, Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", { get: function () {
        return null !== this._additionsHead || null !== this._movesHead || null !== this._removalsHead || null !== this._identityChangesHead;
      }, enumerable: !0, configurable: !0 }), DefaultIterableDiffer.prototype._reset = function () {
      if (this.isDirty) {
        var record = void 0,
            nextRecord = void 0;for (record = this._previousItHead = this._itHead; null !== record; record = record._next) record._nextPrevious = record._next;for (record = this._additionsHead; null !== record; record = record._nextAdded) record.previousIndex = record.currentIndex;for (this._additionsHead = this._additionsTail = null, record = this._movesHead; null !== record; record = nextRecord) record.previousIndex = record.currentIndex, nextRecord = record._nextMoved;this._movesHead = this._movesTail = null, this._removalsHead = this._removalsTail = null, this._identityChangesHead = this._identityChangesTail = null;
      }
    }, DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
      var previousRecord;return null === record ? previousRecord = this._itTail : (previousRecord = record._prev, this._remove(record)), record = null === this._linkedRecords ? null : this._linkedRecords.get(itemTrackBy, index), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._moveAfter(record, previousRecord, index)) : (record = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy, null), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._reinsertAfter(record, previousRecord, index)) : record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index)), record;
    }, DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
      var reinsertRecord = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy, null);return null !== reinsertRecord ? record = this._reinsertAfter(reinsertRecord, record._prev, index) : record.currentIndex != index && (record.currentIndex = index, this._addToMoves(record, index)), record;
    }, DefaultIterableDiffer.prototype._truncate = function (record) {
      for (; null !== record;) {
        var nextRecord = record._next;this._addToRemovals(this._unlink(record)), record = nextRecord;
      }null !== this._unlinkedRecords && this._unlinkedRecords.clear(), null !== this._additionsTail && (this._additionsTail._nextAdded = null), null !== this._movesTail && (this._movesTail._nextMoved = null), null !== this._itTail && (this._itTail._next = null), null !== this._removalsTail && (this._removalsTail._nextRemoved = null), null !== this._identityChangesTail && (this._identityChangesTail._nextIdentityChange = null);
    }, DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
      null !== this._unlinkedRecords && this._unlinkedRecords.remove(record);var prev = record._prevRemoved,
          next = record._nextRemoved;return null === prev ? this._removalsHead = next : prev._nextRemoved = next, null === next ? this._removalsTail = prev : next._prevRemoved = prev, this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record;
    }, DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
      return this._unlink(record), this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record;
    }, DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
      return this._insertAfter(record, prevRecord, index), null === this._additionsTail ? this._additionsTail = this._additionsHead = record : this._additionsTail = this._additionsTail._nextAdded = record, record;
    }, DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
      var next = null === prevRecord ? this._itHead : prevRecord._next;return record._next = next, record._prev = prevRecord, null === next ? this._itTail = record : next._prev = record, null === prevRecord ? this._itHead = record : prevRecord._next = record, null === this._linkedRecords && (this._linkedRecords = new _DuplicateMap()), this._linkedRecords.put(record), record.currentIndex = index, record;
    }, DefaultIterableDiffer.prototype._remove = function (record) {
      return this._addToRemovals(this._unlink(record));
    }, DefaultIterableDiffer.prototype._unlink = function (record) {
      null !== this._linkedRecords && this._linkedRecords.remove(record);var prev = record._prev,
          next = record._next;return null === prev ? this._itHead = next : prev._next = next, null === next ? this._itTail = prev : next._prev = prev, record;
    }, DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
      return record.previousIndex === toIndex ? record : (null === this._movesTail ? this._movesTail = this._movesHead = record : this._movesTail = this._movesTail._nextMoved = record, record);
    }, DefaultIterableDiffer.prototype._addToRemovals = function (record) {
      return null === this._unlinkedRecords && (this._unlinkedRecords = new _DuplicateMap()), this._unlinkedRecords.put(record), record.currentIndex = null, record._nextRemoved = null, null === this._removalsTail ? (this._removalsTail = this._removalsHead = record, record._prevRemoved = null) : (record._prevRemoved = this._removalsTail, this._removalsTail = this._removalsTail._nextRemoved = record), record;
    }, DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
      return record.item = item, null === this._identityChangesTail ? this._identityChangesTail = this._identityChangesHead = record : this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record, record;
    }, DefaultIterableDiffer.prototype.toString = function () {
      var list = [];this.forEachItem(function (record) {
        return list.push(record);
      });var previous = [];this.forEachPreviousItem(function (record) {
        return previous.push(record);
      });var additions = [];this.forEachAddedItem(function (record) {
        return additions.push(record);
      });var moves = [];this.forEachMovedItem(function (record) {
        return moves.push(record);
      });var removals = [];this.forEachRemovedItem(function (record) {
        return removals.push(record);
      });var identityChanges = [];return this.forEachIdentityChange(function (record) {
        return identityChanges.push(record);
      }), "collection: " + list.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nmoves: " + moves.join(", ") + "\nremovals: " + removals.join(", ") + "\nidentityChanges: " + identityChanges.join(", ") + "\n";
    }, DefaultIterableDiffer;
  }(),
      IterableChangeRecord_ = function () {
    function IterableChangeRecord_(item, trackById) {
      this.item = item, this.trackById = trackById, this.currentIndex = null, this.previousIndex = null, this._nextPrevious = null, this._prev = null, this._next = null, this._prevDup = null, this._nextDup = null, this._prevRemoved = null, this._nextRemoved = null, this._nextAdded = null, this._nextMoved = null, this._nextIdentityChange = null;
    }return IterableChangeRecord_.prototype.toString = function () {
      return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + "[" + stringify(this.previousIndex) + "->" + stringify(this.currentIndex) + "]";
    }, IterableChangeRecord_;
  }(),
      _DuplicateItemRecordList = function () {
    function _DuplicateItemRecordList() {
      this._head = null, this._tail = null;
    }return _DuplicateItemRecordList.prototype.add = function (record) {
      null === this._head ? (this._head = this._tail = record, record._nextDup = null, record._prevDup = null) : (this._tail._nextDup = record, record._prevDup = this._tail, record._nextDup = null, this._tail = record);
    }, _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
      var record;for (record = this._head; null !== record; record = record._nextDup) if ((null === afterIndex || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) return record;return null;
    }, _DuplicateItemRecordList.prototype.remove = function (record) {
      var prev = record._prevDup,
          next = record._nextDup;return null === prev ? this._head = next : prev._nextDup = next, null === next ? this._tail = prev : next._prevDup = prev, null === this._head;
    }, _DuplicateItemRecordList;
  }(),
      _DuplicateMap = function () {
    function _DuplicateMap() {
      this.map = new Map();
    }return _DuplicateMap.prototype.put = function (record) {
      var key = record.trackById,
          duplicates = this.map.get(key);duplicates || (duplicates = new _DuplicateItemRecordList(), this.map.set(key, duplicates)), duplicates.add(record);
    }, _DuplicateMap.prototype.get = function (trackById, afterIndex) {
      var key = trackById,
          recordList = this.map.get(key);return recordList ? recordList.get(trackById, afterIndex) : null;
    }, _DuplicateMap.prototype.remove = function (record) {
      var key = record.trackById,
          recordList = this.map.get(key);return recordList.remove(record) && this.map.delete(key), record;
    }, Object.defineProperty(_DuplicateMap.prototype, "isEmpty", { get: function () {
        return 0 === this.map.size;
      }, enumerable: !0, configurable: !0 }), _DuplicateMap.prototype.clear = function () {
      this.map.clear();
    }, _DuplicateMap.prototype.toString = function () {
      return "_DuplicateMap(" + stringify(this.map) + ")";
    }, _DuplicateMap;
  }(),
      DefaultKeyValueDifferFactory = function () {
    function DefaultKeyValueDifferFactory() {}return DefaultKeyValueDifferFactory.prototype.supports = function (obj) {
      return obj instanceof Map || isJsObject(obj);
    }, DefaultKeyValueDifferFactory.prototype.create = function (cd) {
      return new DefaultKeyValueDiffer();
    }, DefaultKeyValueDifferFactory;
  }(),
      DefaultKeyValueDiffer = function () {
    function DefaultKeyValueDiffer() {
      this._records = new Map(), this._mapHead = null, this._appendAfter = null, this._previousMapHead = null, this._changesHead = null, this._changesTail = null, this._additionsHead = null, this._additionsTail = null, this._removalsHead = null, this._removalsTail = null;
    }return Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", { get: function () {
        return null !== this._additionsHead || null !== this._changesHead || null !== this._removalsHead;
      }, enumerable: !0, configurable: !0 }), DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
      var record;for (record = this._mapHead; null !== record; record = record._next) fn(record);
    }, DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
      var record;for (record = this._previousMapHead; null !== record; record = record._nextPrevious) fn(record);
    }, DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
      var record;for (record = this._changesHead; null !== record; record = record._nextChanged) fn(record);
    }, DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
      var record;for (record = this._additionsHead; null !== record; record = record._nextAdded) fn(record);
    }, DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
      var record;for (record = this._removalsHead; null !== record; record = record._nextRemoved) fn(record);
    }, DefaultKeyValueDiffer.prototype.diff = function (map) {
      if (map) {
        if (!(map instanceof Map || isJsObject(map))) throw new Error("Error trying to diff '" + stringify(map) + "'. Only maps and objects are allowed");
      } else map = new Map();return this.check(map) ? this : null;
    }, DefaultKeyValueDiffer.prototype.onDestroy = function () {}, DefaultKeyValueDiffer.prototype.check = function (map) {
      var _this = this;this._reset();var insertBefore = this._mapHead;if (this._appendAfter = null, this._forEach(map, function (value, key) {
        if (insertBefore && insertBefore.key === key) _this._maybeAddToChanges(insertBefore, value), _this._appendAfter = insertBefore, insertBefore = insertBefore._next;else {
          var record = _this._getOrCreateRecordForKey(key, value);insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
        }
      }), insertBefore) {
        insertBefore._prev && (insertBefore._prev._next = null), this._removalsHead = insertBefore;for (var record = insertBefore; null !== record; record = record._nextRemoved) record === this._mapHead && (this._mapHead = null), this._records.delete(record.key), record._nextRemoved = record._next, record.previousValue = record.currentValue, record.currentValue = null, record._prev = null, record._next = null;
      }return this._changesTail && (this._changesTail._nextChanged = null), this._additionsTail && (this._additionsTail._nextAdded = null), this.isDirty;
    }, DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {
      if (before) {
        var prev = before._prev;return record._next = before, record._prev = prev, before._prev = record, prev && (prev._next = record), before === this._mapHead && (this._mapHead = record), this._appendAfter = before, before;
      }return this._appendAfter ? (this._appendAfter._next = record, record._prev = this._appendAfter) : this._mapHead = record, this._appendAfter = record, null;
    }, DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {
      if (this._records.has(key)) {
        var record_1 = this._records.get(key);this._maybeAddToChanges(record_1, value);var prev = record_1._prev,
            next = record_1._next;return prev && (prev._next = next), next && (next._prev = prev), record_1._next = null, record_1._prev = null, record_1;
      }var record = new KeyValueChangeRecord_(key);return this._records.set(key, record), record.currentValue = value, this._addToAdditions(record), record;
    }, DefaultKeyValueDiffer.prototype._reset = function () {
      if (this.isDirty) {
        var record = void 0;for (this._previousMapHead = this._mapHead, record = this._previousMapHead; null !== record; record = record._next) record._nextPrevious = record._next;for (record = this._changesHead; null !== record; record = record._nextChanged) record.previousValue = record.currentValue;for (record = this._additionsHead; null != record; record = record._nextAdded) record.previousValue = record.currentValue;this._changesHead = this._changesTail = null, this._additionsHead = this._additionsTail = null, this._removalsHead = null;
      }
    }, DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
      looseIdentical(newValue, record.currentValue) || (record.previousValue = record.currentValue, record.currentValue = newValue, this._addToChanges(record));
    }, DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
      null === this._additionsHead ? this._additionsHead = this._additionsTail = record : (this._additionsTail._nextAdded = record, this._additionsTail = record);
    }, DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
      null === this._changesHead ? this._changesHead = this._changesTail = record : (this._changesTail._nextChanged = record, this._changesTail = record);
    }, DefaultKeyValueDiffer.prototype.toString = function () {
      var items = [],
          previous = [],
          changes = [],
          additions = [],
          removals = [];return this.forEachItem(function (r) {
        return items.push(stringify(r));
      }), this.forEachPreviousItem(function (r) {
        return previous.push(stringify(r));
      }), this.forEachChangedItem(function (r) {
        return changes.push(stringify(r));
      }), this.forEachAddedItem(function (r) {
        return additions.push(stringify(r));
      }), this.forEachRemovedItem(function (r) {
        return removals.push(stringify(r));
      }), "map: " + items.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nchanges: " + changes.join(", ") + "\nremovals: " + removals.join(", ") + "\n";
    }, DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
      obj instanceof Map ? obj.forEach(fn) : Object.keys(obj).forEach(function (k) {
        return fn(obj[k], k);
      });
    }, DefaultKeyValueDiffer;
  }(),
      KeyValueChangeRecord_ = function () {
    function KeyValueChangeRecord_(key) {
      this.key = key, this.previousValue = null, this.currentValue = null, this._nextPrevious = null, this._next = null, this._prev = null, this._nextAdded = null, this._nextRemoved = null, this._nextChanged = null;
    }return KeyValueChangeRecord_.prototype.toString = function () {
      return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + "[" + stringify(this.previousValue) + "->" + stringify(this.currentValue) + "]";
    }, KeyValueChangeRecord_;
  }(),
      IterableDiffers = function () {
    function IterableDiffers(factories) {
      this.factories = factories;
    }return IterableDiffers.create = function (factories, parent) {
      if (null != parent) {
        var copied = parent.factories.slice();return factories = factories.concat(copied), new IterableDiffers(factories);
      }return new IterableDiffers(factories);
    }, IterableDiffers.extend = function (factories) {
      return { provide: IterableDiffers, useFactory: function (parent) {
          if (!parent) throw new Error("Cannot extend IterableDiffers without a parent injector");return IterableDiffers.create(factories, parent);
        }, deps: [[IterableDiffers, new SkipSelf(), new Optional()]] };
    }, IterableDiffers.prototype.find = function (iterable) {
      var factory = this.factories.find(function (f) {
        return f.supports(iterable);
      });if (null != factory) return factory;throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
    }, IterableDiffers;
  }(),
      KeyValueDiffers = function () {
    function KeyValueDiffers(factories) {
      this.factories = factories;
    }return KeyValueDiffers.create = function (factories, parent) {
      if (parent) {
        var copied = parent.factories.slice();factories = factories.concat(copied);
      }return new KeyValueDiffers(factories);
    }, KeyValueDiffers.extend = function (factories) {
      return { provide: KeyValueDiffers, useFactory: function (parent) {
          if (!parent) throw new Error("Cannot extend KeyValueDiffers without a parent injector");return KeyValueDiffers.create(factories, parent);
        }, deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]] };
    }, KeyValueDiffers.prototype.find = function (kv) {
      var factory = this.factories.find(function (f) {
        return f.supports(kv);
      });if (factory) return factory;throw new Error("Cannot find a differ supporting object '" + kv + "'");
    }, KeyValueDiffers;
  }(),
      keyValDiff = [new DefaultKeyValueDifferFactory()],
      iterableDiff = [new DefaultIterableDifferFactory()],
      defaultIterableDiffers = new IterableDiffers(iterableDiff),
      defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff),
      _CORE_PLATFORM_PROVIDERS = [{ provide: PLATFORM_ID, useValue: "unknown" }, PlatformRef_, { provide: PlatformRef, useExisting: PlatformRef_ }, { provide: Reflector, useFactory: _reflector, deps: [] }, { provide: ReflectorReader, useExisting: Reflector }, TestabilityRegistry, Console],
      platformCore = createPlatformFactory(null, "core", _CORE_PLATFORM_PROVIDERS),
      LOCALE_ID = new InjectionToken("LocaleId"),
      TRANSLATIONS = new InjectionToken("Translations"),
      TRANSLATIONS_FORMAT = new InjectionToken("TranslationsFormat"),
      MissingTranslationStrategy = {};MissingTranslationStrategy.Error = 0, MissingTranslationStrategy.Warning = 1, MissingTranslationStrategy.Ignore = 2, MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error", MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning", MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";var SecurityContext = {};SecurityContext.NONE = 0, SecurityContext.HTML = 1, SecurityContext.STYLE = 2, SecurityContext.SCRIPT = 3, SecurityContext.URL = 4, SecurityContext.RESOURCE_URL = 5, SecurityContext[SecurityContext.NONE] = "NONE", SecurityContext[SecurityContext.HTML] = "HTML", SecurityContext[SecurityContext.STYLE] = "STYLE", SecurityContext[SecurityContext.SCRIPT] = "SCRIPT", SecurityContext[SecurityContext.URL] = "URL", SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";var Sanitizer = function () {
    function Sanitizer() {}return Sanitizer.prototype.sanitize = function (context, value) {}, Sanitizer;
  }(),
      DebugContext = function () {
    function DebugContext() {}return DebugContext.prototype.view = function () {}, DebugContext.prototype.nodeIndex = function () {}, DebugContext.prototype.injector = function () {}, DebugContext.prototype.component = function () {}, DebugContext.prototype.providerTokens = function () {}, DebugContext.prototype.references = function () {}, DebugContext.prototype.context = function () {}, DebugContext.prototype.componentRenderElement = function () {}, DebugContext.prototype.renderNode = function () {}, DebugContext.prototype.logError = function (console) {
      for (var values = [], _i = 1; _i < arguments.length; _i++) values[_i - 1] = arguments[_i];
    }, DebugContext;
  }(),
      Services = { setCurrentNode: void 0, createRootView: void 0, createEmbeddedView: void 0, checkAndUpdateView: void 0, checkNoChangesView: void 0, destroyView: void 0, resolveDep: void 0, createDebugContext: void 0, handleEvent: void 0, updateDirectives: void 0, updateRenderer: void 0, dirtyParentQueries: void 0 },
      NOOP = function () {},
      _tokenKeyCache = new Map(),
      UNDEFINED_RENDERER_TYPE_ID = "$$undefined",
      EMPTY_RENDERER_TYPE_ID = "$$empty",
      _renderCompCount = 0,
      VIEW_DEFINITION_CACHE = new WeakMap(),
      NS_PREFIX_RE = /^:([^:]+):(.+)$/,
      EMPTY_ARRAY = [],
      EMPTY_MAP = {},
      EMPTY_CONTEXT = new Object(),
      ComponentFactory_ = function (_super) {
    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
      var _this = _super.call(this) || this;return _this.selector = selector, _this.componentType = componentType, _this._inputs = _inputs, _this._outputs = _outputs, _this.ngContentSelectors = ngContentSelectors, _this.viewDefFactory = viewDefFactory, _this;
    }return __extends(ComponentFactory_, _super), Object.defineProperty(ComponentFactory_.prototype, "inputs", { get: function () {
        var inputsArr = [],
            inputs = this._inputs;for (var propName in inputs) {
          var templateName = inputs[propName];inputsArr.push({ propName: propName, templateName: templateName });
        }return inputsArr;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentFactory_.prototype, "outputs", { get: function () {
        var outputsArr = [];for (var propName in this._outputs) {
          var templateName = this._outputs[propName];outputsArr.push({ propName: propName, templateName: templateName });
        }return outputsArr;
      }, enumerable: !0, configurable: !0 }), ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
      if (!ngModule) throw new Error("ngModule should be provided");var viewDef = resolveViewDefinition(this.viewDefFactory),
          componentNodeIndex = viewDef.nodes[0].element.componentProvider.index,
          view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT),
          component = asProviderData(view, componentNodeIndex).instance;return rootSelectorOrNode && view.renderer.setAttribute(asElementData(view, 0).renderElement, "ng-version", VERSION.full), new ComponentRef_(view, new ViewRef_(view), component);
    }, ComponentFactory_;
  }(ComponentFactory),
      ComponentRef_ = function (_super) {
    function ComponentRef_(_view, _viewRef, _component) {
      var _this = _super.call(this) || this;return _this._view = _view, _this._viewRef = _viewRef, _this._component = _component, _this._elDef = _this._view.def.nodes[0], _this;
    }return __extends(ComponentRef_, _super), Object.defineProperty(ComponentRef_.prototype, "location", { get: function () {
        return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "injector", { get: function () {
        return new Injector_(this._view, this._elDef);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "instance", { get: function () {
        return this._component;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "hostView", { get: function () {
        return this._viewRef;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", { get: function () {
        return this._viewRef;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ComponentRef_.prototype, "componentType", { get: function () {
        return this._component.constructor;
      }, enumerable: !0, configurable: !0 }), ComponentRef_.prototype.destroy = function () {
      this._viewRef.destroy();
    }, ComponentRef_.prototype.onDestroy = function (callback) {
      this._viewRef.onDestroy(callback);
    }, ComponentRef_;
  }(ComponentRef),
      ViewContainerRef_ = function () {
    function ViewContainerRef_(_view, _elDef, _data) {
      this._view = _view, this._elDef = _elDef, this._data = _data, this._embeddedViews = [];
    }return Object.defineProperty(ViewContainerRef_.prototype, "element", { get: function () {
        return new ElementRef(this._data.renderElement);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainerRef_.prototype, "injector", { get: function () {
        return new Injector_(this._view, this._elDef);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", { get: function () {
        for (var view = this._view, elDef = this._elDef.parent; !elDef && view;) elDef = viewParentEl(view), view = view.parent;return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
      }, enumerable: !0, configurable: !0 }), ViewContainerRef_.prototype.clear = function () {
      for (var len = this._embeddedViews.length, i = len - 1; i >= 0; i--) {
        var view = detachEmbeddedView(this._data, i);Services.destroyView(view);
      }
    }, ViewContainerRef_.prototype.get = function (index) {
      var view = this._embeddedViews[index];if (view) {
        var ref = new ViewRef_(view);return ref.attachToViewContainerRef(this), ref;
      }return null;
    }, Object.defineProperty(ViewContainerRef_.prototype, "length", { get: function () {
        return this._embeddedViews.length;
      }, enumerable: !0, configurable: !0 }), ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
      var viewRef = templateRef.createEmbeddedView(context || {});return this.insert(viewRef, index), viewRef;
    }, ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
      var contextInjector = injector || this.parentInjector;ngModuleRef || componentFactory instanceof ComponentFactoryBoundToModule || (ngModuleRef = contextInjector.get(NgModuleRef));var componentRef = componentFactory.create(contextInjector, projectableNodes, void 0, ngModuleRef);return this.insert(componentRef.hostView, index), componentRef;
    }, ViewContainerRef_.prototype.insert = function (viewRef, index) {
      var viewRef_ = viewRef,
          viewData = viewRef_._view;return attachEmbeddedView(this._view, this._data, index, viewData), viewRef_.attachToViewContainerRef(this), viewRef;
    }, ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
      var previousIndex = this._embeddedViews.indexOf(viewRef._view);return moveEmbeddedView(this._data, previousIndex, currentIndex), viewRef;
    }, ViewContainerRef_.prototype.indexOf = function (viewRef) {
      return this._embeddedViews.indexOf(viewRef._view);
    }, ViewContainerRef_.prototype.remove = function (index) {
      var viewData = detachEmbeddedView(this._data, index);viewData && Services.destroyView(viewData);
    }, ViewContainerRef_.prototype.detach = function (index) {
      var view = detachEmbeddedView(this._data, index);return view ? new ViewRef_(view) : null;
    }, ViewContainerRef_;
  }(),
      ViewRef_ = function () {
    function ViewRef_(_view) {
      this._view = _view, this._viewContainerRef = null, this._appRef = null;
    }return Object.defineProperty(ViewRef_.prototype, "rootNodes", { get: function () {
        return rootRenderNodes(this._view);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewRef_.prototype, "context", { get: function () {
        return this._view.context;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(ViewRef_.prototype, "destroyed", { get: function () {
        return 0 !== (128 & this._view.state);
      }, enumerable: !0, configurable: !0 }), ViewRef_.prototype.markForCheck = function () {
      markParentViewsForCheck(this._view);
    }, ViewRef_.prototype.detach = function () {
      this._view.state &= -5;
    }, ViewRef_.prototype.detectChanges = function () {
      Services.checkAndUpdateView(this._view);
    }, ViewRef_.prototype.checkNoChanges = function () {
      Services.checkNoChangesView(this._view);
    }, ViewRef_.prototype.reattach = function () {
      this._view.state |= 4;
    }, ViewRef_.prototype.onDestroy = function (callback) {
      this._view.disposables || (this._view.disposables = []), this._view.disposables.push(callback);
    }, ViewRef_.prototype.destroy = function () {
      this._appRef ? this._appRef.detachView(this) : this._viewContainerRef && this._viewContainerRef.detach(this._viewContainerRef.indexOf(this)), Services.destroyView(this._view);
    }, ViewRef_.prototype.detachFromAppRef = function () {
      this._appRef = null, renderDetachView(this._view), Services.dirtyParentQueries(this._view);
    }, ViewRef_.prototype.attachToAppRef = function (appRef) {
      if (this._viewContainerRef) throw new Error("This view is already attached to a ViewContainer!");this._appRef = appRef;
    }, ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
      if (this._appRef) throw new Error("This view is already attached directly to the ApplicationRef!");this._viewContainerRef = vcRef;
    }, ViewRef_;
  }(),
      TemplateRef_ = function (_super) {
    function TemplateRef_(_parentView, _def) {
      var _this = _super.call(this) || this;return _this._parentView = _parentView, _this._def = _def, _this;
    }return __extends(TemplateRef_, _super), TemplateRef_.prototype.createEmbeddedView = function (context) {
      return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, context));
    }, Object.defineProperty(TemplateRef_.prototype, "elementRef", { get: function () {
        return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
      }, enumerable: !0, configurable: !0 }), TemplateRef_;
  }(TemplateRef),
      Injector_ = function () {
    function Injector_(view, elDef) {
      this.view = view, this.elDef = elDef;
    }return Injector_.prototype.get = function (token, notFoundValue) {
      void 0 === notFoundValue && (notFoundValue = Injector.THROW_IF_NOT_FOUND);var allowPrivateServices = !!this.elDef && 0 !== (33554432 & this.elDef.flags);return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0, token: token, tokenKey: tokenKey(token) }, notFoundValue);
    }, Injector_;
  }(),
      RendererAdapter = function () {
    function RendererAdapter(delegate) {
      this.delegate = delegate;
    }return RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
      return this.delegate.selectRootElement(selectorOrNode);
    }, RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
      var _a = splitNamespace(namespaceAndName),
          ns = _a[0],
          name = _a[1],
          el = this.delegate.createElement(name, ns);return parent && this.delegate.appendChild(parent, el), el;
    }, RendererAdapter.prototype.createViewRoot = function (hostElement) {
      return hostElement;
    }, RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
      var comment = this.delegate.createComment("");return parentElement && this.delegate.appendChild(parentElement, comment), comment;
    }, RendererAdapter.prototype.createText = function (parentElement, value) {
      var node = this.delegate.createText(value);return parentElement && this.delegate.appendChild(parentElement, node), node;
    }, RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
      for (var i = 0; i < nodes.length; i++) this.delegate.appendChild(parentElement, nodes[i]);
    }, RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
      for (var parentElement = this.delegate.parentNode(node), nextSibling = this.delegate.nextSibling(node), i = 0; i < viewRootNodes.length; i++) this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
    }, RendererAdapter.prototype.detachView = function (viewRootNodes) {
      for (var i = 0; i < viewRootNodes.length; i++) {
        var node = viewRootNodes[i],
            parentElement = this.delegate.parentNode(node);this.delegate.removeChild(parentElement, node);
      }
    }, RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
      for (var i = 0; i < viewAllNodes.length; i++) this.delegate.destroyNode(viewAllNodes[i]);
    }, RendererAdapter.prototype.listen = function (renderElement, name, callback) {
      return this.delegate.listen(renderElement, name, callback);
    }, RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
      return this.delegate.listen(target, name, callback);
    }, RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
      this.delegate.setProperty(renderElement, propertyName, propertyValue);
    }, RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
      var _a = splitNamespace(namespaceAndName),
          ns = _a[0],
          name = _a[1];null != attributeValue ? this.delegate.setAttribute(renderElement, name, attributeValue, ns) : this.delegate.removeAttribute(renderElement, name, ns);
    }, RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {}, RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
      isAdd ? this.delegate.addClass(renderElement, className) : this.delegate.removeClass(renderElement, className);
    }, RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
      null != styleValue ? this.delegate.setStyle(renderElement, styleName, styleValue) : this.delegate.removeStyle(renderElement, styleName);
    }, RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
      renderElement[methodName].apply(renderElement, args);
    }, RendererAdapter.prototype.setText = function (renderNode$$1, text) {
      this.delegate.setValue(renderNode$$1, text);
    }, RendererAdapter.prototype.animate = function () {
      throw new Error("Renderer.animate is no longer supported!");
    }, RendererAdapter;
  }(),
      RendererV1TokenKey = tokenKey(Renderer),
      Renderer2TokenKey = tokenKey(Renderer2),
      ElementRefTokenKey = tokenKey(ElementRef),
      ViewContainerRefTokenKey = tokenKey(ViewContainerRef),
      TemplateRefTokenKey = tokenKey(TemplateRef),
      ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef),
      InjectorRefTokenKey = tokenKey(Injector),
      NOT_CREATED = new Object(),
      NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {},
      ViewAction = {};ViewAction.CreateViewNodes = 0, ViewAction.CheckNoChanges = 1, ViewAction.CheckNoChangesProjectedViews = 2, ViewAction.CheckAndUpdate = 3, ViewAction.CheckAndUpdateProjectedViews = 4, ViewAction.Destroy = 5, ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes", ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges", ViewAction[ViewAction.CheckNoChangesProjectedViews] = "CheckNoChangesProjectedViews", ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate", ViewAction[ViewAction.CheckAndUpdateProjectedViews] = "CheckAndUpdateProjectedViews", ViewAction[ViewAction.Destroy] = "Destroy"; /**
license
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * Copyright Google Inc. All Rights Reserved.

se of this source code is governed by an MIT-style license that can be
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              * found in the LICENSE file at https://angular.io/license

  var initialized = !1,
      DebugAction = {};DebugAction.create = 0, DebugAction.detectChanges = 1, DebugAction.checkNoChanges = 2, DebugAction.destroy = 3, DebugAction.handleEvent = 4, DebugAction[DebugAction.create] = "create", DebugAction[DebugAction.detectChanges] = "detectChanges", DebugAction[DebugAction.checkNoChanges] = "checkNoChanges", DebugAction[DebugAction.destroy] = "destroy", DebugAction[DebugAction.handleEvent] = "handleEvent";var _currentAction,
      _currentView,
      _currentNodeIndex,
      CAMEL_CASE_REGEXP = /([A-Z])/g,
      DebugContext_ = function () {
    function DebugContext_(view, nodeIndex) {
      this.view = view, this.nodeIndex = nodeIndex, null == nodeIndex && (this.nodeIndex = nodeIndex = 0), this.nodeDef = view.def.nodes[nodeIndex];for (var elDef = this.nodeDef, elView = view; elDef && 0 === (1 & elDef.flags);) elDef = elDef.parent;if (!elDef) for (; !elDef && elView;) elDef = viewParentEl(elView), elView = elView.parent;this.elDef = elDef, this.elView = elView;
    }return Object.defineProperty(DebugContext_.prototype, "elOrCompView", { get: function () {
        return asElementData(this.elView, this.elDef.index).componentView || this.view;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext_.prototype, "injector", { get: function () {
        return createInjector(this.elView, this.elDef);
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext_.prototype, "component", { get: function () {
        return this.elOrCompView.component;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext_.prototype, "context", { get: function () {
        return this.elOrCompView.context;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext_.prototype, "providerTokens", { get: function () {
        var tokens = [];if (this.elDef) for (var i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
          var childDef = this.elView.def.nodes[i];20224 & childDef.flags && tokens.push(childDef.provider.token), i += childDef.childCount;
        }return tokens;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext_.prototype, "references", { get: function () {
        var references = {};if (this.elDef) {
          collectReferences(this.elView, this.elDef, references);for (var i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
            var childDef = this.elView.def.nodes[i];20224 & childDef.flags && collectReferences(this.elView, childDef, references), i += childDef.childCount;
          }
        }return references;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext_.prototype, "componentRenderElement", { get: function () {
        var elData = findHostElement(this.elOrCompView);return elData ? elData.renderElement : void 0;
      }, enumerable: !0, configurable: !0 }), Object.defineProperty(DebugContext_.prototype, "renderNode", { get: function () {
        return 2 & this.nodeDef.flags ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);
      }, enumerable: !0, configurable: !0 }), DebugContext_.prototype.logError = function (console) {
      for (var values = [], _i = 1; _i < arguments.length; _i++) values[_i - 1] = arguments[_i];var logViewDef, logNodeIndex;2 & this.nodeDef.flags ? (logViewDef = this.view.def, logNodeIndex = this.nodeDef.index) : (logViewDef = this.elView.def, logNodeIndex = this.elDef.index);var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex),
          currRenderNodeIndex = -1,
          nodeLogger = function () {
        return currRenderNodeIndex++, currRenderNodeIndex === renderNodeIndex ? (_a = console.error).bind.apply(_a, [console].concat(values)) : NOOP;var _a;
      };logViewDef.factory(nodeLogger), currRenderNodeIndex < renderNodeIndex && (console.error("Illegal state: the ViewDefinitionFactory did not call the logger!"), console.error.apply(console, values));
    }, DebugContext_;
  }(),
      DebugRendererFactory2 = function () {
    function DebugRendererFactory2(delegate) {
      this.delegate = delegate;
    }return DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
      return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
    }, DebugRendererFactory2;
  }(),
      DebugRenderer2 = function () {
    function DebugRenderer2(delegate) {
      this.delegate = delegate;
    }return Object.defineProperty(DebugRenderer2.prototype, "data", { get: function () {
        return this.delegate.data;
      }, enumerable: !0, configurable: !0 }), DebugRenderer2.prototype.destroyNode = function (node) {
      removeDebugNodeFromIndex(getDebugNode(node)), this.delegate.destroyNode && this.delegate.destroyNode(node);
    }, DebugRenderer2.prototype.destroy = function () {
      this.delegate.destroy();
    }, DebugRenderer2.prototype.createElement = function (name, namespace) {
      var el = this.delegate.createElement(name, namespace),
          debugCtx = getCurrentDebugContext();if (debugCtx) {
        var debugEl = new DebugElement(el, null, debugCtx);debugEl.name = name, indexDebugNode(debugEl);
      }return el;
    }, DebugRenderer2.prototype.createComment = function (value) {
      var comment = this.delegate.createComment(value),
          debugCtx = getCurrentDebugContext();return debugCtx && indexDebugNode(new DebugNode(comment, null, debugCtx)), comment;
    }, DebugRenderer2.prototype.createText = function (value) {
      var text = this.delegate.createText(value),
          debugCtx = getCurrentDebugContext();return debugCtx && indexDebugNode(new DebugNode(text, null, debugCtx)), text;
    }, DebugRenderer2.prototype.appendChild = function (parent, newChild) {
      var debugEl = getDebugNode(parent),
          debugChildEl = getDebugNode(newChild);debugEl && debugChildEl && debugEl instanceof DebugElement && debugEl.addChild(debugChildEl), this.delegate.appendChild(parent, newChild);
    }, DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
      var debugEl = getDebugNode(parent),
          debugChildEl = getDebugNode(newChild),
          debugRefEl = getDebugNode(refChild);debugEl && debugChildEl && debugEl instanceof DebugElement && debugEl.insertBefore(debugRefEl, debugChildEl), this.delegate.insertBefore(parent, newChild, refChild);
    }, DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
      var debugEl = getDebugNode(parent),
          debugChildEl = getDebugNode(oldChild);debugEl && debugChildEl && debugEl instanceof DebugElement && debugEl.removeChild(debugChildEl), this.delegate.removeChild(parent, oldChild);
    }, DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
      var el = this.delegate.selectRootElement(selectorOrNode),
          debugCtx = getCurrentDebugContext();return debugCtx && indexDebugNode(new DebugElement(el, null, debugCtx)), el;
    }, DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
      var debugEl = getDebugNode(el);if (debugEl && debugEl instanceof DebugElement) {
        var fullName = namespace ? namespace + ":" + name : name;debugEl.attributes[fullName] = value;
      }this.delegate.setAttribute(el, name, value, namespace);
    }, DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
      var debugEl = getDebugNode(el);if (debugEl && debugEl instanceof DebugElement) {
        var fullName = namespace ? namespace + ":" + name : name;debugEl.attributes[fullName] = null;
      }this.delegate.removeAttribute(el, name, namespace);
    }, DebugRenderer2.prototype.addClass = function (el, name) {
      var debugEl = getDebugNode(el);debugEl && debugEl instanceof DebugElement && (debugEl.classes[name] = !0), this.delegate.addClass(el, name);
    }, DebugRenderer2.prototype.removeClass = function (el, name) {
      var debugEl = getDebugNode(el);debugEl && debugEl instanceof DebugElement && (debugEl.classes[name] = !1), this.delegate.removeClass(el, name);
    }, DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
      var debugEl = getDebugNode(el);debugEl && debugEl instanceof DebugElement && (debugEl.styles[style] = value), this.delegate.setStyle(el, style, value, flags);
    }, DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
      var debugEl = getDebugNode(el);debugEl && debugEl instanceof DebugElement && (debugEl.styles[style] = null), this.delegate.removeStyle(el, style, flags);
    }, DebugRenderer2.prototype.setProperty = function (el, name, value) {
      var debugEl = getDebugNode(el);debugEl && debugEl instanceof DebugElement && (debugEl.properties[name] = value), this.delegate.setProperty(el, name, value);
    }, DebugRenderer2.prototype.listen = function (target, eventName, callback) {
      if ("string" != typeof target) {
        var debugEl = getDebugNode(target);debugEl && debugEl.listeners.push(new EventListener(eventName, callback));
      }return this.delegate.listen(target, eventName, callback);
    }, DebugRenderer2.prototype.parentNode = function (node) {
      return this.delegate.parentNode(node);
    }, DebugRenderer2.prototype.nextSibling = function (node) {
      return this.delegate.nextSibling(node);
    }, DebugRenderer2.prototype.setValue = function (node, value) {
      return this.delegate.setValue(node, value);
    }, DebugRenderer2;
  }(),
      ApplicationModule = function () {
    function ApplicationModule(appRef) {}return ApplicationModule;
  }();ApplicationModule.decorators = [{ type: NgModule, args: [{ providers: [ApplicationRef_, { provide: ApplicationRef, useExisting: ApplicationRef_ }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, { provide: IterableDiffers, useFactory: _iterableDiffersFactory }, { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory }, { provide: LOCALE_ID, useFactory: _localeFactory, deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]] }, { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: !0 }] }] }], ApplicationModule.ctorParameters = function () {
    return [{ type: ApplicationRef }];
  }; /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
  var LifecycleHooks = {};LifecycleHooks.OnInit = 0, LifecycleHooks.OnDestroy = 1, LifecycleHooks.DoCheck = 2, LifecycleHooks.OnChanges = 3, LifecycleHooks.AfterContentInit = 4, LifecycleHooks.AfterContentChecked = 5, LifecycleHooks.AfterViewInit = 6, LifecycleHooks.AfterViewChecked = 7, LifecycleHooks[LifecycleHooks.OnInit] = "OnInit", LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy", LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck", LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges", LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit", LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked", LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit", LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked],
      AUTO_STYLE$$1 = "*";exports.Class = Class, exports.createPlatform = createPlatform, exports.assertPlatform = assertPlatform, exports.destroyPlatform = destroyPlatform, exports.getPlatform = getPlatform, exports.PlatformRef = PlatformRef, exports.ApplicationRef = ApplicationRef, exports.enableProdMode = enableProdMode, exports.isDevMode = isDevMode, exports.createPlatformFactory = createPlatformFactory, exports.NgProbeToken = NgProbeToken, exports.APP_ID = APP_ID, exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL, exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER, exports.PLATFORM_ID = PLATFORM_ID, exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER, exports.APP_INITIALIZER = APP_INITIALIZER, exports.ApplicationInitStatus = ApplicationInitStatus, exports.DebugElement = DebugElement, exports.DebugNode = DebugNode, exports.asNativeElements = asNativeElements, exports.getDebugNode = getDebugNode, exports.Testability = Testability, exports.TestabilityRegistry = TestabilityRegistry, exports.setTestabilityGetter = setTestabilityGetter, exports.TRANSLATIONS = TRANSLATIONS, exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT, exports.LOCALE_ID = LOCALE_ID, exports.MissingTranslationStrategy = MissingTranslationStrategy, exports.ApplicationModule = ApplicationModule, exports.wtfCreateScope = wtfCreateScope, exports.wtfLeave = wtfLeave, exports.wtfStartTimeRange = wtfStartTimeRange, exports.wtfEndTimeRange = wtfEndTimeRange, exports.Type = Type, exports.EventEmitter = EventEmitter, exports.ErrorHandler = ErrorHandler, exports.Sanitizer = Sanitizer, exports.SecurityContext = SecurityContext, exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS, exports.Attribute = Attribute, exports.ContentChild = ContentChild, exports.ContentChildren = ContentChildren, exports.Query = Query, exports.ViewChild = ViewChild, exports.ViewChildren = ViewChildren, exports.Component = Component, exports.Directive = Directive, exports.HostBinding = HostBinding, exports.HostListener = HostListener, exports.Input = Input, exports.Output = Output, exports.Pipe = Pipe, exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA, exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA, exports.NgModule = NgModule, exports.ViewEncapsulation = ViewEncapsulation, exports.Version = Version, exports.VERSION = VERSION, exports.forwardRef = forwardRef, exports.resolveForwardRef = resolveForwardRef, exports.Injector = Injector, exports.ReflectiveInjector = ReflectiveInjector, exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory, exports.ReflectiveKey = ReflectiveKey, exports.InjectionToken = InjectionToken, exports.OpaqueToken = OpaqueToken, exports.Inject = Inject, exports.Optional = Optional, exports.Injectable = Injectable, exports.Self = Self, exports.SkipSelf = SkipSelf, exports.Host = Host, exports.NgZone = NgZone, exports.RenderComponentType = RenderComponentType, exports.Renderer = Renderer, exports.Renderer2 = Renderer2, exports.RendererFactory2 = RendererFactory2, exports.RendererStyleFlags2 = RendererStyleFlags2, exports.RootRenderer = RootRenderer, exports.COMPILER_OPTIONS = COMPILER_OPTIONS, exports.Compiler = Compiler, exports.CompilerFactory = CompilerFactory, exports.ModuleWithComponentFactories = ModuleWithComponentFactories, exports.ComponentFactory = ComponentFactory, exports.ComponentRef = ComponentRef, exports.ComponentFactoryResolver = ComponentFactoryResolver, exports.ElementRef = ElementRef, exports.NgModuleFactory = NgModuleFactory, exports.NgModuleRef = NgModuleRef, exports.NgModuleFactoryLoader = NgModuleFactoryLoader, exports.getModuleFactory = getModuleFactory, exports.QueryList = QueryList, exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader, exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig, exports.TemplateRef = TemplateRef, exports.ViewContainerRef = ViewContainerRef, exports.EmbeddedViewRef = EmbeddedViewRef, exports.ViewRef = ViewRef, exports.ChangeDetectionStrategy = ChangeDetectionStrategy, exports.ChangeDetectorRef = ChangeDetectorRef, exports.DefaultIterableDiffer = DefaultIterableDiffer, exports.IterableDiffers = IterableDiffers, exports.KeyValueDiffers = KeyValueDiffers, exports.SimpleChange = SimpleChange, exports.WrappedValue = WrappedValue, exports.platformCore = platformCore, exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS, exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER, exports.ɵValueUnwrapper = ValueUnwrapper, exports.ɵdevModeEqual = devModeEqual, exports.ɵisListLikeIterable = isListLikeIterable, exports.ɵChangeDetectorStatus = ChangeDetectorStatus, exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy, exports.ɵConsole = Console, exports.ɵERROR_COMPONENT_TYPE = ERROR_COMPONENT_TYPE, exports.ɵComponentFactory = ComponentFactory, exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver, exports.ɵLIFECYCLE_HOOKS_VALUES = LIFECYCLE_HOOKS_VALUES, exports.ɵLifecycleHooks = LifecycleHooks, exports.ɵViewMetadata = ViewMetadata, exports.ɵReflector = Reflector, exports.ɵreflector = reflector, exports.ɵReflectionCapabilities = ReflectionCapabilities, exports.ɵReflectorReader = ReflectorReader, exports.ɵRenderDebugInfo = RenderDebugInfo, exports.ɵglobal = _global, exports.ɵlooseIdentical = looseIdentical, exports.ɵstringify = stringify, exports.ɵmakeDecorator = makeDecorator, exports.ɵisObservable = isObservable, exports.ɵisPromise = isPromise, exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, exports.ɵNgModuleInjector = NgModuleInjector, exports.ɵregisterModuleFactory = registerModuleFactory, exports.ɵEMPTY_ARRAY = EMPTY_ARRAY, exports.ɵEMPTY_MAP = EMPTY_MAP, exports.ɵand = anchorDef, exports.ɵccf = createComponentFactory, exports.ɵcrt = createRendererType2, exports.ɵdid = directiveDef, exports.ɵeld = elementDef, exports.ɵelementEventFullName = elementEventFullName, exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory, exports.ɵinlineInterpolate = inlineInterpolate, exports.ɵinterpolate = interpolate, exports.ɵncd = ngContentDef, exports.ɵnov = nodeValue, exports.ɵpid = pipeDef, exports.ɵprd = providerDef, exports.ɵpad = pureArrayDef, exports.ɵpod = pureObjectDef, exports.ɵppd = purePipeDef, exports.ɵqud = queryDef, exports.ɵted = textDef, exports.ɵunv = unwrapValue, exports.ɵvid = viewDef, exports.AUTO_STYLE = AUTO_STYLE$$1, exports.trigger = trigger$$1, exports.animate = animate$$1, exports.group = group$$1, exports.sequence = sequence$$1, exports.style = style$$1, exports.state = state$$1, exports.keyframes = keyframes$$1, exports.transition = transition$$1, exports.ɵba = animate$1, exports.ɵbb = group$1, exports.ɵbf = keyframes$1, exports.ɵbc = sequence$1, exports.ɵbe = state$1, exports.ɵbd = style$1, exports.ɵbg = transition$1, exports.ɵz = trigger$1, exports.ɵo = _initViewEngine, exports.ɵl = _iterableDiffersFactory, exports.ɵm = _keyValueDiffersFactory, exports.ɵn = _localeFactory, exports.ɵf = ApplicationRef_, exports.ɵg = _appIdRandomProviderFactory, exports.ɵh = defaultIterableDiffers, exports.ɵi = defaultKeyValueDiffers, exports.ɵj = DefaultIterableDifferFactory, exports.ɵk = DefaultKeyValueDifferFactory, exports.ɵc = ReflectiveInjector_, exports.ɵd = ReflectiveDependency, exports.ɵe = resolveReflectiveProviders, exports.ɵp = wtfEnabled, exports.ɵr = createScope$1, exports.ɵq = detectWTF, exports.ɵu = endTimeRange, exports.ɵs = leave, exports.ɵt = startTimeRange, exports.ɵa = makeParamDecorator, exports.ɵb = makePropDecorator, exports.ɵw = _def, exports.ɵx = DebugContext, Object.defineProperty(exports, "__esModule", { value: !0 });
});

$__System.registerDynamic('83', ['1f', '84', '85'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var Subscriber_1 = $__require('1f');
    var rxSubscriber_1 = $__require('84');
    var Observer_1 = $__require('85');
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
                return nextOrObserver[rxSubscriber_1.rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber_1.Subscriber(Observer_1.empty);
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    exports.toSubscriber = toSubscriber;

});
$__System.registerDynamic('27', ['18'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var root_1 = $__require('18');
    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            } else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        } else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    exports.getSymbolObservable = getSymbolObservable;
    exports.observable = getSymbolObservable(root_1.root);
    /**
     * @deprecated use observable instead
     */
    exports.$$observable = exports.observable;

});
$__System.registerDynamic('19', ['18', '83', '27'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var root_1 = $__require('18');
    var toSubscriber_1 = $__require('83');
    var observable_1 = $__require('27');
    /**
     * A representation of any set of values over any amount of time. This the most basic building block
     * of RxJS.
     *
     * @class Observable<T>
     */
    var Observable = function () {
        /**
         * @constructor
         * @param {Function} subscribe the function that is  called when the Observable is
         * initially subscribed to. This function is given a Subscriber, to which new values
         * can be `next`ed, or an `error` method can be called to raise an error, or
         * `complete` can be called to notify of a successful completion.
         */
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        /**
         * Creates a new Observable, with this Observable as the source, and the passed
         * operator defined as the new observable's operator.
         * @method lift
         * @param {Operator} operator the operator defining the operation to take on the observable
         * @return {Observable} a new observable with the Operator applied
         */
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this.source);
            } else {
                sink.add(this._trySubscribe(sink));
            }
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            } catch (err) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
                sink.error(err);
            }
        };
        /**
         * @method forEach
         * @param {Function} next a handler for each value emitted by the observable
         * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
         * @return {Promise} a promise that either resolves on observable completion or
         *  rejects with the handled error
         */
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                    PromiseCtor = root_1.root.Rx.config.Promise;
                } else if (root_1.root.Promise) {
                    PromiseCtor = root_1.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                // Must be declared in a separate statement to avoid a RefernceError when
                // accessing subscription below in the closure due to Temporal Dead Zone.
                var subscription;
                subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        // if there is a subscription, then we can surmise
                        // the next handling is asynchronous. Any errors thrown
                        // need to be rejected explicitly and unsubscribe must be
                        // called manually
                        try {
                            next(value);
                        } catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    } else {
                        // if there is NO subscription, then we're getting a nexted
                        // value synchronously during subscription. We can just call it.
                        // If it errors, Observable's `subscribe` will ensure the
                        // unsubscription logic is called, then synchronously rethrow the error.
                        // After that, Promise will trap the error and send it
                        // down the rejection path.
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        /**
         * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
         * @method Symbol.observable
         * @return {Observable} this instance of the observable
         */
        Observable.prototype[observable_1.observable] = function () {
            return this;
        };
        // HACK: Since TypeScript inherits static properties too, we have to
        // fight against TypeScript here so Subject can have a different static create signature
        /**
         * Creates a new cold Observable by calling the Observable constructor
         * @static true
         * @owner Observable
         * @method create
         * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
         * @return {Observable} a new cold observable
         */
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }();
    exports.Observable = Observable;

});
$__System.registerDynamic("85", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    exports.empty = {
        closed: true,
        next: function (value) {},
        error: function (err) {
            throw err;
        },
        complete: function () {}
    };

});
$__System.registerDynamic('1f', ['86', '55', '85', '84'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isFunction_1 = $__require('86');
    var Subscription_1 = $__require('55');
    var Observer_1 = $__require('85');
    var rxSubscriber_1 = $__require('84');
    /**
     * Implements the {@link Observer} interface and extends the
     * {@link Subscription} class. While the {@link Observer} is the public API for
     * consuming the values of an {@link Observable}, all Observers get converted to
     * a Subscriber, in order to provide Subscription-like capabilities such as
     * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
     * implementing operators, but it is rarely used as a public API.
     *
     * @class Subscriber<T>
     */
    var Subscriber = function (_super) {
        __extends(Subscriber, _super);
        /**
         * @param {Observer|function(value: T): void} [destinationOrNext] A partially
         * defined Observer or a `next` callback function.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         */
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer_1.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer_1.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            this.destination = destinationOrNext;
                            this.destination.add(this);
                        } else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {
            return this;
        };
        /**
         * A static factory for a Subscriber, given a (potentially partial) definition
         * of an Observer.
         * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
         * Observer represented by the given arguments.
         */
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        /**
         * The {@link Observer} callback to receive notifications of type `next` from
         * the Observable, with a value. The Observable may call this method 0 or more
         * times.
         * @param {T} [value] The `next` value.
         * @return {void}
         */
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        /**
         * The {@link Observer} callback to receive notifications of type `error` from
         * the Observable, with an attached {@link Error}. Notifies the Observer that
         * the Observable has experienced an error condition.
         * @param {any} [err] The `error` exception.
         * @return {void}
         */
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        /**
         * The {@link Observer} callback to receive a valueless notification of type
         * `complete` from the Observable. Notifies the Observer that the Observable
         * has finished sending push-based notifications.
         * @return {void}
         */
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        Subscriber.prototype._unsubscribeAndRecycle = function () {
            var _a = this,
                _parent = _a._parent,
                _parents = _a._parents;
            this._parent = null;
            this._parents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parent = _parent;
            this._parents = _parents;
            return this;
        };
        return Subscriber;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SafeSubscriber = function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
            _super.call(this);
            this._parentSubscriber = _parentSubscriber;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            } else if (observerOrNext) {
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (observerOrNext !== Observer_1.empty) {
                    context = Object.create(observerOrNext);
                    if (isFunction_1.isFunction(context.unsubscribe)) {
                        this.add(context.unsubscribe.bind(context));
                    }
                    context.unsubscribe = this.unsubscribe.bind(this);
                }
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parentSubscriber = this._parentSubscriber;
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._error) {
                    if (!_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parentSubscriber, this._error, err);
                        this.unsubscribe();
                    }
                } else if (!_parentSubscriber.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                } else {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            var _this = this;
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._complete) {
                    var wrappedComplete = function () {
                        return _this._complete.call(_this._context);
                    };
                    if (!_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(wrappedComplete);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                        this.unsubscribe();
                    }
                } else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;
            _parentSubscriber.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber);

});
$__System.registerDynamic('78', [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = function (_super) {
        __extends(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error);
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;

});
$__System.registerDynamic("22", [], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };

});
$__System.registerDynamic("7f", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    exports.isObject = isObject;

});
$__System.registerDynamic("86", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    function isFunction(x) {
        return typeof x === 'function';
    }
    exports.isFunction = isFunction;

});
$__System.registerDynamic("70", ["71"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var errorObject_1 = $__require("71");
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        } catch (e) {
            errorObject_1.errorObject.e = e;
            return errorObject_1.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    exports.tryCatch = tryCatch;
    ;

});
$__System.registerDynamic("71", [], true, function ($__require, exports, module) {
  "use strict";
  // typeof any so that it we don't have to cast when comparing a result to the error object

  var global = this || self,
      GLOBAL = global;
  exports.errorObject = { e: {} };

});
$__System.registerDynamic("87", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = function (_super) {
        __extends(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
                return i + 1 + ") " + err.toString();
            }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error);
    exports.UnsubscriptionError = UnsubscriptionError;

});
$__System.registerDynamic('55', ['22', '7f', '86', '70', '71', '87'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var isArray_1 = $__require('22');
    var isObject_1 = $__require('7f');
    var isFunction_1 = $__require('86');
    var tryCatch_1 = $__require('70');
    var errorObject_1 = $__require('71');
    var UnsubscriptionError_1 = $__require('87');
    /**
     * Represents a disposable resource, such as the execution of an Observable. A
     * Subscription has one important method, `unsubscribe`, that takes no argument
     * and just disposes the resource held by the subscription.
     *
     * Additionally, subscriptions may be grouped together through the `add()`
     * method, which will attach a child Subscription to the current Subscription.
     * When a Subscription is unsubscribed, all its children (and its grandchildren)
     * will be unsubscribed as well.
     *
     * @class Subscription
     */
    var Subscription = function () {
        /**
         * @param {function(): void} [unsubscribe] A function describing how to
         * perform the disposal of resources when the `unsubscribe` method is called.
         */
        function Subscription(unsubscribe) {
            /**
             * A flag to indicate whether this Subscription has already been unsubscribed.
             * @type {boolean}
             */
            this.closed = false;
            this._parent = null;
            this._parents = null;
            this._subscriptions = null;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        /**
         * Disposes the resources held by the subscription. May, for instance, cancel
         * an ongoing Observable execution or cancel any other type of work that
         * started when the Subscription was created.
         * @return {void}
         */
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            var _a = this,
                _parent = _a._parent,
                _parents = _a._parents,
                _unsubscribe = _a._unsubscribe,
                _subscriptions = _a._subscriptions;
            this.closed = true;
            this._parent = null;
            this._parents = null;
            // null out _subscriptions first so any child subscriptions that attempt
            // to remove themselves from this subscription will noop
            this._subscriptions = null;
            var index = -1;
            var len = _parents ? _parents.length : 0;
            // if this._parent is null, then so is this._parents, and we
            // don't have to remove ourselves from any parent subscriptions.
            while (_parent) {
                _parent.remove(this);
                // if this._parents is null or index >= len,
                // then _parent is set to null, and the loop exits
                _parent = ++index < len && _parents[index] || null;
            }
            if (isFunction_1.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject_1.errorObject) {
                    hasErrors = true;
                    errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
                }
            }
            if (isArray_1.isArray(_subscriptions)) {
                index = -1;
                len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject_1.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject_1.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                            } else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        /**
         * Adds a tear down to be called during the unsubscribe() of this
         * Subscription.
         *
         * If the tear down being added is a subscription that is already
         * unsubscribed, is the same reference `add` is being called on, or is
         * `Subscription.EMPTY`, it will not be added.
         *
         * If this subscription is already in an `closed` state, the passed
         * tear down logic will be executed immediately.
         *
         * @param {TeardownLogic} teardown The additional logic to execute on
         * teardown.
         * @return {Subscription} Returns the Subscription used or created to be
         * added to the inner subscriptions list. This Subscription can be used with
         * `remove()` to remove the passed teardown logic from the inner subscriptions
         * list.
         */
        Subscription.prototype.add = function (teardown) {
            if (!teardown || teardown === Subscription.EMPTY) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var subscription = teardown;
            switch (typeof teardown) {
                case 'function':
                    subscription = new Subscription(teardown);
                case 'object':
                    if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                        return subscription;
                    } else if (this.closed) {
                        subscription.unsubscribe();
                        return subscription;
                    } else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                            var tmp = subscription;
                            subscription = new Subscription();
                            subscription._subscriptions = [tmp];
                        }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            var subscriptions = this._subscriptions || (this._subscriptions = []);
            subscriptions.push(subscription);
            subscription._addParent(this);
            return subscription;
        };
        /**
         * Removes a Subscription from the internal list of subscriptions that will
         * unsubscribe during the unsubscribe process of this Subscription.
         * @param {Subscription} subscription The subscription to remove.
         * @return {void}
         */
        Subscription.prototype.remove = function (subscription) {
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.prototype._addParent = function (parent) {
            var _a = this,
                _parent = _a._parent,
                _parents = _a._parents;
            if (!_parent || _parent === parent) {
                // If we don't have a parent, or the new parent is the same as the
                // current parent, then set this._parent to the new parent.
                this._parent = parent;
            } else if (!_parents) {
                // If there's already one parent, but not multiple, allocate an Array to
                // store the rest of the parent Subscriptions.
                this._parents = [parent];
            } else if (_parents.indexOf(parent) === -1) {
                // Only add the new parent to the _parents list if it's not already there.
                _parents.push(parent);
            }
        };
        Subscription.EMPTY = function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription());
        return Subscription;
    }();
    exports.Subscription = Subscription;
    function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) {
            return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);
        }, []);
    }

});
$__System.registerDynamic("88", ["55"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("55");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectSubscription = function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            _super.call(this);
            this.subject = subject;
            this.subscriber = subscriber;
            this.closed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1.Subscription);
    exports.SubjectSubscription = SubjectSubscription;

});
$__System.registerDynamic('18', [], true, function ($__require, exports, module) {
    "use strict";
    // CommonJS / Node have global context exposed as "global" variable.
    // We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
    // the global "global" var for now.

    var global = this || self,
        GLOBAL = global;
    var __window = typeof window !== 'undefined' && window;
    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;
    var __global = typeof global !== 'undefined' && global;
    var _root = __window || __global || __self;
    exports.root = _root;
    // Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
    // This is needed when used with angular/tsickle which inserts a goog.module statement.
    // Wrap in IIFE
    (function () {
        if (!_root) {
            throw new Error('RxJS could not find any global context (window, self, global)');
        }
    })();

});
$__System.registerDynamic('84', ['18'], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  var root_1 = $__require('18');
  var Symbol = root_1.root.Symbol;
  exports.rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
  /**
   * @deprecated use rxSubscriber instead
   */
  exports.$$rxSubscriber = exports.rxSubscriber;

});
$__System.registerDynamic('36', ['19', '1f', '55', '78', '88', '84'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('19');
    var Subscriber_1 = $__require('1f');
    var Subscription_1 = $__require('55');
    var ObjectUnsubscribedError_1 = $__require('78');
    var SubjectSubscription_1 = $__require('88');
    var rxSubscriber_1 = $__require('84');
    /**
     * @class SubjectSubscriber<T>
     */
    var SubjectSubscriber = function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            _super.call(this, destination);
            this.destination = destination;
        }
        return SubjectSubscriber;
    }(Subscriber_1.Subscriber);
    exports.SubjectSubscriber = SubjectSubscriber;
    /**
     * @class Subject<T>
     */
    var Subject = function (_super) {
        __extends(Subject, _super);
        function Subject() {
            _super.call(this);
            this.observers = [];
            this.closed = false;
            this.isStopped = false;
            this.hasError = false;
            this.thrownError = null;
        }
        Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._trySubscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else {
                return _super.prototype._trySubscribe.call(this, subscriber);
            }
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            } else if (this.isStopped) {
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            } else {
                this.observers.push(subscriber);
                return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable_1.Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    /**
     * @class AnonymousSubject<T>
     */
    var AnonymousSubject = function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            } else {
                return Subscription_1.Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject);
    exports.AnonymousSubject = AnonymousSubject;

});
/**
 * @license Angular v4.1.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : 'function' === 'function' && true ? $__System.registerDynamic('c', [], false, function ($__require, $__exports, $__module) {
    if (typeof factory === 'function') {
      return factory.call($__exports, $__exports);
    } else {
      return factory;
    }
  }) : factory((global.ng = global.ng || {}, global.ng.animations = global.ng.animations || {}));
})(this, function (exports) {
  'use strict';

  /**
   * @license Angular v4.1.3
   * (c) 2010-2017 Google, Inc. https://angular.io/
   * License: MIT
   */
  /**
   * \@experimental Animation support is experimental.
   */

  var AUTO_STYLE = '*';
  /**
   * `trigger` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
   * transition transition} entries that will be evaluated when the expression bound to the trigger
   * changes.
   *
   * Triggers are registered within the component annotation data under the {\@link
   * Component#animations animations section}. An animation trigger can be placed on an element
   * within a template by referencing the name of the trigger followed by the expression value that the
   * trigger is bound to (in the form of `[\@triggerName]="expression"`.
   *
   * ### Usage
   *
   * `trigger` will create an animation trigger reference based on the provided `name` value. The
   * provided `animation` value is expected to be an array consisting of {\@link state state} and {\@link
   * transition transition} declarations.
   *
   * ```typescript
   * \@Component({
   *   selector: 'my-component',
   *   templateUrl: 'my-component-tpl.html',
   *   animations: [
   *     trigger("myAnimationTrigger", [
   *       state(...),
   *       state(...),
   *       transition(...),
   *       transition(...)
   *     ])
   *   ]
   * })
   * class MyComponent {
   *   myStatusExp = "something";
   * }
   * ```
   *
   * The template associated with this component will make use of the `myAnimationTrigger` animation
   * trigger by binding to an element within its template code.
   *
   * ```html
   * <!-- somewhere inside of my-component-tpl.html -->
   * <div [\@myAnimationTrigger]="myStatusExp">...</div>
   * tools/gulp-tasks/validate-commit-message.js ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} name
   * @param {?} definitions
   * @return {?}
   */
  function trigger(name, definitions) {
    return { name: name, definitions: definitions };
  }
  /**
   * `animate` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `animate` specifies an animation step that will apply the provided `styles` data for a given
   * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
   * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
   * transition transition}.
   *
   * ### Usage
   *
   * The `animate` function accepts two input parameters: `timing` and `styles`:
   *
   * - `timing` is a string based value that can be a combination of a duration with optional delay
   * and easing values. The format for the expression breaks down to `duration delay easing`
   * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
   * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
   * `duration` value in millisecond form.
   * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
   * keyframes keyframes}. If left empty then the styles from the destination state will be collected
   * and used (this is useful when describing an animation step that will complete an animation by
   * {\@link transition#the-final-animate-call animating to the final state}).
   *
   * ```typescript
   * // various functions for specifying timing data
   * animate(500, style(...))
   * animate("1s", style(...))
   * animate("100ms 0.5s", style(...))
   * animate("5s ease", style(...))
   * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
   *
   * // either style() of keyframes() can be used
   * animate(500, style({ background: "red" }))
   * animate(500, keyframes([
   *   style({ background: "blue" })),
   *   style({ background: "red" }))
   * ])
   * ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} timings
   * @param {?=} styles
   * @return {?}
   */
  function animate(timings, styles) {
    if (styles === void 0) {
      styles = null;
    }
    return { type: 4 /* Animate */, styles: styles, timings: timings };
  }
  /**
   * `group` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
   * useful when a series of styles must be animated/closed off at different statrting/ending times.
   *
   * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
   * transition} and it will only continue to the next instruction once all of the inner animation
   * steps have completed.
   *
   * ### Usage
   *
   * The `steps` data that is passed into the `group` animation function can either consist of {\@link
   * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
   * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
   * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
   *
   * ```typescript
   * group([
   *   animate("1s", { background: "black" }))
   *   animate("2s", { color: "white" }))
   * ])
   * ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} steps
   * @return {?}
   */
  function group(steps) {
    return { type: 3 /* Group */, steps: steps };
  }
  /**
   * `sequence` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
   * default when an array is passed as animation data into {\@link transition transition}.)
   *
   * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
   * transition} and it will only continue to the next instruction once each of the inner animation
   * steps have completed.
   *
   * To perform animation styling in parallel with other animation steps then have a look at the
   * {\@link group group} animation function.
   *
   * ### Usage
   *
   * The `steps` data that is passed into the `sequence` animation function can either consist of
   * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
   * provided styling data immediately while a call to `animate()` will apply its styling data over a
   * given time depending on its timing data.
   *
   * ```typescript
   * sequence([
   *   style({ opacity: 0 })),
   *   animate("1s", { opacity: 1 }))
   * ])
   * ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} steps
   * @return {?}
   */
  function sequence(steps) {
    return { type: 2 /* Sequence */, steps: steps };
  }
  /**
   * `style` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `style` declares a key/value object containing CSS properties/styles that can then be used for
   * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
   * for both {\@link animate animate} and {\@link keyframes keyframes}.
   *
   * ### Usage
   *
   * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
   * to be defined.
   *
   * ```typescript
   * // string values are used for css properties
   * style({ background: "red", color: "blue" })
   *
   * // numerical (pixel) values are also supported
   * style({ width: 100, height: 0 })
   * ```
   *
   * #### Auto-styles (using `*`)
   *
   * When an asterix (`*`) character is used as a value then it will be detected from the element
   * being animated and applied as animation data when the animation starts.
   *
   * This feature proves useful for a state depending on layout and/or environment factors; in such
   * cases the styles are calculated just before the animation starts.
   *
   * ```typescript
   * // the steps below will animate from 0 to the
   * // actual height of the element
   * style({ height: 0 }),
   * animate("1s", style({ height: "*" }))
   * ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} tokens
   * @return {?}
   */
  function style(tokens) {
    return { type: 6 /* Style */, styles: tokens };
  }
  /**
   * `state` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `state` declares an animation state within the given trigger. When a state is active within a
   * component then its associated styles will persist on the element that the trigger is attached to
   * (even when the animation ends).
   *
   * To animate between states, have a look at the animation {\@link transition transition} DSL
   * function. To register states to an animation trigger please have a look at the {\@link trigger
   * trigger} function.
   *
   * #### The `void` state
   *
   * The `void` state value is a reserved word that angular uses to determine when the element is not
   * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
   * associated element is void).
   *
   * #### The `*` (default) state
   *
   * The `*` state (when styled) is a fallback state that will be used if the state that is being
   * animated is not declared within the trigger.
   *
   * ### Usage
   *
   * `state` will declare an animation state with its associated styles
   * within the given trigger.
   *
   * - `stateNameExpr` can be one or more state names separated by commas.
   * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
   * the state has been reached.
   *
   * ```typescript
   * // "void" is a reserved name for a state and is used to represent
   * // the state in which an element is detached from from the application.
   * state("void", style({ height: 0 }))
   *
   * // user-defined states
   * state("closed", style({ height: 0 }))
   * state("open, visible", style({ height: "*" }))
   * ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} name
   * @param {?} styles
   * @return {?}
   */
  function state(name, styles) {
    return { type: 0 /* State */, name: name, styles: styles };
  }
  /**
   * `keyframes` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
   * by an `offset` value.
   *
   * ### Usage
   *
   * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
   * animation function. Instead of applying animations from where they are currently to their
   * destination, keyframes can describe how each style entry is applied and at what point within the
   * animation arc (much like CSS Keyframe Animations do).
   *
   * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
   * percentage of the animate time the styles will be applied.
   *
   * ```typescript
   * // the provided offset values describe when each backgroundColor value is applied.
   * animate("5s", keyframes([
   *   style({ backgroundColor: "red", offset: 0 }),
   *   style({ backgroundColor: "blue", offset: 0.2 }),
   *   style({ backgroundColor: "orange", offset: 0.3 }),
   *   style({ backgroundColor: "black", offset: 1 })
   * ]))
   * ```
   *
   * Alternatively, if there are no `offset` values used within the style entries then the offsets
   * will be calculated automatically.
   *
   * ```typescript
   * animate("5s", keyframes([
   *   style({ backgroundColor: "red" }) // offset = 0
   *   style({ backgroundColor: "blue" }) // offset = 0.33
   *   style({ backgroundColor: "orange" }) // offset = 0.66
   *   style({ backgroundColor: "black" }) // offset = 1
   * ]))
   * ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} steps
   * @return {?}
   */
  function keyframes(steps) {
    return { type: 5 /* KeyframeSequence */, steps: steps };
  }
  /**
   * `transition` is an animation-specific function that is designed to be used inside of Angular's
   * animation DSL language. If this information is new, please navigate to the {\@link
   * Component#animations component animations metadata page} to gain a better understanding of
   * how animations in Angular are used.
   *
   * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
   * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
   * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
   * and/or ending state).
   *
   * A function can also be provided as the `stateChangeExpr` argument for a transition and this
   * function will be executed each time a state change occurs. If the value returned within the
   * function is true then the associated animation will be run.
   *
   * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
   * to animate to a state value and persist its styles then one or more {\@link state animation
   * states} is expected to be defined.
   *
   * ### Usage
   *
   * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
   * what the previous state is and what the current state has become. In other words, if a transition
   * is defined that matches the old/current state criteria then the associated animation will be
   * triggered.
   *
   * ```typescript
   * // all transition/state changes are defined within an animation trigger
   * trigger("myAnimationTrigger", [
   *   // if a state is defined then its styles will be persisted when the
   *   // animation has fully completed itself
   *   state("on", style({ background: "green" })),
   *   state("off", style({ background: "grey" })),
   *
   *   // a transition animation that will be kicked off when the state value
   *   // bound to "myAnimationTrigger" changes from "on" to "off"
   *   transition("on => off", animate(500)),
   *
   *   // it is also possible to do run the same animation for both directions
   *   transition("on <=> off", animate(500)),
   *
   *   // or to define multiple states pairs separated by commas
   *   transition("on => off, off => void", animate(500)),
   *
   *   // this is a catch-all state change for when an element is inserted into
   *   // the page and the destination state is unknown
   *   transition("void => *", [
   *     style({ opacity: 0 }),
   *     animate(500)
   *   ]),
   *
   *   // this will capture a state change between any states
   *   transition("* => *", animate("1s 0s")),
   *
   *   // you can also go full out and include a function
   *   transition((fromState, toState) => {
   *     // when `true` then it will allow the animation below to be invoked
   *     return fromState == "off" && toState == "on";
   *   }, animate("1s 0s"))
   * ])
   * ```
   *
   * The template associated with this component will make use of the `myAnimationTrigger` animation
   * trigger by binding to an element within its template code.
   *
   * ```html
   * <!-- somewhere inside of my-component-tpl.html -->
   * <div [\@myAnimationTrigger]="myStatusExp">...</div>
   * ```
   *
   * #### The final `animate` call
   *
   * If the final step within the transition steps is a call to `animate()` that **only** uses a
   * timing value with **no style data** then it will be automatically used as the final animation arc
   * for the element to animate itself to the final state. This involves an automatic mix of
   * adding/removing CSS styles so that the element will be in the exact state it should be for the
   * applied state to be presented correctly.
   *
   * ```
   * // start off by hiding the element, but make sure that it animates properly to whatever state
   * // is currently active for "myAnimationTrigger"
   * transition("void => *", [
   *   style({ opacity: 0 }),
   *   animate(500)
   * ])
   * ```
   *
   * ### Transition Aliases (`:enter` and `:leave`)
   *
   * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
   * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
   * => void` state changes.
   *
   * ```
   * transition(":enter", [
   *   style({ opacity: 0 }),
   *   animate(500, style({ opacity: 1 }))
   * ])
   * transition(":leave", [
   *   animate(500, style({ opacity: 0 }))
   * ])
   * ```
   *
   * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
   *
   * \@experimental Animation support is experimental.
   * @param {?} stateChangeExpr
   * @param {?} steps
   * @return {?}
   */
  function transition(stateChangeExpr, steps) {
    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };
  }
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   * @param {?} cb
   * @return {?}
   */
  function scheduleMicroTask(cb) {
    Promise.resolve(null).then(cb);
  }
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  /**
   * \@experimental Animation support is experimental.
   * @abstract
   */
  var AnimationPlayer = function () {
    function AnimationPlayer() {}
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    AnimationPlayer.prototype.onDone = function (fn) {};
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    AnimationPlayer.prototype.onStart = function (fn) {};
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    AnimationPlayer.prototype.onDestroy = function (fn) {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.init = function () {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.hasStarted = function () {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.play = function () {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.pause = function () {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.restart = function () {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.finish = function () {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.destroy = function () {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.reset = function () {};
    /**
     * @abstract
     * @param {?} p
     * @return {?}
     */
    AnimationPlayer.prototype.setPosition = function (p) {};
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.getPosition = function () {};
    Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
      /**
       * @return {?}
       */
      get: function () {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      /**
       * @param {?} player
       * @return {?}
       */
      set: function (player) {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      enumerable: true,
      configurable: true
    });
    return AnimationPlayer;
  }();
  /**
   * \@experimental Animation support is experimental.
   */
  var NoopAnimationPlayer = function () {
    function NoopAnimationPlayer() {
      this._onDoneFns = [];
      this._onStartFns = [];
      this._onDestroyFns = [];
      this._started = false;
      this._destroyed = false;
      this._finished = false;
      this.parentPlayer = null;
    }
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype._onFinish = function () {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function (fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NoopAnimationPlayer.prototype.onStart = function (fn) {
      this._onStartFns.push(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NoopAnimationPlayer.prototype.onDone = function (fn) {
      this._onDoneFns.push(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NoopAnimationPlayer.prototype.onDestroy = function (fn) {
      this._onDestroyFns.push(fn);
    };
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.hasStarted = function () {
      return this._started;
    };
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.init = function () {};
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.play = function () {
      var _this = this;
      if (!this.hasStarted()) {
        scheduleMicroTask(function () {
          return _this._onFinish();
        });
        this._onStart();
      }
      this._started = true;
    };
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype._onStart = function () {
      this._onStartFns.forEach(function (fn) {
        return fn();
      });
      this._onStartFns = [];
    };
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.pause = function () {};
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.restart = function () {};
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.finish = function () {
      this._onFinish();
    };
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.destroy = function () {
      if (!this._destroyed) {
        this._destroyed = true;
        if (!this.hasStarted()) {
          this._onStart();
        }
        this.finish();
        this._onDestroyFns.forEach(function (fn) {
          return fn();
        });
        this._onDestroyFns = [];
      }
    };
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.reset = function () {};
    /**
     * @param {?} p
     * @return {?}
     */
    NoopAnimationPlayer.prototype.setPosition = function (p) {};
    /**
     * @return {?}
     */
    NoopAnimationPlayer.prototype.getPosition = function () {
      return 0;
    };
    return NoopAnimationPlayer;
  }();
  /**
   * @license
   * Copyright Google Inc. All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   */
  var AnimationGroupPlayer = function () {
    /**
     * @param {?} _players
     */
    function AnimationGroupPlayer(_players) {
      var _this = this;
      this._players = _players;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._started = false;
      this._destroyed = false;
      this._onDestroyFns = [];
      this.parentPlayer = null;
      var count = 0;
      var total = this._players.length;
      if (total == 0) {
        scheduleMicroTask(function () {
          return _this._onFinish();
        });
      } else {
        this._players.forEach(function (player) {
          player.parentPlayer = _this;
          player.onDone(function () {
            if (++count >= total) {
              _this._onFinish();
            }
          });
        });
      }
    }
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype._onFinish = function () {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function (fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.init = function () {
      this._players.forEach(function (player) {
        return player.init();
      });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AnimationGroupPlayer.prototype.onStart = function (fn) {
      this._onStartFns.push(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AnimationGroupPlayer.prototype.onDone = function (fn) {
      this._onDoneFns.push(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AnimationGroupPlayer.prototype.onDestroy = function (fn) {
      this._onDestroyFns.push(fn);
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.hasStarted = function () {
      return this._started;
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.play = function () {
      if (!this.parentPlayer) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function (fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._players.forEach(function (player) {
        return player.play();
      });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.pause = function () {
      this._players.forEach(function (player) {
        return player.pause();
      });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.restart = function () {
      this._players.forEach(function (player) {
        return player.restart();
      });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.finish = function () {
      this._onFinish();
      this._players.forEach(function (player) {
        return player.finish();
      });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.destroy = function () {
      if (!this._destroyed) {
        this._onFinish();
        this._players.forEach(function (player) {
          return player.destroy();
        });
        this._destroyed = true;
        this._onDestroyFns.forEach(function (fn) {
          return fn();
        });
        this._onDestroyFns = [];
      }
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.reset = function () {
      this._players.forEach(function (player) {
        return player.reset();
      });
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    };
    /**
     * @param {?} p
     * @return {?}
     */
    AnimationGroupPlayer.prototype.setPosition = function (p) {
      this._players.forEach(function (player) {
        player.setPosition(p);
      });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.getPosition = function () {
      var /** @type {?} */min = 0;
      this._players.forEach(function (player) {
        var /** @type {?} */p = player.getPosition();
        min = Math.min(p, min);
      });
      return min;
    };
    Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
      /**
       * @return {?}
       */
      get: function () {
        return this._players;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationGroupPlayer;
  }();

  exports.AUTO_STYLE = AUTO_STYLE;
  exports.animate = animate;
  exports.group = group;
  exports.keyframes = keyframes;
  exports.sequence = sequence;
  exports.state = state;
  exports.style = style;
  exports.transition = transition;
  exports.trigger = trigger;
  exports.AnimationPlayer = AnimationPlayer;
  exports.NoopAnimationPlayer = NoopAnimationPlayer;
  exports.ɵAnimationGroupPlayer = AnimationGroupPlayer;

  Object.defineProperty(exports, '__esModule', { value: true });
});

$__System.registerDynamic("52", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var animations_1 = $__require("c");
    function slideToRight() {
        return animations_1.trigger('slideToRight', [animations_1.state('void', animations_1.style({ position: 'fixed', width: '100%' })), animations_1.state('*', animations_1.style({ position: 'fixed', width: '100%' })), animations_1.transition(':enter', [animations_1.style({ transform: 'translateX(-100%)' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateX(0%)' }))]), animations_1.transition(':leave', [animations_1.style({ transform: 'translateX(0%)' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateX(100%)' }))])]);
    }
    exports.slideToRight = slideToRight;
    function slideToLeft() {
        return animations_1.trigger('slideToLeft', [animations_1.state('void', animations_1.style({})), animations_1.transition(':enter', [animations_1.style({ transform: 'translateX(100%)', position: 'fixed', width: '100%' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateX(0%)' }))]), animations_1.transition(':leave', [animations_1.style({ transform: 'translateX(0%)', position: 'fixed', width: '100%' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateX(-100%)' }))])]);
    }
    exports.slideToLeft = slideToLeft;
    function slideToBottom() {
        return animations_1.trigger('slideToBottom', [animations_1.state('void', animations_1.style({ position: 'fixed', width: '100%', height: '100%' })), animations_1.state('*', animations_1.style({ position: 'fixed', width: '100%', height: '100%' })), animations_1.transition(':enter', [animations_1.style({ transform: 'translateY(-100%)' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateY(0%)' }))]), animations_1.transition(':leave', [animations_1.style({ transform: 'translateY(0%)' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateY(100%)' }))])]);
    }
    exports.slideToBottom = slideToBottom;
    function slideToTop() {
        return animations_1.trigger('slideToTop', [animations_1.state('void', animations_1.style({ position: 'fixed', width: '100%', height: '100%' })), animations_1.state('*', animations_1.style({ position: 'fixed', width: '100%', height: '100%' })), animations_1.transition(':enter', [animations_1.style({ transform: 'translateY(100%)' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateY(0%)' }))]), animations_1.transition(':leave', [animations_1.style({ transform: 'translateY(0%)' }), animations_1.animate('0.5s ease-in-out', animations_1.style({ transform: 'translateY(-100%)' }))])]);
    }
    exports.slideToTop = slideToTop;
    function appear() {
        return animations_1.trigger('appear', [animations_1.transition(':enter', [animations_1.style({ opacity: 0.001, height: 10 }), animations_1.group([animations_1.animate('0.25s ease', animations_1.style({ height: '*' })), animations_1.animate('0.35s 0.1s ease', animations_1.style({ opacity: 1 }))])]), animations_1.transition(':leave', [animations_1.group([animations_1.animate('0.25s ease', animations_1.style({ height: 0, margin: 0 })), animations_1.animate('0.25s 0.1s ease', animations_1.style({ opacity: 0 }))])])]);
    }
    exports.appear = appear;
    function changeWidth(width) {
        if (width === void 0) {
            width = '300px';
        }
        return animations_1.trigger('changeWidth', [animations_1.state('collapsed', animations_1.style({ width: '*' })), animations_1.state('expanded', animations_1.style({ width: width })), animations_1.transition('collapsed <=> expanded', animations_1.animate('.3s ease'))]);
    }
    exports.changeWidth = changeWidth;
    function fadeInOut() {
        return animations_1.trigger('fadeInOut', [animations_1.state('collapsed', animations_1.style({ opacity: '*' })), animations_1.state('expanded', animations_1.style({ opacity: 0 })), animations_1.transition('collapsed <=> expanded', animations_1.animate('.3s ease'))]);
    }
    exports.fadeInOut = fadeInOut;
    function appearNoty() {
        return animations_1.trigger('appearNoty', [animations_1.transition(':enter', [animations_1.style({ transform: 'translate(-50%, 100%)', color: 'transparent' }), animations_1.group([animations_1.animate('275ms', animations_1.style({ transform: 'translate(-50%, 0)', easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)' })), animations_1.animate('275ms 100ms ease', animations_1.style({ color: '#fff' }))])]), animations_1.transition('* => destroyed', [animations_1.animate('250ms', animations_1.style({ transform: 'translate(-50%, 100%)', easing: 'cubic-bezier(0.4, 0.0, 1, 1)' }))])]);
    }
    exports.appearNoty = appearNoty;

});
$__System.registerDynamic("89", ["e", "36", "52"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var Subject_1 = $__require("36");
    var animations_1 = $__require("52");
    var NotyComponent = function () {
        function NotyComponent() {
            var _this = this;
            this.destroyedStream = new Subject_1.Subject();
            this.message = 'Noty message!';
            this.animationState = 'idle';
            setTimeout(function () {
                return _this.animationState = 'destroyed';
            }, 3000);
        }
        NotyComponent.prototype.onAnimationDone = function (e) {
            if (e.toState === 'destroyed') {
                this.destroyedStream.next();
            }
        };
        return NotyComponent;
    }();
    NotyComponent = __decorate([core_1.Component({
        template: "\n    <div class=\"noty\"\n      [@appearNoty]=\"animationState\"\n      (@appearNoty.done)=\"onAnimationDone($event)\"\n      (click)=\"animationState = 'destroyed'\"\n    >\n      {{ message }}\n    </div>\n  ",
        styles: ["\n    .noty {\n      position: fixed;\n      left: 50%;\n      bottom: 0;\n      transform: translateX(-50%);\n      min-width: 288px;\n      max-width: 568px;\n      padding: 14px 24px;\n      background: #323232;\n      border-radius: 2px;\n      color: #fff;\n    }  \n  "],
        animations: [animations_1.appearNoty()]
    }), __metadata("design:paramtypes", [])], NotyComponent);
    exports.NotyComponent = NotyComponent;

});
$__System.registerDynamic("47", ["75", "76", "77", "79", "7a", "7d", "89"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  Object.defineProperty(exports, "__esModule", { value: true });
  var header_1 = $__require("75");
  exports.Header = header_1.Header;
  var order_1 = $__require("76");
  exports.Order = order_1.Order;
  var autocomplete_list_1 = $__require("77");
  exports.AutocompleteList = autocomplete_list_1.AutocompleteList;
  var pagination_1 = $__require("79");
  exports.Pagination = pagination_1.Pagination;
  var popup_1 = $__require("7a");
  exports.PopupComponent = popup_1.PopupComponent;
  var filter_1 = $__require("7d");
  exports.Filter = filter_1.Filter;
  var noty_1 = $__require("89");
  exports.NotyComponent = noty_1.NotyComponent;

});
$__System.registerDynamic("51", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Order = function () {
        function Order() {
            this.id = "0-" + Order.count++;
            this.customerId = 0;
            this.lastName = '';
            this.firstName = '';
            this.phoneNumber = '';
            this.city = '';
            this.postOffice = '';
            this.totalSum = 0;
            this.paymentType = 'NP';
            this.date = new Date();
            this.status = 'NEW';
            this.comment = '';
            this.orderItemDtos = [new Product()];
        }
        return Order;
    }();
    Order.count = 0;
    exports.Order = Order;
    var Product = function () {
        function Product() {
            this.id = "0-" + Product.count++;
            this.productId = 0;
            this.productVariationId = 0;
            this.name = '';
            this.categories = [''];
            this.quantity = '0';
            this.price = '0';
            this.supplier = '';
        }
        return Product;
    }();
    Product.count = 0;
    exports.Product = Product;
    var AutocompleteItem = function () {
        function AutocompleteItem() {
            this.label = '';
        }
        return AutocompleteItem;
    }();
    exports.AutocompleteItem = AutocompleteItem;
    var StaticDATA = function () {
        function StaticDATA() {}
        return StaticDATA;
    }();
    StaticDATA.infoBlocks = {
        status: ['SHP', 'WFP', 'OK', 'NEW', 'NOT'],
        paymentType: ['PB', 'SV', 'NP']
    };
    StaticDATA.autocompleteBlocks = ['lastName', 'phoneNumber', 'city', 'name'];
    StaticDATA.keycodesNotToAutocomplete = [9, 13, 16, 17, 18, 20]; // Tab, Enter, Shift, Ctrl, Alt, Caps Lock
    StaticDATA.sessionTime = 235 * 60 * 1000; // minutes
    exports.StaticDATA = StaticDATA;

});
$__System.registerDynamic("8a", ["e", "40", "47", "51"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var index_1 = $__require("40");
    var index_2 = $__require("47");
    var models_1 = $__require("51");
    var Autocomplete = function () {
        function Autocomplete(orderService, viewRef, compiler) {
            this.orderService = orderService;
            this.viewRef = viewRef;
            this.compiler = compiler;
            this.selected = new core_1.EventEmitter();
            this.fieldsToAutocomplete = models_1.StaticDATA.autocompleteBlocks;
            this.refreshTimer = undefined;
            this.searchRequired = false;
            this.searchInProgress = false;
            this.isBlurred = true;
            this.listComponent = undefined;
        }
        Autocomplete.prototype.onKeyDown = function (e) {
            var _this = this;
            if (this.fieldsToAutocomplete.indexOf(this.types[1]) > -1) {
                if (this.listComponent) {
                    switch (e.code) {
                        case 'ArrowDown':
                            this.listComponent.instance.focusMoved.next('next');
                            return false;
                        case 'ArrowUp':
                            this.listComponent.instance.focusMoved.next('prev');
                            return false;
                        case 'Enter':
                            this.listComponent.instance.selectedStream.next();
                            return false;
                        case 'NumpadEnter':
                            this.listComponent.instance.selectedStream.next();
                            return false;
                        case 'Tab':
                            this.listComponent.instance.selectedStream.next();
                            return true;
                        case 'Escape':
                            this.removeList();
                            return false;
                    }
                }
                if (models_1.StaticDATA.keycodesNotToAutocomplete.indexOf(e.which) === -1) {
                    setTimeout(function () {
                        return _this.onKeyUp(e);
                    }, 0);
                }
            }
        };
        Autocomplete.prototype.onKeyUp = function (e) {
            var _this = this;
            this.isBlurred = false;
            this.term = e.target.innerText;
            if (this.term && !this.refreshTimer) {
                this.refreshTimer = setTimeout(function () {
                    if (!_this.searchInProgress && _this.term && !_this.isBlurred) {
                        _this.doSearch();
                    } else {
                        _this.searchRequired = true;
                    }
                }, 800);
            }
            if (this.listComponent && !this.term) {
                this.removeList();
            }
        };
        Autocomplete.prototype.onBlur = function () {
            var _this = this;
            this.isBlurred = true;
            setTimeout(function () {
                _this.removeList();
            }, 500);
        };
        Autocomplete.prototype.doSearch = function () {
            var _this = this;
            this.refreshTimer = undefined;
            this.searchInProgress = true;
            this.orderService.autocomplete(this.types, this.term).subscribe(function (resp) {
                _this.searchInProgress = false;
                if (_this.searchRequired) {
                    _this.searchRequired = false;
                    _this.doSearch();
                } else {
                    _this.renderList(resp);
                }
            });
        };
        Autocomplete.prototype.renderList = function (resp) {
            var _this = this;
            if (!this.listComponent) {
                var componentFactory = this.compiler.resolveComponentFactory(index_2.AutocompleteList);
                this.listComponent = this.viewRef.createComponent(componentFactory);
                var offsetTop = this.viewRef.element.nativeElement.offsetTop + this.viewRef.element.nativeElement.offsetHeight;
                var offsetLeft = this.viewRef.element.nativeElement.offsetLeft;
                this.listComponent.instance.styleTop = offsetTop;
                this.listComponent.instance.styleLeft = offsetLeft;
                this.listComponent.instance.selectedSource.subscribe(function (item) {
                    _this.selected.emit(item.value);
                    _this.removeList();
                    setTimeout(function () {
                        _this.viewRef.element.nativeElement.blur();
                    }, 50);
                });
            }
            this.listComponent.instance.list = resp;
        };
        Autocomplete.prototype.removeList = function () {
            this.refreshTimer = undefined;
            this.searchInProgress = false;
            this.searchRequired = false;
            if (this.listComponent) {
                this.listComponent.destroy();
                this.listComponent = undefined;
            }
        };
        return Autocomplete;
    }();
    __decorate([core_1.Input('autocomplete'), __metadata("design:type", Array)], Autocomplete.prototype, "types", void 0);
    __decorate([core_1.Output('selectedAutocomplete'), __metadata("design:type", Object)], Autocomplete.prototype, "selected", void 0);
    Autocomplete = __decorate([core_1.Directive({
        selector: '[autocomplete]',
        host: {
            '(keydown)': 'onKeyDown($event)',
            '(blur)': 'onBlur($event)'
        }
    }), __metadata("design:paramtypes", [index_1.OrderService, core_1.ViewContainerRef, core_1.ComponentFactoryResolver])], Autocomplete);
    exports.Autocomplete = Autocomplete;

});
$__System.registerDynamic("8b", ["63", "64", "8a"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  Object.defineProperty(exports, "__esModule", { value: true });
  var contenteditable_model_1 = $__require("63");
  exports.ContenteditableModel = contenteditable_model_1.ContenteditableModel;
  var hotkeys_1 = $__require("64");
  exports.HotkeysDirective = hotkeys_1.HotkeysDirective;
  var autocomplete_1 = $__require("8a");
  exports.Autocomplete = autocomplete_1.Autocomplete;

});
$__System.registerDynamic("a", ["e", "f", "d", "65", "11", "49", "3f", "3d", "47", "8b"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = exports && exports.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = $__require("e");
    var platform_browser_1 = $__require("f");
    var animations_1 = $__require("d");
    var http_1 = $__require("65");
    var platform_browser_dynamic_1 = $__require("11");
    var forms_1 = $__require("49");
    var index_1 = $__require("3f");
    var index_2 = $__require("3d");
    var index_3 = $__require("47");
    var index_4 = $__require("8b");
    var AppModule = function () {
        function AppModule() {}
        return AppModule;
    }();
    AppModule = __decorate([core_1.NgModule({
        declarations: [index_1.App, index_3.Header, index_2.Orders, index_2.Products, index_2.Customers, index_3.Order, index_1.KeysPipe, index_1.SearchPipe, index_4.HotkeysDirective, index_4.Autocomplete, index_3.AutocompleteList, index_4.ContenteditableModel, index_3.Pagination, index_3.PopupComponent, index_3.Filter, index_3.NotyComponent],
        providers: index_1.providers,
        imports: [platform_browser_1.BrowserModule, animations_1.BrowserAnimationsModule, http_1.HttpModule, forms_1.FormsModule, forms_1.ReactiveFormsModule, index_1.routes],
        entryComponents: [index_3.AutocompleteList, index_3.PopupComponent, index_3.NotyComponent],
        bootstrap: [index_1.App]
    })], AppModule);
    exports.AppModule = AppModule;
    // enableProdMode();
    platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(AppModule);

});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});